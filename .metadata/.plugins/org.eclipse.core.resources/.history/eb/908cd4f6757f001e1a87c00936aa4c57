/*
 * fw_update.c
 *
 *  Created on: Jul 30, 2023
 *      Author: mille
 */

#include "fw_update.h"

#include <stdbool.h>
#include "sd_card.h"
#include "main.h"


/**
  * @brief Write data to the Application's actual flash location.
  * @param data data to be written
  * @param data_len data length
  * @is_first_block true - if this is first block, false - not first block
  * @retval True if write to IFLASH success. False otherwise.
  */
static _Bool write_data_to_app_flash(uint8_t *data, uint16_t data_len, _Bool is_first_block)
{
	HAL_StatusTypeDef ret;

	do {
		ret = HAL_FLASH_Unlock();
		if (ret != HAL_OK)	break;

		// Only erase app IFLASH when writing first block of new FW
		if (is_first_block) {
			printf("Erasing app in IFLASH...\r\n");

			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			/* Bank 1:
			 * Sector 0: Bootloader	(starting at 0x08000000)
			 * Sector 1: Configurations
			 * Sector 2 & Sector 3: Application (starting at 0x08040000)
			 */

			EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
			EraseInitStruct.Sector			= FLASH_SECTOR_2;
			EraseInitStruct.NbSectors		= 2;
			EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
			if (ret != HAL_OK)	break;
		}

		// Write new app in IFLASH

	} while (false);


	return true;
}


/* Thread entry function for firmware update thread */
void fw_update_thread_entry(void)
{
	sd_init();

	// Since we started the OS, it means user wants to update if FW avail. in uSD


	// Read file from uSD


	// Write to internal FLASH

	// Jump to app (old or new if updated)
	do {

	} while(false);
}

