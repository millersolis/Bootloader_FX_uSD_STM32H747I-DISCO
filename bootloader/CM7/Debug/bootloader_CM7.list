
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08015c64  08015c64  00025c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160b0  080160b0  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  080160b0  080160b0  000260b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160b8  080160b8  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160b8  080160b8  000260b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160bc  080160bc  000260bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  24000000  080160c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015554  240000e0  08016198  000300e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24015634  08016198  00035634  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000527c8  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a97f  00000000  00000000  000828ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f8  00000000  00000000  0008d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0008f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004c9af  00000000  00000000  00090f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043fa8  00000000  00000000  000dd937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b7997  00000000  00000000  001218df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002d9276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e64  00000000  00000000  002d92c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015c4c 	.word	0x08015c4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08015c4c 	.word	0x08015c4c

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24015018 	.word	0x24015018
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	240150b4 	.word	0x240150b4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	2401501c 	.word	0x2401501c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24015020 	.word	0x24015020
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24015620 	.word	0x24015620

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f013 fd97 	bl	8013fec <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f013 fc82 	bl	8013dcc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	240150c0 	.word	0x240150c0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24015620 	.word	0x24015620
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	240150c4 	.word	0x240150c4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24015150 	.word	0x24015150
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24015154 	.word	0x24015154
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2401514c 	.word	0x2401514c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24015148 	.word	0x24015148
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	240150b4 	.word	0x240150b4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	2401501c 	.word	0x2401501c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24015020 	.word	0x24015020
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f013 fe2f 	bl	8014540 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f013 fe19 	bl	8014540 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f009 ff81 	bl	800a820 <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000fc 	.word	0x240000fc
 8000934:	08015c64 	.word	0x08015c64
 8000938:	240080fc 	.word	0x240080fc
 800093c:	24008130 	.word	0x24008130
 8000940:	08015c78 	.word	0x08015c78
 8000944:	24012130 	.word	0x24012130

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f011 fd0f 	bl	80124b4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <write_data_to_app_flash>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval True if write to IFLASH success. False otherwise.
  */
static _Bool write_data_to_app_flash(uint32_t *data, uint32_t* dest_add,
									uint16_t data_len_word, _Bool is_first_block)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	80fb      	strh	r3, [r7, #6]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ret;

	do {
//		ret = HAL_FLASH_Unlock();
		ret = HAL_FLASHEx_Unlock_Bank1();	// Should use this one instead? [Miller]
 8000ab2:	f001 fc2f 	bl	8002314 <HAL_FLASHEx_Unlock_Bank1>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (ret != HAL_OK)	break;
 8000abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d157      	bne.n	8000b74 <write_data_to_app_flash+0xd8>

		//Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY, FLASH_BANK_1);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	f001 fabd 	bl	8002048 <FLASH_WaitForLastOperation>

		// Should use Bank 1 only flags? (i.e. FLASH_FLAG_EOP_BANK1, and others) [Miller]
//		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
//								FLASH_FLAG_WRPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);

		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS_BANK1);
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <write_data_to_app_flash+0xf8>)
 8000ad0:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <write_data_to_app_flash+0xfc>)
 8000ad2:	615a      	str	r2, [r3, #20]

		// Only erase app IFLASH when writing first block of new FW
		if (is_first_block) {
 8000ad4:	797b      	ldrb	r3, [r7, #5]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d019      	beq.n	8000b0e <write_data_to_app_flash+0x72>
			printf("Erasing app in IFLASH...\r\n");
 8000ada:	4830      	ldr	r0, [pc, #192]	; (8000b9c <write_data_to_app_flash+0x100>)
 8000adc:	f014 fbda 	bl	8015294 <puts>
			 * Sector 0: Bootloader	(starting at 0x08000000)
			 * Sector 1: Configurations
			 * Sector 2 & Sector 3: Application (starting at 0x08040000)	// Has to be aligned to a flash word -> 256-bit aligned
			 */

			EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
			EraseInitStruct.Banks			= FLASH_BANK_1;				// H7 has 2 internal FLASH Banks
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector			= FLASH_SECTOR_2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
			EraseInitStruct.NbSectors		= 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
//			EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;	// needed? [Miller]

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fb40 	bl	8002180 <HAL_FLASHEx_Erase>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (ret != HAL_OK)	break;
 8000b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d134      	bne.n	8000b78 <write_data_to_app_flash+0xdc>
		}

		// Write new app in IFLASH
		uint32_t data_add = (uint32_t) data;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t app_add = (uint32_t) dest_add;	// Has to be aligned to a flash word -> 256-bit aligned
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Writing 1 FLASH word at a time
		for (int i = 0; i < data_len_word;) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b1a:	e018      	b.n	8000b4e <write_data_to_app_flash+0xb2>
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
 8000b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 f9ff 	bl	8001f24 <HAL_FLASH_Program>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
									(uint32_t)app_add,
									(uint32_t)data_add);
			if (ret != HAL_OK) {
 8000b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <write_data_to_app_flash+0xa0>
				printf("ERROR\tCould not write new app to FLASH\r\n");
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <write_data_to_app_flash+0x104>)
 8000b36:	f014 fbad 	bl	8015294 <puts>
				break;
 8000b3a:	e00c      	b.n	8000b56 <write_data_to_app_flash+0xba>
			}

			// Increase by a flash word -> 8 32-bit words -> 8 4-byte words -> 256 bits
			app_add += (8 *4);
 8000b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3e:	3320      	adds	r3, #32
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
			data_add += (8 *4);
 8000b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b44:	3320      	adds	r3, #32
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30

			i += 8;
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < data_len_word;) {
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbe2      	blt.n	8000b1c <write_data_to_app_flash+0x80>
		}

		//Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY, FLASH_BANK_1);
 8000b56:	2101      	movs	r1, #1
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f001 fa74 	bl	8002048 <FLASH_WaitForLastOperation>

		if (ret != HAL_OK) break;	// Last write to FLASH was not successful
 8000b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d109      	bne.n	8000b7c <write_data_to_app_flash+0xe0>

		// Lock FLASH again
//		ret = HAL_FLASH_Lock();
		ret = HAL_FLASHEx_Lock_Bank1();
 8000b68:	f001 fbf6 	bl	8002358 <HAL_FLASHEx_Lock_Bank1>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b72:	e004      	b.n	8000b7e <write_data_to_app_flash+0xe2>
		if (ret != HAL_OK)	break;
 8000b74:	bf00      	nop
 8000b76:	e002      	b.n	8000b7e <write_data_to_app_flash+0xe2>
			if (ret != HAL_OK)	break;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <write_data_to_app_flash+0xe2>
		if (ret != HAL_OK) break;	// Last write to FLASH was not successful
 8000b7c:	bf00      	nop

	} while (false);

	if (ret != HAL_OK) return false;
 8000b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <write_data_to_app_flash+0xee>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <write_data_to_app_flash+0xf0>
	else return true;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	52002000 	.word	0x52002000
 8000b98:	17ee0000 	.word	0x17ee0000
 8000b9c:	08015c8c 	.word	0x08015c8c
 8000ba0:	08015ca8 	.word	0x08015ca8

08000ba4 <sd_get_fw_file_size>:
{
	return true;
}

_Bool sd_get_fw_file_size(uint32_t* size)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(sd_fx_get_file_size(FW_FILENAME, size) != true) {
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <sd_get_fw_file_size+0x2c>)
 8000bb0:	f000 fc7c 	bl	80014ac <sd_fx_get_file_size>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d004      	beq.n	8000bc4 <sd_get_fw_file_size+0x20>
		printf("ERROR\tCould not get fw file size\r\n");
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <sd_get_fw_file_size+0x30>)
 8000bbc:	f014 fb6a 	bl	8015294 <puts>
		return false;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e000      	b.n	8000bc6 <sd_get_fw_file_size+0x22>
	}

	return true;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08015cd0 	.word	0x08015cd0
 8000bd4:	08015cdc 	.word	0x08015cdc

08000bd8 <get_sd_fw_chunk>:

_Bool get_sd_fw_chunk(uint8_t* dest_buf, uint32_t buf_size,
		uint32_t request_size,uint32_t* bytes_read, uint64_t offset)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
	if (sd_fx_file_read(FW_FILENAME,
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <get_sd_fw_chunk+0x3c>)
 8000bf6:	f000 fc97 	bl	8001528 <sd_fx_file_read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <get_sd_fw_chunk+0x32>
						buf_size,
						request_size,
						bytes_read,
						offset)
			!= FX_SUCCESS) {
		printf("ERROR\tCould not read chunk of fw file\r\n");
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <get_sd_fw_chunk+0x40>)
 8000c02:	f014 fb47 	bl	8015294 <puts>
		return false;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <get_sd_fw_chunk+0x34>
	}

	return true;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08015cd0 	.word	0x08015cd0
 8000c18:	08015d00 	.word	0x08015d00

08000c1c <fw_update_thread_entry>:


/* Thread entry function for firmware update thread */
void fw_update_thread_entry(void)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
	sd_init();
 8000c22:	f000 fbf3 	bl	800140c <sd_init>


	// Since we started the RTOS kernel, it means user wants to update if FW available in uSD

	updated_fw_size = 0;
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]

	// Read file size from uSD --------------

//	uSD_fw_file_size = uSD_FW_CHUNK_SIZE_WORD;	// temp for testing [Miller]
	if (sd_get_fw_file_size(&uSD_fw_file_size) == false || uSD_fw_file_size == 0) {
 8000c2c:	483f      	ldr	r0, [pc, #252]	; (8000d2c <fw_update_thread_entry+0x110>)
 8000c2e:	f7ff ffb9 	bl	8000ba4 <sd_get_fw_file_size>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f083 0301 	eor.w	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <fw_update_thread_entry+0x2a>
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <fw_update_thread_entry+0x110>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d103      	bne.n	8000c4e <fw_update_thread_entry+0x32>
		printf("INFO\tCould not find app fw file\r\n");
 8000c46:	483a      	ldr	r0, [pc, #232]	; (8000d30 <fw_update_thread_entry+0x114>)
 8000c48:	f014 fb24 	bl	8015294 <puts>
 8000c4c:	e068      	b.n	8000d20 <fw_update_thread_entry+0x104>
//	uint32_t fw_filesize;
//	sd_fx_file_read(FW_FILENAME, data, 5, 5, &bytes_read);	// reading "test.txt" for testing [Miller]


	// Write fw file to FLASH by chunks using buffer
	_Bool flash_write_success = true;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
	_Bool is_first_chunk = true;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73bb      	strb	r3, [r7, #14]
	uint32_t bytes_read = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]


	while (updated_fw_size < uSD_fw_file_size) {
 8000c5a:	e04d      	b.n	8000cf8 <fw_update_thread_entry+0xdc>
		// Zero out buffer
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	e007      	b.n	8000c72 <fw_update_thread_entry+0x56>
			fw_buff[i] = (uint32_t) 0;
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <fw_update_thread_entry+0x118>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2100      	movs	r1, #0
 8000c68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b2f      	cmp	r3, #47	; 0x2f
 8000c76:	ddf4      	ble.n	8000c62 <fw_update_thread_entry+0x46>

		// Mock buffer data for testing [Miller]
//		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
//			fw_buff[i] = (uint32_t) i;

		if (get_sd_fw_chunk((uint8_t*)fw_buff, uSD_FW_CHUNK_SIZE_BYTE,
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	e9cd 4500 	strd	r4, r5, [sp]
 8000c88:	22c0      	movs	r2, #192	; 0xc0
 8000c8a:	21c0      	movs	r1, #192	; 0xc0
 8000c8c:	4829      	ldr	r0, [pc, #164]	; (8000d34 <fw_update_thread_entry+0x118>)
 8000c8e:	f7ff ffa3 	bl	8000bd8 <get_sd_fw_chunk>
 8000c92:	4603      	mov	r3, r0
								uSD_FW_CHUNK_SIZE_BYTE, &bytes_read, updated_fw_size) == false
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
		if (get_sd_fw_chunk((uint8_t*)fw_buff, uSD_FW_CHUNK_SIZE_BYTE,
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <fw_update_thread_entry+0x88>
			|| bytes_read == 0) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <fw_update_thread_entry+0x8e>
			printf("WARNING\tCould not read new chunk of app fw file\r\n");
 8000ca4:	4824      	ldr	r0, [pc, #144]	; (8000d38 <fw_update_thread_entry+0x11c>)
 8000ca6:	f014 faf5 	bl	8015294 <puts>
		}

		// Store chunk in buffer -----------------

		// Write buffer to internal FLASH
		if (write_data_to_app_flash(fw_buff, (uint32_t*)(APP_FLASH_ADDR + updated_fw_size),
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <fw_update_thread_entry+0x120>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	481e      	ldr	r0, [pc, #120]	; (8000d34 <fw_update_thread_entry+0x118>)
 8000cba:	f7ff feef 	bl	8000a9c <write_data_to_app_flash>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d013      	beq.n	8000cec <fw_update_thread_entry+0xd0>
									uSD_FW_CHUNK_SIZE_WORD, is_first_chunk)) {
			updated_fw_size += uSD_FW_CHUNK_SIZE_BYTE;	// Increased updated fw count
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000ccc:	6013      	str	r3, [r2, #0]
			if (is_first_chunk) is_first_chunk = false;
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <fw_update_thread_entry+0xbc>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73bb      	strb	r3, [r7, #14]
			printf("%d / %d \r\n", (int)updated_fw_size, (int)uSD_fw_file_size);
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <fw_update_thread_entry+0x110>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <fw_update_thread_entry+0x124>)
 8000ce6:	f014 fa4f 	bl	8015188 <iprintf>
 8000cea:	e005      	b.n	8000cf8 <fw_update_thread_entry+0xdc>
		}
		else {
			printf("ERROR\tCould not write new app chunk to FLASH\r\n");
 8000cec:	4815      	ldr	r0, [pc, #84]	; (8000d44 <fw_update_thread_entry+0x128>)
 8000cee:	f014 fad1 	bl	8015294 <puts>
			flash_write_success = false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf6:	e005      	b.n	8000d04 <fw_update_thread_entry+0xe8>
	while (updated_fw_size < uSD_fw_file_size) {
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <fw_update_thread_entry+0x10c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <fw_update_thread_entry+0x110>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d3ab      	bcc.n	8000c5c <fw_update_thread_entry+0x40>
		}

	}

	// Jump to app (old or new if updated) -----------------
	if (flash_write_success) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <fw_update_thread_entry+0xfa>
		printf("SUCCESS\tWrote test buffer to IFLASH\r\n");
 8000d0a:	480f      	ldr	r0, [pc, #60]	; (8000d48 <fw_update_thread_entry+0x12c>)
 8000d0c:	f014 fac2 	bl	8015294 <puts>
		goto_application();
 8000d10:	f000 faa8 	bl	8001264 <goto_application>
 8000d14:	e002      	b.n	8000d1c <fw_update_thread_entry+0x100>
	}
	else {
		printf("FAILURE\tErrors writing test buffer to IFLASH\r\n");
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <fw_update_thread_entry+0x130>)
 8000d18:	f014 fabc 	bl	8015294 <puts>
	}

	/* Should never reach here */
	Error_Handler();
 8000d1c:	f000 fb5e 	bl	80013dc <Error_Handler>
}
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24012168 	.word	0x24012168
 8000d2c:	24012164 	.word	0x24012164
 8000d30:	08015d28 	.word	0x08015d28
 8000d34:	24012180 	.word	0x24012180
 8000d38:	08015d4c 	.word	0x08015d4c
 8000d3c:	08040000 	.word	0x08040000
 8000d40:	08015d80 	.word	0x08015d80
 8000d44:	08015d8c 	.word	0x08015d8c
 8000d48:	08015dbc 	.word	0x08015dbc
 8000d4c:	08015de4 	.word	0x08015de4

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d56:	4b5e      	ldr	r3, [pc, #376]	; (8000ed0 <main+0x180>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d138      	bne.n	8000dd4 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d62:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <main+0x180>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6a:	f3bf 8f4f 	dsb	sy
}
 8000d6e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d70:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <main+0x180>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	0b5b      	lsrs	r3, r3, #13
 8000d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d80:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d8a:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	015a      	lsls	r2, r3, #5
 8000d90:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d94:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d9a:	494d      	ldr	r1, [pc, #308]	; (8000ed0 <main+0x180>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	60fa      	str	r2, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1ef      	bne.n	8000d8c <main+0x3c>
    } while(sets-- != 0U);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	613a      	str	r2, [r7, #16]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e5      	bne.n	8000d82 <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
}
 8000dba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dbc:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <main+0x180>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a43      	ldr	r2, [pc, #268]	; (8000ed0 <main+0x180>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
}
 8000dcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dce:	f3bf 8f6f 	isb	sy
}
 8000dd2:	e000      	b.n	8000dd6 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dd4:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dda:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ddc:	bf00      	nop
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <main+0x184>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <main+0xa4>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	61fa      	str	r2, [r7, #28]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dcf4      	bgt.n	8000dde <main+0x8e>
  if ( timeout < 0 )
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da01      	bge.n	8000dfe <main+0xae>
  {
  Error_Handler();
 8000dfa:	f000 faef 	bl	80013dc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f000 fef3 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f871 	bl	8000ee8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <main+0x184>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <main+0x184>)
 8000e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x184>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 fe55 	bl	8002ad4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f001 fe6b 	bl	8002b08 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e36:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e38:	bf00      	nop
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <main+0x184>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d104      	bne.n	8000e50 <main+0x100>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	61fa      	str	r2, [r7, #28]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dcf4      	bgt.n	8000e3a <main+0xea>
if ( timeout < 0 )
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da01      	bge.n	8000e5a <main+0x10a>
{
Error_Handler();
 8000e56:	f000 fac1 	bl	80013dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f937 	bl	80010cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e5e:	f000 f8e9 	bl	8001034 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000e62:	f000 f8c5 	bl	8000ff0 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\r\n",bootloader_ver[0], bootloader_ver[1]);
 8000e66:	2300      	movs	r3, #0
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <main+0x188>)
 8000e6e:	f014 f98b 	bl	8015188 <iprintf>

  /* Check for button press or timeout */
  volatile static uint8_t joystick_down_state;
  volatile static _Bool joystick_held_down = false;
  volatile uint32_t now = HAL_GetTick();
 8000e72:	f000 ff09 	bl	8001c88 <HAL_GetTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	60bb      	str	r3, [r7, #8]
  const uint32_t timeout_end = now + (TIMEOUT_TO_FLASH_APP *1000);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000e80:	61bb      	str	r3, [r7, #24]

  do {
	  joystick_down_state = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000e82:	2108      	movs	r1, #8
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <main+0x18c>)
 8000e86:	f001 fdd9 	bl	8002a3c <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <main+0x190>)
 8000e90:	701a      	strb	r2, [r3, #0]
	  now = HAL_GetTick();
 8000e92:	f000 fef9 	bl	8001c88 <HAL_GetTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	60bb      	str	r3, [r7, #8]

	  /* Check for joystick down */
	  if ((joystick_down_state != GPIO_PIN_SET)) {
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <main+0x190>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d003      	beq.n	8000eac <main+0x15c>
		  joystick_held_down = true;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <main+0x194>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
		  break;
 8000eaa:	e003      	b.n	8000eb4 <main+0x164>
	  }
  } while(now < timeout_end);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e6      	bhi.n	8000e82 <main+0x132>

  if (!joystick_held_down) {
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <main+0x194>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f083 0301 	eor.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <main+0x178>
	  // No user indication to flash new app
	  goto_application();
 8000ec4:	f000 f9ce 	bl	8001264 <goto_application>
  }

  // Start RTOS and flash app if available
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000ec8:	f7ff fde1 	bl	8000a8e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x17c>
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	08015e14 	.word	0x08015e14
 8000edc:	58022800 	.word	0x58022800
 8000ee0:	24012350 	.word	0x24012350
 8000ee4:	24012351 	.word	0x24012351

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09c      	sub	sp, #112	; 0x70
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	224c      	movs	r2, #76	; 0x4c
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f013 fe50 	bl	8014b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f013 fe4a 	bl	8014b9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f001 fe11 	bl	8002b30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <SystemClock_Config+0x100>)
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <SystemClock_Config+0x100>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <SystemClock_Config+0x100>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <SystemClock_Config+0x104>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <SystemClock_Config+0x104>)
 8000f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <SystemClock_Config+0x104>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f40:	bf00      	nop
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <SystemClock_Config+0x104>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f4e:	d1f8      	bne.n	8000f42 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f50:	2303      	movs	r3, #3
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2302      	movs	r3, #2
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f66:	2302      	movs	r3, #2
 8000f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000f6e:	2330      	movs	r3, #48	; 0x30
 8000f70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f76:	2305      	movs	r3, #5
 8000f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 ff52 	bl	8002e38 <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f9a:	f000 fa1f 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	233f      	movs	r3, #63	; 0x3f
 8000fa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fb92 	bl	80036ec <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000fce:	f000 fa05 	bl	80013dc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000fd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f002 fd3d 	bl	8003a58 <HAL_RCC_MCOConfig>
}
 8000fde:	bf00      	nop
 8000fe0:	3770      	adds	r7, #112	; 0x70
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58000400 	.word	0x58000400
 8000fec:	58024800 	.word	0x58024800

08000ff0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <MX_SDMMC1_SD_Init+0x40>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_SDMMC1_SD_Init+0x3c>)
 800101a:	f005 fcdd 	bl	80069d8 <HAL_SD_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8001024:	f000 f9da 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	24012240 	.word	0x24012240
 8001030:	52007000 	.word	0x52007000

08001034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <MX_USART1_UART_Init+0x94>)
 800103c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 800107e:	f007 fc51 	bl	8008924 <HAL_UART_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001088:	f000 f9a8 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 8001090:	f008 fd21 	bl	8009ad6 <HAL_UARTEx_SetTxFifoThreshold>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800109a:	f000 f99f 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 80010a2:	f008 fd56 	bl	8009b52 <HAL_UARTEx_SetRxFifoThreshold>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 f996 	bl	80013dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_USART1_UART_Init+0x90>)
 80010b2:	f008 fcd7 	bl	8009a64 <HAL_UARTEx_DisableFifoMode>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010bc:	f000 f98e 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240122bc 	.word	0x240122bc
 80010c8:	40011000 	.word	0x40011000

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <MX_GPIO_Init+0x164>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	4a51      	ldr	r2, [pc, #324]	; (8001230 <MX_GPIO_Init+0x164>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x164>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <MX_GPIO_Init+0x164>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <MX_GPIO_Init+0x164>)
 8001108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <MX_GPIO_Init+0x164>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <MX_GPIO_Init+0x164>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	4a42      	ldr	r2, [pc, #264]	; (8001230 <MX_GPIO_Init+0x164>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <MX_GPIO_Init+0x164>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <MX_GPIO_Init+0x164>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <MX_GPIO_Init+0x164>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <MX_GPIO_Init+0x164>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <MX_GPIO_Init+0x164>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a33      	ldr	r2, [pc, #204]	; (8001230 <MX_GPIO_Init+0x164>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_GPIO_Init+0x164>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_GPIO_Init+0x164>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <MX_GPIO_Init+0x164>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_GPIO_Init+0x164>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800119c:	4825      	ldr	r0, [pc, #148]	; (8001234 <MX_GPIO_Init+0x168>)
 800119e:	f001 fc65 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 80011a2:	2308      	movs	r3, #8
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4820      	ldr	r0, [pc, #128]	; (8001238 <MX_GPIO_Init+0x16c>)
 80011b6:	f001 f987 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011c0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_GPIO_Init+0x168>)
 80011d2:	f001 f979 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0x170>)
 80011f4:	f001 f968 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80011f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_GPIO_Init+0x168>)
 8001212:	f001 f959 	bl	80024c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	210e      	movs	r1, #14
 800121a:	2017      	movs	r0, #23
 800121c:	f000 fe4c 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001220:	2017      	movs	r0, #23
 8001222:	f000 fe63 	bl	8001eec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	58024400 	.word	0x58024400
 8001234:	58022000 	.word	0x58022000
 8001238:	58022800 	.word	0x58022800
 800123c:	58020000 	.word	0x58020000

08001240 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001248:	1d39      	adds	r1, r7, #4
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	2201      	movs	r2, #1
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <__io_putchar+0x20>)
 8001252:	f007 fbf6 	bl	8008a42 <HAL_UART_Transmit>

  return ch;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240122bc 	.word	0x240122bc

08001264 <goto_application>:

void goto_application()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
	printf("Jumping to application\r\n");
 800126a:	484a      	ldr	r0, [pc, #296]	; (8001394 <goto_application+0x130>)
 800126c:	f014 f812 	bl	8015294 <puts>
	void (*app_reset_hanlder) (void) = (void*) (*(volatile uint32_t *) (APP_FLASH_ADDR + 4U));
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <goto_application+0x134>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]

	/* Deinitialize peripherals before jump */
	HAL_SD_DeInit(&hsd1);
 8001276:	4849      	ldr	r0, [pc, #292]	; (800139c <goto_application+0x138>)
 8001278:	f005 fcce 	bl	8006c18 <HAL_SD_DeInit>
	HAL_UART_DeInit(&huart1);
 800127c:	4848      	ldr	r0, [pc, #288]	; (80013a0 <goto_application+0x13c>)
 800127e:	f007 fba1 	bl	80089c4 <HAL_UART_DeInit>

	/* TODO: Can replace by HAL GPIO DeInit function? */
	__HAL_RCC_GPIOF_CLK_DISABLE();
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <goto_application+0x140>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <goto_application+0x140>)
 800128a:	f023 0320 	bic.w	r3, r3, #32
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <goto_application+0x140>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <goto_application+0x140>)
 800129a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOI_CLK_DISABLE();
 80012a2:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <goto_application+0x140>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a3e      	ldr	r2, [pc, #248]	; (80013a4 <goto_application+0x140>)
 80012aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOA_CLK_DISABLE();
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <goto_application+0x140>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <goto_application+0x140>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOE_CLK_DISABLE();
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <goto_application+0x140>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <goto_application+0x140>)
 80012ca:	f023 0310 	bic.w	r3, r3, #16
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOC_CLK_DISABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <goto_application+0x140>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <goto_application+0x140>)
 80012da:	f023 0304 	bic.w	r3, r3, #4
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOG_CLK_DISABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <goto_application+0x140>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <goto_application+0x140>)
 80012ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <goto_application+0x140>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <goto_application+0x140>)
 80012fa:	f023 0302 	bic.w	r3, r3, #2
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_HSEM_CLK_DISABLE();
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <goto_application+0x140>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <goto_application+0x140>)
 800130a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	HAL_RCC_DeInit();
 8001312:	f001 fc67 	bl	8002be4 <HAL_RCC_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 8001316:	4824      	ldr	r0, [pc, #144]	; (80013a8 <goto_application+0x144>)
 8001318:	f007 f81b 	bl	8008352 <HAL_TIM_Base_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
	/* Stop all interrupts */
	__disable_irq();

	/* TODO: Why 8 registers? */
	/* Disable IRQs */
	for (int i = 0; i < 8; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e009      	b.n	800133a <goto_application+0xd6>
		NVIC->ICER[i] = 0xFFFFFFFF;
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <goto_application+0x148>)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3320      	adds	r3, #32
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b07      	cmp	r3, #7
 800133e:	ddf2      	ble.n	8001326 <goto_application+0xc2>
	}

	/* Clear pending IRQs */
	for (int i = 0; i < 8; i++) {
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	e009      	b.n	800135a <goto_application+0xf6>
		NVIC->ICPR[i] = 0xFFFFFFFF;
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <goto_application+0x148>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	3360      	adds	r3, #96	; 0x60
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	3301      	adds	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddf2      	ble.n	8001346 <goto_application+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001360:	b662      	cpsie	i
}
 8001362:	bf00      	nop

	/* Reenable all interrupts */
	__enable_irq();

	/* Disable Systick timer interrupt*/
	SysTick->CTRL = 0;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <goto_application+0x14c>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f383 8814 	msr	CONTROL, r3
}
 8001374:	bf00      	nop
	/* TODO: Why is CR needed to be set to 0? */
	/* Change from PSP to MSP */
	__set_CONTROL(0);

	/* Set main stack pointer of application (also done in linkerscript by CubeMX) */
	__set_MSP((*(volatile uint32_t *) APP_FLASH_ADDR));
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <goto_application+0x150>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f383 8808 	msr	MSP, r3
}
 8001382:	bf00      	nop

	/* Call app reset handler */
	app_reset_hanlder();
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4798      	blx	r3

	/* Should never reach here */
	Error_Handler();
 8001388:	f000 f828 	bl	80013dc <Error_Handler>
}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	08015e38 	.word	0x08015e38
 8001398:	08040004 	.word	0x08040004
 800139c:	24012240 	.word	0x24012240
 80013a0:	240122bc 	.word	0x240122bc
 80013a4:	58024400 	.word	0x58024400
 80013a8:	24014c24 	.word	0x24014c24
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000e010 	.word	0xe000e010
 80013b4:	08040000 	.word	0x08040000

080013b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ca:	f000 fc49 	bl	8001c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40001000 	.word	0x40001000

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SD_DETECT_Pin) {
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f8:	d102      	bne.n	8001400 <HAL_GPIO_EXTI_Callback+0x18>
	  tx_semaphore_put(&sd_detect_semaphore);
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <HAL_GPIO_EXTI_Callback+0x20>)
 80013fc:	f013 fa56 	bl	80148ac <_txe_semaphore_put>
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24012354 	.word	0x24012354

0800140c <sd_init>:

void sd_init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	if (tx_semaphore_create(&sd_detect_semaphore, "sd detect semaphore", 0) != TX_SUCCESS) {
 8001410:	231c      	movs	r3, #28
 8001412:	2200      	movs	r2, #0
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <sd_init+0x44>)
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <sd_init+0x48>)
 8001418:	f013 f932 	bl	8014680 <_txe_semaphore_create>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <sd_init+0x22>
		assert(0);	// TODO: Handle error
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <sd_init+0x4c>)
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <sd_init+0x50>)
 8001426:	2149      	movs	r1, #73	; 0x49
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <sd_init+0x54>)
 800142a:	f013 fb4f 	bl	8014acc <__assert_func>
	}

	/* Check initial status of card */
	if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT) {
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f8ca 	bl	80015c8 <SD_IsDetected>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <sd_init+0x3a>
		last_status = CARD_STATUS_CONNECTED;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <sd_init+0x58>)
 800143c:	224d      	movs	r2, #77	; 0x4d
 800143e:	601a      	str	r2, [r3, #0]
		/* SD card is already inserted, place the info into the queue */
		tx_semaphore_put(&sd_detect_semaphore);
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <sd_init+0x48>)
 8001442:	f013 fa33 	bl	80148ac <_txe_semaphore_put>
	 }

	sd_fx_start();
 8001446:	f000 f80f 	bl	8001468 <sd_fx_start>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08015e50 	.word	0x08015e50
 8001454:	24012354 	.word	0x24012354
 8001458:	08015e64 	.word	0x08015e64
 800145c:	08015f98 	.word	0x08015f98
 8001460:	08015e68 	.word	0x08015e68
 8001464:	24000008 	.word	0x24000008

08001468 <sd_fx_start>:
{
	sd_fx_stop();
}

void sd_fx_start(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af04      	add	r7, sp, #16
	/* Open the SD disk driver */
	sd_status =  fx_media_open(&sdio_disk,
 800146e:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <sd_fx_start+0x30>)
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <sd_fx_start+0x34>)
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <sd_fx_start+0x38>)
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <sd_fx_start+0x3c>)
 8001486:	f010 f9a9 	bl	80117dc <_fxe_media_open>
 800148a:	4603      	mov	r3, r0
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <sd_fx_start+0x40>)
 800148e:	6013      	str	r3, [r2, #0]
								FX_SD_VOLUME_NAME,
								fx_stm32_sd_driver,
								(VOID *)FX_NULL,
								(VOID *) fx_sd_media_memory,
								sizeof(fx_sd_media_memory));
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	24014a20 	.word	0x24014a20
 800149c:	08011951 	.word	0x08011951
 80014a0:	08015e80 	.word	0x08015e80
 80014a4:	24012370 	.word	0x24012370
 80014a8:	24014c20 	.word	0x24014c20

080014ac <sd_fx_get_file_size>:

	return status;
}

UINT sd_fx_get_file_size(char* filename, uint32_t* size)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b092      	sub	sp, #72	; 0x48
 80014b0:	af06      	add	r7, sp, #24
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	UINT sd_status;
	UINT         attributes, year, month, day;
	ULONG        fx_size;
	UINT         hour, minute, second;

	sd_status = fx_directory_information_get(&sdio_disk, filename, &attributes, &fx_size,
 80014b6:	f107 0118 	add.w	r1, r7, #24
 80014ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	9304      	str	r3, [sp, #16]
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	460b      	mov	r3, r1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_fx_get_file_size+0x78>)
 80014e8:	f00f ffe2 	bl	80114b0 <_fxe_directory_information_get>
 80014ec:	62f8      	str	r0, [r7, #44]	; 0x2c
										  &year, &month, &day,
										  &hour, &minute, &second);

	if (sd_status != FX_SUCCESS)
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <sd_fx_get_file_size+0x4c>
	{
	  Error_Handler();
 80014f4:	f7ff ff72 	bl	80013dc <Error_Handler>
	}

	sd_status = fx_media_flush(&sdio_disk);
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <sd_fx_get_file_size+0x78>)
 80014fa:	f010 f943 	bl	8011784 <_fxe_media_flush>
 80014fe:	62f8      	str	r0, [r7, #44]	; 0x2c


	// TODO: Is flush needed when getting details? [Miller]
	/* Check the media flush  status.  */
	if (sd_status != FX_SUCCESS)
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <sd_fx_get_file_size+0x5e>
	{
	  /* Error closing the file, call error handler.  */
	  Error_Handler();
 8001506:	f7ff ff69 	bl	80013dc <Error_Handler>
	}

	*size = fx_size;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	601a      	str	r2, [r3, #0]

	return sd_status == FX_SUCCESS;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24012370 	.word	0x24012370

08001528 <sd_fx_file_read>:


UINT sd_fx_file_read(char* filename, uint8_t* dest_buf, uint32_t buf_size,
						uint32_t request_size,uint32_t* bytes_read, uint32_t offset)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]

	// TODO: Check buf size and requested size [Miller]

	UINT status;
    /* Open the test file.  */
    status =  fx_file_open(&sdio_disk, &fx_file, filename, FX_OPEN_FOR_READ);
 8001536:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2300      	movs	r3, #0
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	491e      	ldr	r1, [pc, #120]	; (80015bc <sd_fx_file_read+0x94>)
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <sd_fx_file_read+0x98>)
 8001544:	f010 f836 	bl	80115b4 <_fxe_file_open>
 8001548:	6178      	str	r0, [r7, #20]

    /* Check the file open status.  */
    if (status != FX_SUCCESS)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <sd_fx_file_read+0x2c>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8001550:	f7ff ff44 	bl	80013dc <Error_Handler>
    }

    /* Seek start of test file */
    status = fx_file_seek(&fx_file, offset);
 8001554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001556:	4819      	ldr	r0, [pc, #100]	; (80015bc <sd_fx_file_read+0x94>)
 8001558:	f010 f8e6 	bl	8011728 <_fxe_file_seek>
 800155c:	6178      	str	r0, [r7, #20]

    /* Check the file seek status.  */
	if (status != FX_SUCCESS)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <sd_fx_file_read+0x40>
	{
	/* Error performing file seek, call error handler.  */
	Error_Handler();
 8001564:	f7ff ff3a 	bl	80013dc <Error_Handler>
	}

	/* Read from start of the test file.  */
	status =  fx_file_read(&fx_file, dest_buf, request_size, bytes_read);
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <sd_fx_file_read+0x94>)
 8001570:	f010 f8a2 	bl	80116b8 <_fxe_file_read>
 8001574:	6178      	str	r0, [r7, #20]

	/* Check the file read status.  */
	if (status != FX_SUCCESS)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <sd_fx_file_read+0x58>
	{
	  /* Error reading from a file, call error handler.  */
	  Error_Handler();
 800157c:	f7ff ff2e 	bl	80013dc <Error_Handler>
	}
	/* Close the test file.  */
	sd_status =  fx_file_close(&fx_file);
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <sd_fx_file_read+0x94>)
 8001582:	f00f ffeb 	bl	801155c <_fxe_file_close>
 8001586:	4603      	mov	r3, r0
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <sd_fx_file_read+0x9c>)
 800158a:	6013      	str	r3, [r2, #0]

	/* Check the file close status.  */
	if (sd_status != FX_SUCCESS)
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <sd_fx_file_read+0x9c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <sd_fx_file_read+0x70>
	{
	  /* Error closing the file, call error handler.  */
	  Error_Handler();
 8001594:	f7ff ff22 	bl	80013dc <Error_Handler>
	}

	// TODO: Is flush needed when reading? [Miller]
	sd_status = fx_media_flush(&sdio_disk);
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <sd_fx_file_read+0x98>)
 800159a:	f010 f8f3 	bl	8011784 <_fxe_media_flush>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <sd_fx_file_read+0x9c>)
 80015a2:	6013      	str	r3, [r2, #0]

	/* Check the media flush  status.  */
	if (sd_status != FX_SUCCESS)
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <sd_fx_file_read+0x9c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <sd_fx_file_read+0x88>
	{
	  /* Error closing the file, call error handler.  */
	  Error_Handler();
 80015ac:	f7ff ff16 	bl	80013dc <Error_Handler>
	}

	return status;
 80015b0:	697b      	ldr	r3, [r7, #20]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	24014828 	.word	0x24014828
 80015c0:	24012370 	.word	0x24012370
 80015c4:	24014c20 	.word	0x24014c20

080015c8 <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <SD_IsDetected+0x14>
    ret = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e00c      	b.n	80015f6 <SD_IsDetected+0x2e>
  }
  else {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET) {
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <SD_IsDetected+0x38>)
 80015e2:	f001 fa2b 	bl	8002a3c <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <SD_IsDetected+0x2a>
      ret = SD_NOT_PRESENT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e001      	b.n	80015f6 <SD_IsDetected+0x2e>
    }
    else {
      ret = SD_PRESENT;
 80015f2:	2301      	movs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58022000 	.word	0x58022000

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_MspInit+0x30>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001610:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x30>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x30>)
 800161c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	58024400 	.word	0x58024400

08001638 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0be      	sub	sp, #248	; 0xf8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	22c8      	movs	r2, #200	; 0xc8
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f013 fa9f 	bl	8014b9c <memset>
  if(hsd->Instance==SDMMC1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3c      	ldr	r2, [pc, #240]	; (8001754 <HAL_SD_MspInit+0x11c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d171      	bne.n	800174c <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001674:	2300      	movs	r3, #0
 8001676:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fc6d 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001688:	f7ff fea8 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_SD_MspInit+0x120>)
 800168e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_SD_MspInit+0x120>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_SD_MspInit+0x120>)
 800169e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_SD_MspInit+0x120>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 80016e6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80016ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001700:	230c      	movs	r3, #12
 8001702:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <HAL_SD_MspInit+0x124>)
 800170e:	f000 fedb 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001712:	2304      	movs	r3, #4
 8001714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800172a:	230c      	movs	r3, #12
 800172c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001734:	4619      	mov	r1, r3
 8001736:	480a      	ldr	r0, [pc, #40]	; (8001760 <HAL_SD_MspInit+0x128>)
 8001738:	f000 fec6 	bl	80024c8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2031      	movs	r0, #49	; 0x31
 8001742:	f000 fbb9 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001746:	2031      	movs	r0, #49	; 0x31
 8001748:	f000 fbd0 	bl	8001eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	37f8      	adds	r7, #248	; 0xf8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	52007000 	.word	0x52007000
 8001758:	58024400 	.word	0x58024400
 800175c:	58020800 	.word	0x58020800
 8001760:	58020c00 	.word	0x58020c00

08001764 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_SD_MspDeInit+0x44>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_SD_MspDeInit+0x48>)
 8001778:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_SD_MspDeInit+0x48>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001782:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin);
 8001786:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_SD_MspDeInit+0x4c>)
 800178c:	f001 f84c 	bl	8002828 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 8001790:	2104      	movs	r1, #4
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <HAL_SD_MspDeInit+0x50>)
 8001794:	f001 f848 	bl	8002828 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001798:	2031      	movs	r0, #49	; 0x31
 800179a:	f000 fbb5 	bl	8001f08 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	52007000 	.word	0x52007000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020800 	.word	0x58020800
 80017b4:	58020c00 	.word	0x58020c00

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0bc      	sub	sp, #240	; 0xf0
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	22c8      	movs	r2, #200	; 0xc8
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f013 f9df 	bl	8014b9c <memset>
  if(huart->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_UART_MspInit+0xc8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d146      	bne.n	8001876 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017e8:	f04f 0201 	mov.w	r2, #1
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fbac 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800180a:	f7ff fde7 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_UART_MspInit+0xcc>)
 8001810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001814:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_UART_MspInit+0xcc>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_UART_MspInit+0xcc>)
 8001820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0xcc>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_UART_MspInit+0xcc>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0xcc>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800184a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800184e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0xd0>)
 8001872:	f000 fe29 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	37f0      	adds	r7, #240	; 0xf0
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40011000 	.word	0x40011000
 8001884:	58024400 	.word	0x58024400
 8001888:	58020000 	.word	0x58020000

0800188c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_UART_MspDeInit+0x34>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_UART_MspDeInit+0x38>)
 80018a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_UART_MspDeInit+0x38>)
 80018a6:	f023 0310 	bic.w	r3, r3, #16
 80018aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, STLINK_TX_Pin|STLINK_RX_Pin);
 80018ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_MspDeInit+0x3c>)
 80018b4:	f000 ffb8 	bl	8002828 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40011000 	.word	0x40011000
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58020000 	.word	0x58020000

080018cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b090      	sub	sp, #64	; 0x40
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d827      	bhi.n	800192a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80018da:	2200      	movs	r2, #0
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	2036      	movs	r0, #54	; 0x36
 80018e0:	f000 faea 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018e4:	2036      	movs	r0, #54	; 0x36
 80018e6:	f000 fb01 	bl	8001eec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <HAL_InitTick+0xc4>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_InitTick+0xc8>)
 80018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f6:	4a27      	ldr	r2, [pc, #156]	; (8001994 <HAL_InitTick+0xc8>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_InitTick+0xc8>)
 8001902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190e:	f107 0210 	add.w	r2, r7, #16
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fadd 	bl	8003ed8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <HAL_InitTick+0x6a>
 8001928:	e001      	b.n	800192e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e02b      	b.n	8001986 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800192e:	f002 faa7 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8001932:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001934:	e004      	b.n	8001940 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001936:	f002 faa3 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 800193a:	4603      	mov	r3, r0
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_InitTick+0xcc>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	0c9b      	lsrs	r3, r3, #18
 800194a:	3b01      	subs	r3, #1
 800194c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_InitTick+0xd0>)
 8001950:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <HAL_InitTick+0xd4>)
 8001952:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_InitTick+0xd0>)
 8001956:	f240 32e7 	movw	r2, #999	; 0x3e7
 800195a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_InitTick+0xd0>)
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_InitTick+0xd0>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_InitTick+0xd0>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <HAL_InitTick+0xd0>)
 8001970:	f006 fc98 	bl	80082a4 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d104      	bne.n	8001984 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <HAL_InitTick+0xd0>)
 800197c:	f006 fd5a 	bl	8008434 <HAL_TIM_Base_Start_IT>
 8001980:	4603      	mov	r3, r0
 8001982:	e000      	b.n	8001986 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	3740      	adds	r7, #64	; 0x40
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2400000c 	.word	0x2400000c
 8001994:	58024400 	.word	0x58024400
 8001998:	431bde83 	.word	0x431bde83
 800199c:	24014c24 	.word	0x24014c24
 80019a0:	40001000 	.word	0x40001000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 80019d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019d8:	f001 f861 	bl	8002a9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <SDMMC1_IRQHandler+0x10>)
 80019e6:	f005 fa87 	bl	8006ef8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24012240 	.word	0x24012240

080019f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM6_DAC_IRQHandler+0x10>)
 80019fa:	f006 fd93 	bl	8008524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	24014c24 	.word	0x24014c24

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a22:	f013 f871 	bl	8014b08 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2216      	movs	r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
  }

  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fbcd 	bl	8001240 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
  }
  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f012 ffd6 	bl	8014b08 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	24080000 	.word	0x24080000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	24014c70 	.word	0x24014c70
 8001b90:	24015638 	.word	0x24015638

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b98:	f7fe fed6 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f012 ffb9 	bl	8014b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff f8c3 	bl	8000d50 <main>
  bx  lr
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bd4:	240000d8 	.word	0x240000d8
  ldr r2, =_sidata
 8001bd8:	080160c0 	.word	0x080160c0
  ldr r2, =_sbss
 8001bdc:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001be0:	24015634 	.word	0x24015634

08001be4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC3_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f000 f957 	bl	8001ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bf4:	f001 ff9a 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_Init+0x68>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	4913      	ldr	r1, [pc, #76]	; (8001c54 <HAL_Init+0x6c>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_Init+0x68>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_Init+0x6c>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_Init+0x70>)
 8001c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_Init+0x74>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fe4a 	bl	80018cc <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e002      	b.n	8001c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c42:	f7ff fcdf 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58024400 	.word	0x58024400
 8001c54:	08015f88 	.word	0x08015f88
 8001c58:	24000004 	.word	0x24000004
 8001c5c:	24000000 	.word	0x24000000

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	24000010 	.word	0x24000010
 8001c84:	24014c74 	.word	0x24014c74

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	24014c74 	.word	0x24014c74

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000010 	.word	0x24000010

08001ce8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetREVID+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	5c001000 	.word	0x5c001000

08001d00 <__NVIC_SetPriorityGrouping>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	05fa0000 	.word	0x05fa0000

08001d48 <__NVIC_GetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_DisableIRQ>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db12      	blt.n	8001dd8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	490a      	ldr	r1, [pc, #40]	; (8001de4 <__NVIC_DisableIRQ+0x44>)
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	3320      	adds	r3, #32
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dcc:	f3bf 8f4f 	dsb	sy
}
 8001dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd2:	f3bf 8f6f 	isb	sy
}
 8001dd6:	bf00      	nop
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff28 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec6:	f7ff ff3f 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001eca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f7ff ffb3 	bl	8001e3c <NVIC_EncodePriority>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff82 	bl	8001de8 <__NVIC_SetPriority>
}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff32 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff42 	bl	8001da0 <__NVIC_DisableIRQ>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_FLASH_Program+0x11c>)
 8001f3e:	7d1b      	ldrb	r3, [r3, #20]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_FLASH_Program+0x24>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e076      	b.n	8002036 <HAL_FLASH_Program+0x112>
 8001f48:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_FLASH_Program+0x11c>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f54:	d306      	bcc.n	8001f64 <HAL_FLASH_Program+0x40>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001f5c:	d202      	bcs.n	8001f64 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	e00c      	b.n	8001f7e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001f6a:	d306      	bcc.n	8001f7a <HAL_FLASH_Program+0x56>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8001f72:	d202      	bcs.n	8001f7a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e001      	b.n	8001f7e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e05b      	b.n	8002036 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_FLASH_Program+0x11c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f8a:	f000 f85d 	bl	8002048 <FLASH_WaitForLastOperation>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8001f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d147      	bne.n	800202c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d106      	bne.n	8001fb0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_FLASH_Program+0x120>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_FLASH_Program+0x120>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	60d3      	str	r3, [r2, #12]
 8001fae:	e007      	b.n	8001fc0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_FLASH_Program+0x120>)
 8001fb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_FLASH_Program+0x120>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8001fc0:	f3bf 8f6f 	isb	sy
}
 8001fc4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc6:	f3bf 8f4f 	dsb	sy
}
 8001fca:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ef      	bne.n	8001fcc <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001fec:	f3bf 8f6f 	isb	sy
}
 8001ff0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff2:	f3bf 8f4f 	dsb	sy
}
 8001ff6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001ff8:	69b9      	ldr	r1, [r7, #24]
 8001ffa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ffe:	f000 f823 	bl	8002048 <FLASH_WaitForLastOperation>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_FLASH_Program+0x120>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_FLASH_Program+0x120>)
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	60d3      	str	r3, [r2, #12]
 800201a:	e007      	b.n	800202c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_FLASH_Program+0x120>)
 800201e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_FLASH_Program+0x120>)
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_FLASH_Program+0x11c>)
 800202e:	2200      	movs	r2, #0
 8002030:	751a      	strb	r2, [r3, #20]

  return status;
 8002032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	24014c78 	.word	0x24014c78
 8002044:	52002000 	.word	0x52002000

08002048 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8002052:	2304      	movs	r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800205a:	f7ff fe15 	bl	8001c88 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d113      	bne.n	800208e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <FLASH_WaitForLastOperation+0x124>)
 8002068:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800206a:	e010      	b.n	800208e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d00c      	beq.n	800208e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002074:	f7ff fe08 	bl	8001c88 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d302      	bcc.n	800208a <FLASH_WaitForLastOperation+0x42>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e06a      	b.n	8002164 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <FLASH_WaitForLastOperation+0x128>)
 8002092:	4013      	ands	r3, r2
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	429a      	cmp	r2, r3
 8002098:	d10a      	bne.n	80020b0 <FLASH_WaitForLastOperation+0x68>
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e00c      	b.n	80020ca <FLASH_WaitForLastOperation+0x82>
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 80020b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80020b6:	43da      	mvns	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ce      	bne.n	800206c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <FLASH_WaitForLastOperation+0x130>)
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e007      	b.n	80020f0 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 80020e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <FLASH_WaitForLastOperation+0x130>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ee:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d017      	beq.n	800212a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <FLASH_WaitForLastOperation+0x134>)
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <FLASH_WaitForLastOperation+0x134>)
 8002104:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <FLASH_WaitForLastOperation+0x128>)
 800210a:	4013      	ands	r3, r2
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d103      	bne.n	800211a <FLASH_WaitForLastOperation+0xd2>
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6153      	str	r3, [r2, #20]
 8002118:	e005      	b.n	8002126 <FLASH_WaitForLastOperation+0xde>
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002122:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e01c      	b.n	8002164 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10b      	bne.n	8002148 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d111      	bne.n	8002162 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 8002140:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002144:	615a      	str	r2, [r3, #20]
 8002146:	e00c      	b.n	8002162 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 800214a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d104      	bne.n	8002162 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <FLASH_WaitForLastOperation+0x12c>)
 800215a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800215e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	80000004 	.word	0x80000004
 8002170:	1fef000f 	.word	0x1fef000f
 8002174:	52002000 	.word	0x52002000
 8002178:	17ee0000 	.word	0x17ee0000
 800217c:	24014c78 	.word	0x24014c78

08002180 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800218e:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_FLASHEx_Erase+0x188>)
 8002190:	7d1b      	ldrb	r3, [r3, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_FLASHEx_Erase+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e0b2      	b.n	8002300 <HAL_FLASHEx_Erase+0x180>
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_FLASHEx_Erase+0x188>)
 800219c:	2201      	movs	r2, #1
 800219e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_FLASHEx_Erase+0x188>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80021b2:	2101      	movs	r1, #1
 80021b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b8:	f7ff ff46 	bl	8002048 <FLASH_WaitForLastOperation>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80021d2:	2102      	movs	r1, #2
 80021d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021d8:	f7ff ff36 	bl	8002048 <FLASH_WaitForLastOperation>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8085 	bne.w	80022f8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d136      	bne.n	8002264 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f000 f8b9 	bl	8002378 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00f      	beq.n	8002232 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002212:	2101      	movs	r1, #1
 8002214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002218:	f7ff ff16 	bl	8002048 <FLASH_WaitForLastOperation>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 800222c:	f023 0308 	bic.w	r3, r3, #8
 8002230:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d05c      	beq.n	80022f8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800223e:	2102      	movs	r1, #2
 8002240:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002244:	f7ff ff00 	bl	8002048 <FLASH_WaitForLastOperation>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 8002254:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 800225a:	f023 0308 	bic.w	r3, r3, #8
 800225e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002262:	e049      	b.n	80022f8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f04f 32ff 	mov.w	r2, #4294967295
 800226a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	e039      	b.n	80022e8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	461a      	mov	r2, r3
 800227e:	68b8      	ldr	r0, [r7, #8]
 8002280:	f000 f8e4 	bl	800244c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002290:	2101      	movs	r1, #1
 8002292:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002296:	f7ff fed7 	bl	8002048 <FLASH_WaitForLastOperation>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	491a      	ldr	r1, [pc, #104]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_FLASHEx_Erase+0x190>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 80022b6:	2102      	movs	r1, #2
 80022b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022bc:	f7ff fec4 	bl	8002048 <FLASH_WaitForLastOperation>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 80022c6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80022ca:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_FLASHEx_Erase+0x18c>)
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_FLASHEx_Erase+0x190>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	601a      	str	r2, [r3, #0]
          break;
 80022e0:	e00a      	b.n	80022f8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3bd      	bcc.n	8002274 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_FLASHEx_Erase+0x188>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	751a      	strb	r2, [r3, #20]

  return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	24014c78 	.word	0x24014c78
 800230c:	52002000 	.word	0x52002000
 8002310:	fffff8fb 	.word	0xfffff8fb

08002314 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_FLASHEx_Unlock_Bank1+0x38>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_FLASHEx_Unlock_Bank1+0x38>)
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
 8002328:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_FLASHEx_Unlock_Bank1+0x38>)
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_FLASHEx_Unlock_Bank1+0x40>)
 800232e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_FLASHEx_Unlock_Bank1+0x38>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	52002000 	.word	0x52002000
 8002350:	45670123 	.word	0x45670123
 8002354:	cdef89ab 	.word	0xcdef89ab

08002358 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_FLASHEx_Lock_Bank1+0x1c>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_FLASHEx_Lock_Bank1+0x1c>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	52002000 	.word	0x52002000

08002378 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b03      	cmp	r3, #3
 800238a:	d122      	bne.n	80023d2 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <FLASH_MassErase+0xd0>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <FLASH_MassErase+0xd0>)
 8002392:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002396:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <FLASH_MassErase+0xd0>)
 800239a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800239e:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <FLASH_MassErase+0xd0>)
 80023a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023a4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <FLASH_MassErase+0xd0>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4926      	ldr	r1, [pc, #152]	; (8002448 <FLASH_MassErase+0xd0>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <FLASH_MassErase+0xd0>)
 80023b6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80023ba:	4923      	ldr	r1, [pc, #140]	; (8002448 <FLASH_MassErase+0xd0>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <FLASH_MassErase+0xd0>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <FLASH_MassErase+0xd0>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80023d0:	e033      	b.n	800243a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d011      	beq.n	8002400 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <FLASH_MassErase+0xd0>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <FLASH_MassErase+0xd0>)
 80023e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023e6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <FLASH_MassErase+0xd0>)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	; (8002448 <FLASH_MassErase+0xd0>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <FLASH_MassErase+0xd0>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a13      	ldr	r2, [pc, #76]	; (8002448 <FLASH_MassErase+0xd0>)
 80023fa:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80023fe:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <FLASH_MassErase+0xd0>)
 800240c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <FLASH_MassErase+0xd0>)
 8002412:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002416:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <FLASH_MassErase+0xd0>)
 800241c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <FLASH_MassErase+0xd0>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <FLASH_MassErase+0xd0>)
 800242c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <FLASH_MassErase+0xd0>)
 8002432:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002436:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	52002000 	.word	0x52002000

0800244c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 8002468:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800246c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0219      	lsls	r1, r3, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	430b      	orrs	r3, r1
 800247a:	4313      	orrs	r3, r2
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 800247e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8002482:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d014      	beq.n	80024b8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 8002490:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 8002496:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800249a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 80024a0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	0219      	lsls	r1, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	4313      	orrs	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <FLASH_Erase_Sector+0x78>)
 80024b0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80024b4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	52002000 	.word	0x52002000

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024d6:	4b89      	ldr	r3, [pc, #548]	; (80026fc <HAL_GPIO_Init+0x234>)
 80024d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024da:	e194      	b.n	8002806 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8186 	beq.w	8002800 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d005      	beq.n	800250c <HAL_GPIO_Init+0x44>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0201 	and.w	r2, r3, #1
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d017      	beq.n	80025aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d123      	bne.n	80025fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80e0 	beq.w	8002800 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002640:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_GPIO_Init+0x238>)
 8002642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002646:	4a2e      	ldr	r2, [pc, #184]	; (8002700 <HAL_GPIO_Init+0x238>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_GPIO_Init+0x238>)
 8002652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_GPIO_Init+0x23c>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <HAL_GPIO_Init+0x240>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d052      	beq.n	8002730 <HAL_GPIO_Init+0x268>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_GPIO_Init+0x244>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_GPIO_Init+0x22e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x248>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <HAL_GPIO_Init+0x22a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_GPIO_Init+0x24c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d025      	beq.n	80026ee <HAL_GPIO_Init+0x226>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_GPIO_Init+0x250>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <HAL_GPIO_Init+0x222>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <HAL_GPIO_Init+0x254>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d019      	beq.n	80026e6 <HAL_GPIO_Init+0x21e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x258>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0x21a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x25c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_GPIO_Init+0x216>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_GPIO_Init+0x260>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x212>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_GPIO_Init+0x264>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_GPIO_Init+0x20e>
 80026d2:	2309      	movs	r3, #9
 80026d4:	e02d      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026d6:	230a      	movs	r3, #10
 80026d8:	e02b      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026da:	2308      	movs	r3, #8
 80026dc:	e029      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026de:	2307      	movs	r3, #7
 80026e0:	e027      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e025      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e023      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e021      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e01f      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e01d      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e01b      	b.n	8002732 <HAL_GPIO_Init+0x26a>
 80026fa:	bf00      	nop
 80026fc:	58000080 	.word	0x58000080
 8002700:	58024400 	.word	0x58024400
 8002704:	58000400 	.word	0x58000400
 8002708:	58020000 	.word	0x58020000
 800270c:	58020400 	.word	0x58020400
 8002710:	58020800 	.word	0x58020800
 8002714:	58020c00 	.word	0x58020c00
 8002718:	58021000 	.word	0x58021000
 800271c:	58021400 	.word	0x58021400
 8002720:	58021800 	.word	0x58021800
 8002724:	58021c00 	.word	0x58021c00
 8002728:	58022000 	.word	0x58022000
 800272c:	58022400 	.word	0x58022400
 8002730:	2300      	movs	r3, #0
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002742:	4938      	ldr	r1, [pc, #224]	; (8002824 <HAL_GPIO_Init+0x35c>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3301      	adds	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f ae63 	bne.w	80024dc <HAL_GPIO_Init+0x14>
  }
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	3724      	adds	r7, #36	; 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	58000400 	.word	0x58000400

08002828 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002836:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <HAL_GPIO_DeInit+0x1e4>)
 8002838:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800283a:	e0d9      	b.n	80029f0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80cc 	beq.w	80029ea <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002852:	4a6f      	ldr	r2, [pc, #444]	; (8002a10 <HAL_GPIO_DeInit+0x1e8>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a67      	ldr	r2, [pc, #412]	; (8002a14 <HAL_GPIO_DeInit+0x1ec>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d037      	beq.n	80028ec <HAL_GPIO_DeInit+0xc4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a66      	ldr	r2, [pc, #408]	; (8002a18 <HAL_GPIO_DeInit+0x1f0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <HAL_GPIO_DeInit+0xc0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_GPIO_DeInit+0x1f4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d02b      	beq.n	80028e4 <HAL_GPIO_DeInit+0xbc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a64      	ldr	r2, [pc, #400]	; (8002a20 <HAL_GPIO_DeInit+0x1f8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d025      	beq.n	80028e0 <HAL_GPIO_DeInit+0xb8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_GPIO_DeInit+0x1fc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d01f      	beq.n	80028dc <HAL_GPIO_DeInit+0xb4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a62      	ldr	r2, [pc, #392]	; (8002a28 <HAL_GPIO_DeInit+0x200>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d019      	beq.n	80028d8 <HAL_GPIO_DeInit+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a61      	ldr	r2, [pc, #388]	; (8002a2c <HAL_GPIO_DeInit+0x204>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_GPIO_DeInit+0xac>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a60      	ldr	r2, [pc, #384]	; (8002a30 <HAL_GPIO_DeInit+0x208>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_DeInit+0xa8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a5f      	ldr	r2, [pc, #380]	; (8002a34 <HAL_GPIO_DeInit+0x20c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_DeInit+0xa4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <HAL_GPIO_DeInit+0x210>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_DeInit+0xa0>
 80028c4:	2309      	movs	r3, #9
 80028c6:	e012      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028c8:	230a      	movs	r3, #10
 80028ca:	e010      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028cc:	2308      	movs	r3, #8
 80028ce:	e00e      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028d0:	2307      	movs	r3, #7
 80028d2:	e00c      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028d4:	2306      	movs	r3, #6
 80028d6:	e00a      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028d8:	2305      	movs	r3, #5
 80028da:	e008      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028dc:	2304      	movs	r3, #4
 80028de:	e006      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e004      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e002      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_GPIO_DeInit+0xc6>
 80028ec:	2300      	movs	r3, #0
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	f002 0203 	and.w	r2, r2, #3
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	4093      	lsls	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d136      	bne.n	800296c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002928:	4013      	ands	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	4013      	ands	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800294e:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_GPIO_DeInit+0x1e8>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	43da      	mvns	r2, r3
 800295e:	482c      	ldr	r0, [pc, #176]	; (8002a10 <HAL_GPIO_DeInit+0x1e8>)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	400a      	ands	r2, r1
 8002966:	3302      	adds	r3, #2
 8002968:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2103      	movs	r1, #3
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	08d2      	lsrs	r2, r2, #3
 80029a0:	4019      	ands	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2103      	movs	r1, #3
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	401a      	ands	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	2101      	movs	r1, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2103      	movs	r1, #3
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f af1f 	bne.w	800283c <HAL_GPIO_DeInit+0x14>
  }
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	58000080 	.word	0x58000080
 8002a10:	58000400 	.word	0x58000400
 8002a14:	58020000 	.word	0x58020000
 8002a18:	58020400 	.word	0x58020400
 8002a1c:	58020800 	.word	0x58020800
 8002a20:	58020c00 	.word	0x58020c00
 8002a24:	58021000 	.word	0x58021000
 8002a28:	58021400 	.word	0x58021400
 8002a2c:	58021800 	.word	0x58021800
 8002a30:	58021c00 	.word	0x58021c00
 8002a34:	58022000 	.word	0x58022000
 8002a38:	58022400 	.word	0x58022400

08002a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e001      	b.n	8002a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fc8f 	bl	80013e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002adc:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_HSEM_FastTake+0x2c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_HSEM_FastTake+0x30>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	58026400 	.word	0x58026400
 8002b04:	80000300 	.word	0x80000300

08002b08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002b12:	4906      	ldr	r1, [pc, #24]	; (8002b2c <HAL_HSEM_Release+0x24>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	58026400 	.word	0x58026400

08002b30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b38:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d00a      	beq.n	8002b5a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e040      	b.n	8002bd8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e03e      	b.n	8002bd8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b62:	491f      	ldr	r1, [pc, #124]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b6a:	f7ff f88d 	bl	8001c88 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b70:	e009      	b.n	8002b86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b72:	f7ff f889 	bl	8001c88 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b80:	d901      	bls.n	8002b86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e028      	b.n	8002bd8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	d1ee      	bne.n	8002b72 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b1e      	cmp	r3, #30
 8002b98:	d008      	beq.n	8002bac <HAL_PWREx_ConfigSupply+0x7c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b9e:	d005      	beq.n	8002bac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b1d      	cmp	r3, #29
 8002ba4:	d002      	beq.n	8002bac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8002baa:	d114      	bne.n	8002bd6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bac:	f7ff f86c 	bl	8001c88 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bb2:	e009      	b.n	8002bc8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bb4:	f7ff f868 	bl	8001c88 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d901      	bls.n	8002bc8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d1ee      	bne.n	8002bb4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	58024800 	.word	0x58024800

08002be4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d80f      	bhi.n	8002c16 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002bf6:	4b86      	ldr	r3, [pc, #536]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 030f 	bic.w	r3, r3, #15
 8002bfe:	4a84      	ldr	r2, [pc, #528]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002c00:	f043 0307 	orr.w	r3, r3, #7
 8002c04:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002c06:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2b07      	cmp	r3, #7
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0f7      	b.n	8002e06 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c16:	f7ff f837 	bl	8001c88 <HAL_GetTick>
 8002c1a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c1c:	4b7d      	ldr	r3, [pc, #500]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7c      	ldr	r2, [pc, #496]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7ff f82d 	bl	8001c88 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0e4      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8002c48:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c52:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_DeInit+0x234>)
 8002c5c:	4a6f      	ldr	r2, [pc, #444]	; (8002e1c <HAL_RCC_DeInit+0x238>)
 8002c5e:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_DeInit+0x23c>)
 8002c62:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_RCC_DeInit+0x238>)
 8002c64:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c66:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_DeInit+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fe2e 	bl	80018cc <HAL_InitTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0c5      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c7a:	f7ff f805 	bl	8001c88 <HAL_GetTick>
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c82:	f7ff f801 	bl	8001c88 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0b6      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002c98:	4b5e      	ldr	r3, [pc, #376]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ca4:	f7fe fff0 	bl	8001c88 <HAL_GetTick>
 8002ca8:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4959      	ldr	r1, [pc, #356]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002cb0:	4b5d      	ldr	r3, [pc, #372]	; (8002e28 <HAL_RCC_DeInit+0x244>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe ffe6 	bl	8001c88 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e09d      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	4b52      	ldr	r3, [pc, #328]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cd6:	f7fe ffd7 	bl	8001c88 <HAL_GetTick>
 8002cda:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe ffcd 	bl	8001c88 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e084      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cfc:	4b45      	ldr	r3, [pc, #276]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d08:	f7fe ffbe 	bl	8001c88 <HAL_GetTick>
 8002d0c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002d0e:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d18:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe ffb4 	bl	8001c88 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e06b      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d3a:	f7fe ffa5 	bl	8001c88 <HAL_GetTick>
 8002d3e:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002d40:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a33      	ldr	r2, [pc, #204]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe ff9b 	bl	8001c88 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e052      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002d60:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_RCC_DeInit+0x248>)
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_RCC_DeInit+0x24c>)
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d8c:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <HAL_RCC_DeInit+0x250>)
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002d90:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <HAL_RCC_DeInit+0x250>)
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_RCC_DeInit+0x250>)
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002dca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_RCC_DeInit+0x230>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00f      	beq.n	8002e04 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 030f 	bic.w	r3, r3, #15
 8002dec:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002dee:	f043 0307 	orr.w	r3, r3, #7
 8002df2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RCC_DeInit+0x22c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	2b07      	cmp	r3, #7
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	52002000 	.word	0x52002000
 8002e14:	58024400 	.word	0x58024400
 8002e18:	24000000 	.word	0x24000000
 8002e1c:	03d09000 	.word	0x03d09000
 8002e20:	24000004 	.word	0x24000004
 8002e24:	2400000c 	.word	0x2400000c
 8002e28:	fff6ed45 	.word	0xfff6ed45
 8002e2c:	02020200 	.word	0x02020200
 8002e30:	01ff0000 	.word	0x01ff0000
 8002e34:	01010280 	.word	0x01010280

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 bc48 	b.w	80036dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8088 	beq.w	8002f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	4b99      	ldr	r3, [pc, #612]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e64:	4b96      	ldr	r3, [pc, #600]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d007      	beq.n	8002e80 <HAL_RCC_OscConfig+0x48>
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	2b18      	cmp	r3, #24
 8002e74:	d111      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d06d      	beq.n	8002f68 <HAL_RCC_OscConfig+0x130>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d169      	bne.n	8002f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f000 bc21 	b.w	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x7a>
 8002ea4:	4b86      	ldr	r3, [pc, #536]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a85      	ldr	r2, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e02e      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x9c>
 8002eba:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002ede:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a77      	ldr	r2, [pc, #476]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b75      	ldr	r3, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a74      	ldr	r2, [pc, #464]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002ef8:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a70      	ldr	r2, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b6e      	ldr	r3, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6d      	ldr	r2, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe feb6 	bl	8001c88 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe feb2 	bl	8001c88 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e3d4      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fea2 	bl	8001c88 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fe9e 	bl	8001c88 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e3c0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f5a:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x110>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80ca 	beq.w	800310c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f78:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCC_OscConfig+0x166>
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2b18      	cmp	r3, #24
 8002f92:	d156      	bne.n	8003042 <HAL_RCC_OscConfig+0x20a>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d151      	bne.n	8003042 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f9e:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e392      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0219 	bic.w	r2, r3, #25
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	493f      	ldr	r1, [pc, #252]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe5e 	bl	8001c88 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fe5a 	bl	8001c88 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e37c      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	f7fe fe7b 	bl	8001ce8 <HAL_GetREVID>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d817      	bhi.n	800302c <HAL_RCC_OscConfig+0x1f4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d108      	bne.n	8003016 <HAL_RCC_OscConfig+0x1de>
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800300c:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003012:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e07a      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	4926      	ldr	r1, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800302a:	e06f      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	4921      	ldr	r1, [pc, #132]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	e064      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d047      	beq.n	80030da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0219 	bic.w	r2, r3, #25
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	491a      	ldr	r1, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fe14 	bl	8001c88 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fe10 	bl	8001c88 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e332      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	f7fe fe31 	bl	8001ce8 <HAL_GetREVID>
 8003086:	4603      	mov	r3, r0
 8003088:	f241 0203 	movw	r2, #4099	; 0x1003
 800308c:	4293      	cmp	r3, r2
 800308e:	d819      	bhi.n	80030c4 <HAL_RCC_OscConfig+0x28c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d108      	bne.n	80030aa <HAL_RCC_OscConfig+0x272>
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a6:	6053      	str	r3, [r2, #4]
 80030a8:	e030      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4901      	ldr	r1, [pc, #4]	; (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
 80030be:	e025      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
 80030c0:	58024400 	.word	0x58024400
 80030c4:	4b9a      	ldr	r3, [pc, #616]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4997      	ldr	r1, [pc, #604]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b95      	ldr	r3, [pc, #596]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a94      	ldr	r2, [pc, #592]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fdcf 	bl	8001c88 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fdcb 	bl	8001c88 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e2ed      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003100:	4b8b      	ldr	r3, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a9 	beq.w	800326c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	4b85      	ldr	r3, [pc, #532]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003122:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003124:	4b82      	ldr	r3, [pc, #520]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d007      	beq.n	8003140 <HAL_RCC_OscConfig+0x308>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b18      	cmp	r3, #24
 8003134:	d13a      	bne.n	80031ac <HAL_RCC_OscConfig+0x374>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d135      	bne.n	80031ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003140:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x320>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2c1      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003158:	f7fe fdc6 	bl	8001ce8 <HAL_GetREVID>
 800315c:	4603      	mov	r3, r0
 800315e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003162:	4293      	cmp	r3, r2
 8003164:	d817      	bhi.n	8003196 <HAL_RCC_OscConfig+0x35e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2b20      	cmp	r3, #32
 800316c:	d108      	bne.n	8003180 <HAL_RCC_OscConfig+0x348>
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003176:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800317c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317e:	e075      	b.n	800326c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	4968      	ldr	r1, [pc, #416]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003194:	e06a      	b.n	800326c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003196:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	4962      	ldr	r1, [pc, #392]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031aa:	e05f      	b.n	800326c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d042      	beq.n	800323a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031b4:	4b5e      	ldr	r3, [pc, #376]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5d      	ldr	r2, [pc, #372]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd62 	bl	8001c88 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031c8:	f7fe fd5e 	bl	8001c88 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e280      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e6:	f7fe fd7f 	bl	8001ce8 <HAL_GetREVID>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d817      	bhi.n	8003224 <HAL_RCC_OscConfig+0x3ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x3d6>
 80031fc:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0x434>
 800320e:	4b48      	ldr	r3, [pc, #288]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	4944      	ldr	r1, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
 8003222:	e023      	b.n	800326c <HAL_RCC_OscConfig+0x434>
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	493f      	ldr	r1, [pc, #252]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e018      	b.n	800326c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe fd1f 	bl	8001c88 <HAL_GetTick>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800324e:	f7fe fd1b 	bl	8001c88 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e23d      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003260:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d036      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe fcfc 	bl	8001c88 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe fcf8 	bl	8001c88 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e21a      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x45c>
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe fce2 	bl	8001c88 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fe fcde 	bl	8001c88 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e200      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d039      	beq.n	8003366 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003304:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003306:	f7fe fcbf 	bl	8001c88 <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330e:	f7fe fcbb 	bl	8001c88 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1dd      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x4d6>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003334:	4b9b      	ldr	r3, [pc, #620]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a9a      	ldr	r2, [pc, #616]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800333a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800333e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003340:	f7fe fca2 	bl	8001c88 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fe fc9e 	bl	8001c88 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1c0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800335a:	4b92      	ldr	r3, [pc, #584]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8081 	beq.w	8003476 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003374:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <HAL_RCC_OscConfig+0x770>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8b      	ldr	r2, [pc, #556]	; (80035a8 <HAL_RCC_OscConfig+0x770>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003380:	f7fe fc82 	bl	8001c88 <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003388:	f7fe fc7e 	bl	8001c88 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1a0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339a:	4b83      	ldr	r3, [pc, #524]	; (80035a8 <HAL_RCC_OscConfig+0x770>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x584>
 80033ae:	4b7d      	ldr	r3, [pc, #500]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a7c      	ldr	r2, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	e02d      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x5a6>
 80033c4:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a76      	ldr	r2, [pc, #472]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	4b74      	ldr	r3, [pc, #464]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a73      	ldr	r2, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x5c8>
 80033e6:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	4b6c      	ldr	r3, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a6b      	ldr	r2, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6713      	str	r3, [r2, #112]	; 0x70
 800340c:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a64      	ldr	r2, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003412:	f023 0304 	bic.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe fc32 	bl	8001c88 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe fc2e 	bl	8001c88 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e14e      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ee      	beq.n	8003428 <HAL_RCC_OscConfig+0x5f0>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fc1c 	bl	8001c88 <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fc18 	bl	8001c88 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e138      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ee      	bne.n	8003454 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 812d 	beq.w	80036da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003488:	2b18      	cmp	r3, #24
 800348a:	f000 80bd 	beq.w	8003608 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b02      	cmp	r3, #2
 8003494:	f040 809e 	bne.w	80035d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800349e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fbf0 	bl	8001c88 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fbec 	bl	8001c88 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e10e      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_OscConfig+0x774>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	430a      	orrs	r2, r1
 80034de:	4931      	ldr	r1, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	628b      	str	r3, [r1, #40]	; 0x28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	3b01      	subs	r3, #1
 80034ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	3b01      	subs	r3, #1
 80034f4:	025b      	lsls	r3, r3, #9
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	3b01      	subs	r3, #1
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	3b01      	subs	r3, #1
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003514:	4923      	ldr	r1, [pc, #140]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCC_OscConfig+0x778>)
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003532:	00d2      	lsls	r2, r2, #3
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4917      	ldr	r1, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f023 0202 	bic.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	4912      	ldr	r1, [pc, #72]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fb75 	bl	8001c88 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a0:	e011      	b.n	80035c6 <HAL_RCC_OscConfig+0x78e>
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58024800 	.word	0x58024800
 80035ac:	fffffc0c 	.word	0xfffffc0c
 80035b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fb68 	bl	8001c88 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e08a      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x77c>
 80035d2:	e082      	b.n	80036da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fb52 	bl	8001c88 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fb4e 	bl	8001c88 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e070      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x7b0>
 8003606:	e068      	b.n	80036da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800360e:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2b01      	cmp	r3, #1
 800361a:	d031      	beq.n	8003680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d12a      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d122      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11a      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d108      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e02b      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	08db      	lsrs	r3, r3, #3
 800368a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800368e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	d01f      	beq.n	80036da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a6:	f7fe faef 	bl	8001c88 <HAL_GetTick>
 80036aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80036ac:	bf00      	nop
 80036ae:	f7fe faeb 	bl	8001c88 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d0f9      	beq.n	80036ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x8b0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036c6:	00d2      	lsls	r2, r2, #3
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3730      	adds	r7, #48	; 0x30
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	ffff0007 	.word	0xffff0007

080036ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e19c      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b8a      	ldr	r3, [pc, #552]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	4985      	ldr	r1, [pc, #532]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b83      	ldr	r3, [pc, #524]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e184      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800374c:	4b78      	ldr	r3, [pc, #480]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	4975      	ldr	r1, [pc, #468]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800375a:	4313      	orrs	r3, r2
 800375c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	4b70      	ldr	r3, [pc, #448]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003776:	429a      	cmp	r2, r3
 8003778:	d908      	bls.n	800378c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800377a:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	496a      	ldr	r1, [pc, #424]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003788:	4313      	orrs	r3, r2
 800378a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a8:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	495e      	ldr	r1, [pc, #376]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037d6:	4b56      	ldr	r3, [pc, #344]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4953      	ldr	r1, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b4d      	ldr	r3, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	429a      	cmp	r2, r3
 8003802:	d908      	bls.n	8003816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f023 020f 	bic.w	r2, r3, #15
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4947      	ldr	r1, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003812:	4313      	orrs	r3, r2
 8003814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d055      	beq.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003822:	4b43      	ldr	r3, [pc, #268]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4940      	ldr	r1, [pc, #256]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003830:	4313      	orrs	r3, r2
 8003832:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d107      	bne.n	800384c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800383c:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d121      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0f6      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003854:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d115      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0ea      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0de      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387c:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d6      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f023 0207 	bic.w	r2, r3, #7
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4925      	ldr	r1, [pc, #148]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fe f9f3 	bl	8001c88 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a6:	f7fe f9ef 	bl	8001c88 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0be      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d1eb      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d010      	beq.n	80038fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d208      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d214      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	4906      	ldr	r1, [pc, #24]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_RCC_ClockConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e086      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
 800392c:	52002000 	.word	0x52002000
 8003930:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800394c:	429a      	cmp	r2, r3
 800394e:	d208      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003950:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	4939      	ldr	r1, [pc, #228]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 800395e:	4313      	orrs	r3, r2
 8003960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d010      	beq.n	8003990 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800397a:	429a      	cmp	r2, r3
 800397c:	d208      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	492e      	ldr	r1, [pc, #184]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 800398c:	4313      	orrs	r3, r2
 800398e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d208      	bcs.n	80039be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4922      	ldr	r1, [pc, #136]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d208      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4917      	ldr	r1, [pc, #92]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039ec:	f000 f89e 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	4912      	ldr	r1, [pc, #72]	; (8003a48 <HAL_RCC_ClockConfig+0x35c>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <HAL_RCC_ClockConfig+0x35c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_RCC_ClockConfig+0x360>)
 8003a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x364>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x368>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd ff4c 	bl	80018cc <HAL_InitTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	58024400 	.word	0x58024400
 8003a48:	08015f88 	.word	0x08015f88
 8003a4c:	24000004 	.word	0x24000004
 8003a50:	24000000 	.word	0x24000000
 8003a54:	2400000c 	.word	0x2400000c

08003a58 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	; 0x30
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d12a      	bne.n	8003ac0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a70:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003a9e:	f107 031c 	add.w	r3, r7, #28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	481f      	ldr	r0, [pc, #124]	; (8003b24 <HAL_RCC_MCOConfig+0xcc>)
 8003aa6:	f7fe fd0f 	bl	80024c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	4919      	ldr	r1, [pc, #100]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003abe:	e02a      	b.n	8003b16 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003af4:	f107 031c 	add.w	r3, r7, #28
 8003af8:	4619      	mov	r1, r3
 8003afa:	480b      	ldr	r0, [pc, #44]	; (8003b28 <HAL_RCC_MCOConfig+0xd0>)
 8003afc:	f7fe fce4 	bl	80024c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	01d9      	lsls	r1, r3, #7
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCC_MCOConfig+0xc8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
}
 8003b16:	bf00      	nop
 8003b18:	3730      	adds	r7, #48	; 0x30
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	58020000 	.word	0x58020000
 8003b28:	58020800 	.word	0x58020800

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b32:	4bb3      	ldr	r3, [pc, #716]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b3a:	2b18      	cmp	r3, #24
 8003b3c:	f200 8155 	bhi.w	8003dea <HAL_RCC_GetSysClockFreq+0x2be>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003bad 	.word	0x08003bad
 8003b4c:	08003deb 	.word	0x08003deb
 8003b50:	08003deb 	.word	0x08003deb
 8003b54:	08003deb 	.word	0x08003deb
 8003b58:	08003deb 	.word	0x08003deb
 8003b5c:	08003deb 	.word	0x08003deb
 8003b60:	08003deb 	.word	0x08003deb
 8003b64:	08003deb 	.word	0x08003deb
 8003b68:	08003bd3 	.word	0x08003bd3
 8003b6c:	08003deb 	.word	0x08003deb
 8003b70:	08003deb 	.word	0x08003deb
 8003b74:	08003deb 	.word	0x08003deb
 8003b78:	08003deb 	.word	0x08003deb
 8003b7c:	08003deb 	.word	0x08003deb
 8003b80:	08003deb 	.word	0x08003deb
 8003b84:	08003deb 	.word	0x08003deb
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003deb 	.word	0x08003deb
 8003b90:	08003deb 	.word	0x08003deb
 8003b94:	08003deb 	.word	0x08003deb
 8003b98:	08003deb 	.word	0x08003deb
 8003b9c:	08003deb 	.word	0x08003deb
 8003ba0:	08003deb 	.word	0x08003deb
 8003ba4:	08003deb 	.word	0x08003deb
 8003ba8:	08003bdf 	.word	0x08003bdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bac:	4b94      	ldr	r3, [pc, #592]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bb8:	4b91      	ldr	r3, [pc, #580]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	4a90      	ldr	r2, [pc, #576]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bca:	e111      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bce:	61bb      	str	r3, [r7, #24]
      break;
 8003bd0:	e10e      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bd2:	4b8d      	ldr	r3, [pc, #564]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bd4:	61bb      	str	r3, [r7, #24]
      break;
 8003bd6:	e10b      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bda:	61bb      	str	r3, [r7, #24]
      break;
 8003bdc:	e108      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bde:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003be8:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bf4:	4b82      	ldr	r3, [pc, #520]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003bfe:	4b80      	ldr	r3, [pc, #512]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	08db      	lsrs	r3, r3, #3
 8003c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80e1 	beq.w	8003de4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	f000 8083 	beq.w	8003d30 <HAL_RCC_GetSysClockFreq+0x204>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	f200 80a1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x248>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x114>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d056      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c3e:	e099      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c40:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02d      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c4c:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	4a6b      	ldr	r2, [pc, #428]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	ee07 3a90 	vmov	s15, r3
 8003c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c76:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ca6:	e087      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cba:	4b51      	ldr	r3, [pc, #324]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cea:	e065      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d2e:	e043      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d72:	e021      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	0a5b      	lsrs	r3, r3, #9
 8003dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ddc:	ee17 3a90 	vmov	r3, s15
 8003de0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
      break;
 8003de8:	e002      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dec:	61bb      	str	r3, [r7, #24]
      break;
 8003dee:	bf00      	nop
  }

  return sysclockfreq;
 8003df0:	69bb      	ldr	r3, [r7, #24]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	03d09000 	.word	0x03d09000
 8003e08:	003d0900 	.word	0x003d0900
 8003e0c:	017d7840 	.word	0x017d7840
 8003e10:	46000000 	.word	0x46000000
 8003e14:	4c742400 	.word	0x4c742400
 8003e18:	4a742400 	.word	0x4a742400
 8003e1c:	4bbebc20 	.word	0x4bbebc20

08003e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e26:	f7ff fe81 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490f      	ldr	r1, [pc, #60]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5a:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	58024400 	.word	0x58024400
 8003e74:	08015f88 	.word	0x08015f88
 8003e78:	24000004 	.word	0x24000004
 8003e7c:	24000000 	.word	0x24000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e84:	f7ff ffcc 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	08015f88 	.word	0x08015f88

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003eb0:	f7ff ffb6 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	08015f88 	.word	0x08015f88

08003ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	223f      	movs	r2, #63	; 0x3f
 8003ee6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0207 	and.w	r2, r3, #7
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_RCC_GetClockConfig+0x7c>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_GetClockConfig+0x80>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	58024400 	.word	0x58024400
 8003f58:	52002000 	.word	0x52002000

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f60:	b0cc      	sub	sp, #304	; 0x130
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003f80:	2500      	movs	r5, #0
 8003f82:	ea54 0305 	orrs.w	r3, r4, r5
 8003f86:	d049      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f92:	d02f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f98:	d828      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f9e:	d01a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa4:	d822      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fae:	d007      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fb0:	e01c      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4bb8      	ldr	r3, [pc, #736]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4ab7      	ldr	r2, [pc, #732]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fbe:	e01a      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f002 fba1 	bl	8006710 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fda:	3328      	adds	r3, #40	; 0x28
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fc48 	bl	8006874 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ffe:	4ba5      	ldr	r3, [pc, #660]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	4aa1      	ldr	r2, [pc, #644]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6513      	str	r3, [r2, #80]	; 0x50
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004018:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800401c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004028:	f04f 0900 	mov.w	r9, #0
 800402c:	ea58 0309 	orrs.w	r3, r8, r9
 8004030:	d047      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004032:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	2b04      	cmp	r3, #4
 800403a:	d82a      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004059 	.word	0x08004059
 8004048:	08004067 	.word	0x08004067
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800409b 	.word	0x0800409b
 8004054:	0800409b 	.word	0x0800409b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004058:	4b8e      	ldr	r3, [pc, #568]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	4a8d      	ldr	r2, [pc, #564]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800405e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004064:	e01a      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800406a:	3308      	adds	r3, #8
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f002 fb4e 	bl	8006710 <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800407a:	e00f      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800407c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004080:	3328      	adds	r3, #40	; 0x28
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fbf5 	bl	8006874 <RCCEx_PLL3_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b7b      	ldr	r3, [pc, #492]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	f023 0107 	bic.w	r1, r3, #7
 80040ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4a78      	ldr	r2, [pc, #480]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6513      	str	r3, [r2, #80]	; 0x50
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80040c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80040ce:	f04f 0b00 	mov.w	fp, #0
 80040d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80040d6:	d04c      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80040d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d030      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e8:	d829      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040ea:	2bc0      	cmp	r3, #192	; 0xc0
 80040ec:	d02d      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80040ee:	2bc0      	cmp	r3, #192	; 0xc0
 80040f0:	d825      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d018      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d821      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d007      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004102:	e01c      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a62      	ldr	r2, [pc, #392]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004110:	e01c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004116:	3308      	adds	r3, #8
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f002 faf8 	bl	8006710 <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800412c:	3328      	adds	r3, #40	; 0x28
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f002 fb9f 	bl	8006874 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004144:	e002      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800414a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004162:	4a4c      	ldr	r2, [pc, #304]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	; 0x50
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800416e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004172:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800417e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004188:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d053      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800419a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800419e:	d035      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80041a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a4:	d82e      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041aa:	d031      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80041ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041b0:	d828      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b6:	d01a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d822      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80041c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c6:	d007      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80041c8:	e01c      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ca:	4b32      	ldr	r3, [pc, #200]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a31      	ldr	r2, [pc, #196]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d6:	e01c      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041dc:	3308      	adds	r3, #8
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f002 fa95 	bl	8006710 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041ec:	e011      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f2:	3328      	adds	r3, #40	; 0x28
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fb3c 	bl	8006874 <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004202:	e006      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800420a:	e002      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800422c:	430b      	orrs	r3, r1
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004236:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800423a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004246:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004250:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d056      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800425a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800425e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004266:	d038      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426c:	d831      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800426e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004272:	d034      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004274:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004278:	d82b      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800427a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800427e:	d01d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004284:	d825      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800428a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004290:	e01f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004292:	bf00      	nop
 8004294:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004298:	4ba2      	ldr	r3, [pc, #648]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4aa1      	ldr	r2, [pc, #644]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042a4:	e01c      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042aa:	3308      	adds	r3, #8
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f002 fa2e 	bl	8006710 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042ba:	e011      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c0:	3328      	adds	r3, #40	; 0x28
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f002 fad5 	bl	8006874 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80042de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042e8:	4b8e      	ldr	r3, [pc, #568]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80042f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f8:	4a8a      	ldr	r2, [pc, #552]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
 80042fe:	e003      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004304:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004314:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800431e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d03a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	2b30      	cmp	r3, #48	; 0x30
 8004330:	d01f      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004332:	2b30      	cmp	r3, #48	; 0x30
 8004334:	d819      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004336:	2b20      	cmp	r3, #32
 8004338:	d00c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d815      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004342:	2b10      	cmp	r3, #16
 8004344:	d111      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004346:	4b77      	ldr	r3, [pc, #476]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	4a76      	ldr	r2, [pc, #472]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800434c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004352:	e011      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004358:	3308      	adds	r3, #8
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f002 f9d7 	bl	8006710 <RCCEx_PLL2_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004378:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004380:	4b68      	ldr	r3, [pc, #416]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004390:	430b      	orrs	r3, r1
 8004392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800439a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800439e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80043aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043b4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d051      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80043be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c8:	d035      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80043ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ce:	d82e      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043d4:	d031      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80043d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043da:	d828      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d01a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	d822      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d007      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80043f2:	e01c      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a4a      	ldr	r2, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004400:	e01c      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004402:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004406:	3308      	adds	r3, #8
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f002 f980 	bl	8006710 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004416:	e011      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800441c:	3328      	adds	r3, #40	; 0x28
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fa27 	bl	8006874 <RCCEx_PLL3_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004434:	e002      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800443a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004444:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800444c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	4a34      	ldr	r2, [pc, #208]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6513      	str	r3, [r2, #80]	; 0x50
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800445e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800446e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004478:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d056      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004482:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800448c:	d033      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800448e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004492:	d82c      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004498:	d02f      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800449a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800449e:	d826      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a4:	d02b      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80044a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044aa:	d820      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b0:	d012      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80044b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b6:	d81a      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c0:	d115      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044c6:	3308      	adds	r3, #8
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 f920 	bl	8006710 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044d6:	e015      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044dc:	3328      	adds	r3, #40	; 0x28
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f002 f9c7 	bl	8006874 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044ec:	e00a      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80044f4:	e006      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044f6:	bf00      	nop
 80044f8:	e004      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004504:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451a:	4a02      	ldr	r2, [pc, #8]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6513      	str	r3, [r2, #80]	; 0x50
 8004520:	e006      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800452c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800453c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004546:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d055      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004550:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d033      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004562:	d82c      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d02f      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d826      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004574:	d02b      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800457a:	d820      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d012      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004586:	d81a      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d022      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800458c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004590:	d115      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004596:	3308      	adds	r3, #8
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f002 f8b8 	bl	8006710 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045a6:	e015      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045ac:	3328      	adds	r3, #40	; 0x28
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f002 f95f 	bl	8006874 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045bc:	e00a      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80045d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045dc:	4bb6      	ldr	r3, [pc, #728]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ec:	4ab2      	ldr	r2, [pc, #712]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6593      	str	r3, [r2, #88]	; 0x58
 80045f2:	e003      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80045f8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80045fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004612:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004616:	460b      	mov	r3, r1
 8004618:	4313      	orrs	r3, r2
 800461a:	d02a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800461c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d10a      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004630:	3308      	adds	r3, #8
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f002 f86b 	bl	8006710 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004640:	e004      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004648:	e000      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800464a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004654:	4b98      	ldr	r3, [pc, #608]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800465c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	4a95      	ldr	r2, [pc, #596]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004664:	430b      	orrs	r3, r1
 8004666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004668:	e003      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800466e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004672:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800467e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004688:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800468c:	460b      	mov	r3, r1
 800468e:	4313      	orrs	r3, r2
 8004690:	d037      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469c:	d00e      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x760>
 800469e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a2:	d816      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d018      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80046a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ac:	d111      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4a81      	ldr	r2, [pc, #516]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046ba:	e00f      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046c0:	3308      	adds	r3, #8
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 f823 	bl	8006710 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80046d8:	e000      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80046da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046e4:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	4a71      	ldr	r2, [pc, #452]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6513      	str	r3, [r2, #80]	; 0x50
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800470e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004718:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d03a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004722:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	2b03      	cmp	r3, #3
 800472a:	d81d      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004771 	.word	0x08004771
 8004738:	08004745 	.word	0x08004745
 800473c:	08004753 	.word	0x08004753
 8004740:	08004771 	.word	0x08004771
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4b5c      	ldr	r3, [pc, #368]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a5b      	ldr	r2, [pc, #364]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004750:	e00f      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004752:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004756:	3308      	adds	r3, #8
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f001 ffd8 	bl	8006710 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004772:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800477a:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	f023 0103 	bic.w	r1, r3, #3
 8004782:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004788:	4a4b      	ldr	r2, [pc, #300]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800478a:	430b      	orrs	r3, r1
 800478c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004794:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80047a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f000 80a0 	beq.w	80048fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ba:	4b40      	ldr	r3, [pc, #256]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c6:	f7fd fa5f 	bl	8001c88 <HAL_GetTick>
 80047ca:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ce:	e00b      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fd fa5a 	bl	8001c88 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b64      	cmp	r3, #100	; 0x64
 80047de:	d903      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80047e6:	e005      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ed      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80047f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d17a      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047fc:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004804:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004808:	4053      	eors	r3, r2
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004812:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481e:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004838:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800483c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800483e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004842:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	d118      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fa1c 	bl	8001c88 <HAL_GetTick>
 8004850:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004854:	e00d      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd fa17 	bl	8001c88 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	f241 3388 	movw	r3, #5000	; 0x1388
 8004866:	429a      	cmp	r2, r3
 8004868:	d903      	bls.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8004870:	e005      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0eb      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800487e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004882:	2b00      	cmp	r3, #0
 8004884:	d130      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004886:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800488a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d115      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80048a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048a8:	091a      	lsrs	r2, r3, #4
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	4a02      	ldr	r2, [pc, #8]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6113      	str	r3, [r2, #16]
 80048b4:	e00c      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80048b6:	bf00      	nop
 80048b8:	58024400 	.word	0x58024400
 80048bc:	58024800 	.word	0x58024800
 80048c0:	00ffffcf 	.word	0x00ffffcf
 80048c4:	4bd4      	ldr	r3, [pc, #848]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4ad3      	ldr	r2, [pc, #844]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80048ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048ce:	6113      	str	r3, [r2, #16]
 80048d0:	4bd1      	ldr	r3, [pc, #836]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80048d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e0:	4acd      	ldr	r2, [pc, #820]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	6713      	str	r3, [r2, #112]	; 0x70
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f002 0301 	and.w	r3, r2, #1
 8004906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	f000 808b 	beq.w	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800491c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004924:	2b28      	cmp	r3, #40	; 0x28
 8004926:	d86b      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004a09 	.word	0x08004a09
 8004934:	08004a01 	.word	0x08004a01
 8004938:	08004a01 	.word	0x08004a01
 800493c:	08004a01 	.word	0x08004a01
 8004940:	08004a01 	.word	0x08004a01
 8004944:	08004a01 	.word	0x08004a01
 8004948:	08004a01 	.word	0x08004a01
 800494c:	08004a01 	.word	0x08004a01
 8004950:	080049d5 	.word	0x080049d5
 8004954:	08004a01 	.word	0x08004a01
 8004958:	08004a01 	.word	0x08004a01
 800495c:	08004a01 	.word	0x08004a01
 8004960:	08004a01 	.word	0x08004a01
 8004964:	08004a01 	.word	0x08004a01
 8004968:	08004a01 	.word	0x08004a01
 800496c:	08004a01 	.word	0x08004a01
 8004970:	080049eb 	.word	0x080049eb
 8004974:	08004a01 	.word	0x08004a01
 8004978:	08004a01 	.word	0x08004a01
 800497c:	08004a01 	.word	0x08004a01
 8004980:	08004a01 	.word	0x08004a01
 8004984:	08004a01 	.word	0x08004a01
 8004988:	08004a01 	.word	0x08004a01
 800498c:	08004a01 	.word	0x08004a01
 8004990:	08004a09 	.word	0x08004a09
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004a01 	.word	0x08004a01
 800499c:	08004a01 	.word	0x08004a01
 80049a0:	08004a01 	.word	0x08004a01
 80049a4:	08004a01 	.word	0x08004a01
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a01 	.word	0x08004a01
 80049b8:	08004a01 	.word	0x08004a01
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a01 	.word	0x08004a01
 80049c4:	08004a01 	.word	0x08004a01
 80049c8:	08004a01 	.word	0x08004a01
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a09 	.word	0x08004a09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049d8:	3308      	adds	r3, #8
 80049da:	2101      	movs	r1, #1
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fe97 	bl	8006710 <RCCEx_PLL2_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049e8:	e00f      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049ee:	3328      	adds	r3, #40	; 0x28
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 ff3e 	bl	8006874 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a12:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a22:	4a7d      	ldr	r2, [pc, #500]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6553      	str	r3, [r2, #84]	; 0x54
 8004a28:	e003      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f002 0302 	and.w	r3, r2, #2
 8004a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	d042      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d825      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004ab1 	.word	0x08004ab1
 8004a68:	08004a7d 	.word	0x08004a7d
 8004a6c:	08004a93 	.word	0x08004a93
 8004a70:	08004ab1 	.word	0x08004ab1
 8004a74:	08004ab1 	.word	0x08004ab1
 8004a78:	08004ab1 	.word	0x08004ab1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a80:	3308      	adds	r3, #8
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fe43 	bl	8006710 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a90:	e00f      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a96:	3328      	adds	r3, #40	; 0x28
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 feea 	bl	8006874 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004aba:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f023 0107 	bic.w	r1, r3, #7
 8004ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	4a53      	ldr	r2, [pc, #332]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6553      	str	r3, [r2, #84]	; 0x54
 8004ace:	e003      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ad4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 0304 	and.w	r3, r2, #4
 8004ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d044      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	d825      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b59 	.word	0x08004b59
 8004b10:	08004b25 	.word	0x08004b25
 8004b14:	08004b3b 	.word	0x08004b3b
 8004b18:	08004b59 	.word	0x08004b59
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b59 	.word	0x08004b59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b28:	3308      	adds	r3, #8
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fdef 	bl	8006710 <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b38:	e00f      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fe96 	bl	8006874 <RCCEx_PLL3_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004b56:	e000      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	f023 0107 	bic.w	r1, r3, #7
 8004b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b72:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6593      	str	r3, [r2, #88]	; 0x58
 8004b78:	e003      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b7e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f002 0320 	and.w	r3, r2, #32
 8004b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d057      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bae:	d035      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bb4:	d82c      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d031      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d826      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bc6:	d02d      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bcc:	d820      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd2:	d012      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd8:	d81a      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d024      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d115      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004be8:	3308      	adds	r3, #8
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fd8f 	bl	8006710 <RCCEx_PLL2_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bf8:	e017      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bfe:	3328      	adds	r3, #40	; 0x28
 8004c00:	2102      	movs	r1, #2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fe36 	bl	8006874 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004c16:	e008      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004c18:	58024400 	.word	0x58024400
        break;
 8004c1c:	bf00      	nop
 8004c1e:	e004      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c20:	bf00      	nop
 8004c22:	e002      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c24:	bf00      	nop
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c32:	4bc2      	ldr	r3, [pc, #776]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c42:	4abe      	ldr	r2, [pc, #760]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6553      	str	r3, [r2, #84]	; 0x54
 8004c48:	e003      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d055      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c7e:	d033      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004c80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c84:	d82c      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	d02f      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c90:	d826      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c96:	d02b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c9c:	d820      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca2:	d012      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca8:	d81a      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d022      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d115      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb8:	3308      	adds	r3, #8
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fd27 	bl	8006710 <RCCEx_PLL2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cc8:	e015      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cce:	3328      	adds	r3, #40	; 0x28
 8004cd0:	2102      	movs	r1, #2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 fdce 	bl	8006874 <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004ce6:	e006      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ce8:	bf00      	nop
 8004cea:	e004      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004cec:	bf00      	nop
 8004cee:	e002      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cfe:	4b8f      	ldr	r3, [pc, #572]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d0e:	4a8b      	ldr	r2, [pc, #556]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6593      	str	r3, [r2, #88]	; 0x58
 8004d14:	e003      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d34:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d055      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d4a:	d033      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004d4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d50:	d82c      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5c:	d826      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004d5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d62:	d02b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004d64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d68:	d820      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6e:	d012      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d74:	d81a      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d022      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d115      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d84:	3308      	adds	r3, #8
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 fcc1 	bl	8006710 <RCCEx_PLL2_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d94:	e015      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d9a:	3328      	adds	r3, #40	; 0x28
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fd68 	bl	8006874 <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004db2:	e006      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004db4:	bf00      	nop
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dca:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dda:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6593      	str	r3, [r2, #88]	; 0x58
 8004de0:	e003      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004de6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f002 0308 	and.w	r3, r2, #8
 8004df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e00:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d01e      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e1c:	3328      	adds	r3, #40	; 0x28
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fd27 	bl	8006874 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e32:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	4a3e      	ldr	r2, [pc, #248]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f002 0310 	and.w	r3, r2, #16
 8004e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d01e      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e7a:	3328      	adds	r3, #40	; 0x28
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fcf8 	bl	8006874 <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e90:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ebc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d040      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed2:	d022      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed8:	d81b      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d00b      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004ee4:	e015      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eea:	3308      	adds	r3, #8
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fc0e 	bl	8006710 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004efa:	e00f      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f00:	3328      	adds	r3, #40	; 0x28
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fcb5 	bl	8006874 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f34:	4a01      	ldr	r2, [pc, #4]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3a:	e005      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f56:	2300      	movs	r3, #0
 8004f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d03b      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f70:	d01f      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f76:	d818      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7c:	d003      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f82:	d007      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004f84:	e011      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b64      	ldr	r3, [pc, #400]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a63      	ldr	r2, [pc, #396]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f92:	e00f      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f98:	3328      	adds	r3, #40	; 0x28
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 fc69 	bl	8006874 <RCCEx_PLL3_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fcc:	4a52      	ldr	r2, [pc, #328]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	6553      	str	r3, [r2, #84]	; 0x54
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004fe8:	673b      	str	r3, [r7, #112]	; 0x70
 8004fea:	2300      	movs	r3, #0
 8004fec:	677b      	str	r3, [r7, #116]	; 0x74
 8004fee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d031      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d007      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005008:	e011      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500a:	4b43      	ldr	r3, [pc, #268]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a42      	ldr	r2, [pc, #264]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005016:	e00e      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005018:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800501c:	3308      	adds	r3, #8
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fb75 	bl	8006710 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	4a32      	ldr	r2, [pc, #200]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800504e:	430b      	orrs	r3, r1
 8005050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005058:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800505c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005068:	66bb      	str	r3, [r7, #104]	; 0x68
 800506a:	2300      	movs	r3, #0
 800506c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800506e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005072:	460b      	mov	r3, r1
 8005074:	4313      	orrs	r3, r2
 8005076:	d00c      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005078:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800507c:	3328      	adds	r3, #40	; 0x28
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fbf7 	bl	8006874 <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800509e:	663b      	str	r3, [r7, #96]	; 0x60
 80050a0:	2300      	movs	r3, #0
 80050a2:	667b      	str	r3, [r7, #100]	; 0x64
 80050a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d03a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d018      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c0:	d811      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d014      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050cc:	d80b      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d011      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d106      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80050de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050e4:	e008      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005110:	4a01      	ldr	r2, [pc, #4]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005112:	430b      	orrs	r3, r1
 8005114:	6553      	str	r3, [r2, #84]	; 0x54
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005120:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005130:	65bb      	str	r3, [r7, #88]	; 0x58
 8005132:	2300      	movs	r3, #0
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005136:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005140:	4baa      	ldr	r3, [pc, #680]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800514c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514e:	4aa7      	ldr	r2, [pc, #668]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005150:	430b      	orrs	r3, r1
 8005152:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005154:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005160:	653b      	str	r3, [r7, #80]	; 0x50
 8005162:	2300      	movs	r3, #0
 8005164:	657b      	str	r3, [r7, #84]	; 0x54
 8005166:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005170:	4b9e      	ldr	r3, [pc, #632]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005178:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800517c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005180:	4a9a      	ldr	r2, [pc, #616]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005182:	430b      	orrs	r3, r1
 8005184:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005192:	64bb      	str	r3, [r7, #72]	; 0x48
 8005194:	2300      	movs	r3, #0
 8005196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005198:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051a2:	4b92      	ldr	r3, [pc, #584]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80051aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a8e      	ldr	r2, [pc, #568]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80051c2:	643b      	str	r3, [r7, #64]	; 0x40
 80051c4:	2300      	movs	r3, #0
 80051c6:	647b      	str	r3, [r7, #68]	; 0x44
 80051c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051cc:	460b      	mov	r3, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d2:	4b86      	ldr	r3, [pc, #536]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	4a85      	ldr	r2, [pc, #532]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051dc:	6113      	str	r3, [r2, #16]
 80051de:	4b83      	ldr	r3, [pc, #524]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051e0:	6919      	ldr	r1, [r3, #16]
 80051e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051ea:	4a80      	ldr	r2, [pc, #512]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fe:	2300      	movs	r3, #0
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005202:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005206:	460b      	mov	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800520c:	4b77      	ldr	r3, [pc, #476]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005214:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	4a74      	ldr	r2, [pc, #464]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800521c:	430b      	orrs	r3, r1
 800521e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
 8005232:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005236:	460b      	mov	r3, r1
 8005238:	4313      	orrs	r3, r2
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800523c:	4b6b      	ldr	r3, [pc, #428]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005244:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	4a67      	ldr	r2, [pc, #412]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800524e:	430b      	orrs	r3, r1
 8005250:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005252:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	2100      	movs	r1, #0
 800525c:	62b9      	str	r1, [r7, #40]	; 0x28
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d011      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005272:	3308      	adds	r3, #8
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fa4a 	bl	8006710 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005282:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800528e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	2100      	movs	r1, #0
 800529c:	6239      	str	r1, [r7, #32]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b2:	3308      	adds	r3, #8
 80052b4:	2101      	movs	r1, #1
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fa2a 	bl	8006710 <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80052c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	2100      	movs	r1, #0
 80052dc:	61b9      	str	r1, [r7, #24]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d011      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052f2:	3308      	adds	r3, #8
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fa0a 	bl	8006710 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005302:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800530e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	2100      	movs	r1, #0
 800531c:	6139      	str	r1, [r7, #16]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005328:	460b      	mov	r3, r1
 800532a:	4313      	orrs	r3, r2
 800532c:	d011      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005332:	3328      	adds	r3, #40	; 0x28
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fa9c 	bl	8006874 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8005342:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800534e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	2100      	movs	r1, #0
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005368:	460b      	mov	r3, r1
 800536a:	4313      	orrs	r3, r2
 800536c:	d011      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005372:	3328      	adds	r3, #40	; 0x28
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fa7c 	bl	8006874 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005382:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800538e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	2100      	movs	r1, #0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053a8:	460b      	mov	r3, r1
 80053aa:	4313      	orrs	r3, r2
 80053ac:	d011      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b2:	3328      	adds	r3, #40	; 0x28
 80053b4:	2102      	movs	r1, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fa5c 	bl	8006874 <RCCEx_PLL3_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80053c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80053d2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ec:	58024400 	.word	0x58024400

080053f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b090      	sub	sp, #64	; 0x40
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005402:	430b      	orrs	r3, r1
 8005404:	f040 8094 	bne.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005408:	4b9e      	ldr	r3, [pc, #632]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b04      	cmp	r3, #4
 8005416:	f200 8087 	bhi.w	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005435 	.word	0x08005435
 8005424:	0800545d 	.word	0x0800545d
 8005428:	08005485 	.word	0x08005485
 800542c:	08005521 	.word	0x08005521
 8005430:	080054ad 	.word	0x080054ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005434:	4b93      	ldr	r3, [pc, #588]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005440:	d108      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005446:	4618      	mov	r0, r3
 8005448:	f001 f810 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005450:	f000 bd45 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005458:	f000 bd41 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800545c:	4b89      	ldr	r3, [pc, #548]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005468:	d108      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fd54 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005478:	f000 bd31 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005480:	f000 bd2d 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005484:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005490:	d108      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fe94 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054a0:	f000 bd1d 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054a8:	f000 bd19 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054ac:	4b75      	ldr	r3, [pc, #468]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054b6:	4b73      	ldr	r3, [pc, #460]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054c8:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	4a6d      	ldr	r2, [pc, #436]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	e01f      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054dc:	4b69      	ldr	r3, [pc, #420]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f0:	d102      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80054f2:	4b66      	ldr	r3, [pc, #408]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f6:	e011      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054f8:	4b62      	ldr	r3, [pc, #392]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005504:	d106      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550c:	d102      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800550e:	4b60      	ldr	r3, [pc, #384]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005512:	e003      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005518:	f000 bce1 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800551c:	f000 bcdf 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005520:	4b5c      	ldr	r3, [pc, #368]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005524:	f000 bcdb 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800552c:	f000 bcd7 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005534:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005538:	430b      	orrs	r3, r1
 800553a:	f040 80ad 	bne.w	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800553e:	4b51      	ldr	r3, [pc, #324]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005546:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d056      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	f200 8090 	bhi.w	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	2bc0      	cmp	r3, #192	; 0xc0
 800555e:	f000 8088 	beq.w	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2bc0      	cmp	r3, #192	; 0xc0
 8005566:	f200 8088 	bhi.w	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d032      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	f200 8081 	bhi.w	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d014      	beq.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005584:	e079      	b.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005586:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005592:	d108      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005598:	4618      	mov	r0, r3
 800559a:	f000 ff67 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055a2:	f000 bc9c 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055aa:	f000 bc98 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ae:	4b35      	ldr	r3, [pc, #212]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ba:	d108      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055bc:	f107 0318 	add.w	r3, r7, #24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fcab 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ca:	f000 bc88 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d2:	f000 bc84 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055d6:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e2:	d108      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fdeb 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055f2:	f000 bc74 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055fa:	f000 bc70 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055fe:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005606:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d10c      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800561a:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562c:	e01f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	d106      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005648:	e011      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005656:	d106      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565e:	d102      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005664:	e003      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800566a:	f000 bc38 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800566e:	f000 bc36 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005676:	f000 bc32 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800567e:	f000 bc2e 	b.w	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	03d09000 	.word	0x03d09000
 800568c:	003d0900 	.word	0x003d0900
 8005690:	017d7840 	.word	0x017d7840
 8005694:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80056a0:	430b      	orrs	r3, r1
 80056a2:	f040 809c 	bne.w	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80056a6:	4b9e      	ldr	r3, [pc, #632]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b6:	d054      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056be:	f200 808b 	bhi.w	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056c8:	f000 8083 	beq.w	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056d2:	f200 8081 	bhi.w	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056dc:	d02f      	beq.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d878      	bhi.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f2:	d012      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80056f4:	e070      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056f6:	4b8a      	ldr	r3, [pc, #552]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005702:	d107      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f000 feaf 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005712:	e3e4      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e3e1      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005726:	d107      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005728:	f107 0318 	add.w	r3, r7, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fbf5 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005736:	e3d2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800573c:	e3cf      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800573e:	4b78      	ldr	r3, [pc, #480]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574a:	d107      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fd37 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800575a:	e3c0      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005760:	e3bd      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005762:	4b6f      	ldr	r3, [pc, #444]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800576a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800576c:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d10c      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800577e:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	08db      	lsrs	r3, r3, #3
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	4a66      	ldr	r2, [pc, #408]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e01e      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d106      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a6:	d102      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057a8:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	e010      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ba:	d106      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d102      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80057ce:	e386      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057d0:	e385      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057d2:	4b57      	ldr	r3, [pc, #348]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d6:	e382      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e37f      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80057de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80057e6:	430b      	orrs	r3, r1
 80057e8:	f040 80a7 	bne.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057fc:	d055      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005804:	f200 8096 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800580e:	f000 8084 	beq.w	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005818:	f200 808c 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005822:	d030      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582a:	f200 8083 	bhi.w	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800583a:	d012      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800583c:	e07a      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800583e:	4b38      	ldr	r3, [pc, #224]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584a:	d107      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800584c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fe0b 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585a:	e340      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005860:	e33d      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586e:	d107      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005870:	f107 0318 	add.w	r3, r7, #24
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fb51 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800587e:	e32e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e32b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005892:	d107      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fc93 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058a2:	e31c      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a8:	e319      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d10c      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	e01e      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d106      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ee:	d102      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	e010      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005902:	d106      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590a:	d102      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005910:	e002      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005916:	e2e2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005918:	e2e1      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591e:	e2de      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005920:	58024400 	.word	0x58024400
 8005924:	03d09000 	.word	0x03d09000
 8005928:	003d0900 	.word	0x003d0900
 800592c:	017d7840 	.word	0x017d7840
 8005930:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005938:	e2d1      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800593a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005942:	430b      	orrs	r3, r1
 8005944:	f040 809c 	bne.w	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005948:	4b93      	ldr	r3, [pc, #588]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005958:	d054      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005960:	f200 808b 	bhi.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800596a:	f000 8083 	beq.w	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005974:	f200 8081 	bhi.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	d02f      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005986:	d878      	bhi.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d012      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005996:	e070      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005998:	4b7f      	ldr	r3, [pc, #508]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a4:	d107      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fd5e 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b4:	e293      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059ba:	e290      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059bc:	4b76      	ldr	r3, [pc, #472]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c8:	d107      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ca:	f107 0318 	add.w	r3, r7, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 faa4 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d8:	e281      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059de:	e27e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059e0:	4b6d      	ldr	r3, [pc, #436]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ec:	d107      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ee:	f107 030c 	add.w	r3, r7, #12
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fbe6 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059fc:	e26f      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a02:	e26c      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a04:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a0e:	4b62      	ldr	r3, [pc, #392]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a20:	4b5d      	ldr	r3, [pc, #372]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	08db      	lsrs	r3, r3, #3
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	4a5c      	ldr	r2, [pc, #368]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a32:	e01e      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a34:	4b58      	ldr	r3, [pc, #352]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d106      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a48:	d102      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a4a:	4b55      	ldr	r3, [pc, #340]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4e:	e010      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a50:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5c:	d106      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a64:	d102      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a66:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a6a:	e002      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005a70:	e235      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a72:	e234      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a74:	4b4c      	ldr	r3, [pc, #304]	; (8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a78:	e231      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a7e:	e22e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	f040 808f 	bne.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a8e:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9e:	d06b      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa6:	d874      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aae:	d056      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab6:	d86c      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005abe:	d03b      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac6:	d864      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ace:	d021      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad6:	d85c      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005ae6:	e054      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe f9ca 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8005aec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aee:	e1f6      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afc:	d107      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fa0a 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0c:	e1e7      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b12:	e1e4      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d107      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fb4c 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b30:	e1d5      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b36:	e1d2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b38:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b44:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b56:	e1c2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b5c:	e1bf      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d102      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b70:	e1b5      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b76:	e1b2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b78:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b84:	d102      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b8a:	e1a8      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b90:	e1a5      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b96:	e1a2      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	03d09000 	.word	0x03d09000
 8005ba0:	003d0900 	.word	0x003d0900
 8005ba4:	017d7840 	.word	0x017d7840
 8005ba8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	d173      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005bb8:	4b9c      	ldr	r3, [pc, #624]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc8:	d02f      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd0:	d863      	bhi.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bde:	d012      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005be0:	e05b      	b.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005be2:	4b92      	ldr	r3, [pc, #584]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bee:	d107      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf0:	f107 0318 	add.w	r3, r7, #24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f991 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfe:	e16e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c04:	e16b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c06:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c12:	d107      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fad3 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c22:	e15c      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c28:	e159      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c2a:	4b80      	ldr	r3, [pc, #512]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c34:	4b7d      	ldr	r3, [pc, #500]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c46:	4b79      	ldr	r3, [pc, #484]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	4a77      	ldr	r2, [pc, #476]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c58:	e01e      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c5a:	4b74      	ldr	r3, [pc, #464]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c66:	d106      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6e:	d102      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c70:	4b70      	ldr	r3, [pc, #448]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c74:	e010      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c76:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c82:	d106      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c90:	e002      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c96:	e122      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c98:	e121      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9e:	e11e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	d133      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005cac:	4b5f      	ldr	r3, [pc, #380]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc2:	d012      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005cc4:	e023      	b.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cc6:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fbc7 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ce2:	e0fc      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e0f9      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cea:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf8:	f107 0318 	add.w	r3, r7, #24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f90d 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d06:	e0ea      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d0c:	e0e7      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d12:	e0e4      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d18:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	f040 808d 	bne.w	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005d22:	4b42      	ldr	r3, [pc, #264]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d2a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d32:	d06b      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d3a:	d874      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d42:	d056      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d86c      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d52:	d03b      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d5a:	d864      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d62:	d021      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6a:	d85c      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d78:	d004      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005d7a:	e054      	b.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005d7c:	f000 f8b8 	bl	8005ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d80:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d82:	e0ac      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d84:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d90:	d107      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d92:	f107 0318 	add.w	r3, r7, #24
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f8c0 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da0:	e09d      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005da6:	e09a      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fa02 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc4:	e08b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dca:	e088      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d109      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dd8:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	4a13      	ldr	r2, [pc, #76]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dea:	e078      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005df0:	e075      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e04:	e06b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e0a:	e068      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e18:	d102      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e1e:	e05e      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e24:	e05b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e2a:	e058      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	003d0900 	.word	0x003d0900
 8005e38:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e40:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005e44:	430b      	orrs	r3, r1
 8005e46:	d148      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e48:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e58:	d02a      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e60:	d838      	bhi.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6e:	d00d      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005e70:	e030      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e84:	e02b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e8a:	e028      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e8c:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e98:	d107      	bne.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fae4 	bl	800646c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ea8:	e019      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eae:	e016      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ebc:	d107      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ebe:	f107 0318 	add.w	r3, r7, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f82a 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ecc:	e007      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed8:	e001      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3740      	adds	r7, #64	; 0x40
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	017d7840 	.word	0x017d7840

08005ef0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ef4:	f7fd ff94 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	4904      	ldr	r1, [pc, #16]	; (8005f18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	58024400 	.word	0x58024400
 8005f18:	08015f88 	.word	0x08015f88

08005f1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	; 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f24:	4ba1      	ldr	r3, [pc, #644]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f2e:	4b9f      	ldr	r3, [pc, #636]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	0b1b      	lsrs	r3, r3, #12
 8005f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f3a:	4b9c      	ldr	r3, [pc, #624]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f46:	4b99      	ldr	r3, [pc, #612]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	08db      	lsrs	r3, r3, #3
 8005f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8111 	beq.w	800618c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	f000 8083 	beq.w	8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	f200 80a1 	bhi.w	80060bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d056      	beq.n	8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f86:	e099      	b.n	80060bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f88:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d02d      	beq.n	8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f94:	4b85      	ldr	r3, [pc, #532]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	08db      	lsrs	r3, r3, #3
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	4a84      	ldr	r2, [pc, #528]	; (80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fee:	e087      	b.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b6a      	ldr	r3, [pc, #424]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	e065      	b.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b59      	ldr	r3, [pc, #356]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a03 	vldr	s12, [r7, #12]
 800605a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	e043      	b.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608a:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609a:	ed97 6a03 	vldr	s12, [r7, #12]
 800609e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ba:	e021      	b.n	8006100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ce:	4b37      	ldr	r3, [pc, #220]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060de:	ed97 6a03 	vldr	s12, [r7, #12]
 80060e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	0a5b      	lsrs	r3, r3, #9
 8006106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611a:	edd7 6a07 	vldr	s13, [r7, #28]
 800611e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006126:	ee17 2a90 	vmov	r2, s15
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800612e:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006144:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006148:	edd7 6a07 	vldr	s13, [r7, #28]
 800614c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006154:	ee17 2a90 	vmov	r2, s15
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	0e1b      	lsrs	r3, r3, #24
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006176:	edd7 6a07 	vldr	s13, [r7, #28]
 800617a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006182:	ee17 2a90 	vmov	r2, s15
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800618a:	e008      	b.n	800619e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	609a      	str	r2, [r3, #8]
}
 800619e:	bf00      	nop
 80061a0:	3724      	adds	r7, #36	; 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	58024400 	.word	0x58024400
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	46000000 	.word	0x46000000
 80061b8:	4c742400 	.word	0x4c742400
 80061bc:	4a742400 	.word	0x4a742400
 80061c0:	4bbebc20 	.word	0x4bbebc20

080061c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	; 0x24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061cc:	4ba1      	ldr	r3, [pc, #644]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80061d6:	4b9f      	ldr	r3, [pc, #636]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	0d1b      	lsrs	r3, r3, #20
 80061dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061e2:	4b9c      	ldr	r3, [pc, #624]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80061ee:	4b99      	ldr	r3, [pc, #612]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	08db      	lsrs	r3, r3, #3
 80061f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8111 	beq.w	8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b02      	cmp	r3, #2
 8006216:	f000 8083 	beq.w	8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b02      	cmp	r3, #2
 800621e:	f200 80a1 	bhi.w	8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d056      	beq.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800622e:	e099      	b.n	8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006230:	4b88      	ldr	r3, [pc, #544]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02d      	beq.n	8006298 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800623c:	4b85      	ldr	r3, [pc, #532]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	4a84      	ldr	r2, [pc, #528]	; (8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006248:	fa22 f303 	lsr.w	r3, r2, r3
 800624c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a03 	vldr	s12, [r7, #12]
 800627a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800645c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006296:	e087      	b.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006460 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80062be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800645c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062da:	e065      	b.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b59      	ldr	r3, [pc, #356]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006302:	eddf 5a56 	vldr	s11, [pc, #344]	; 800645c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631e:	e043      	b.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800632e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006332:	4b48      	ldr	r3, [pc, #288]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a03 	vldr	s12, [r7, #12]
 8006346:	eddf 5a45 	vldr	s11, [pc, #276]	; 800645c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006362:	e021      	b.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b37      	ldr	r3, [pc, #220]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a03 	vldr	s12, [r7, #12]
 800638a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800645c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	0a5b      	lsrs	r3, r3, #9
 80063ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ce:	ee17 2a90 	vmov	r2, s15
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80063d6:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fc:	ee17 2a90 	vmov	r2, s15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	0e1b      	lsrs	r3, r3, #24
 800640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800641e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642a:	ee17 2a90 	vmov	r2, s15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006432:	e008      	b.n	8006446 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	609a      	str	r2, [r3, #8]
}
 8006446:	bf00      	nop
 8006448:	3724      	adds	r7, #36	; 0x24
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
 8006458:	03d09000 	.word	0x03d09000
 800645c:	46000000 	.word	0x46000000
 8006460:	4c742400 	.word	0x4c742400
 8006464:	4a742400 	.word	0x4a742400
 8006468:	4bbebc20 	.word	0x4bbebc20

0800646c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006474:	4ba0      	ldr	r3, [pc, #640]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800647e:	4b9e      	ldr	r3, [pc, #632]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	091b      	lsrs	r3, r3, #4
 8006484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006488:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800648a:	4b9b      	ldr	r3, [pc, #620]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006494:	4b98      	ldr	r3, [pc, #608]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8111 	beq.w	80066da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	f000 8083 	beq.w	80065c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	f200 80a1 	bhi.w	800660a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d056      	beq.n	8006582 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80064d4:	e099      	b.n	800660a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d6:	4b88      	ldr	r3, [pc, #544]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02d      	beq.n	800653e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064e2:	4b85      	ldr	r3, [pc, #532]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	4a83      	ldr	r2, [pc, #524]	; (80066fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650c:	4b7a      	ldr	r3, [pc, #488]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006514:	ee07 3a90 	vmov	s15, r3
 8006518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006520:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006538:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800653c:	e087      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006548:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006704 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800654c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006550:	4b69      	ldr	r3, [pc, #420]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006560:	ed97 6a03 	vldr	s12, [r7, #12]
 8006564:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006580:	e065      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006708 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006594:	4b58      	ldr	r3, [pc, #352]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c4:	e043      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800670c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80065d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d8:	4b47      	ldr	r3, [pc, #284]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006608:	e021      	b.n	800664e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006614:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006704 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661c:	4b36      	ldr	r3, [pc, #216]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006630:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006700 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800664e:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	0a5b      	lsrs	r3, r3, #9
 8006654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006668:	edd7 6a07 	vldr	s13, [r7, #28]
 800666c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006674:	ee17 2a90 	vmov	r2, s15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800667c:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006696:	edd7 6a07 	vldr	s13, [r7, #28]
 800669a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a2:	ee17 2a90 	vmov	r2, s15
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	0e1b      	lsrs	r3, r3, #24
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d0:	ee17 2a90 	vmov	r2, s15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	3724      	adds	r7, #36	; 0x24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	58024400 	.word	0x58024400
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	46000000 	.word	0x46000000
 8006704:	4c742400 	.word	0x4c742400
 8006708:	4a742400 	.word	0x4a742400
 800670c:	4bbebc20 	.word	0x4bbebc20

08006710 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800671e:	4b53      	ldr	r3, [pc, #332]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b03      	cmp	r3, #3
 8006728:	d101      	bne.n	800672e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e099      	b.n	8006862 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800672e:	4b4f      	ldr	r3, [pc, #316]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a4e      	ldr	r2, [pc, #312]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006734:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800673a:	f7fb faa5 	bl	8001c88 <HAL_GetTick>
 800673e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006740:	e008      	b.n	8006754 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006742:	f7fb faa1 	bl	8001c88 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e086      	b.n	8006862 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006754:	4b45      	ldr	r3, [pc, #276]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006760:	4b42      	ldr	r3, [pc, #264]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	031b      	lsls	r3, r3, #12
 800676e:	493f      	ldr	r1, [pc, #252]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006770:	4313      	orrs	r3, r2
 8006772:	628b      	str	r3, [r1, #40]	; 0x28
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	3b01      	subs	r3, #1
 800677a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	3b01      	subs	r3, #1
 8006784:	025b      	lsls	r3, r3, #9
 8006786:	b29b      	uxth	r3, r3
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	3b01      	subs	r3, #1
 8006790:	041b      	lsls	r3, r3, #16
 8006792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	3b01      	subs	r3, #1
 800679e:	061b      	lsls	r3, r3, #24
 80067a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067a4:	4931      	ldr	r1, [pc, #196]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067aa:	4b30      	ldr	r3, [pc, #192]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	492d      	ldr	r1, [pc, #180]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067bc:	4b2b      	ldr	r3, [pc, #172]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f023 0220 	bic.w	r2, r3, #32
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4928      	ldr	r1, [pc, #160]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067ce:	4b27      	ldr	r3, [pc, #156]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067d4:	f023 0310 	bic.w	r3, r3, #16
 80067d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067da:	4b24      	ldr	r3, [pc, #144]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067de:	4b24      	ldr	r3, [pc, #144]	; (8006870 <RCCEx_PLL2_Config+0x160>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	69d2      	ldr	r2, [r2, #28]
 80067e6:	00d2      	lsls	r2, r2, #3
 80067e8:	4920      	ldr	r1, [pc, #128]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067ee:	4b1f      	ldr	r3, [pc, #124]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	4a1e      	ldr	r2, [pc, #120]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 80067f4:	f043 0310 	orr.w	r3, r3, #16
 80067f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006800:	4b1a      	ldr	r3, [pc, #104]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a19      	ldr	r2, [pc, #100]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800680c:	e00f      	b.n	800682e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d106      	bne.n	8006822 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006814:	4b15      	ldr	r3, [pc, #84]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a14      	ldr	r2, [pc, #80]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006820:	e005      	b.n	800682e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	4a11      	ldr	r2, [pc, #68]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800682c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a0e      	ldr	r2, [pc, #56]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683a:	f7fb fa25 	bl	8001c88 <HAL_GetTick>
 800683e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006840:	e008      	b.n	8006854 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006842:	f7fb fa21 	bl	8001c88 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <RCCEx_PLL2_Config+0x15c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f0      	beq.n	8006842 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
 8006870:	ffff0007 	.word	0xffff0007

08006874 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006882:	4b53      	ldr	r3, [pc, #332]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d101      	bne.n	8006892 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e099      	b.n	80069c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006892:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a4e      	ldr	r2, [pc, #312]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689e:	f7fb f9f3 	bl	8001c88 <HAL_GetTick>
 80068a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068a4:	e008      	b.n	80068b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068a6:	f7fb f9ef 	bl	8001c88 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e086      	b.n	80069c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068b8:	4b45      	ldr	r3, [pc, #276]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068c4:	4b42      	ldr	r3, [pc, #264]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	051b      	lsls	r3, r3, #20
 80068d2:	493f      	ldr	r1, [pc, #252]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	628b      	str	r3, [r1, #40]	; 0x28
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	3b01      	subs	r3, #1
 80068de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	025b      	lsls	r3, r3, #9
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	041b      	lsls	r3, r3, #16
 80068f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	3b01      	subs	r3, #1
 8006902:	061b      	lsls	r3, r3, #24
 8006904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006908:	4931      	ldr	r1, [pc, #196]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800690e:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	492d      	ldr	r1, [pc, #180]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	4928      	ldr	r1, [pc, #160]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	4a26      	ldr	r2, [pc, #152]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800693e:	4b24      	ldr	r3, [pc, #144]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <RCCEx_PLL3_Config+0x160>)
 8006944:	4013      	ands	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	69d2      	ldr	r2, [r2, #28]
 800694a:	00d2      	lsls	r2, r2, #3
 800694c:	4920      	ldr	r1, [pc, #128]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800694e:	4313      	orrs	r3, r2
 8006950:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006952:	4b1f      	ldr	r3, [pc, #124]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	4a19      	ldr	r2, [pc, #100]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800696a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800696e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006970:	e00f      	b.n	8006992 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d106      	bne.n	8006986 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800697e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006984:	e005      	b.n	8006992 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006986:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	4a11      	ldr	r2, [pc, #68]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 800698c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006990:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 8006998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699e:	f7fb f973 	bl	8001c88 <HAL_GetTick>
 80069a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069a4:	e008      	b.n	80069b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069a6:	f7fb f96f 	bl	8001c88 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <RCCEx_PLL3_Config+0x15c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	ffff0007 	.word	0xffff0007

080069d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e075      	b.n	8006ad6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d105      	bne.n	8006a02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fa fe1b 	bl	8001638 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2204      	movs	r2, #4
 8006a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f868 	bl	8006ae0 <HAL_SD_InitCard>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e05d      	b.n	8006ad6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fdcf 	bl	80075c4 <HAL_SD_GetCardStatus>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e052      	b.n	8006ad6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006a30:	7e3b      	ldrb	r3, [r7, #24]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006a36:	7e7b      	ldrb	r3, [r7, #25]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10a      	bne.n	8006a5a <HAL_SD_Init+0x82>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <HAL_SD_Init+0x78>
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a56:	659a      	str	r2, [r3, #88]	; 0x58
 8006a58:	e00b      	b.n	8006a72 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d104      	bne.n	8006a6c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a68:	659a      	str	r2, [r3, #88]	; 0x58
 8006a6a:	e002      	b.n	8006a72 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fe61 	bl	8007740 <HAL_SD_ConfigWideBusOperation>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e026      	b.n	8006ad6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006a88:	f7fb f8fe 	bl	8001c88 <HAL_GetTick>
 8006a8c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006a8e:	e011      	b.n	8006ab4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a90:	f7fb f8fa 	bl	8001c88 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d109      	bne.n	8006ab4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aa6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e010      	b.n	8006ad6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 ff55 	bl	8007964 <HAL_SD_GetCardState>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d1e7      	bne.n	8006a90 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	; 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b08d      	sub	sp, #52	; 0x34
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006af8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006afc:	f04f 0100 	mov.w	r1, #0
 8006b00:	f7fe fc76 	bl	80053f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e070      	b.n	8006c02 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	4a39      	ldr	r2, [pc, #228]	; (8006c0c <HAL_SD_InitCard+0x12c>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681c      	ldr	r4, [r3, #0]
 8006b32:	466a      	mov	r2, sp
 8006b34:	f107 0318 	add.w	r3, r7, #24
 8006b38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006b3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b46:	4620      	mov	r0, r4
 8006b48:	f003 f890 	bl	8009c6c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f003 f8d3 	bl	8009cfc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006b6e:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <HAL_SD_InitCard+0x130>)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	3301      	adds	r3, #1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fb f891 	bl	8001ca0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ffde 	bl	8007b40 <SD_PowerON>
 8006b84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e02e      	b.n	8006c02 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fefd 	bl	80079a4 <SD_InitCard>
 8006baa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e01b      	b.n	8006c02 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f003 f938 	bl	8009e48 <SDMMC_CmdBlockLength>
 8006bd8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00f      	beq.n	8006c00 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0b      	ldr	r2, [pc, #44]	; (8006c14 <HAL_SD_InitCard+0x134>)
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	372c      	adds	r7, #44	; 0x2c
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd90      	pop	{r4, r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	014f8b59 	.word	0x014f8b59
 8006c10:	00012110 	.word	0x00012110
 8006c14:	1fe00fff 	.word	0x1fe00fff

08006c18 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e011      	b.n	8006c4e <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f812 	bl	8007c5c <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fa fd93 	bl	8001764 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	635a      	str	r2, [r3, #52]	; 0x34
  hsd->State = HAL_SD_STATE_RESET;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e08d      	b.n	8006d9c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 8086 	bne.w	8006d9a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	441a      	add	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d907      	bls.n	8006cb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e074      	b.n	8006d9c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	025a      	lsls	r2, r3, #9
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cea:	2390      	movs	r3, #144	; 0x90
 8006cec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 f873 	bl	8009df0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d18:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d90a      	bls.n	8006d46 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2282      	movs	r2, #130	; 0x82
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f003 f8c9 	bl	8009ed4 <SDMMC_CmdReadMultiBlock>
 8006d42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d44:	e009      	b.n	8006d5a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2281      	movs	r2, #129	; 0x81
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 f89b 	bl	8009e8e <SDMMC_CmdReadSingleBlock>
 8006d58:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d012      	beq.n	8006d86 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0f      	ldr	r2, [pc, #60]	; (8006da4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e00a      	b.n	8006d9c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006d94:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e000      	b.n	8006d9c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006d9a:	2302      	movs	r3, #2
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3730      	adds	r7, #48	; 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	1fe00fff 	.word	0x1fe00fff

08006da8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08c      	sub	sp, #48	; 0x30
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d107      	bne.n	8006dd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e08d      	b.n	8006eec <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f040 8086 	bne.w	8006eea <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	441a      	add	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d907      	bls.n	8006e02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e074      	b.n	8006eec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2203      	movs	r2, #3
 8006e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	025a      	lsls	r2, r3, #9
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d002      	beq.n	8006e2e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	025b      	lsls	r3, r3, #9
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	025b      	lsls	r3, r3, #9
 8006e38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e3a:	2390      	movs	r3, #144	; 0x90
 8006e3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f107 0210 	add.w	r2, r7, #16
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 ffcb 	bl	8009df0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e68:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d90a      	bls.n	8006e96 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	22a0      	movs	r2, #160	; 0xa0
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f003 f867 	bl	8009f60 <SDMMC_CmdWriteMultiBlock>
 8006e92:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e94:	e009      	b.n	8006eaa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2290      	movs	r2, #144	; 0x90
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 f839 	bl	8009f1a <SDMMC_CmdWriteSingleBlock>
 8006ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0f      	ldr	r2, [pc, #60]	; (8006ef4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e00a      	b.n	8006eec <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3730      	adds	r7, #48	; 0x30
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	1fe00fff 	.word	0x1fe00fff

08006ef8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d008      	beq.n	8006f26 <HAL_SD_IRQHandler+0x2e>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f908 	bl	8008134 <SD_Read_IT>
 8006f24:	e19a      	b.n	800725c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80ac 	beq.w	800708e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b59      	ldr	r3, [pc, #356]	; (80070b0 <HAL_SD_IRQHandler+0x1b8>)
 8006f4c:	400b      	ands	r3, r1
 8006f4e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d038      	beq.n	8006fec <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_SD_IRQHandler+0x96>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f003 f808 	bl	8009fa8 <SDMMC_CmdStopTransfer>
 8006f98:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f95b 	bl	8007268 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <HAL_SD_IRQHandler+0x1bc>)
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <HAL_SD_IRQHandler+0xe4>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f003 fccd 	bl	800a97c <HAL_SD_RxCpltCallback>
 8006fe2:	e13b      	b.n	800725c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f003 fcbb 	bl	800a960 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fea:	e137      	b.n	800725c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8132 	beq.w	800725c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2200      	movs	r2, #0
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <HAL_SD_IRQHandler+0x12c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d011      	beq.n	8007048 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f002 ffbd 	bl	8009fa8 <SDMMC_CmdStopTransfer>
 800702e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f910 	bl	8007268 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d104      	bne.n	800706a <HAL_SD_IRQHandler+0x172>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f003 fc78 	bl	800a960 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <HAL_SD_IRQHandler+0x18e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80eb 	beq.w	800725c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f003 fc78 	bl	800a97c <HAL_SD_RxCpltCallback>
}
 800708c:	e0e6      	b.n	800725c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00d      	beq.n	80070b8 <HAL_SD_IRQHandler+0x1c0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 f88a 	bl	80081c0 <SD_Write_IT>
 80070ac:	e0d6      	b.n	800725c <HAL_SD_IRQHandler+0x364>
 80070ae:	bf00      	nop
 80070b0:	ffff3ec5 	.word	0xffff3ec5
 80070b4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 809d 	beq.w	8007202 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	f043 0202 	orr.w	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	f043 0208 	orr.w	r2, r3, #8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	f043 0220 	orr.w	r2, r3, #32
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711c:	f003 0310 	and.w	r3, r3, #16
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	f043 0210 	orr.w	r2, r3, #16
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a4b      	ldr	r2, [pc, #300]	; (8007264 <HAL_SD_IRQHandler+0x36c>)
 8007136:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007146:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007156:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007176:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f002 ff13 	bl	8009fa8 <SDMMC_CmdStopTransfer>
 8007182:	4602      	mov	r2, r0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f851 	bl	8007268 <HAL_SD_ErrorCallback>
}
 80071c6:	e049      	b.n	800725c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d044      	beq.n	800725c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d040      	beq.n	800725c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80071e8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f834 	bl	8007268 <HAL_SD_ErrorCallback>
}
 8007200:	e02c      	b.n	800725c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d025      	beq.n	800725c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10c      	bne.n	8007242 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 f82c 	bl	8008290 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007238:	e010      	b.n	800725c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f814 	bl	8008268 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007240:	e00c      	b.n	800725c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f815 	bl	800827c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007252:	e003      	b.n	800725c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fffd 	bl	8008254 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800725a:	e7ff      	b.n	800725c <HAL_SD_IRQHandler+0x364>
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	18000f3a 	.word	0x18000f3a

08007268 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728a:	0f9b      	lsrs	r3, r3, #30
 800728c:	b2da      	uxtb	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007296:	0e9b      	lsrs	r3, r3, #26
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072dc:	0d1b      	lsrs	r3, r3, #20
 80072de:	b29a      	uxth	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fa:	0bdb      	lsrs	r3, r3, #15
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730c:	0b9b      	lsrs	r3, r3, #14
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731e:	0b5b      	lsrs	r3, r3, #13
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007330:	0b1b      	lsrs	r3, r3, #12
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2200      	movs	r2, #0
 8007342:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d163      	bne.n	8007414 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007350:	009a      	lsls	r2, r3, #2
 8007352:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007356:	4013      	ands	r3, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800735c:	0f92      	lsrs	r2, r2, #30
 800735e:	431a      	orrs	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007368:	0edb      	lsrs	r3, r3, #27
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	b2da      	uxtb	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800737a:	0e1b      	lsrs	r3, r3, #24
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	b2da      	uxtb	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738c:	0d5b      	lsrs	r3, r3, #21
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	b2da      	uxtb	r2, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800739e:	0c9b      	lsrs	r3, r3, #18
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b0:	0bdb      	lsrs	r3, r3, #15
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	7e1b      	ldrb	r3, [r3, #24]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	3302      	adds	r3, #2
 80073d4:	2201      	movs	r2, #1
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073de:	fb03 f202 	mul.w	r2, r3, r2
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	7a1b      	ldrb	r3, [r3, #8]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	2201      	movs	r2, #1
 80073f2:	409a      	lsls	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007400:	0a52      	lsrs	r2, r2, #9
 8007402:	fb03 f202 	mul.w	r2, r3, r2
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
 8007412:	e031      	b.n	8007478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	2b01      	cmp	r3, #1
 800741a:	d11d      	bne.n	8007458 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	3301      	adds	r3, #1
 8007438:	029a      	lsls	r2, r3, #10
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800744c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
 8007456:	e00f      	b.n	8007478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a58      	ldr	r2, [pc, #352]	; (80075c0 <HAL_SD_GetCardCSD+0x344>)
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e09d      	b.n	80075b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747c:	0b9b      	lsrs	r3, r3, #14
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	b2da      	uxtb	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748e:	09db      	lsrs	r3, r3, #7
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007496:	b2da      	uxtb	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b0:	0fdb      	lsrs	r3, r3, #31
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074bc:	0f5b      	lsrs	r3, r3, #29
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ce:	0e9b      	lsrs	r3, r3, #26
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e0:	0d9b      	lsrs	r3, r3, #22
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f2:	0d5b      	lsrs	r3, r3, #21
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007522:	0bdb      	lsrs	r3, r3, #15
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007536:	0b9b      	lsrs	r3, r3, #14
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754a:	0b5b      	lsrs	r3, r3, #13
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755e:	0b1b      	lsrs	r3, r3, #12
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007572:	0a9b      	lsrs	r3, r3, #10
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	b2da      	uxtb	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	b2da      	uxtb	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	1fe00fff 	.word	0x1fe00fff

080075c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b094      	sub	sp, #80	; 0x50
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d101      	bne.n	80075e4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0a7      	b.n	8007734 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fb44 	bl	8007c78 <SD_SendSDStatus>
 80075f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80075f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d011      	beq.n	800761c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a4f      	ldr	r2, [pc, #316]	; (800773c <HAL_SD_GetCardStatus+0x178>)
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800761a:	e070      	b.n	80076fe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	099b      	lsrs	r3, r3, #6
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	b2da      	uxtb	r2, r3
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	b29b      	uxth	r3, r3
 8007642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007646:	b29a      	uxth	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	0e1b      	lsrs	r3, r3, #24
 800764c:	b29b      	uxth	r3, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	b29a      	uxth	r2, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	061a      	lsls	r2, r3, #24
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007662:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	0a1b      	lsrs	r3, r3, #8
 8007668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800766c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	0e1b      	lsrs	r3, r3, #24
 8007672:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b2da      	uxtb	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	0d1b      	lsrs	r3, r3, #20
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	b2da      	uxtb	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	0a9b      	lsrs	r3, r3, #10
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007706:	4618      	mov	r0, r3
 8007708:	f002 fb9e 	bl	8009e48 <SDMMC_CmdBlockLength>
 800770c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800770e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a08      	ldr	r2, [pc, #32]	; (800773c <HAL_SD_GetCardStatus+0x178>)
 800771a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007720:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007730:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007734:	4618      	mov	r0, r3
 8007736:	3750      	adds	r7, #80	; 0x50
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	1fe00fff 	.word	0x1fe00fff

08007740 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b08d      	sub	sp, #52	; 0x34
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2203      	movs	r2, #3
 8007754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	2b03      	cmp	r3, #3
 800775e:	d02e      	beq.n	80077be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007766:	d106      	bne.n	8007776 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	635a      	str	r2, [r3, #52]	; 0x34
 8007774:	e029      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777c:	d10a      	bne.n	8007794 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb72 	bl	8007e68 <SD_WideBus_Enable>
 8007784:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	635a      	str	r2, [r3, #52]	; 0x34
 8007792:	e01a      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fbaf 	bl	8007efe <SD_WideBus_Disable>
 80077a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	635a      	str	r2, [r3, #52]	; 0x34
 80077ae:	e00c      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	635a      	str	r2, [r3, #52]	; 0x34
 80077bc:	e005      	b.n	80077ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a5f      	ldr	r2, [pc, #380]	; (8007954 <HAL_SD_ConfigWideBusOperation+0x214>)
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077e0:	e096      	b.n	8007910 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80077e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	f7fd fe01 	bl	80053f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80077ee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8083 	beq.w	80078fe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695a      	ldr	r2, [r3, #20]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4950      	ldr	r1, [pc, #320]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007816:	fba1 1303 	umull	r1, r3, r1, r3
 800781a:	0e1b      	lsrs	r3, r3, #24
 800781c:	429a      	cmp	r2, r3
 800781e:	d303      	bcc.n	8007828 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e05a      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007830:	d103      	bne.n	800783a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e051      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007842:	d126      	bne.n	8007892 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10e      	bne.n	800786a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4a43      	ldr	r2, [pc, #268]	; (800795c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d906      	bls.n	8007862 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4a40      	ldr	r2, [pc, #256]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	0e5b      	lsrs	r3, r3, #25
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	e03d      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	e039      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	fbb2 f3f3 	udiv	r3, r2, r3
 8007876:	4a39      	ldr	r2, [pc, #228]	; (800795c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d906      	bls.n	800788a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4a36      	ldr	r2, [pc, #216]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007880:	fba2 2303 	umull	r2, r3, r2, r3
 8007884:	0e5b      	lsrs	r3, r3, #25
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e029      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e025      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10e      	bne.n	80078b8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4a30      	ldr	r2, [pc, #192]	; (8007960 <HAL_SD_ConfigWideBusOperation+0x220>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d906      	bls.n	80078b0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e016      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	61bb      	str	r3, [r7, #24]
 80078b6:	e012      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	4a26      	ldr	r2, [pc, #152]	; (8007960 <HAL_SD_ConfigWideBusOperation+0x220>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d906      	bls.n	80078d8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	0e1b      	lsrs	r3, r3, #24
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e002      	b.n	80078de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	466a      	mov	r2, sp
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80078f0:	f107 0308 	add.w	r3, r7, #8
 80078f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 f9b8 	bl	8009c6c <SDMMC_Init>
 80078fc:	e008      	b.n	8007910 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007918:	4618      	mov	r0, r3
 800791a:	f002 fa95 	bl	8009e48 <SDMMC_CmdBlockLength>
 800791e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00c      	beq.n	8007940 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_SD_ConfigWideBusOperation+0x214>)
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800794c:	4618      	mov	r0, r3
 800794e:	372c      	adds	r7, #44	; 0x2c
 8007950:	46bd      	mov	sp, r7
 8007952:	bd90      	pop	{r4, r7, pc}
 8007954:	1fe00fff 	.word	0x1fe00fff
 8007958:	55e63b89 	.word	0x55e63b89
 800795c:	02faf080 	.word	0x02faf080
 8007960:	017d7840 	.word	0x017d7840

08007964 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa4e 	bl	8007e18 <SD_SendStatus>
 800797c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	0a5b      	lsrs	r3, r3, #9
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800799a:	693b      	ldr	r3, [r7, #16]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b090      	sub	sp, #64	; 0x40
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80079b0:	f7fa f96a 	bl	8001c88 <HAL_GetTick>
 80079b4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f002 f9c0 	bl	8009d40 <SDMMC_GetPowerState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80079ca:	e0b5      	b.n	8007b38 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d02e      	beq.n	8007a32 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4618      	mov	r0, r3
 80079da:	f002 fc0a 	bl	800a1f2 <SDMMC_CmdSendCID>
 80079de:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80079e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <SD_InitCard+0x46>
    {
      return errorstate;
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e0a6      	b.n	8007b38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f002 f9ea 	bl	8009dca <SDMMC_GetResponse>
 80079f6:	4602      	mov	r2, r0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2104      	movs	r1, #4
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 f9e1 	bl	8009dca <SDMMC_GetResponse>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2108      	movs	r1, #8
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 f9d8 	bl	8009dca <SDMMC_GetResponse>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	210c      	movs	r1, #12
 8007a26:	4618      	mov	r0, r3
 8007a28:	f002 f9cf 	bl	8009dca <SDMMC_GetResponse>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d01d      	beq.n	8007a76 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007a3a:	e019      	b.n	8007a70 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f107 020a 	add.w	r2, r7, #10
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f002 fc12 	bl	800a270 <SDMMC_CmdSetRelAdd>
 8007a4c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	e06f      	b.n	8007b38 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007a58:	f7fa f916 	bl	8001c88 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	f241 3287 	movw	r2, #4999	; 0x1387
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d902      	bls.n	8007a70 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007a6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a6e:	e063      	b.n	8007b38 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0e2      	beq.n	8007a3c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d036      	beq.n	8007aec <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a7e:	897b      	ldrh	r3, [r7, #10]
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f002 fbcc 	bl	800a230 <SDMMC_CmdSendCSD>
 8007a98:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <SD_InitCard+0x100>
    {
      return errorstate;
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	e049      	b.n	8007b38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f002 f98d 	bl	8009dca <SDMMC_GetResponse>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2104      	movs	r1, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f002 f984 	bl	8009dca <SDMMC_GetResponse>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2108      	movs	r1, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 f97b 	bl	8009dca <SDMMC_GetResponse>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	210c      	movs	r1, #12
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f002 f972 	bl	8009dca <SDMMC_GetResponse>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2104      	movs	r1, #4
 8007af2:	4618      	mov	r0, r3
 8007af4:	f002 f969 	bl	8009dca <SDMMC_GetResponse>
 8007af8:	4603      	mov	r3, r0
 8007afa:	0d1a      	lsrs	r2, r3, #20
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b00:	f107 030c 	add.w	r3, r7, #12
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff fbb8 	bl	800727c <HAL_SD_GetCardCSD>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b16:	e00f      	b.n	8007b38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f002 fa7b 	bl	800a020 <SDMMC_CmdSelDesel>
 8007b2a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <SD_InitCard+0x192>
  {
    return errorstate;
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	e000      	b.n	8007b38 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3740      	adds	r7, #64	; 0x40
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f002 fa84 	bl	800a066 <SDMMC_CmdGoIdleState>
 8007b5e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	e072      	b.n	8007c50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 fa97 	bl	800a0a2 <SDMMC_CmdOperCond>
 8007b74:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b7c:	d10d      	bne.n	8007b9a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f002 fa6c 	bl	800a066 <SDMMC_CmdGoIdleState>
 8007b8e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <SD_PowerON+0x60>
    {
      return errorstate;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	e05a      	b.n	8007c50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d137      	bne.n	8007c18 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f002 fa97 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007bb4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02d      	beq.n	8007c18 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bc0:	e046      	b.n	8007c50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f002 fa8a 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007bce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <SD_PowerON+0x9a>
    {
      return errorstate;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e03a      	b.n	8007c50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	491e      	ldr	r1, [pc, #120]	; (8007c58 <SD_PowerON+0x118>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f002 faa1 	bl	800a128 <SDMMC_CmdAppOperCommand>
 8007be6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bf2:	e02d      	b.n	8007c50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f002 f8e5 	bl	8009dca <SDMMC_GetResponse>
 8007c00:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	0fdb      	lsrs	r3, r3, #31
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <SD_PowerON+0xce>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <SD_PowerON+0xd0>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]

    count++;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	3301      	adds	r3, #1
 8007c16:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d802      	bhi.n	8007c28 <SD_PowerON+0xe8>
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0cc      	beq.n	8007bc2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d902      	bls.n	8007c38 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c36:	e00b      	b.n	8007c50 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	c1100000 	.word	0xc1100000

08007c5c <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 f858 	bl	8009d1e <SDMMC_PowerState_OFF>
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c82:	f7fa f801 	bl	8001c88 <HAL_GetTick>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 f899 	bl	8009dca <SDMMC_GetResponse>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca2:	d102      	bne.n	8007caa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ca8:	e0b0      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2140      	movs	r1, #64	; 0x40
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 f8c9 	bl	8009e48 <SDMMC_CmdBlockLength>
 8007cb6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	e0a0      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	041b      	lsls	r3, r3, #16
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f002 fa03 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007cdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	e08d      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007cfa:	2360      	movs	r3, #96	; 0x60
 8007cfc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f107 0208 	add.w	r2, r7, #8
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f002 f86b 	bl	8009df0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f002 faeb 	bl	800a2fa <SDMMC_CmdStatusRegister>
 8007d24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02b      	beq.n	8007d84 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	e069      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d013      	beq.n	8007d6e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007d46:	2300      	movs	r3, #0
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d4a:	e00d      	b.n	8007d68 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 ffb5 	bl	8009cc0 <SDMMC_ReadFIFO>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	601a      	str	r2, [r3, #0]
        pData++;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	3304      	adds	r3, #4
 8007d60:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	3301      	adds	r3, #1
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	d9ee      	bls.n	8007d4c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d6e:	f7f9 ff8b 	bl	8001c88 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d102      	bne.n	8007d84 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d82:	e043      	b.n	8007e0c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0d2      	beq.n	8007d38 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007da0:	2308      	movs	r3, #8
 8007da2:	e033      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007db2:	2302      	movs	r3, #2
 8007db4:	e02a      	b.n	8007e0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d017      	beq.n	8007df4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	e021      	b.n	8007e0c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 ff77 	bl	8009cc0 <SDMMC_ReadFIFO>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	601a      	str	r2, [r3, #0]
    pData++;
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	3304      	adds	r3, #4
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dde:	f7f9 ff53 	bl	8001c88 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d102      	bne.n	8007df4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007df2:	e00b      	b.n	8007e0c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e2      	bne.n	8007dc8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a03      	ldr	r2, [pc, #12]	; (8007e14 <SD_SendSDStatus+0x19c>)
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3730      	adds	r7, #48	; 0x30
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	18000f3a 	.word	0x18000f3a

08007e18 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e2c:	e018      	b.n	8007e60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f002 fa3a 	bl	800a2b4 <SDMMC_CmdSendStatus>
 8007e40:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	e009      	b.n	8007e60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 ffb9 	bl	8009dca <SDMMC_GetResponse>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 ffa3 	bl	8009dca <SDMMC_GetResponse>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e8e:	d102      	bne.n	8007e96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e94:	e02f      	b.n	8007ef6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e96:	f107 030c 	add.w	r3, r7, #12
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f879 	bl	8007f94 <SD_FindSCR>
 8007ea2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	e023      	b.n	8007ef6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01c      	beq.n	8007ef2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f002 f90c 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007eca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	e00f      	b.n	8007ef6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2102      	movs	r1, #2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 f943 	bl	800a168 <SDMMC_CmdBusWidth>
 8007ee2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e003      	b.n	8007ef6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e001      	b.n	8007ef6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ef2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b086      	sub	sp, #24
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 ff58 	bl	8009dca <SDMMC_GetResponse>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f24:	d102      	bne.n	8007f2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f2a:	e02f      	b.n	8007f8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f2c:	f107 030c 	add.w	r3, r7, #12
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f82e 	bl	8007f94 <SD_FindSCR>
 8007f38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	e023      	b.n	8007f8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01c      	beq.n	8007f88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f002 f8c1 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007f60:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	e00f      	b.n	8007f8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f002 f8f8 	bl	800a168 <SDMMC_CmdBusWidth>
 8007f78:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	e003      	b.n	8007f8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e001      	b.n	8007f8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08e      	sub	sp, #56	; 0x38
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f9e:	f7f9 fe73 	bl	8001c88 <HAL_GetTick>
 8007fa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2108      	movs	r1, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 ff44 	bl	8009e48 <SDMMC_CmdBlockLength>
 8007fc0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <SD_FindSCR+0x38>
  {
    return errorstate;
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	e0ad      	b.n	8008128 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f002 f882 	bl	800a0e2 <SDMMC_CmdAppCommand>
 8007fde:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <SD_FindSCR+0x56>
  {
    return errorstate;
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	e09e      	b.n	8008128 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fea:	f04f 33ff 	mov.w	r3, #4294967295
 8007fee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007ff4:	2330      	movs	r3, #48	; 0x30
 8007ff6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008000:	2301      	movs	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f107 0210 	add.w	r2, r7, #16
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f001 feee 	bl	8009df0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f002 f8c8 	bl	800a1ae <SDMMC_CmdSendSCR>
 800801e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d027      	beq.n	8008076 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	e07e      	b.n	8008128 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d113      	bne.n	8008060 <SD_FindSCR+0xcc>
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	2b00      	cmp	r3, #0
 800803c:	d110      	bne.n	8008060 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fe3c 	bl	8009cc0 <SDMMC_ReadFIFO>
 8008048:	4603      	mov	r3, r0
 800804a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fe35 	bl	8009cc0 <SDMMC_ReadFIFO>
 8008056:	4603      	mov	r3, r0
 8008058:	60fb      	str	r3, [r7, #12]
      index++;
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	3301      	adds	r3, #1
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008060:	f7f9 fe12 	bl	8001c88 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d102      	bne.n	8008076 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008074:	e058      	b.n	8008128 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800807c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0d1      	beq.n	800802a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2208      	movs	r2, #8
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800809c:	2308      	movs	r3, #8
 800809e:	e043      	b.n	8008128 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2202      	movs	r2, #2
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80080b6:	2302      	movs	r3, #2
 80080b8:	e036      	b.n	8008128 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2220      	movs	r2, #32
 80080ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80080d0:	2320      	movs	r3, #32
 80080d2:	e029      	b.n	8008128 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a15      	ldr	r2, [pc, #84]	; (8008130 <SD_FindSCR+0x19c>)
 80080da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	061a      	lsls	r2, r3, #24
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	0a1b      	lsrs	r3, r3, #8
 80080ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	601a      	str	r2, [r3, #0]
    scr++;
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	3304      	adds	r3, #4
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	061a      	lsls	r2, r3, #24
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008110:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800811a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	0e1b      	lsrs	r3, r3, #24
 8008120:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3738      	adds	r7, #56	; 0x38
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	18000f3a 	.word	0x18000f3a

08008134 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	2b1f      	cmp	r3, #31
 8008148:	d936      	bls.n	80081b8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e027      	b.n	80081a0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fdb3 	bl	8009cc0 <SDMMC_ReadFIFO>
 800815a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	b2da      	uxtb	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3301      	adds	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	b2da      	uxtb	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3301      	adds	r3, #1
 8008178:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	0c1b      	lsrs	r3, r3, #16
 800817e:	b2da      	uxtb	r2, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	3301      	adds	r3, #1
 8008188:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	b2da      	uxtb	r2, r3
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	3301      	adds	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	d9d4      	bls.n	8008150 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f1a3 0220 	sub.w	r2, r3, #32
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80081b8:	bf00      	nop
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	2b1f      	cmp	r3, #31
 80081d4:	d93a      	bls.n	800824c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e02b      	b.n	8008234 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3301      	adds	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	021a      	lsls	r2, r3, #8
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3301      	adds	r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	041a      	lsls	r2, r3, #16
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3301      	adds	r3, #1
 800820a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	061a      	lsls	r2, r3, #24
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f107 020c 	add.w	r2, r7, #12
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fd56 	bl	8009cda <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3301      	adds	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b07      	cmp	r3, #7
 8008238:	d9d0      	bls.n	80081dc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	f1a3 0220 	sub.w	r2, r3, #32
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	621a      	str	r2, [r3, #32]
  }
}
 800824c:	bf00      	nop
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e049      	b.n	800834a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f89d 	bl	800840a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f000 fa66 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	f241 1311 	movw	r3, #4369	; 0x1111
 800836c:	4013      	ands	r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10f      	bne.n	8008392 <HAL_TIM_Base_DeInit+0x40>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a1a      	ldr	r2, [r3, #32]
 8008378:	f240 4344 	movw	r3, #1092	; 0x444
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d107      	bne.n	8008392 <HAL_TIM_Base_DeInit+0x40>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f843 	bl	800841e <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d001      	beq.n	800844c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e054      	b.n	80084f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a26      	ldr	r2, [pc, #152]	; (8008504 <HAL_TIM_Base_Start_IT+0xd0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d022      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008476:	d01d      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a22      	ldr	r2, [pc, #136]	; (8008508 <HAL_TIM_Base_Start_IT+0xd4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d018      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a21      	ldr	r2, [pc, #132]	; (800850c <HAL_TIM_Base_Start_IT+0xd8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <HAL_TIM_Base_Start_IT+0xdc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00e      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <HAL_TIM_Base_Start_IT+0xe0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d009      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1c      	ldr	r2, [pc, #112]	; (8008518 <HAL_TIM_Base_Start_IT+0xe4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d004      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x80>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	; (800851c <HAL_TIM_Base_Start_IT+0xe8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d115      	bne.n	80084e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	4b19      	ldr	r3, [pc, #100]	; (8008520 <HAL_TIM_Base_Start_IT+0xec>)
 80084bc:	4013      	ands	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b06      	cmp	r3, #6
 80084c4:	d015      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0xbe>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084cc:	d011      	beq.n	80084f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f042 0201 	orr.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084de:	e008      	b.n	80084f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	e000      	b.n	80084f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40010000 	.word	0x40010000
 8008508:	40000400 	.word	0x40000400
 800850c:	40000800 	.word	0x40000800
 8008510:	40000c00 	.word	0x40000c00
 8008514:	40010400 	.word	0x40010400
 8008518:	40001800 	.word	0x40001800
 800851c:	40014000 	.word	0x40014000
 8008520:	00010007 	.word	0x00010007

08008524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d122      	bne.n	8008580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b02      	cmp	r3, #2
 8008546:	d11b      	bne.n	8008580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0202 	mvn.w	r2, #2
 8008550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f905 	bl	8008776 <HAL_TIM_IC_CaptureCallback>
 800856c:	e005      	b.n	800857a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8f7 	bl	8008762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f908 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b04      	cmp	r3, #4
 800858c:	d122      	bne.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b04      	cmp	r3, #4
 800859a:	d11b      	bne.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0204 	mvn.w	r2, #4
 80085a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8db 	bl	8008776 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8cd 	bl	8008762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f8de 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d122      	bne.n	8008628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d11b      	bne.n	8008628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0208 	mvn.w	r2, #8
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2204      	movs	r2, #4
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8b1 	bl	8008776 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8a3 	bl	8008762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8b4 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b10      	cmp	r3, #16
 8008634:	d122      	bne.n	800867c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b10      	cmp	r3, #16
 8008642:	d11b      	bne.n	800867c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0210 	mvn.w	r2, #16
 800864c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2208      	movs	r2, #8
 8008652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f887 	bl	8008776 <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f879 	bl	8008762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f88a 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d10e      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	d107      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0201 	mvn.w	r2, #1
 80086a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7f8 fe88 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d10e      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d107      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f914 	bl	80088fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e2:	d10e      	bne.n	8008702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ee:	2b80      	cmp	r3, #128	; 0x80
 80086f0:	d107      	bne.n	8008702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f907 	bl	8008910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870c:	2b40      	cmp	r3, #64	; 0x40
 800870e:	d10e      	bne.n	800872e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d107      	bne.n	800872e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f838 	bl	800879e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b20      	cmp	r3, #32
 800873a:	d10e      	bne.n	800875a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b20      	cmp	r3, #32
 8008748:	d107      	bne.n	800875a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f06f 0220 	mvn.w	r2, #32
 8008752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f8c7 	bl	80088e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a40      	ldr	r2, [pc, #256]	; (80088c8 <TIM_Base_SetConfig+0x114>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d013      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d2:	d00f      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a3d      	ldr	r2, [pc, #244]	; (80088cc <TIM_Base_SetConfig+0x118>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00b      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a3c      	ldr	r2, [pc, #240]	; (80088d0 <TIM_Base_SetConfig+0x11c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d007      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a3b      	ldr	r2, [pc, #236]	; (80088d4 <TIM_Base_SetConfig+0x120>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a3a      	ldr	r2, [pc, #232]	; (80088d8 <TIM_Base_SetConfig+0x124>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d108      	bne.n	8008806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2f      	ldr	r2, [pc, #188]	; (80088c8 <TIM_Base_SetConfig+0x114>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01f      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008814:	d01b      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2c      	ldr	r2, [pc, #176]	; (80088cc <TIM_Base_SetConfig+0x118>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d017      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2b      	ldr	r2, [pc, #172]	; (80088d0 <TIM_Base_SetConfig+0x11c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d013      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <TIM_Base_SetConfig+0x120>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00f      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a29      	ldr	r2, [pc, #164]	; (80088d8 <TIM_Base_SetConfig+0x124>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00b      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a28      	ldr	r2, [pc, #160]	; (80088dc <TIM_Base_SetConfig+0x128>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d007      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a27      	ldr	r2, [pc, #156]	; (80088e0 <TIM_Base_SetConfig+0x12c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_Base_SetConfig+0x9a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a26      	ldr	r2, [pc, #152]	; (80088e4 <TIM_Base_SetConfig+0x130>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d108      	bne.n	8008860 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a10      	ldr	r2, [pc, #64]	; (80088c8 <TIM_Base_SetConfig+0x114>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00f      	beq.n	80088ac <TIM_Base_SetConfig+0xf8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a12      	ldr	r2, [pc, #72]	; (80088d8 <TIM_Base_SetConfig+0x124>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00b      	beq.n	80088ac <TIM_Base_SetConfig+0xf8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a11      	ldr	r2, [pc, #68]	; (80088dc <TIM_Base_SetConfig+0x128>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_Base_SetConfig+0xf8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a10      	ldr	r2, [pc, #64]	; (80088e0 <TIM_Base_SetConfig+0x12c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_Base_SetConfig+0xf8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <TIM_Base_SetConfig+0x130>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d103      	bne.n	80088b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	615a      	str	r2, [r3, #20]
}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40000c00 	.word	0x40000c00
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800

080088e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e042      	b.n	80089bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7f8 ff35 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2224      	movs	r2, #36	; 0x24
 8008952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8fa 	bl	8008b60 <UART_SetConfig>
 800896c:	4603      	mov	r3, r0
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e022      	b.n	80089bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fe56 	bl	8009630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0201 	orr.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fedd 	bl	8009774 <UART_CheckIdleState>
 80089ba:	4603      	mov	r3, r0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e031      	b.n	8008a3a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2224      	movs	r2, #36	; 0x24
 80089da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0201 	bic.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2200      	movs	r2, #0
 8008a04:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7f8 ff40 	bl	800188c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08a      	sub	sp, #40	; 0x28
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d17b      	bne.n	8008b54 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_UART_Transmit+0x26>
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e074      	b.n	8008b56 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2221      	movs	r2, #33	; 0x21
 8008a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7c:	f7f9 f904 	bl	8001c88 <HAL_GetTick>
 8008a80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d108      	bne.n	8008aae <HAL_UART_Transmit+0x6c>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e003      	b.n	8008ab6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ab6:	e030      	b.n	8008b1a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 ff00 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e03d      	b.n	8008b56 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	3302      	adds	r3, #2
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e007      	b.n	8008b08 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1c8      	bne.n	8008ab8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2140      	movs	r1, #64	; 0x40
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fec9 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e006      	b.n	8008b56 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b64:	b092      	sub	sp, #72	; 0x48
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4bbe      	ldr	r3, [pc, #760]	; (8008e88 <UART_SetConfig+0x328>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4ab3      	ldr	r2, [pc, #716]	; (8008e8c <UART_SetConfig+0x32c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d004      	beq.n	8008bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	4baf      	ldr	r3, [pc, #700]	; (8008e90 <UART_SetConfig+0x330>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	f023 010f 	bic.w	r1, r3, #15
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4aa6      	ldr	r2, [pc, #664]	; (8008e94 <UART_SetConfig+0x334>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d177      	bne.n	8008cf0 <UART_SetConfig+0x190>
 8008c00:	4ba5      	ldr	r3, [pc, #660]	; (8008e98 <UART_SetConfig+0x338>)
 8008c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c08:	2b28      	cmp	r3, #40	; 0x28
 8008c0a:	d86d      	bhi.n	8008ce8 <UART_SetConfig+0x188>
 8008c0c:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0xb4>)
 8008c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c12:	bf00      	nop
 8008c14:	08008cb9 	.word	0x08008cb9
 8008c18:	08008ce9 	.word	0x08008ce9
 8008c1c:	08008ce9 	.word	0x08008ce9
 8008c20:	08008ce9 	.word	0x08008ce9
 8008c24:	08008ce9 	.word	0x08008ce9
 8008c28:	08008ce9 	.word	0x08008ce9
 8008c2c:	08008ce9 	.word	0x08008ce9
 8008c30:	08008ce9 	.word	0x08008ce9
 8008c34:	08008cc1 	.word	0x08008cc1
 8008c38:	08008ce9 	.word	0x08008ce9
 8008c3c:	08008ce9 	.word	0x08008ce9
 8008c40:	08008ce9 	.word	0x08008ce9
 8008c44:	08008ce9 	.word	0x08008ce9
 8008c48:	08008ce9 	.word	0x08008ce9
 8008c4c:	08008ce9 	.word	0x08008ce9
 8008c50:	08008ce9 	.word	0x08008ce9
 8008c54:	08008cc9 	.word	0x08008cc9
 8008c58:	08008ce9 	.word	0x08008ce9
 8008c5c:	08008ce9 	.word	0x08008ce9
 8008c60:	08008ce9 	.word	0x08008ce9
 8008c64:	08008ce9 	.word	0x08008ce9
 8008c68:	08008ce9 	.word	0x08008ce9
 8008c6c:	08008ce9 	.word	0x08008ce9
 8008c70:	08008ce9 	.word	0x08008ce9
 8008c74:	08008cd1 	.word	0x08008cd1
 8008c78:	08008ce9 	.word	0x08008ce9
 8008c7c:	08008ce9 	.word	0x08008ce9
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008ce9 	.word	0x08008ce9
 8008c88:	08008ce9 	.word	0x08008ce9
 8008c8c:	08008ce9 	.word	0x08008ce9
 8008c90:	08008ce9 	.word	0x08008ce9
 8008c94:	08008cd9 	.word	0x08008cd9
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008ce9 	.word	0x08008ce9
 8008ca0:	08008ce9 	.word	0x08008ce9
 8008ca4:	08008ce9 	.word	0x08008ce9
 8008ca8:	08008ce9 	.word	0x08008ce9
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008ce9 	.word	0x08008ce9
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e222      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e21e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e21a      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e216      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008cd8:	2320      	movs	r3, #32
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e212      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e20e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008ce8:	2380      	movs	r3, #128	; 0x80
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cee:	e20a      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a69      	ldr	r2, [pc, #420]	; (8008e9c <UART_SetConfig+0x33c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d130      	bne.n	8008d5c <UART_SetConfig+0x1fc>
 8008cfa:	4b67      	ldr	r3, [pc, #412]	; (8008e98 <UART_SetConfig+0x338>)
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	f003 0307 	and.w	r3, r3, #7
 8008d02:	2b05      	cmp	r3, #5
 8008d04:	d826      	bhi.n	8008d54 <UART_SetConfig+0x1f4>
 8008d06:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <UART_SetConfig+0x1ac>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d25 	.word	0x08008d25
 8008d10:	08008d2d 	.word	0x08008d2d
 8008d14:	08008d35 	.word	0x08008d35
 8008d18:	08008d3d 	.word	0x08008d3d
 8008d1c:	08008d45 	.word	0x08008d45
 8008d20:	08008d4d 	.word	0x08008d4d
 8008d24:	2300      	movs	r3, #0
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2a:	e1ec      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d32:	e1e8      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e1e4      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e1e0      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d44:	2320      	movs	r3, #32
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e1dc      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d4c:	2340      	movs	r3, #64	; 0x40
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e1d8      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d54:	2380      	movs	r3, #128	; 0x80
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e1d4      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a4f      	ldr	r2, [pc, #316]	; (8008ea0 <UART_SetConfig+0x340>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d130      	bne.n	8008dc8 <UART_SetConfig+0x268>
 8008d66:	4b4c      	ldr	r3, [pc, #304]	; (8008e98 <UART_SetConfig+0x338>)
 8008d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b05      	cmp	r3, #5
 8008d70:	d826      	bhi.n	8008dc0 <UART_SetConfig+0x260>
 8008d72:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <UART_SetConfig+0x218>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d91 	.word	0x08008d91
 8008d7c:	08008d99 	.word	0x08008d99
 8008d80:	08008da1 	.word	0x08008da1
 8008d84:	08008da9 	.word	0x08008da9
 8008d88:	08008db1 	.word	0x08008db1
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d96:	e1b6      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e1b2      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e1ae      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e1aa      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008db0:	2320      	movs	r3, #32
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e1a6      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e1a2      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008dc0:	2380      	movs	r3, #128	; 0x80
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e19e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a35      	ldr	r2, [pc, #212]	; (8008ea4 <UART_SetConfig+0x344>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d130      	bne.n	8008e34 <UART_SetConfig+0x2d4>
 8008dd2:	4b31      	ldr	r3, [pc, #196]	; (8008e98 <UART_SetConfig+0x338>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d826      	bhi.n	8008e2c <UART_SetConfig+0x2cc>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0x284>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008dfd 	.word	0x08008dfd
 8008de8:	08008e05 	.word	0x08008e05
 8008dec:	08008e0d 	.word	0x08008e0d
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e02:	e180      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0a:	e17c      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e12:	e178      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e174      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e170      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e16c      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e168      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a1b      	ldr	r2, [pc, #108]	; (8008ea8 <UART_SetConfig+0x348>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d142      	bne.n	8008ec4 <UART_SetConfig+0x364>
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <UART_SetConfig+0x338>)
 8008e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d838      	bhi.n	8008ebc <UART_SetConfig+0x35c>
 8008e4a:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <UART_SetConfig+0x2f0>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e69 	.word	0x08008e69
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008ead 	.word	0x08008ead
 8008e64:	08008eb5 	.word	0x08008eb5
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6e:	e14a      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e76:	e146      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7e:	e142      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e13e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008e88:	cfff69f3 	.word	0xcfff69f3
 8008e8c:	58000c00 	.word	0x58000c00
 8008e90:	11fff4ff 	.word	0x11fff4ff
 8008e94:	40011000 	.word	0x40011000
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	40004400 	.word	0x40004400
 8008ea0:	40004800 	.word	0x40004800
 8008ea4:	40004c00 	.word	0x40004c00
 8008ea8:	40005000 	.word	0x40005000
 8008eac:	2320      	movs	r3, #32
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb2:	e128      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008eb4:	2340      	movs	r3, #64	; 0x40
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eba:	e124      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008ebc:	2380      	movs	r3, #128	; 0x80
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec2:	e120      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4acb      	ldr	r2, [pc, #812]	; (80091f8 <UART_SetConfig+0x698>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d176      	bne.n	8008fbc <UART_SetConfig+0x45c>
 8008ece:	4bcb      	ldr	r3, [pc, #812]	; (80091fc <UART_SetConfig+0x69c>)
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed6:	2b28      	cmp	r3, #40	; 0x28
 8008ed8:	d86c      	bhi.n	8008fb4 <UART_SetConfig+0x454>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0x380>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f85 	.word	0x08008f85
 8008ee4:	08008fb5 	.word	0x08008fb5
 8008ee8:	08008fb5 	.word	0x08008fb5
 8008eec:	08008fb5 	.word	0x08008fb5
 8008ef0:	08008fb5 	.word	0x08008fb5
 8008ef4:	08008fb5 	.word	0x08008fb5
 8008ef8:	08008fb5 	.word	0x08008fb5
 8008efc:	08008fb5 	.word	0x08008fb5
 8008f00:	08008f8d 	.word	0x08008f8d
 8008f04:	08008fb5 	.word	0x08008fb5
 8008f08:	08008fb5 	.word	0x08008fb5
 8008f0c:	08008fb5 	.word	0x08008fb5
 8008f10:	08008fb5 	.word	0x08008fb5
 8008f14:	08008fb5 	.word	0x08008fb5
 8008f18:	08008fb5 	.word	0x08008fb5
 8008f1c:	08008fb5 	.word	0x08008fb5
 8008f20:	08008f95 	.word	0x08008f95
 8008f24:	08008fb5 	.word	0x08008fb5
 8008f28:	08008fb5 	.word	0x08008fb5
 8008f2c:	08008fb5 	.word	0x08008fb5
 8008f30:	08008fb5 	.word	0x08008fb5
 8008f34:	08008fb5 	.word	0x08008fb5
 8008f38:	08008fb5 	.word	0x08008fb5
 8008f3c:	08008fb5 	.word	0x08008fb5
 8008f40:	08008f9d 	.word	0x08008f9d
 8008f44:	08008fb5 	.word	0x08008fb5
 8008f48:	08008fb5 	.word	0x08008fb5
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008fb5 	.word	0x08008fb5
 8008f54:	08008fb5 	.word	0x08008fb5
 8008f58:	08008fb5 	.word	0x08008fb5
 8008f5c:	08008fb5 	.word	0x08008fb5
 8008f60:	08008fa5 	.word	0x08008fa5
 8008f64:	08008fb5 	.word	0x08008fb5
 8008f68:	08008fb5 	.word	0x08008fb5
 8008f6c:	08008fb5 	.word	0x08008fb5
 8008f70:	08008fb5 	.word	0x08008fb5
 8008f74:	08008fb5 	.word	0x08008fb5
 8008f78:	08008fb5 	.word	0x08008fb5
 8008f7c:	08008fb5 	.word	0x08008fb5
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e0bc      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e0b8      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e0b4      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e0b0      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e0ac      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008fac:	2340      	movs	r3, #64	; 0x40
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e0a8      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e0a4      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a8f      	ldr	r2, [pc, #572]	; (8009200 <UART_SetConfig+0x6a0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d130      	bne.n	8009028 <UART_SetConfig+0x4c8>
 8008fc6:	4b8d      	ldr	r3, [pc, #564]	; (80091fc <UART_SetConfig+0x69c>)
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d826      	bhi.n	8009020 <UART_SetConfig+0x4c0>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <UART_SetConfig+0x478>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff9 	.word	0x08008ff9
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009019 	.word	0x08009019
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff6:	e086      	b.n	8009106 <UART_SetConfig+0x5a6>
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e082      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009000:	2308      	movs	r3, #8
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e07e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009008:	2310      	movs	r3, #16
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e07a      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009010:	2320      	movs	r3, #32
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e076      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e072      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009020:	2380      	movs	r3, #128	; 0x80
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e06e      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a75      	ldr	r2, [pc, #468]	; (8009204 <UART_SetConfig+0x6a4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d130      	bne.n	8009094 <UART_SetConfig+0x534>
 8009032:	4b72      	ldr	r3, [pc, #456]	; (80091fc <UART_SetConfig+0x69c>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b05      	cmp	r3, #5
 800903c:	d826      	bhi.n	800908c <UART_SetConfig+0x52c>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <UART_SetConfig+0x4e4>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	0800905d 	.word	0x0800905d
 8009048:	08009065 	.word	0x08009065
 800904c:	0800906d 	.word	0x0800906d
 8009050:	08009075 	.word	0x08009075
 8009054:	0800907d 	.word	0x0800907d
 8009058:	08009085 	.word	0x08009085
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e050      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e04c      	b.n	8009106 <UART_SetConfig+0x5a6>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e048      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e044      	b.n	8009106 <UART_SetConfig+0x5a6>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e040      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009084:	2340      	movs	r3, #64	; 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e03c      	b.n	8009106 <UART_SetConfig+0x5a6>
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e038      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a5b      	ldr	r2, [pc, #364]	; (8009208 <UART_SetConfig+0x6a8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d130      	bne.n	8009100 <UART_SetConfig+0x5a0>
 800909e:	4b57      	ldr	r3, [pc, #348]	; (80091fc <UART_SetConfig+0x69c>)
 80090a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d826      	bhi.n	80090f8 <UART_SetConfig+0x598>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x550>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	080090e9 	.word	0x080090e9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2302      	movs	r3, #2
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e01a      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e016      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e012      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e00e      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e00a      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e006      	b.n	8009106 <UART_SetConfig+0x5a6>
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fe:	e002      	b.n	8009106 <UART_SetConfig+0x5a6>
 8009100:	2380      	movs	r3, #128	; 0x80
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a3f      	ldr	r2, [pc, #252]	; (8009208 <UART_SetConfig+0x6a8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	f040 80f8 	bne.w	8009302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009112:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009116:	2b20      	cmp	r3, #32
 8009118:	dc46      	bgt.n	80091a8 <UART_SetConfig+0x648>
 800911a:	2b02      	cmp	r3, #2
 800911c:	f2c0 8082 	blt.w	8009224 <UART_SetConfig+0x6c4>
 8009120:	3b02      	subs	r3, #2
 8009122:	2b1e      	cmp	r3, #30
 8009124:	d87e      	bhi.n	8009224 <UART_SetConfig+0x6c4>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <UART_SetConfig+0x5cc>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091af 	.word	0x080091af
 8009130:	08009225 	.word	0x08009225
 8009134:	080091b7 	.word	0x080091b7
 8009138:	08009225 	.word	0x08009225
 800913c:	08009225 	.word	0x08009225
 8009140:	08009225 	.word	0x08009225
 8009144:	080091c7 	.word	0x080091c7
 8009148:	08009225 	.word	0x08009225
 800914c:	08009225 	.word	0x08009225
 8009150:	08009225 	.word	0x08009225
 8009154:	08009225 	.word	0x08009225
 8009158:	08009225 	.word	0x08009225
 800915c:	08009225 	.word	0x08009225
 8009160:	08009225 	.word	0x08009225
 8009164:	080091d7 	.word	0x080091d7
 8009168:	08009225 	.word	0x08009225
 800916c:	08009225 	.word	0x08009225
 8009170:	08009225 	.word	0x08009225
 8009174:	08009225 	.word	0x08009225
 8009178:	08009225 	.word	0x08009225
 800917c:	08009225 	.word	0x08009225
 8009180:	08009225 	.word	0x08009225
 8009184:	08009225 	.word	0x08009225
 8009188:	08009225 	.word	0x08009225
 800918c:	08009225 	.word	0x08009225
 8009190:	08009225 	.word	0x08009225
 8009194:	08009225 	.word	0x08009225
 8009198:	08009225 	.word	0x08009225
 800919c:	08009225 	.word	0x08009225
 80091a0:	08009225 	.word	0x08009225
 80091a4:	08009217 	.word	0x08009217
 80091a8:	2b40      	cmp	r3, #64	; 0x40
 80091aa:	d037      	beq.n	800921c <UART_SetConfig+0x6bc>
 80091ac:	e03a      	b.n	8009224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091ae:	f7fc fe9f 	bl	8005ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 80091b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091b4:	e03c      	b.n	8009230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc feae 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c4:	e034      	b.n	8009230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fc fffa 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d4:	e02c      	b.n	8009230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <UART_SetConfig+0x69c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d016      	beq.n	8009210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <UART_SetConfig+0x69c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	08db      	lsrs	r3, r3, #3
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	4a07      	ldr	r2, [pc, #28]	; (800920c <UART_SetConfig+0x6ac>)
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091f4:	e01c      	b.n	8009230 <UART_SetConfig+0x6d0>
 80091f6:	bf00      	nop
 80091f8:	40011400 	.word	0x40011400
 80091fc:	58024400 	.word	0x58024400
 8009200:	40007800 	.word	0x40007800
 8009204:	40007c00 	.word	0x40007c00
 8009208:	58000c00 	.word	0x58000c00
 800920c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009210:	4b9d      	ldr	r3, [pc, #628]	; (8009488 <UART_SetConfig+0x928>)
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009214:	e00c      	b.n	8009230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009216:	4b9d      	ldr	r3, [pc, #628]	; (800948c <UART_SetConfig+0x92c>)
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800921a:	e009      	b.n	8009230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009222:	e005      	b.n	8009230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800922e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 81de 	beq.w	80095f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	4a94      	ldr	r2, [pc, #592]	; (8009490 <UART_SetConfig+0x930>)
 800923e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009242:	461a      	mov	r2, r3
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	fbb3 f3f2 	udiv	r3, r3, r2
 800924a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	4613      	mov	r3, r2
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	4413      	add	r3, r2
 8009256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009258:	429a      	cmp	r2, r3
 800925a:	d305      	bcc.n	8009268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009264:	429a      	cmp	r2, r3
 8009266:	d903      	bls.n	8009270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800926e:	e1c1      	b.n	80095f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009272:	2200      	movs	r2, #0
 8009274:	60bb      	str	r3, [r7, #8]
 8009276:	60fa      	str	r2, [r7, #12]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	4a84      	ldr	r2, [pc, #528]	; (8009490 <UART_SetConfig+0x930>)
 800927e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009282:	b29b      	uxth	r3, r3
 8009284:	2200      	movs	r2, #0
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009292:	f7f7 f995 	bl	80005c0 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	020b      	lsls	r3, r1, #8
 80092a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092ac:	0202      	lsls	r2, r0, #8
 80092ae:	6979      	ldr	r1, [r7, #20]
 80092b0:	6849      	ldr	r1, [r1, #4]
 80092b2:	0849      	lsrs	r1, r1, #1
 80092b4:	2000      	movs	r0, #0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4605      	mov	r5, r0
 80092ba:	eb12 0804 	adds.w	r8, r2, r4
 80092be:	eb43 0905 	adc.w	r9, r3, r5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	469a      	mov	sl, r3
 80092ca:	4693      	mov	fp, r2
 80092cc:	4652      	mov	r2, sl
 80092ce:	465b      	mov	r3, fp
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f7 f974 	bl	80005c0 <__aeabi_uldivmod>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4613      	mov	r3, r2
 80092de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d308      	bcc.n	80092fa <UART_SetConfig+0x79a>
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ee:	d204      	bcs.n	80092fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f6:	60da      	str	r2, [r3, #12]
 80092f8:	e17c      	b.n	80095f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009300:	e178      	b.n	80095f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930a:	f040 80c5 	bne.w	8009498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800930e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009312:	2b20      	cmp	r3, #32
 8009314:	dc48      	bgt.n	80093a8 <UART_SetConfig+0x848>
 8009316:	2b00      	cmp	r3, #0
 8009318:	db7b      	blt.n	8009412 <UART_SetConfig+0x8b2>
 800931a:	2b20      	cmp	r3, #32
 800931c:	d879      	bhi.n	8009412 <UART_SetConfig+0x8b2>
 800931e:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <UART_SetConfig+0x7c4>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	080093af 	.word	0x080093af
 8009328:	080093b7 	.word	0x080093b7
 800932c:	08009413 	.word	0x08009413
 8009330:	08009413 	.word	0x08009413
 8009334:	080093bf 	.word	0x080093bf
 8009338:	08009413 	.word	0x08009413
 800933c:	08009413 	.word	0x08009413
 8009340:	08009413 	.word	0x08009413
 8009344:	080093cf 	.word	0x080093cf
 8009348:	08009413 	.word	0x08009413
 800934c:	08009413 	.word	0x08009413
 8009350:	08009413 	.word	0x08009413
 8009354:	08009413 	.word	0x08009413
 8009358:	08009413 	.word	0x08009413
 800935c:	08009413 	.word	0x08009413
 8009360:	08009413 	.word	0x08009413
 8009364:	080093df 	.word	0x080093df
 8009368:	08009413 	.word	0x08009413
 800936c:	08009413 	.word	0x08009413
 8009370:	08009413 	.word	0x08009413
 8009374:	08009413 	.word	0x08009413
 8009378:	08009413 	.word	0x08009413
 800937c:	08009413 	.word	0x08009413
 8009380:	08009413 	.word	0x08009413
 8009384:	08009413 	.word	0x08009413
 8009388:	08009413 	.word	0x08009413
 800938c:	08009413 	.word	0x08009413
 8009390:	08009413 	.word	0x08009413
 8009394:	08009413 	.word	0x08009413
 8009398:	08009413 	.word	0x08009413
 800939c:	08009413 	.word	0x08009413
 80093a0:	08009413 	.word	0x08009413
 80093a4:	08009405 	.word	0x08009405
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d02e      	beq.n	800940a <UART_SetConfig+0x8aa>
 80093ac:	e031      	b.n	8009412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ae:	f7fa fd67 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 80093b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093b4:	e033      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b6:	f7fa fd79 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 80093ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093bc:	e02f      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fc fdaa 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093cc:	e027      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ce:	f107 0318 	add.w	r3, r7, #24
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fc fef6 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093dc:	e01f      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093de:	4b2d      	ldr	r3, [pc, #180]	; (8009494 <UART_SetConfig+0x934>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ea:	4b2a      	ldr	r3, [pc, #168]	; (8009494 <UART_SetConfig+0x934>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	08db      	lsrs	r3, r3, #3
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	4a24      	ldr	r2, [pc, #144]	; (8009488 <UART_SetConfig+0x928>)
 80093f6:	fa22 f303 	lsr.w	r3, r2, r3
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093fc:	e00f      	b.n	800941e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80093fe:	4b22      	ldr	r3, [pc, #136]	; (8009488 <UART_SetConfig+0x928>)
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009402:	e00c      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009404:	4b21      	ldr	r3, [pc, #132]	; (800948c <UART_SetConfig+0x92c>)
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009408:	e009      	b.n	800941e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800940a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009410:	e005      	b.n	800941e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800941c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800941e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 80e7 	beq.w	80095f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	4a19      	ldr	r2, [pc, #100]	; (8009490 <UART_SetConfig+0x930>)
 800942c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009430:	461a      	mov	r2, r3
 8009432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009434:	fbb3 f3f2 	udiv	r3, r3, r2
 8009438:	005a      	lsls	r2, r3, #1
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	441a      	add	r2, r3
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	fbb2 f3f3 	udiv	r3, r2, r3
 800944a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	2b0f      	cmp	r3, #15
 8009450:	d916      	bls.n	8009480 <UART_SetConfig+0x920>
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d212      	bcs.n	8009480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	b29b      	uxth	r3, r3
 800945e:	f023 030f 	bic.w	r3, r3, #15
 8009462:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	085b      	lsrs	r3, r3, #1
 8009468:	b29b      	uxth	r3, r3
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	b29a      	uxth	r2, r3
 8009470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009472:	4313      	orrs	r3, r2
 8009474:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800947c:	60da      	str	r2, [r3, #12]
 800947e:	e0b9      	b.n	80095f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009486:	e0b5      	b.n	80095f4 <UART_SetConfig+0xa94>
 8009488:	03d09000 	.word	0x03d09000
 800948c:	003d0900 	.word	0x003d0900
 8009490:	08015fa0 	.word	0x08015fa0
 8009494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800949c:	2b20      	cmp	r3, #32
 800949e:	dc49      	bgt.n	8009534 <UART_SetConfig+0x9d4>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	db7c      	blt.n	800959e <UART_SetConfig+0xa3e>
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d87a      	bhi.n	800959e <UART_SetConfig+0xa3e>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <UART_SetConfig+0x950>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	08009543 	.word	0x08009543
 80094b8:	0800959f 	.word	0x0800959f
 80094bc:	0800959f 	.word	0x0800959f
 80094c0:	0800954b 	.word	0x0800954b
 80094c4:	0800959f 	.word	0x0800959f
 80094c8:	0800959f 	.word	0x0800959f
 80094cc:	0800959f 	.word	0x0800959f
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	0800959f 	.word	0x0800959f
 80094d8:	0800959f 	.word	0x0800959f
 80094dc:	0800959f 	.word	0x0800959f
 80094e0:	0800959f 	.word	0x0800959f
 80094e4:	0800959f 	.word	0x0800959f
 80094e8:	0800959f 	.word	0x0800959f
 80094ec:	0800959f 	.word	0x0800959f
 80094f0:	0800956b 	.word	0x0800956b
 80094f4:	0800959f 	.word	0x0800959f
 80094f8:	0800959f 	.word	0x0800959f
 80094fc:	0800959f 	.word	0x0800959f
 8009500:	0800959f 	.word	0x0800959f
 8009504:	0800959f 	.word	0x0800959f
 8009508:	0800959f 	.word	0x0800959f
 800950c:	0800959f 	.word	0x0800959f
 8009510:	0800959f 	.word	0x0800959f
 8009514:	0800959f 	.word	0x0800959f
 8009518:	0800959f 	.word	0x0800959f
 800951c:	0800959f 	.word	0x0800959f
 8009520:	0800959f 	.word	0x0800959f
 8009524:	0800959f 	.word	0x0800959f
 8009528:	0800959f 	.word	0x0800959f
 800952c:	0800959f 	.word	0x0800959f
 8009530:	08009591 	.word	0x08009591
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d02e      	beq.n	8009596 <UART_SetConfig+0xa36>
 8009538:	e031      	b.n	800959e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fa fca1 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 800953e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009540:	e033      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009542:	f7fa fcb3 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8009546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009548:	e02f      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f7fc fce4 	bl	8005f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009558:	e027      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955a:	f107 0318 	add.w	r3, r7, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fc fe30 	bl	80061c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009568:	e01f      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956a:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <UART_SetConfig+0xac0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009576:	4b2a      	ldr	r3, [pc, #168]	; (8009620 <UART_SetConfig+0xac0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	08db      	lsrs	r3, r3, #3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	4a28      	ldr	r2, [pc, #160]	; (8009624 <UART_SetConfig+0xac4>)
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009588:	e00f      	b.n	80095aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800958a:	4b26      	ldr	r3, [pc, #152]	; (8009624 <UART_SetConfig+0xac4>)
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800958e:	e00c      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009590:	4b25      	ldr	r3, [pc, #148]	; (8009628 <UART_SetConfig+0xac8>)
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009594:	e009      	b.n	80095aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800959c:	e005      	b.n	80095aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095a8:	bf00      	nop
    }

    if (pclk != 0U)
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d021      	beq.n	80095f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	4a1d      	ldr	r2, [pc, #116]	; (800962c <UART_SetConfig+0xacc>)
 80095b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	fbb3 f2f2 	udiv	r2, r3, r2
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	441a      	add	r2, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	2b0f      	cmp	r3, #15
 80095d8:	d909      	bls.n	80095ee <UART_SetConfig+0xa8e>
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e0:	d205      	bcs.n	80095ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60da      	str	r2, [r3, #12]
 80095ec:	e002      	b.n	80095f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2201      	movs	r2, #1
 8009600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2200      	movs	r2, #0
 8009608:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2200      	movs	r2, #0
 800960e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009610:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009614:	4618      	mov	r0, r3
 8009616:	3748      	adds	r7, #72	; 0x48
 8009618:	46bd      	mov	sp, r7
 800961a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800961e:	bf00      	nop
 8009620:	58024400 	.word	0x58024400
 8009624:	03d09000 	.word	0x03d09000
 8009628:	003d0900 	.word	0x003d0900
 800962c:	08015fa0 	.word	0x08015fa0

08009630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00a      	beq.n	800965a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01a      	beq.n	8009746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800972e:	d10a      	bne.n	8009746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00a      	beq.n	8009768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	605a      	str	r2, [r3, #4]
  }
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b098      	sub	sp, #96	; 0x60
 8009778:	af02      	add	r7, sp, #8
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009784:	f7f8 fa80 	bl	8001c88 <HAL_GetTick>
 8009788:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b08      	cmp	r3, #8
 8009796:	d12f      	bne.n	80097f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a0:	2200      	movs	r2, #0
 80097a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f88e 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d022      	beq.n	80097f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c6:	653b      	str	r3, [r7, #80]	; 0x50
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d0:	647b      	str	r3, [r7, #68]	; 0x44
 80097d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e6      	bne.n	80097b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e063      	b.n	80098c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0304 	and.w	r3, r3, #4
 8009802:	2b04      	cmp	r3, #4
 8009804:	d149      	bne.n	800989a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009806:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800980e:	2200      	movs	r2, #0
 8009810:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f857 	bl	80098c8 <UART_WaitOnFlagUntilTimeout>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d03c      	beq.n	800989a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	623b      	str	r3, [r7, #32]
   return(result);
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983e:	633b      	str	r3, [r7, #48]	; 0x30
 8009840:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e6      	bne.n	8009820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	60fb      	str	r3, [r7, #12]
   return(result);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	64bb      	str	r3, [r7, #72]	; 0x48
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009872:	61fa      	str	r2, [r7, #28]
 8009874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	69b9      	ldr	r1, [r7, #24]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	617b      	str	r3, [r7, #20]
   return(result);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e012      	b.n	80098c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3758      	adds	r7, #88	; 0x58
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d8:	e049      	b.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d045      	beq.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e2:	f7f8 f9d1 	bl	8001c88 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d302      	bcc.n	80098f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e048      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d031      	beq.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b08      	cmp	r3, #8
 8009916:	d110      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2208      	movs	r2, #8
 800991e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f839 	bl	8009998 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2208      	movs	r2, #8
 800992a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e029      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009948:	d111      	bne.n	800996e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f81f 	bl	8009998 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e00f      	b.n	800998e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69da      	ldr	r2, [r3, #28]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4013      	ands	r3, r2
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	429a      	cmp	r2, r3
 800997c:	bf0c      	ite	eq
 800997e:	2301      	moveq	r3, #1
 8009980:	2300      	movne	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	429a      	cmp	r2, r3
 800998a:	d0a6      	beq.n	80098da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b095      	sub	sp, #84	; 0x54
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099be:	643b      	str	r3, [r7, #64]	; 0x40
 80099c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e6      	bne.n	80099a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <UART_EndRxTransfer+0xc8>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e5      	bne.n	80099d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d118      	bne.n	8009a40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	647b      	str	r3, [r7, #68]	; 0x44
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a54:	bf00      	nop
 8009a56:	3754      	adds	r7, #84	; 0x54
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	effffffe 	.word	0xeffffffe

08009a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e027      	b.n	8009aca <HAL_UARTEx_DisableFifoMode+0x66>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2224      	movs	r2, #36	; 0x24
 8009a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0201 	bic.w	r2, r2, #1
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aea:	2302      	movs	r3, #2
 8009aec:	e02d      	b.n	8009b4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2224      	movs	r2, #36	; 0x24
 8009afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0201 	bic.w	r2, r2, #1
 8009b14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f850 	bl	8009bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e02d      	b.n	8009bc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2224      	movs	r2, #36	; 0x24
 8009b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0201 	bic.w	r2, r2, #1
 8009b90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f812 	bl	8009bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d108      	bne.n	8009bf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bf0:	e031      	b.n	8009c56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	0e5b      	lsrs	r3, r3, #25
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	0f5b      	lsrs	r3, r3, #29
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	7b3a      	ldrb	r2, [r7, #12]
 8009c1e:	4911      	ldr	r1, [pc, #68]	; (8009c64 <UARTEx_SetNbDataToProcess+0x94>)
 8009c20:	5c8a      	ldrb	r2, [r1, r2]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c26:	7b3a      	ldrb	r2, [r7, #12]
 8009c28:	490f      	ldr	r1, [pc, #60]	; (8009c68 <UARTEx_SetNbDataToProcess+0x98>)
 8009c2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	7b7a      	ldrb	r2, [r7, #13]
 8009c3c:	4909      	ldr	r1, [pc, #36]	; (8009c64 <UARTEx_SetNbDataToProcess+0x94>)
 8009c3e:	5c8a      	ldrb	r2, [r1, r2]
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c44:	7b7a      	ldrb	r2, [r7, #13]
 8009c46:	4908      	ldr	r1, [pc, #32]	; (8009c68 <UARTEx_SetNbDataToProcess+0x98>)
 8009c48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	08015fb8 	.word	0x08015fb8
 8009c68:	08015fc0 	.word	0x08015fc0

08009c6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	f107 001c 	add.w	r0, r7, #28
 8009c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009c82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009c84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009c86:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009c8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009c8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009c92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <SDMMC_Init+0x50>)
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	b004      	add	sp, #16
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	ffc02c00 	.word	0xffc02c00

08009cc0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f043 0203 	orr.w	r2, r3, #3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 0203 	bic.w	r2, r3, #3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0303 	and.w	r3, r3, #3
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009d7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009d80:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009d86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	4b06      	ldr	r3, [pc, #24]	; (8009dac <SDMMC_SendCommand+0x50>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	fffee0c0 	.word	0xfffee0c0

08009db0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	b2db      	uxtb	r3, r3
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	461a      	mov	r2, r3
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e16:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009e1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009e22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0

}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e56:	2310      	movs	r3, #16
 8009e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ff73 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7a:	2110      	movs	r1, #16
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa5f 	bl	800a340 <SDMMC_GetCmdResp1>
 8009e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e84:	69fb      	ldr	r3, [r7, #28]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e9c:	2311      	movs	r3, #17
 8009e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff ff50 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec0:	2111      	movs	r1, #17
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa3c 	bl	800a340 <SDMMC_GetCmdResp1>
 8009ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eca:	69fb      	ldr	r3, [r7, #28]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3720      	adds	r7, #32
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ee2:	2312      	movs	r3, #18
 8009ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ff2d 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f06:	2112      	movs	r1, #18
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fa19 	bl	800a340 <SDMMC_GetCmdResp1>
 8009f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f10:	69fb      	ldr	r3, [r7, #28]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3720      	adds	r7, #32
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b088      	sub	sp, #32
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f28:	2318      	movs	r3, #24
 8009f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff ff0a 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	2118      	movs	r1, #24
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f9f6 	bl	800a340 <SDMMC_GetCmdResp1>
 8009f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f6e:	2319      	movs	r3, #25
 8009f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f82:	f107 0308 	add.w	r3, r7, #8
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fee7 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f92:	2119      	movs	r1, #25
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f9d3 	bl	800a340 <SDMMC_GetCmdResp1>
 8009f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009fb4:	230c      	movs	r3, #12
 8009fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fc6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fe0:	f107 0308 	add.w	r3, r7, #8
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff feb8 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009fec:	4a0b      	ldr	r2, [pc, #44]	; (800a01c <SDMMC_CmdStopTransfer+0x74>)
 8009fee:	210c      	movs	r1, #12
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f9a5 	bl	800a340 <SDMMC_GetCmdResp1>
 8009ff6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a00a:	d101      	bne.n	800a010 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a010:	69fb      	ldr	r3, [r7, #28]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3720      	adds	r7, #32
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	05f5e100 	.word	0x05f5e100

0800a020 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a02e:	2307      	movs	r3, #7
 800a030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a032:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a042:	f107 0308 	add.w	r3, r7, #8
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fe87 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a052:	2107      	movs	r1, #7
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f973 	bl	800a340 <SDMMC_GetCmdResp1>
 800a05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a05c:	69fb      	ldr	r3, [r7, #28]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b088      	sub	sp, #32
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a084:	f107 0308 	add.w	r3, r7, #8
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff fe66 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb97 	bl	800a7c4 <SDMMC_GetCmdError>
 800a096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a098:	69fb      	ldr	r3, [r7, #28]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a0aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fe46 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fb29 	bl	800a728 <SDMMC_GetCmdResp7>
 800a0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b088      	sub	sp, #32
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a0f0:	2337      	movs	r3, #55	; 0x37
 800a0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a104:	f107 0308 	add.w	r3, r7, #8
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff fe26 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a110:	f241 3288 	movw	r2, #5000	; 0x1388
 800a114:	2137      	movs	r1, #55	; 0x37
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f912 	bl	800a340 <SDMMC_GetCmdResp1>
 800a11c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a11e:	69fb      	ldr	r3, [r7, #28]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a136:	2329      	movs	r3, #41	; 0x29
 800a138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a13a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a14a:	f107 0308 	add.w	r3, r7, #8
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fe03 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa2e 	bl	800a5b8 <SDMMC_GetCmdResp3>
 800a15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a15e:	69fb      	ldr	r3, [r7, #28]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a176:	2306      	movs	r3, #6
 800a178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a17a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a18a:	f107 0308 	add.w	r3, r7, #8
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fde3 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a196:	f241 3288 	movw	r2, #5000	; 0x1388
 800a19a:	2106      	movs	r1, #6
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f8cf 	bl	800a340 <SDMMC_GetCmdResp1>
 800a1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3720      	adds	r7, #32
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b088      	sub	sp, #32
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a1ba:	2333      	movs	r3, #51	; 0x33
 800a1bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff fdc1 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1de:	2133      	movs	r1, #51	; 0x33
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f8ad 	bl	800a340 <SDMMC_GetCmdResp1>
 800a1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b088      	sub	sp, #32
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a1fe:	2302      	movs	r3, #2
 800a200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a202:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a210:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fd9f 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f980 	bl	800a524 <SDMMC_GetCmdResp2>
 800a224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a226:	69fb      	ldr	r3, [r7, #28]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a23e:	2309      	movs	r3, #9
 800a240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a242:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a24c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a250:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff fd7f 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f960 	bl	800a524 <SDMMC_GetCmdResp2>
 800a264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a266:	69fb      	ldr	r3, [r7, #28]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a27e:	2303      	movs	r3, #3
 800a280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a282:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a288:	2300      	movs	r3, #0
 800a28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a28c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fd5f 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	2103      	movs	r1, #3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9c8 	bl	800a638 <SDMMC_GetCmdResp6>
 800a2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a2c2:	230d      	movs	r3, #13
 800a2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff fd3d 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e6:	210d      	movs	r1, #13
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f829 	bl	800a340 <SDMMC_GetCmdResp1>
 800a2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b088      	sub	sp, #32
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a306:	230d      	movs	r3, #13
 800a308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a30e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fd1b 	bl	8009d5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a326:	f241 3288 	movw	r2, #5000	; 0x1388
 800a32a:	210d      	movs	r1, #13
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f807 	bl	800a340 <SDMMC_GetCmdResp1>
 800a332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a334:	69fb      	ldr	r3, [r7, #28]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3720      	adds	r7, #32
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	460b      	mov	r3, r1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a34e:	4b70      	ldr	r3, [pc, #448]	; (800a510 <SDMMC_GetCmdResp1+0x1d0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a70      	ldr	r2, [pc, #448]	; (800a514 <SDMMC_GetCmdResp1+0x1d4>)
 800a354:	fba2 2303 	umull	r2, r3, r2, r3
 800a358:	0a5a      	lsrs	r2, r3, #9
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	fb02 f303 	mul.w	r3, r2, r3
 800a360:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	1e5a      	subs	r2, r3, #1
 800a366:	61fa      	str	r2, [r7, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a370:	e0c9      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a378:	69ba      	ldr	r2, [r7, #24]
 800a37a:	4b67      	ldr	r3, [pc, #412]	; (800a518 <SDMMC_GetCmdResp1+0x1d8>)
 800a37c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0ef      	beq.n	800a362 <SDMMC_GetCmdResp1+0x22>
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1ea      	bne.n	800a362 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d004      	beq.n	800a3a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2204      	movs	r2, #4
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a39e:	2304      	movs	r3, #4
 800a3a0:	e0b1      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0a6      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4a58      	ldr	r2, [pc, #352]	; (800a51c <SDMMC_GetCmdResp1+0x1dc>)
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fcf6 	bl	8009db0 <SDMMC_GetCommandResponse>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d001      	beq.n	800a3d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e099      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff fcf8 	bl	8009dca <SDMMC_GetResponse>
 800a3da:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	4b50      	ldr	r3, [pc, #320]	; (800a520 <SDMMC_GetCmdResp1+0x1e0>)
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e08d      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	da02      	bge.n	800a3f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f4:	e087      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	e080      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a40e:	2380      	movs	r3, #128	; 0x80
 800a410:	e079      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a41c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a420:	e071      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a42c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a430:	e069      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a440:	e061      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a44c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a450:	e059      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a460:	e051      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a46c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a470:	e049      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a47c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a480:	e041      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a48c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a490:	e039      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a49c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4a0:	e031      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4b0:	e029      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4c0:	e021      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4d0:	e019      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4e0:	e011      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4f0:	e009      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a500:	e001      	b.n	800a506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	24000000 	.word	0x24000000
 800a514:	10624dd3 	.word	0x10624dd3
 800a518:	00200045 	.word	0x00200045
 800a51c:	002000c5 	.word	0x002000c5
 800a520:	fdffe008 	.word	0xfdffe008

0800a524 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a52c:	4b1f      	ldr	r3, [pc, #124]	; (800a5ac <SDMMC_GetCmdResp2+0x88>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1f      	ldr	r2, [pc, #124]	; (800a5b0 <SDMMC_GetCmdResp2+0x8c>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	1e5a      	subs	r2, r3, #1
 800a546:	60fa      	str	r2, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a54c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a550:	e026      	b.n	800a5a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0ef      	beq.n	800a542 <SDMMC_GetCmdResp2+0x1e>
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1ea      	bne.n	800a542 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2204      	movs	r2, #4
 800a57c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a57e:	2304      	movs	r3, #4
 800a580:	e00e      	b.n	800a5a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a594:	2301      	movs	r3, #1
 800a596:	e003      	b.n	800a5a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <SDMMC_GetCmdResp2+0x90>)
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	24000000 	.word	0x24000000
 800a5b0:	10624dd3 	.word	0x10624dd3
 800a5b4:	002000c5 	.word	0x002000c5

0800a5b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <SDMMC_GetCmdResp3+0x74>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1a      	ldr	r2, [pc, #104]	; (800a630 <SDMMC_GetCmdResp3+0x78>)
 800a5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ca:	0a5b      	lsrs	r3, r3, #9
 800a5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d0:	fb02 f303 	mul.w	r3, r2, r3
 800a5d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	1e5a      	subs	r2, r3, #1
 800a5da:	60fa      	str	r2, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d102      	bne.n	800a5e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5e4:	e01b      	b.n	800a61e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0ef      	beq.n	800a5d6 <SDMMC_GetCmdResp3+0x1e>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1ea      	bne.n	800a5d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2204      	movs	r2, #4
 800a610:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a612:	2304      	movs	r3, #4
 800a614:	e003      	b.n	800a61e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a06      	ldr	r2, [pc, #24]	; (800a634 <SDMMC_GetCmdResp3+0x7c>)
 800a61a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	24000000 	.word	0x24000000
 800a630:	10624dd3 	.word	0x10624dd3
 800a634:	002000c5 	.word	0x002000c5

0800a638 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	460b      	mov	r3, r1
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a646:	4b35      	ldr	r3, [pc, #212]	; (800a71c <SDMMC_GetCmdResp6+0xe4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a35      	ldr	r2, [pc, #212]	; (800a720 <SDMMC_GetCmdResp6+0xe8>)
 800a64c:	fba2 2303 	umull	r2, r3, r2, r3
 800a650:	0a5b      	lsrs	r3, r3, #9
 800a652:	f241 3288 	movw	r2, #5000	; 0x1388
 800a656:	fb02 f303 	mul.w	r3, r2, r3
 800a65a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	61fa      	str	r2, [r7, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a66a:	e052      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a670:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0ef      	beq.n	800a65c <SDMMC_GetCmdResp6+0x24>
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1ea      	bne.n	800a65c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2204      	movs	r2, #4
 800a696:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a698:	2304      	movs	r3, #4
 800a69a:	e03a      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e02f      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fb7c 	bl	8009db0 <SDMMC_GetCommandResponse>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d001      	beq.n	800a6c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e025      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4a16      	ldr	r2, [pc, #88]	; (800a724 <SDMMC_GetCmdResp6+0xec>)
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7ff fb7b 	bl	8009dca <SDMMC_GetResponse>
 800a6d4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e011      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6fc:	e009      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a70c:	e001      	b.n	800a712 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a70e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	24000000 	.word	0x24000000
 800a720:	10624dd3 	.word	0x10624dd3
 800a724:	002000c5 	.word	0x002000c5

0800a728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a730:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <SDMMC_GetCmdResp7+0x94>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a22      	ldr	r2, [pc, #136]	; (800a7c0 <SDMMC_GetCmdResp7+0x98>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	0a5b      	lsrs	r3, r3, #9
 800a73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	1e5a      	subs	r2, r3, #1
 800a74a:	60fa      	str	r2, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a754:	e02c      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0ef      	beq.n	800a746 <SDMMC_GetCmdResp7+0x1e>
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1ea      	bne.n	800a746 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2204      	movs	r2, #4
 800a780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a782:	2304      	movs	r3, #4
 800a784:	e014      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a798:	2301      	movs	r3, #1
 800a79a:	e009      	b.n	800a7b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2240      	movs	r2, #64	; 0x40
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0

}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	24000000 	.word	0x24000000
 800a7c0:	10624dd3 	.word	0x10624dd3

0800a7c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7cc:	4b11      	ldr	r3, [pc, #68]	; (800a814 <SDMMC_GetCmdError+0x50>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a11      	ldr	r2, [pc, #68]	; (800a818 <SDMMC_GetCmdError+0x54>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	0a5b      	lsrs	r3, r3, #9
 800a7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	60fa      	str	r2, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7f0:	e009      	b.n	800a806 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f1      	beq.n	800a7e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a06      	ldr	r2, [pc, #24]	; (800a81c <SDMMC_GetCmdError+0x58>)
 800a802:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	24000000 	.word	0x24000000
 800a818:	10624dd3 	.word	0x10624dd3
 800a81c:	002000c5 	.word	0x002000c5

0800a820 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08e      	sub	sp, #56	; 0x38
 800a824:	af08      	add	r7, sp, #32
 800a826:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 800a828:	2300      	movs	r3, #0
 800a82a:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 800a830:	f107 010c 	add.w	r1, r7, #12
 800a834:	2300      	movs	r3, #0
 800a836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f009 fe0c 	bl	8014458 <_txe_byte_allocate>
 800a840:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 800a848:	2302      	movs	r3, #2
 800a84a:	e01d      	b.n	800a888 <MX_FileX_Init+0x68>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	22b0      	movs	r2, #176	; 0xb0
 800a850:	9206      	str	r2, [sp, #24]
 800a852:	2201      	movs	r2, #1
 800a854:	9205      	str	r2, [sp, #20]
 800a856:	2200      	movs	r2, #0
 800a858:	9204      	str	r2, [sp, #16]
 800a85a:	220a      	movs	r2, #10
 800a85c:	9203      	str	r2, [sp, #12]
 800a85e:	220a      	movs	r2, #10
 800a860:	9202      	str	r2, [sp, #8]
 800a862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a866:	9201      	str	r2, [sp, #4]
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	2300      	movs	r3, #0
 800a86c:	4a08      	ldr	r2, [pc, #32]	; (800a890 <MX_FileX_Init+0x70>)
 800a86e:	4909      	ldr	r1, [pc, #36]	; (800a894 <MX_FileX_Init+0x74>)
 800a870:	4809      	ldr	r0, [pc, #36]	; (800a898 <MX_FileX_Init+0x78>)
 800a872:	f00a f839 	bl	80148e8 <_txe_thread_create>
 800a876:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800a87e:	230e      	movs	r3, #14
 800a880:	e002      	b.n	800a888 <MX_FileX_Init+0x68>
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 800a882:	f004 fcd5 	bl	800f230 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 800a886:	697b      	ldr	r3, [r7, #20]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	0800a89d 	.word	0x0800a89d
 800a894:	08015ee0 	.word	0x08015ee0
 800a898:	24014c94 	.word	0x24014c94

0800a89c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UINT sd_status = FX_SUCCESS;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN fx_app_thread_entry 0 */
	fw_update_thread_entry();
 800a8a8:	f7f6 f9b8 	bl	8000c1c <fw_update_thread_entry>

	/* Should never reach here */
	assert(0);
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <fx_app_thread_entry+0x1c>)
 800a8ae:	4a03      	ldr	r2, [pc, #12]	; (800a8bc <fx_app_thread_entry+0x20>)
 800a8b0:	2186      	movs	r1, #134	; 0x86
 800a8b2:	4803      	ldr	r0, [pc, #12]	; (800a8c0 <fx_app_thread_entry+0x24>)
 800a8b4:	f00a f90a 	bl	8014acc <__assert_func>
 800a8b8:	08015ef4 	.word	0x08015ef4
 800a8bc:	08015fc8 	.word	0x08015fc8
 800a8c0:	08015ef8 	.word	0x08015ef8

0800a8c4 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 800a8d0:	4806      	ldr	r0, [pc, #24]	; (800a8ec <fx_stm32_sd_get_status+0x28>)
 800a8d2:	f7fd f847 	bl	8007964 <HAL_SD_GetCardState>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d001      	beq.n	800a8e0 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	24012240 	.word	0x24012240

0800a8f0 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	4806      	ldr	r0, [pc, #24]	; (800a924 <fx_stm32_sd_read_blocks+0x34>)
 800a90a:	f7fc f9a5 	bl	8006c58 <HAL_SD_ReadBlocks_DMA>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 800a918:	697b      	ldr	r3, [r7, #20]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	24012240 	.word	0x24012240

0800a928 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	4806      	ldr	r0, [pc, #24]	; (800a95c <fx_stm32_sd_write_blocks+0x34>)
 800a942:	f7fc fa31 	bl	8006da8 <HAL_SD_WriteBlocks_DMA>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 800a950:	697b      	ldr	r3, [r7, #20]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	24012240 	.word	0x24012240

0800a960 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 800a968:	4803      	ldr	r0, [pc, #12]	; (800a978 <HAL_SD_TxCpltCallback+0x18>)
 800a96a:	f009 ff9f 	bl	80148ac <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	24014d44 	.word	0x24014d44

0800a97c <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800a984:	4803      	ldr	r0, [pc, #12]	; (800a994 <HAL_SD_RxCpltCallback+0x18>)
 800a986:	f009 ff91 	bl	80148ac <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	24014d60 	.word	0x24014d60

0800a998 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800a998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a99c:	b09e      	sub	sp, #120	; 0x78
 800a99e:	af04      	add	r7, sp, #16
 800a9a0:	61f8      	str	r0, [r7, #28]
 800a9a2:	61b9      	str	r1, [r7, #24]
 800a9a4:	617a      	str	r2, [r7, #20]
 800a9a6:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	015b      	lsls	r3, r3, #5
 800a9c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <_fx_directory_entry_read+0x3e>
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80a1 	beq.w	800ab18 <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800a9da:	69fa      	ldr	r2, [r7, #28]
 800a9dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	e355      	b.n	800b09a <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800a9ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f6:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800a9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa02:	fb01 f202 	mul.w	r2, r1, r2
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa10:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa14:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d028      	beq.n	800aa6e <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01e      	beq.n	800aa62 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800aa28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d319      	bcc.n	800aa62 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	bf08      	it	eq
 800aa3e:	4290      	cmpeq	r0, r2
 800aa40:	d10f      	bne.n	800aa62 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d109      	bne.n	800aa62 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa52:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa58:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	651a      	str	r2, [r3, #80]	; 0x50
 800aa60:	e00a      	b.n	800aa78 <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa66:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	667b      	str	r3, [r7, #100]	; 0x64
 800aa6c:	e024      	b.n	800aab8 <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa72:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800aa78:	e01e      	b.n	800aab8 <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800aa7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d907      	bls.n	800aa90 <_fx_directory_entry_read+0xf8>
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa86:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800aa8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d301      	bcc.n	800aa94 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 800aa90:	2308      	movs	r3, #8
 800aa92:	e302      	b.n	800b09a <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800aa94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa9c:	69f8      	ldr	r0, [r7, #28]
 800aa9e:	f004 fde1 	bl	800f664 <_fx_utility_FAT_entry_read>
 800aaa2:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaac:	e2f5      	b.n	800b09a <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800aab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab4:	3301      	adds	r3, #1
 800aab6:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800aab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d3dc      	bcc.n	800aa7a <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800aac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac6:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800aac8:	69f9      	ldr	r1, [r7, #28]
 800aaca:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800aacc:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800aad0:	4413      	add	r3, r2
 800aad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aad4:	4413      	add	r3, r2
 800aad6:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800aad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aada:	2200      	movs	r2, #0
 800aadc:	60bb      	str	r3, [r7, #8]
 800aade:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800aae4:	2203      	movs	r2, #3
 800aae6:	9202      	str	r2, [sp, #8]
 800aae8:	2201      	movs	r2, #1
 800aaea:	9201      	str	r2, [sp, #4]
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaf2:	69f8      	ldr	r0, [r7, #28]
 800aaf4:	f006 f8d0 	bl	8010c98 <_fx_utility_logical_sector_read>
 800aaf8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800aafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab02:	e2ca      	b.n	800b09a <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab0e:	fb01 f202 	mul.w	r2, r1, r2
 800ab12:	1a9b      	subs	r3, r3, r2
 800ab14:	647b      	str	r3, [r7, #68]	; 0x44
 800ab16:	e02f      	b.n	800ab78 <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ab26:	4413      	add	r3, r2
 800ab28:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ab2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ab36:	2203      	movs	r2, #3
 800ab38:	9202      	str	r2, [sp, #8]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	9201      	str	r2, [sp, #4]
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab44:	69f8      	ldr	r0, [r7, #28]
 800ab46:	f006 f8a7 	bl	8010c98 <_fx_utility_logical_sector_read>
 800ab4a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	e2a1      	b.n	800b09a <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	657b      	str	r3, [r7, #84]	; 0x54
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab60:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab68:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800ab72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab7e:	4413      	add	r3, r2
 800ab80:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 800ab82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab84:	2200      	movs	r2, #0
 800ab86:	4698      	mov	r8, r3
 800ab88:	4691      	mov	r9, r2
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab94:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800abac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abae:	330b      	adds	r3, #11
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b0f      	cmp	r3, #15
 800abb4:	f040 8129 	bne.w	800ae0a <_fx_directory_entry_read+0x472>
 800abb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2be5      	cmp	r3, #229	; 0xe5
 800abbe:	f000 8124 	beq.w	800ae0a <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 800abc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	f003 021f 	and.w	r2, r3, #31
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	3b0d      	subs	r3, #13
 800abd6:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800abd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f003 031f 	and.w	r3, r3, #31
 800abe0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 800abe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abe4:	2bfe      	cmp	r3, #254	; 0xfe
 800abe6:	d908      	bls.n	800abfa <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800abec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 021f 	and.w	r2, r3, #31
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	619a      	str	r2, [r3, #24]
 800abf8:	e015      	b.n	800ac26 <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3304      	adds	r3, #4
 800abfe:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 800ac00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac02:	330e      	adds	r3, #14
 800ac04:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac0c:	4413      	add	r3, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 800ac12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac14:	3301      	adds	r3, #1
 800ac16:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800ac18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d202      	bcs.n	800ac26 <_fx_directory_entry_read+0x28e>
 800ac20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac22:	2bff      	cmp	r3, #255	; 0xff
 800ac24:	d9ef      	bls.n	800ac06 <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800ac26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	f003 031f 	and.w	r3, r3, #31
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 800ac32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d168      	bne.n	800ad0a <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800ac38:	2301      	movs	r3, #1
 800ac3a:	667b      	str	r3, [r7, #100]	; 0x64
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	663b      	str	r3, [r7, #96]	; 0x60
 800ac40:	e060      	b.n	800ad04 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 800ac42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac44:	2b0b      	cmp	r3, #11
 800ac46:	d057      	beq.n	800acf8 <_fx_directory_entry_read+0x360>
 800ac48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac4a:	2b1a      	cmp	r3, #26
 800ac4c:	d054      	beq.n	800acf8 <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 800ac4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac50:	2b0d      	cmp	r3, #13
 800ac52:	d102      	bne.n	800ac5a <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 800ac54:	230c      	movs	r3, #12
 800ac56:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800ac58:	e051      	b.n	800acfe <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800ac5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d014      	beq.n	800ac92 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800ac68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac6e:	4413      	add	r3, r2
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2bff      	cmp	r3, #255	; 0xff
 800ac74:	d105      	bne.n	800ac82 <_fx_directory_entry_read+0x2ea>
 800ac76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac7a:	4413      	add	r3, r2
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2bff      	cmp	r3, #255	; 0xff
 800ac80:	d007      	beq.n	800ac92 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 800ac82:	2301      	movs	r3, #1
 800ac84:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8a:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 800ac92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac96:	4413      	add	r3, r2
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d02e      	beq.n	800acfc <_fx_directory_entry_read+0x364>
 800ac9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca2:	4413      	add	r3, r2
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2bff      	cmp	r3, #255	; 0xff
 800aca8:	d028      	beq.n	800acfc <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800acaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acac:	4613      	mov	r3, r2
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	441a      	add	r2, r3
 800acb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acb8:	4413      	add	r3, r2
 800acba:	2bfe      	cmp	r3, #254	; 0xfe
 800acbc:	d908      	bls.n	800acd0 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800acbe:	2301      	movs	r3, #1
 800acc0:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc6:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800acce:	e01c      	b.n	800ad0a <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 800acd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd4:	18d1      	adds	r1, r2, r3
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acdc:	4613      	mov	r3, r2
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	441a      	add	r2, r3
 800ace6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ace8:	4413      	add	r3, r2
 800acea:	4403      	add	r3, r0
 800acec:	780a      	ldrb	r2, [r1, #0]
 800acee:	701a      	strb	r2, [r3, #0]

                    j++;
 800acf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf2:	3301      	adds	r3, #1
 800acf4:	663b      	str	r3, [r7, #96]	; 0x60
 800acf6:	e002      	b.n	800acfe <_fx_directory_entry_read+0x366>
                        continue;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <_fx_directory_entry_read+0x366>
                        continue;
 800acfc:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800acfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad00:	3302      	adds	r3, #2
 800ad02:	667b      	str	r3, [r7, #100]	; 0x64
 800ad04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad06:	2b1f      	cmp	r3, #31
 800ad08:	d99b      	bls.n	800ac42 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800ad0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad0c:	f103 0220 	add.w	r2, r3, #32
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d365      	bcc.n	800ade4 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <_fx_directory_entry_read+0x38e>
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d038      	beq.n	800ad98 <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d206      	bcs.n	800ad40 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800ad32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad34:	3301      	adds	r3, #1
 800ad36:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800ad38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ad3e:	e038      	b.n	800adb2 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ad40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad44:	461a      	mov	r2, r3
 800ad46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad48:	69f8      	ldr	r0, [r7, #28]
 800ad4a:	f004 fc8b 	bl	800f664 <_fx_utility_FAT_entry_read>
 800ad4e:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800ad50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad58:	e19f      	b.n	800b09a <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800ad5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d907      	bls.n	800ad74 <_fx_directory_entry_read+0x3dc>
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad6a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ad6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d301      	bcc.n	800ad78 <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800ad74:	2308      	movs	r3, #8
 800ad76:	e190      	b.n	800b09a <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 800ad78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ad86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad88:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ad8a:	69f9      	ldr	r1, [r7, #28]
 800ad8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ad8e:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ad92:	4413      	add	r3, r2
 800ad94:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ad96:	e00c      	b.n	800adb2 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 800ad98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada6:	4413      	add	r3, r2
 800ada8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adaa:	429a      	cmp	r2, r3
 800adac:	d301      	bcc.n	800adb2 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800adae:	2308      	movs	r3, #8
 800adb0:	e173      	b.n	800b09a <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800adb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adb4:	2200      	movs	r2, #0
 800adb6:	469a      	mov	sl, r3
 800adb8:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800adbe:	2203      	movs	r2, #3
 800adc0:	9202      	str	r2, [sp, #8]
 800adc2:	2201      	movs	r2, #1
 800adc4:	9201      	str	r2, [sp, #4]
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	4652      	mov	r2, sl
 800adca:	465b      	mov	r3, fp
 800adcc:	69f8      	ldr	r0, [r7, #28]
 800adce:	f005 ff63 	bl	8010c98 <_fx_utility_logical_sector_read>
 800add2:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 800add4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	e15d      	b.n	800b09a <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	647b      	str	r3, [r7, #68]	; 0x44
 800ade2:	e002      	b.n	800adea <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 800ade4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade6:	3320      	adds	r3, #32
 800ade8:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf0:	4413      	add	r3, r2
 800adf2:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	3301      	adds	r3, #1
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f47f af12 	bne.w	800ac26 <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2201      	movs	r2, #1
 800ae06:	615a      	str	r2, [r3, #20]
 800ae08:	e001      	b.n	800ae0e <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800ae0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d102      	bne.n	800ae1a <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2200      	movs	r2, #0
 800ae18:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800ae1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800ae24:	2300      	movs	r3, #0
 800ae26:	667b      	str	r3, [r7, #100]	; 0x64
 800ae28:	2300      	movs	r3, #0
 800ae2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ae2c:	e03d      	b.n	800aeaa <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800ae2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae32:	4413      	add	r3, r2
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d03b      	beq.n	800aeb2 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800ae3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae3e:	4413      	add	r3, r2
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b2e      	cmp	r3, #46	; 0x2e
 800ae44:	d101      	bne.n	800ae4a <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800ae46:	2302      	movs	r3, #2
 800ae48:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800ae4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae4e:	4413      	add	r3, r2
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	d105      	bne.n	800ae62 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800ae56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d122      	bne.n	800aea2 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 800ae60:	e01f      	b.n	800aea2 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 800ae62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae64:	2b08      	cmp	r3, #8
 800ae66:	d104      	bne.n	800ae72 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800ae68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 800ae72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d108      	bne.n	800ae8a <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 800ae78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	663a      	str	r2, [r7, #96]	; 0x60
 800ae7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae80:	4413      	add	r3, r2
 800ae82:	222e      	movs	r2, #46	; 0x2e
 800ae84:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 800ae86:	2302      	movs	r3, #2
 800ae88:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 800ae8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	441a      	add	r2, r3
 800ae90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae94:	440b      	add	r3, r1
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 800ae9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	663b      	str	r3, [r7, #96]	; 0x60
 800aea0:	e000      	b.n	800aea4 <_fx_directory_entry_read+0x50c>
            continue;
 800aea2:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800aea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea6:	3301      	adds	r3, #1
 800aea8:	667b      	str	r3, [r7, #100]	; 0x64
 800aeaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeac:	2b0a      	cmp	r3, #10
 800aeae:	d9be      	bls.n	800ae2e <_fx_directory_entry_read+0x496>
 800aeb0:	e000      	b.n	800aeb4 <_fx_directory_entry_read+0x51c>
            break;
 800aeb2:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <_fx_directory_entry_read+0x53a>
 800aebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2be5      	cmp	r3, #229	; 0xe5
 800aec2:	d106      	bne.n	800aed2 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	22e5      	movs	r2, #229	; 0xe5
 800aeca:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d114      	bne.n	800af04 <_fx_directory_entry_read+0x56c>
 800aeda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b20      	cmp	r3, #32
 800aee0:	d110      	bne.n	800af04 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800aee2:	2300      	movs	r3, #0
 800aee4:	663b      	str	r3, [r7, #96]	; 0x60
 800aee6:	e00a      	b.n	800aefe <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800aee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeec:	441a      	add	r2, r3
 800aeee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef2:	440b      	add	r3, r1
 800aef4:	7812      	ldrb	r2, [r2, #0]
 800aef6:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800aef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aefa:	3301      	adds	r3, #1
 800aefc:	663b      	str	r3, [r7, #96]	; 0x60
 800aefe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af00:	2b0a      	cmp	r3, #10
 800af02:	d9f1      	bls.n	800aee8 <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 800af04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af08:	4413      	add	r3, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800af0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af10:	330b      	adds	r3, #11
 800af12:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 800af14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	643a      	str	r2, [r7, #64]	; 0x40
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 800af20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	643a      	str	r2, [r7, #64]	; 0x40
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 800af2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d02a      	beq.n	800af88 <_fx_directory_entry_read+0x5f0>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	7f5b      	ldrb	r3, [r3, #29]
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d024      	beq.n	800af88 <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800af3e:	2300      	movs	r3, #0
 800af40:	663b      	str	r3, [r7, #96]	; 0x60
 800af42:	e018      	b.n	800af76 <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800af44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af48:	4413      	add	r3, r2
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	d90f      	bls.n	800af70 <_fx_directory_entry_read+0x5d8>
 800af50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af54:	4413      	add	r3, r2
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b5a      	cmp	r3, #90	; 0x5a
 800af5a:	d809      	bhi.n	800af70 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800af5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af60:	4413      	add	r3, r2
 800af62:	781a      	ldrb	r2, [r3, #0]
 800af64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af68:	440b      	add	r3, r1
 800af6a:	3220      	adds	r2, #32
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800af70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af72:	3301      	adds	r3, #1
 800af74:	663b      	str	r3, [r7, #96]	; 0x60
 800af76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af78:	2b0b      	cmp	r3, #11
 800af7a:	d805      	bhi.n	800af88 <_fx_directory_entry_read+0x5f0>
 800af7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af80:	4413      	add	r3, r2
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1dd      	bne.n	800af44 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 800af88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	643a      	str	r2, [r7, #64]	; 0x40
 800af8e:	781a      	ldrb	r2, [r3, #0]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 800af94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800af96:	f004 faff 	bl	800f598 <_fx_utility_16_unsigned_read>
 800af9a:	4602      	mov	r2, r0
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800afa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa2:	3302      	adds	r3, #2
 800afa4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 800afa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800afa8:	f004 faf6 	bl	800f598 <_fx_utility_16_unsigned_read>
 800afac:	4602      	mov	r2, r0
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800afb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb4:	3302      	adds	r3, #2
 800afb6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 800afb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800afba:	f004 faed 	bl	800f598 <_fx_utility_16_unsigned_read>
 800afbe:	4602      	mov	r2, r0
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800afc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc6:	3302      	adds	r3, #2
 800afc8:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00b      	beq.n	800afea <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800afd2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800afd4:	f004 fae0 	bl	800f598 <_fx_utility_16_unsigned_read>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe2:	041a      	lsls	r2, r3, #16
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	635a      	str	r2, [r3, #52]	; 0x34
 800afe8:	e002      	b.n	800aff0 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2200      	movs	r2, #0
 800afee:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800aff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff2:	3302      	adds	r3, #2
 800aff4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800aff6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aff8:	f004 face 	bl	800f598 <_fx_utility_16_unsigned_read>
 800affc:	4602      	mov	r2, r0
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b004:	3302      	adds	r3, #2
 800b006:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800b008:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b00a:	f004 fac5 	bl	800f598 <_fx_utility_16_unsigned_read>
 800b00e:	4602      	mov	r2, r0
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b016:	3302      	adds	r3, #2
 800b018:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800b01a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b01c:	f004 fabc 	bl	800f598 <_fx_utility_16_unsigned_read>
 800b020:	4602      	mov	r2, r0
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b026:	441a      	add	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800b02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02e:	3302      	adds	r3, #2
 800b030:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800b032:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b034:	f004 fad8 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800b038:	4603      	mov	r3, r0
 800b03a:	2200      	movs	r2, #0
 800b03c:	461c      	mov	r4, r3
 800b03e:	4615      	mov	r5, r2
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2200      	movs	r2, #0
 800b04a:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2200      	movs	r2, #0
 800b050:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800b052:	6939      	ldr	r1, [r7, #16]
 800b054:	f04f 0200 	mov.w	r2, #0
 800b058:	f04f 0300 	mov.w	r3, #0
 800b05c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2200      	movs	r2, #0
 800b064:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b06a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b070:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00f      	beq.n	800b098 <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b07c:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b082:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b08a:	69b9      	ldr	r1, [r7, #24]
 800b08c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3768      	adds	r7, #104	; 0x68
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b0a4 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800b0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a8:	b0a2      	sub	sp, #136	; 0x88
 800b0aa:	af04      	add	r7, sp, #16
 800b0ac:	6178      	str	r0, [r7, #20]
 800b0ae:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2be5      	cmp	r3, #229	; 0xe5
 800b0c6:	d109      	bne.n	800b0dc <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800b0cc:	2be5      	cmp	r3, #229	; 0xe5
 800b0ce:	d105      	bne.n	800b0dc <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	711a      	strb	r2, [r3, #4]
 800b0da:	e001      	b.n	800b0e0 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d316      	bcc.n	800b128 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b100:	1ad2      	subs	r2, r2, r3
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b106:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10a:	3302      	adds	r3, #2
 800b10c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800b116:	6979      	ldr	r1, [r7, #20]
 800b118:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b11a:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b11e:	4413      	add	r3, r2
 800b120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	63bb      	str	r3, [r7, #56]	; 0x38
 800b126:	e003      	b.n	800b130 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800b128:	2300      	movs	r3, #0
 800b12a:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800b13a:	2303      	movs	r3, #3
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	2301      	movs	r3, #1
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	9200      	str	r2, [sp, #0]
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	6978      	ldr	r0, [r7, #20]
 800b14a:	f005 fda5 	bl	8010c98 <_fx_utility_logical_sector_read>
 800b14e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	f000 bdda 	b.w	800bd10 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b166:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b168:	4413      	add	r3, r2
 800b16a:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 83cc 	beq.w	800b90e <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800b176:	2300      	movs	r3, #0
 800b178:	653b      	str	r3, [r7, #80]	; 0x50
 800b17a:	2300      	movs	r3, #0
 800b17c:	667b      	str	r3, [r7, #100]	; 0x64
 800b17e:	2300      	movs	r3, #0
 800b180:	64bb      	str	r3, [r7, #72]	; 0x48
 800b182:	2300      	movs	r3, #0
 800b184:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b186:	e02c      	b.n	800b1e2 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18e:	4413      	add	r3, r2
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b2e      	cmp	r3, #46	; 0x2e
 800b194:	d108      	bne.n	800b1a8 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800b196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d01e      	beq.n	800b1da <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800b19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19e:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800b1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800b1a6:	e019      	b.n	800b1dc <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ae:	4413      	add	r3, r2
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	2b20      	cmp	r3, #32
 800b1b4:	d012      	beq.n	800b1dc <_fx_directory_entry_write+0x138>
 800b1b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1b8:	2b07      	cmp	r3, #7
 800b1ba:	d80f      	bhi.n	800b1dc <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c2:	4413      	add	r3, r2
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	f107 021c 	add.w	r2, r7, #28
 800b1ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1cc:	4413      	add	r3, r2
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	701a      	strb	r2, [r3, #0]
                i++;
 800b1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	667b      	str	r3, [r7, #100]	; 0x64
 800b1d8:	e000      	b.n	800b1dc <_fx_directory_entry_write+0x138>
                    continue;
 800b1da:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800b1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1de:	3301      	adds	r3, #1
 800b1e0:	653b      	str	r3, [r7, #80]	; 0x50
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e8:	4413      	add	r3, r2
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1cb      	bne.n	800b188 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800b1f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1f2:	663b      	str	r3, [r7, #96]	; 0x60
 800b1f4:	e008      	b.n	800b208 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800b1f6:	f107 021c 	add.w	r2, r7, #28
 800b1fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1fc:	4413      	add	r3, r2
 800b1fe:	2220      	movs	r2, #32
 800b200:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800b202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b204:	3301      	adds	r3, #1
 800b206:	663b      	str	r3, [r7, #96]	; 0x60
 800b208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b20a:	2b0a      	cmp	r3, #10
 800b20c:	d9f3      	bls.n	800b1f6 <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800b20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b210:	2b00      	cmp	r3, #0
 800b212:	d03e      	beq.n	800b292 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b21a:	4413      	add	r3, r2
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b228:	1c59      	adds	r1, r3, #1
 800b22a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b22c:	4413      	add	r3, r2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b23a:	4413      	add	r3, r2
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d008      	beq.n	800b254 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b248:	1c59      	adds	r1, r3, #1
 800b24a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b24c:	4413      	add	r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b25a:	4413      	add	r3, r2
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d008      	beq.n	800b274 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b268:	1c59      	adds	r1, r3, #1
 800b26a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b26c:	4413      	add	r3, r2
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b276:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800b278:	e008      	b.n	800b28c <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800b27a:	f107 021c 	add.w	r2, r7, #28
 800b27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b280:	4413      	add	r3, r2
 800b282:	2220      	movs	r2, #32
 800b284:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800b286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b288:	3301      	adds	r3, #1
 800b28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28e:	2b07      	cmp	r3, #7
 800b290:	d9f3      	bls.n	800b27a <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800b292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b294:	4b8e      	ldr	r3, [pc, #568]	; (800b4d0 <_fx_directory_entry_write+0x42c>)
 800b296:	fba3 2301 	umull	r2, r3, r3, r1
 800b29a:	089a      	lsrs	r2, r3, #2
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	1aca      	subs	r2, r1, r3
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	d106      	bne.n	800b2ba <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800b2ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ae:	4a88      	ldr	r2, [pc, #544]	; (800b4d0 <_fx_directory_entry_write+0x42c>)
 800b2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b4:	089b      	lsrs	r3, r3, #2
 800b2b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b2b8:	e006      	b.n	800b2c8 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800b2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2bc:	4a84      	ldr	r2, [pc, #528]	; (800b4d0 <_fx_directory_entry_write+0x42c>)
 800b2be:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c2:	089b      	lsrs	r3, r3, #2
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800b2d4:	e03f      	b.n	800b356 <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800b2d6:	f107 021c 	add.w	r2, r7, #28
 800b2da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2dc:	4413      	add	r3, r2
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d116      	bne.n	800b312 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2ea:	4413      	add	r3, r2
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d035      	beq.n	800b35e <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2fe:	d002      	beq.n	800b306 <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800b304:	e02c      	b.n	800b360 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800b306:	2308      	movs	r3, #8
 800b308:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800b30a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b30c:	3301      	adds	r3, #1
 800b30e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800b310:	e021      	b.n	800b356 <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800b312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b314:	2b08      	cmp	r3, #8
 800b316:	d109      	bne.n	800b32c <_fx_directory_entry_write+0x288>
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b31e:	4413      	add	r3, r2
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b2e      	cmp	r3, #46	; 0x2e
 800b324:	d102      	bne.n	800b32c <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800b326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b328:	3301      	adds	r3, #1
 800b32a:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800b32c:	f107 021c 	add.w	r2, r7, #28
 800b330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b332:	4413      	add	r3, r2
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6819      	ldr	r1, [r3, #0]
 800b33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b33c:	440b      	add	r3, r1
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d002      	beq.n	800b34a <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800b344:	2300      	movs	r3, #0
 800b346:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800b348:	e00a      	b.n	800b360 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800b34a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b34c:	3301      	adds	r3, #1
 800b34e:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800b350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b352:	3301      	adds	r3, #1
 800b354:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800b356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b358:	2b0a      	cmp	r3, #10
 800b35a:	d9bc      	bls.n	800b2d6 <_fx_directory_entry_write+0x232>
 800b35c:	e000      	b.n	800b360 <_fx_directory_entry_write+0x2bc>
                    break;
 800b35e:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800b360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <_fx_directory_entry_write+0x2ce>
 800b366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b36a:	2b20      	cmp	r3, #32
 800b36c:	d101      	bne.n	800b372 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800b36e:	2300      	movs	r3, #0
 800b370:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800b380:	2300      	movs	r3, #0
 800b382:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800b384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b386:	2b00      	cmp	r3, #0
 800b388:	d15a      	bne.n	800b440 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b38e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	b29b      	uxth	r3, r3
 800b394:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800b396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d901      	bls.n	800b3a0 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800b39c:	2303      	movs	r3, #3
 800b39e:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800b3a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	667a      	str	r2, [r7, #100]	; 0x64
 800b3a6:	3368      	adds	r3, #104	; 0x68
 800b3a8:	f107 0210 	add.w	r2, r7, #16
 800b3ac:	4413      	add	r3, r2
 800b3ae:	227e      	movs	r2, #126	; 0x7e
 800b3b0:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3b8:	e03f      	b.n	800b43a <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800b3ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	0b1b      	lsrs	r3, r3, #12
 800b3c4:	f003 030f 	and.w	r3, r3, #15
 800b3c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ca:	e015      	b.n	800b3f8 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800b3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d105      	bne.n	800b3de <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	0a1b      	lsrs	r3, r3, #8
 800b3d6:	f003 030f 	and.w	r3, r3, #15
 800b3da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3dc:	e00c      	b.n	800b3f8 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800b3de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d105      	bne.n	800b3f0 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800b3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e6:	091b      	lsrs	r3, r3, #4
 800b3e8:	f003 030f 	and.w	r3, r3, #15
 800b3ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ee:	e003      	b.n	800b3f8 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	f003 030f 	and.w	r3, r3, #15
 800b3f6:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800b3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3fa:	2b09      	cmp	r3, #9
 800b3fc:	d90d      	bls.n	800b41a <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800b3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b400:	b2da      	uxtb	r2, r3
 800b402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b404:	1c59      	adds	r1, r3, #1
 800b406:	6679      	str	r1, [r7, #100]	; 0x64
 800b408:	3237      	adds	r2, #55	; 0x37
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	3368      	adds	r3, #104	; 0x68
 800b40e:	f107 0110 	add.w	r1, r7, #16
 800b412:	440b      	add	r3, r1
 800b414:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800b418:	e00c      	b.n	800b434 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800b41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b420:	1c59      	adds	r1, r3, #1
 800b422:	6679      	str	r1, [r7, #100]	; 0x64
 800b424:	3230      	adds	r2, #48	; 0x30
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	3368      	adds	r3, #104	; 0x68
 800b42a:	f107 0110 	add.w	r1, r7, #16
 800b42e:	440b      	add	r3, r1
 800b430:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800b434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b436:	3301      	adds	r3, #1
 800b438:	65bb      	str	r3, [r7, #88]	; 0x58
 800b43a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d9bc      	bls.n	800b3ba <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800b446:	7f3b      	ldrb	r3, [r7, #28]
 800b448:	2be5      	cmp	r3, #229	; 0xe5
 800b44a:	d104      	bne.n	800b456 <_fx_directory_entry_write+0x3b2>
 800b44c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800b452:	238f      	movs	r3, #143	; 0x8f
 800b454:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b456:	2300      	movs	r3, #0
 800b458:	667b      	str	r3, [r7, #100]	; 0x64
 800b45a:	e01d      	b.n	800b498 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800b45c:	f107 021c 	add.w	r2, r7, #28
 800b460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b462:	4413      	add	r3, r2
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800b46a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b46e:	2b60      	cmp	r3, #96	; 0x60
 800b470:	d908      	bls.n	800b484 <_fx_directory_entry_write+0x3e0>
 800b472:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b476:	2b7a      	cmp	r3, #122	; 0x7a
 800b478:	d804      	bhi.n	800b484 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b47a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b47e:	3b20      	subs	r3, #32
 800b480:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800b484:	f107 021c 	add.w	r2, r7, #28
 800b488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b48a:	4413      	add	r3, r2
 800b48c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b490:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b494:	3301      	adds	r3, #1
 800b496:	667b      	str	r3, [r7, #100]	; 0x64
 800b498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b49a:	2b0a      	cmp	r3, #10
 800b49c:	d9de      	bls.n	800b45c <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	791b      	ldrb	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 8095 	beq.w	800b5d2 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ac:	e008      	b.n	800b4c0 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800b4ae:	f107 021c 	add.w	r2, r7, #28
 800b4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b4:	4413      	add	r3, r2
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b4ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4bc:	3301      	adds	r3, #1
 800b4be:	667b      	str	r3, [r7, #100]	; 0x64
 800b4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4c2:	2b0a      	cmp	r3, #10
 800b4c4:	d9f3      	bls.n	800b4ae <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	663b      	str	r3, [r7, #96]	; 0x60
 800b4ce:	e023      	b.n	800b518 <_fx_directory_entry_write+0x474>
 800b4d0:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d8:	4413      	add	r3, r2
 800b4da:	3304      	adds	r3, #4
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e0:	d01e      	beq.n	800b520 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e6:	4413      	add	r3, r2
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d019      	beq.n	800b524 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800b4fe:	f107 021c 	add.w	r2, r7, #28
 800b502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b504:	4413      	add	r3, r2
 800b506:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b50a:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b50c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b50e:	3301      	adds	r3, #1
 800b510:	667b      	str	r3, [r7, #100]	; 0x64
 800b512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b514:	3301      	adds	r3, #1
 800b516:	663b      	str	r3, [r7, #96]	; 0x60
 800b518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b51a:	2b07      	cmp	r3, #7
 800b51c:	d9da      	bls.n	800b4d4 <_fx_directory_entry_write+0x430>
 800b51e:	e002      	b.n	800b526 <_fx_directory_entry_write+0x482>
                    break;
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <_fx_directory_entry_write+0x482>
                    break;
 800b524:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d025      	beq.n	800b580 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b536:	3301      	adds	r3, #1
 800b538:	667b      	str	r3, [r7, #100]	; 0x64
 800b53a:	2308      	movs	r3, #8
 800b53c:	663b      	str	r3, [r7, #96]	; 0x60
 800b53e:	e01a      	b.n	800b576 <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b544:	4413      	add	r3, r2
 800b546:	3304      	adds	r3, #4
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d017      	beq.n	800b57e <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b552:	4413      	add	r3, r2
 800b554:	3304      	adds	r3, #4
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800b55c:	f107 021c 	add.w	r2, r7, #28
 800b560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b562:	4413      	add	r3, r2
 800b564:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b568:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b56a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b56c:	3301      	adds	r3, #1
 800b56e:	667b      	str	r3, [r7, #100]	; 0x64
 800b570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b572:	3301      	adds	r3, #1
 800b574:	663b      	str	r3, [r7, #96]	; 0x60
 800b576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b578:	2b0a      	cmp	r3, #10
 800b57a:	d9e1      	bls.n	800b540 <_fx_directory_entry_write+0x49c>
 800b57c:	e000      	b.n	800b580 <_fx_directory_entry_write+0x4dc>
                        break;
 800b57e:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800b580:	2300      	movs	r3, #0
 800b582:	663b      	str	r3, [r7, #96]	; 0x60
 800b584:	e01d      	b.n	800b5c2 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800b586:	f107 021c 	add.w	r2, r7, #28
 800b58a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b58c:	4413      	add	r3, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b594:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b598:	2b60      	cmp	r3, #96	; 0x60
 800b59a:	d908      	bls.n	800b5ae <_fx_directory_entry_write+0x50a>
 800b59c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b5a0:	2b7a      	cmp	r3, #122	; 0x7a
 800b5a2:	d804      	bhi.n	800b5ae <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b5a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b5a8:	3b20      	subs	r3, #32
 800b5aa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800b5ae:	f107 021c 	add.w	r2, r7, #28
 800b5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b5ba:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800b5bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5be:	3301      	adds	r3, #1
 800b5c0:	663b      	str	r3, [r7, #96]	; 0x60
 800b5c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5c4:	2b0a      	cmp	r3, #10
 800b5c6:	d9de      	bls.n	800b586 <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800b5c8:	7f3b      	ldrb	r3, [r7, #28]
 800b5ca:	2be5      	cmp	r3, #229	; 0xe5
 800b5cc:	d101      	bne.n	800b5d2 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800b5ce:	238f      	movs	r3, #143	; 0x8f
 800b5d0:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5d8:	2300      	movs	r3, #0
 800b5da:	667b      	str	r3, [r7, #100]	; 0x64
 800b5dc:	e016      	b.n	800b60c <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800b5de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5e2:	01db      	lsls	r3, r3, #7
 800b5e4:	b25a      	sxtb	r2, r3
 800b5e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5ea:	085b      	lsrs	r3, r3, #1
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	b25b      	sxtb	r3, r3
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	b25b      	sxtb	r3, r3
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	f107 011c 	add.w	r1, r7, #28
 800b5fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5fc:	440b      	add	r3, r1
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	4413      	add	r3, r2
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b608:	3301      	adds	r3, #1
 800b60a:	667b      	str	r3, [r7, #100]	; 0x64
 800b60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b60e:	2b0a      	cmp	r3, #10
 800b610:	d9e5      	bls.n	800b5de <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800b612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b61e:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800b620:	e0f3      	b.n	800b80a <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800b628:	7f3b      	ldrb	r3, [r7, #28]
 800b62a:	2be5      	cmp	r3, #229	; 0xe5
 800b62c:	d102      	bne.n	800b634 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800b62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b630:	22e5      	movs	r2, #229	; 0xe5
 800b632:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800b634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b636:	330b      	adds	r3, #11
 800b638:	220f      	movs	r2, #15
 800b63a:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800b63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b63e:	330c      	adds	r3, #12
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800b644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b646:	330d      	adds	r3, #13
 800b648:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800b64c:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800b64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b650:	331a      	adds	r3, #26
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800b656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b658:	331b      	adds	r3, #27
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800b65e:	2301      	movs	r3, #1
 800b660:	667b      	str	r3, [r7, #100]	; 0x64
 800b662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b664:	4613      	mov	r3, r2
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4413      	add	r3, r2
 800b66e:	3b0d      	subs	r3, #13
 800b670:	663b      	str	r3, [r7, #96]	; 0x60
 800b672:	e03e      	b.n	800b6f2 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800b674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b676:	2b0b      	cmp	r3, #11
 800b678:	d037      	beq.n	800b6ea <_fx_directory_entry_write+0x646>
 800b67a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b67c:	2b1a      	cmp	r3, #26
 800b67e:	d034      	beq.n	800b6ea <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800b680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b682:	2b0d      	cmp	r3, #13
 800b684:	d102      	bne.n	800b68c <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800b686:	230c      	movs	r3, #12
 800b688:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800b68a:	e02f      	b.n	800b6ec <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800b68c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00d      	beq.n	800b6b0 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800b694:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b698:	4413      	add	r3, r2
 800b69a:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800b69e:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800b6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	e00e      	b.n	800b6ce <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6b6:	441a      	add	r2, r3
 800b6b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b6ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6bc:	440b      	add	r3, r1
 800b6be:	7812      	ldrb	r2, [r2, #0]
 800b6c0:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800b6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b6c8:	4413      	add	r3, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6d4:	4413      	add	r3, r2
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800b6dc:	23ff      	movs	r3, #255	; 0xff
 800b6de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800b6e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	663b      	str	r3, [r7, #96]	; 0x60
 800b6e8:	e000      	b.n	800b6ec <_fx_directory_entry_write+0x648>
                    continue;
 800b6ea:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800b6ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ee:	3302      	adds	r3, #2
 800b6f0:	667b      	str	r3, [r7, #100]	; 0x64
 800b6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6f4:	2b1f      	cmp	r3, #31
 800b6f6:	d9bd      	bls.n	800b674 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800b6f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6fa:	3320      	adds	r3, #32
 800b6fc:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	3320      	adds	r3, #32
 800b702:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d376      	bcc.n	800b7fc <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b710:	2200      	movs	r2, #0
 800b712:	60bb      	str	r3, [r7, #8]
 800b714:	60fa      	str	r2, [r7, #12]
 800b716:	2303      	movs	r3, #3
 800b718:	9302      	str	r3, [sp, #8]
 800b71a:	2301      	movs	r3, #1
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b726:	6978      	ldr	r0, [r7, #20]
 800b728:	f005 fd4a 	bl	80111c0 <_fx_utility_logical_sector_write>
 800b72c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	e2eb      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b73e:	429a      	cmp	r2, r3
 800b740:	d335      	bcc.n	800b7ae <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b746:	3b01      	subs	r3, #1
 800b748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d206      	bcs.n	800b75c <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800b74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b750:	3301      	adds	r3, #1
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	3301      	adds	r3, #1
 800b758:	63bb      	str	r3, [r7, #56]	; 0x38
 800b75a:	e032      	b.n	800b7c2 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	461a      	mov	r2, r3
 800b762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b764:	6978      	ldr	r0, [r7, #20]
 800b766:	f003 ff7d 	bl	800f664 <_fx_utility_FAT_entry_read>
 800b76a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	e2cc      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d907      	bls.n	800b790 <_fx_directory_entry_write+0x6ec>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b786:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d301      	bcc.n	800b794 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800b790:	2308      	movs	r3, #8
 800b792:	e2bd      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800b794:	2300      	movs	r3, #0
 800b796:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800b7a0:	6979      	ldr	r1, [r7, #20]
 800b7a2:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b7a4:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b7a8:	4413      	add	r3, r2
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ac:	e009      	b.n	800b7c2 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d301      	bcc.n	800b7c2 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800b7be:	2308      	movs	r3, #8
 800b7c0:	e2a6      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	9202      	str	r2, [sp, #8]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	9201      	str	r2, [sp, #4]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7dc:	6978      	ldr	r0, [r7, #20]
 800b7de:	f005 fa5b 	bl	8010c98 <_fx_utility_logical_sector_read>
 800b7e2:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	e290      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800b7f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7fa:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800b7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7fe:	3b01      	subs	r3, #1
 800b800:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800b802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b804:	b2da      	uxtb	r2, r3
 800b806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b808:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800b80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f47f af08 	bne.w	800b622 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	791b      	ldrb	r3, [r3, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d116      	bne.n	800b848 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b81a:	2300      	movs	r3, #0
 800b81c:	667b      	str	r3, [r7, #100]	; 0x64
 800b81e:	e00f      	b.n	800b840 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800b820:	f107 021c 	add.w	r2, r7, #28
 800b824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b826:	4413      	add	r3, r2
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800b82e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	677a      	str	r2, [r7, #116]	; 0x74
 800b834:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b838:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800b83a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b83c:	3301      	adds	r3, #1
 800b83e:	667b      	str	r3, [r7, #100]	; 0x64
 800b840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b842:	2b0a      	cmp	r3, #10
 800b844:	d9ec      	bls.n	800b820 <_fx_directory_entry_write+0x77c>
 800b846:	e1a5      	b.n	800bb94 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b848:	2300      	movs	r3, #0
 800b84a:	667b      	str	r3, [r7, #100]	; 0x64
 800b84c:	e007      	b.n	800b85e <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800b84e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b852:	4413      	add	r3, r2
 800b854:	2220      	movs	r2, #32
 800b856:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800b858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85a:	3301      	adds	r3, #1
 800b85c:	667b      	str	r3, [r7, #100]	; 0x64
 800b85e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b860:	2b0a      	cmp	r3, #10
 800b862:	d9f4      	bls.n	800b84e <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b864:	2300      	movs	r3, #0
 800b866:	667b      	str	r3, [r7, #100]	; 0x64
 800b868:	2300      	movs	r3, #0
 800b86a:	663b      	str	r3, [r7, #96]	; 0x60
 800b86c:	e01c      	b.n	800b8a8 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b872:	4413      	add	r3, r2
 800b874:	3304      	adds	r3, #4
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b2e      	cmp	r3, #46	; 0x2e
 800b87a:	d019      	beq.n	800b8b0 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b880:	4413      	add	r3, r2
 800b882:	3304      	adds	r3, #4
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d014      	beq.n	800b8b4 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800b88a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b88e:	4413      	add	r3, r2
 800b890:	6939      	ldr	r1, [r7, #16]
 800b892:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b894:	440a      	add	r2, r1
 800b896:	3204      	adds	r2, #4
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b89c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b89e:	3301      	adds	r3, #1
 800b8a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b8a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b8a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	d9df      	bls.n	800b86e <_fx_directory_entry_write+0x7ca>
 800b8ae:	e002      	b.n	800b8b6 <_fx_directory_entry_write+0x812>
                    break;
 800b8b0:	bf00      	nop
 800b8b2:	e000      	b.n	800b8b6 <_fx_directory_entry_write+0x812>
                    break;
 800b8b4:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8ba:	4413      	add	r3, r2
 800b8bc:	3304      	adds	r3, #4
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d020      	beq.n	800b906 <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b8c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	663b      	str	r3, [r7, #96]	; 0x60
 800b8ce:	e015      	b.n	800b8fc <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8d4:	4413      	add	r3, r2
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d012      	beq.n	800b904 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800b8de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b8e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8e2:	4413      	add	r3, r2
 800b8e4:	6939      	ldr	r1, [r7, #16]
 800b8e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b8e8:	440a      	add	r2, r1
 800b8ea:	3204      	adds	r2, #4
 800b8ec:	7812      	ldrb	r2, [r2, #0]
 800b8ee:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	667b      	str	r3, [r7, #100]	; 0x64
 800b8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	663b      	str	r3, [r7, #96]	; 0x60
 800b8fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8fe:	2b0a      	cmp	r3, #10
 800b900:	d9e6      	bls.n	800b8d0 <_fx_directory_entry_write+0x82c>
 800b902:	e000      	b.n	800b906 <_fx_directory_entry_write+0x862>
                        break;
 800b904:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800b906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b908:	330b      	adds	r3, #11
 800b90a:	677b      	str	r3, [r7, #116]	; 0x74
 800b90c:	e142      	b.n	800bb94 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 80a1 	beq.w	800ba5a <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b922:	b2da      	uxtb	r2, r3
 800b924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	f040 8096 	bne.w	800ba5a <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800b92e:	2300      	movs	r3, #0
 800b930:	663b      	str	r3, [r7, #96]	; 0x60
 800b932:	e08c      	b.n	800ba4e <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2be5      	cmp	r3, #229	; 0xe5
 800b93c:	d102      	bne.n	800b944 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800b93e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b940:	22e5      	movs	r2, #229	; 0xe5
 800b942:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800b944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b946:	3320      	adds	r3, #32
 800b948:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800b94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94c:	3320      	adds	r3, #32
 800b94e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b956:	429a      	cmp	r2, r3
 800b958:	d376      	bcc.n	800ba48 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95c:	2200      	movs	r2, #0
 800b95e:	4698      	mov	r8, r3
 800b960:	4691      	mov	r9, r2
 800b962:	2303      	movs	r3, #3
 800b964:	9302      	str	r3, [sp, #8]
 800b966:	2301      	movs	r3, #1
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	4642      	mov	r2, r8
 800b970:	464b      	mov	r3, r9
 800b972:	6978      	ldr	r0, [r7, #20]
 800b974:	f005 fc24 	bl	80111c0 <_fx_utility_logical_sector_write>
 800b978:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	e1c5      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d335      	bcc.n	800b9fa <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b992:	3b01      	subs	r3, #1
 800b994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b996:	429a      	cmp	r2, r3
 800b998:	d206      	bcs.n	800b9a8 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800b99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99c:	3301      	adds	r3, #1
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9a6:	e032      	b.n	800ba0e <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b9a8:	f107 0318 	add.w	r3, r7, #24
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9b0:	6978      	ldr	r0, [r7, #20]
 800b9b2:	f003 fe57 	bl	800f664 <_fx_utility_FAT_entry_read>
 800b9b6:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	e1a6      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d907      	bls.n	800b9dc <_fx_directory_entry_write+0x938>
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b9d2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d301      	bcc.n	800b9e0 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800b9dc:	2308      	movs	r3, #8
 800b9de:	e197      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800b9ec:	6979      	ldr	r1, [r7, #20]
 800b9ee:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b9f0:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b9f4:	4413      	add	r3, r2
 800b9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f8:	e009      	b.n	800ba0e <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800b9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d301      	bcc.n	800ba0e <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	e180      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba10:	2200      	movs	r2, #0
 800ba12:	469a      	mov	sl, r3
 800ba14:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ba1a:	2203      	movs	r2, #3
 800ba1c:	9202      	str	r2, [sp, #8]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	9201      	str	r2, [sp, #4]
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	f005 f935 	bl	8010c98 <_fx_utility_logical_sector_read>
 800ba2e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800ba30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	e16a      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800ba44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba46:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800ba48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	663b      	str	r3, [r7, #96]	; 0x60
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba54:	429a      	cmp	r2, r3
 800ba56:	f4ff af6d 	bcc.w	800b934 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ba5e:	e007      	b.n	800ba70 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800ba60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ba62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba64:	4413      	add	r3, r2
 800ba66:	2220      	movs	r2, #32
 800ba68:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800ba6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ba70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba72:	2b0a      	cmp	r3, #10
 800ba74:	d9f4      	bls.n	800ba60 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	667b      	str	r3, [r7, #100]	; 0x64
 800ba7a:	e007      	b.n	800ba8c <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800ba7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ba7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba80:	4413      	add	r3, r2
 800ba82:	222e      	movs	r2, #46	; 0x2e
 800ba84:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800ba86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba88:	3301      	adds	r3, #1
 800ba8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba92:	4413      	add	r3, r2
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b2e      	cmp	r3, #46	; 0x2e
 800ba98:	d0f0      	beq.n	800ba7c <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baa0:	4413      	add	r3, r2
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d039      	beq.n	800bb1c <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800baa8:	2300      	movs	r3, #0
 800baaa:	667b      	str	r3, [r7, #100]	; 0x64
 800baac:	2300      	movs	r3, #0
 800baae:	663b      	str	r3, [r7, #96]	; 0x60
 800bab0:	e02d      	b.n	800bb0e <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab8:	4413      	add	r3, r2
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2b2e      	cmp	r3, #46	; 0x2e
 800babe:	d02a      	beq.n	800bb16 <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bac6:	4413      	add	r3, r2
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d025      	beq.n	800bb1a <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bad4:	4413      	add	r3, r2
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800badc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bae0:	2b60      	cmp	r3, #96	; 0x60
 800bae2:	d908      	bls.n	800baf6 <_fx_directory_entry_write+0xa52>
 800bae4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bae8:	2b7a      	cmp	r3, #122	; 0x7a
 800baea:	d804      	bhi.n	800baf6 <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800baec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800baf0:	3b20      	subs	r3, #32
 800baf2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800baf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800baf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bafa:	4413      	add	r3, r2
 800bafc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800bb00:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800bb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb04:	3301      	adds	r3, #1
 800bb06:	667b      	str	r3, [r7, #100]	; 0x64
 800bb08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	663b      	str	r3, [r7, #96]	; 0x60
 800bb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb10:	2b07      	cmp	r3, #7
 800bb12:	d9ce      	bls.n	800bab2 <_fx_directory_entry_write+0xa0e>
 800bb14:	e002      	b.n	800bb1c <_fx_directory_entry_write+0xa78>
                    break;
 800bb16:	bf00      	nop
 800bb18:	e000      	b.n	800bb1c <_fx_directory_entry_write+0xa78>
                    break;
 800bb1a:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb22:	4413      	add	r3, r2
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d031      	beq.n	800bb8e <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800bb2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	667b      	str	r3, [r7, #100]	; 0x64
 800bb30:	2308      	movs	r3, #8
 800bb32:	663b      	str	r3, [r7, #96]	; 0x60
 800bb34:	e026      	b.n	800bb84 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb3c:	4413      	add	r3, r2
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d023      	beq.n	800bb8c <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb4a:	4413      	add	r3, r2
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800bb52:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bb56:	2b60      	cmp	r3, #96	; 0x60
 800bb58:	d908      	bls.n	800bb6c <_fx_directory_entry_write+0xac8>
 800bb5a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bb5e:	2b7a      	cmp	r3, #122	; 0x7a
 800bb60:	d804      	bhi.n	800bb6c <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800bb62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800bb66:	3b20      	subs	r3, #32
 800bb68:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800bb6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bb6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb70:	4413      	add	r3, r2
 800bb72:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800bb76:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800bb78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	667b      	str	r3, [r7, #100]	; 0x64
 800bb7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb80:	3301      	adds	r3, #1
 800bb82:	663b      	str	r3, [r7, #96]	; 0x60
 800bb84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb86:	2b0a      	cmp	r3, #10
 800bb88:	d9d5      	bls.n	800bb36 <_fx_directory_entry_write+0xa92>
 800bb8a:	e000      	b.n	800bb8e <_fx_directory_entry_write+0xaea>
                    break;
 800bb8c:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800bb8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb90:	330b      	adds	r3, #11
 800bb92:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800bb94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	677a      	str	r2, [r7, #116]	; 0x74
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	7f12      	ldrb	r2, [r2, #28]
 800bb9e:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800bba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	677a      	str	r2, [r7, #116]	; 0x74
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	7f52      	ldrb	r2, [r2, #29]
 800bbaa:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800bbac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	677a      	str	r2, [r7, #116]	; 0x74
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	7f92      	ldrb	r2, [r2, #30]
 800bbb6:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bbc0:	f003 fcfd 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bbc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbc6:	3302      	adds	r3, #2
 800bbc8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bbd2:	f003 fcf4 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbd8:	3302      	adds	r3, #2
 800bbda:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bbe4:	f003 fceb 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bbe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbea:	3302      	adds	r3, #2
 800bbec:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d008      	beq.n	800bc08 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800bbfe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bc00:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc02:	f003 fcdc 	bl	800f5be <_fx_utility_16_unsigned_write>
 800bc06:	e003      	b.n	800bc10 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800bc08:	2100      	movs	r1, #0
 800bc0a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc0c:	f003 fcd7 	bl	800f5be <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bc10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc12:	3302      	adds	r3, #2
 800bc14:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc1e:	f003 fcce 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bc22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc24:	3302      	adds	r3, #2
 800bc26:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc30:	f003 fcc5 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bc34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc36:	3302      	adds	r3, #2
 800bc38:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc42:	f003 fcbc 	bl	800f5be <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800bc46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc48:	3302      	adds	r3, #2
 800bc4a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bc52:	4613      	mov	r3, r2
 800bc54:	4619      	mov	r1, r3
 800bc56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc58:	f003 fce3 	bl	800f622 <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800bc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5e:	2200      	movs	r2, #0
 800bc60:	461c      	mov	r4, r3
 800bc62:	4615      	mov	r5, r2
 800bc64:	2303      	movs	r3, #3
 800bc66:	9302      	str	r3, [sp, #8]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4622      	mov	r2, r4
 800bc72:	462b      	mov	r3, r5
 800bc74:	6978      	ldr	r0, [r7, #20]
 800bc76:	f005 faa3 	bl	80111c0 <_fx_utility_logical_sector_write>
 800bc7a:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800bc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc84:	e044      	b.n	800bd10 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d03e      	beq.n	800bd0e <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800bc9c:	4299      	cmp	r1, r3
 800bc9e:	bf08      	it	eq
 800bca0:	4290      	cmpeq	r0, r2
 800bca2:	d134      	bne.n	800bd0e <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d12d      	bne.n	800bd0e <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bcc2:	6979      	ldr	r1, [r7, #20]
 800bcc4:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	7f1a      	ldrb	r2, [r3, #28]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	7f5a      	ldrb	r2, [r3, #29]
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	7f9a      	ldrb	r2, [r3, #30]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6a1a      	ldr	r2, [r3, #32]
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3778      	adds	r7, #120	; 0x78
 800bd14:	46bd      	mov	sp, r7
 800bd16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd1a:	bf00      	nop

0800bd1c <_fx_directory_information_get>:
/**************************************************************************/
UINT  _fx_directory_information_get(FX_MEDIA *media_ptr, CHAR *directory_name,
                                    UINT *attributes, ULONG *size,
                                    UINT *year, UINT *month, UINT *day,
                                    UINT *hour, UINT *minute, UINT *second)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b0a6      	sub	sp, #152	; 0x98
 800bd20:	af02      	add	r7, sp, #8
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_directory_information_gets++;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
#endif

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800bd3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bd42:	613b      	str	r3, [r7, #16]

    /* Clear the short name string.  */
    dir_entry.fx_dir_entry_short_name[0] =  0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	753b      	strb	r3, [r7, #20]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a63      	ldr	r2, [pc, #396]	; (800bedc <_fx_directory_information_get+0x1c0>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d001      	beq.n	800bd56 <_fx_directory_information_get+0x3a>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800bd52:	2311      	movs	r3, #17
 800bd54:	e0bd      	b.n	800bed2 <_fx_directory_information_get+0x1b6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_DIRECTORY_INFORMATION_GET, media_ptr, directory_name, 0, 0, FX_TRACE_DIRECTORY_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a60      	ldr	r2, [pc, #384]	; (800bedc <_fx_directory_information_get+0x1c0>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d001      	beq.n	800bd64 <_fx_directory_information_get+0x48>
 800bd60:	2311      	movs	r3, #17
 800bd62:	e0b6      	b.n	800bed2 <_fx_directory_information_get+0x1b6>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bd6a:	f04f 31ff 	mov.w	r1, #4294967295
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f006 fce4 	bl	801273c <_tx_mutex_get>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <_fx_directory_information_get+0x62>
 800bd7a:	2311      	movs	r3, #17
 800bd7c:	e0a9      	b.n	800bed2 <_fx_directory_information_get+0x1b6>

    /* Search the system for the supplied directory name.  */
    status =  _fx_directory_search(media_ptr, directory_name, &dir_entry, FX_NULL, FX_NULL);
 800bd7e:	f107 0210 	add.w	r2, r7, #16
 800bd82:	2300      	movs	r3, #0
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 f90a 	bl	800bfa4 <_fx_directory_search>
 800bd90:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800bd94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d008      	beq.n	800bdae <_fx_directory_information_get+0x92>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bda2:	4618      	mov	r0, r3
 800bda4:	f006 ff42 	bl	8012c2c <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800bda8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdac:	e091      	b.n	800bed2 <_fx_directory_information_get+0x1b6>
    }

    /* Check the list of open files for others open for writing.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bdb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    search_ptr =  media_ptr -> fx_media_opened_file_list;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bdbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    while (open_count)
 800bdc2:	e029      	b.n	800be18 <_fx_directory_information_get+0xfc>
    {

        /* Look at each opened file to see if the same file is opened
           for writing.  */
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 800bdc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdc8:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800bdcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	bf08      	it	eq
 800bdd4:	4290      	cmpeq	r0, r2
 800bdd6:	d115      	bne.n	800be04 <_fx_directory_information_get+0xe8>
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset) &&
 800bdd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bddc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800bde0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
        if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector == dir_entry.fx_dir_entry_log_sector) &&
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d10e      	bne.n	800be04 <_fx_directory_information_get+0xe8>
            (search_ptr -> fx_file_open_mode))
 800bde6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdea:	689b      	ldr	r3, [r3, #8]
            (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset == dir_entry.fx_dir_entry_byte_offset) &&
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <_fx_directory_information_get+0xe8>
        {

            /* The file has been opened for writing by a previous call. Use the information used by
               the writer instead of what is currently on the media.  */
            _fx_utility_memory_copy((UCHAR *)&search_ptr -> fx_file_dir_entry, (UCHAR *)&dir_entry, sizeof(FX_DIR_ENTRY)); /* Use case of memcpy is verified. */
 800bdf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdf4:	3368      	adds	r3, #104	; 0x68
 800bdf6:	f107 0110 	add.w	r1, r7, #16
 800bdfa:	2270      	movs	r2, #112	; 0x70
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f005 fb47 	bl	8011490 <_fx_utility_memory_copy>
            break;
 800be02:	e00d      	b.n	800be20 <_fx_directory_information_get+0x104>
        }

        /* Adjust the pointer and decrement the search count.  */
        search_ptr =  search_ptr -> fx_file_opened_next;
 800be04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        open_count--;
 800be0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be12:	3b01      	subs	r3, #1
 800be14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (open_count)
 800be18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1d1      	bne.n	800bdc4 <_fx_directory_information_get+0xa8>
    }

    /* Check to see if attributes are required.  */
    if (attributes)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <_fx_directory_information_get+0x114>
    {

        /* Pickup the attributes.  */
        *attributes =  dir_entry.fx_dir_entry_attributes;
 800be26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the size is required.  */
    if (size)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <_fx_directory_information_get+0x122>
    {

        /* Pickup the size.  */
        *size =  (ULONG)dir_entry.fx_dir_entry_file_size;
 800be36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the year is required.  */
    if (year)
 800be3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <_fx_directory_information_get+0x13c>
    {

        /* Pickup the year.  */
        *year =  ((dir_entry.fx_dir_entry_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) +
 800be46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be48:	0a5b      	lsrs	r3, r3, #9
 800be4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4e:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 800be52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be56:	601a      	str	r2, [r3, #0]
                                                                        FX_BASE_YEAR;
    }

    /* Check to see if the month is required.  */
    if (month)
 800be58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d006      	beq.n	800be6e <_fx_directory_information_get+0x152>
    {

        /* Pickup the month.  */
        *month =  (dir_entry.fx_dir_entry_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800be60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be62:	095b      	lsrs	r3, r3, #5
 800be64:	f003 020f 	and.w	r2, r3, #15
 800be68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be6c:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the day is required.  */
    if (day)
 800be6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <_fx_directory_information_get+0x166>
    {

        /* Pickup the day.  */
        *day =  dir_entry.fx_dir_entry_date & FX_DAY_MASK;
 800be76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be78:	f003 021f 	and.w	r2, r3, #31
 800be7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be80:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the hour is required.  */
    if (hour)
 800be82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be86:	2b00      	cmp	r3, #0
 800be88:	d006      	beq.n	800be98 <_fx_directory_information_get+0x17c>
    {

        /* Pickup the hour.  */
        *hour =  (dir_entry.fx_dir_entry_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800be8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8c:	0adb      	lsrs	r3, r3, #11
 800be8e:	f003 021f 	and.w	r2, r3, #31
 800be92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be96:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the minute is required.  */
    if (minute)
 800be98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d006      	beq.n	800beae <_fx_directory_information_get+0x192>
    {

        /* Pickup the minute.  */
        *minute =  (dir_entry.fx_dir_entry_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	095b      	lsrs	r3, r3, #5
 800bea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800beac:	601a      	str	r2, [r3, #0]
    }

    /* Check to see if the second is required.  */
    if (second)
 800beae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d006      	beq.n	800bec4 <_fx_directory_information_get+0x1a8>
    {

        /* Pickup the second.  */
        *second =  (dir_entry.fx_dir_entry_time & FX_SECOND_MASK) * 2;
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	f003 031f 	and.w	r3, r3, #31
 800bebc:	005a      	lsls	r2, r3, #1
 800bebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bec2:	601a      	str	r2, [r3, #0]
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800beca:	4618      	mov	r0, r3
 800becc:	f006 feae 	bl	8012c2c <_tx_mutex_put>

    /* Directory information get is complete, return successful status.  */
    return(FX_SUCCESS);
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3790      	adds	r7, #144	; 0x90
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	4d454449 	.word	0x4d454449

0800bee0 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	2b5c      	cmp	r3, #92	; 0x5c
 800bef6:	d003      	beq.n	800bf00 <_fx_directory_name_extract+0x20>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b2f      	cmp	r3, #47	; 0x2f
 800befe:	d106      	bne.n	800bf0e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3301      	adds	r3, #1
 800bf04:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800bf06:	e002      	b.n	800bf0e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b20      	cmp	r3, #32
 800bf14:	d0f8      	beq.n	800bf08 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bf1a:	e015      	b.n	800bf48 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b5c      	cmp	r3, #92	; 0x5c
 800bf22:	d017      	beq.n	800bf54 <_fx_directory_name_extract+0x74>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	2b2f      	cmp	r3, #47	; 0x2f
 800bf2a:	d013      	beq.n	800bf54 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2bff      	cmp	r3, #255	; 0xff
 800bf30:	d00f      	beq.n	800bf52 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3301      	adds	r3, #1
 800bf46:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e5      	bne.n	800bf1c <_fx_directory_name_extract+0x3c>
 800bf50:	e000      	b.n	800bf54 <_fx_directory_name_extract+0x74>
            break;
 800bf52:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4413      	add	r3, r2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800bf6a:	e007      	b.n	800bf7c <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4413      	add	r3, r2
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4413      	add	r3, r2
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d0f1      	beq.n	800bf6c <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800bf90:	2300      	movs	r3, #0
 800bf92:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800bf94:	687b      	ldr	r3, [r7, #4]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800bfa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfa8:	b0c0      	sub	sp, #256	; 0x100
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bfae:	62b9      	str	r1, [r7, #40]	; 0x28
 800bfb0:	627a      	str	r2, [r7, #36]	; 0x24
 800bfb2:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800bfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd6:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800bfda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d003      	beq.n	800bfec <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	2300      	movs	r3, #0
 800bfea:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	2b5c      	cmp	r3, #92	; 0x5c
 800bff2:	d003      	beq.n	800bffc <_fx_directory_search+0x58>
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b2f      	cmp	r3, #47	; 0x2f
 800bffa:	d103      	bne.n	800c004 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c002:	e044      	b.n	800c08e <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800c004:	4bab      	ldr	r3, [pc, #684]	; (800c2b4 <_fx_directory_search+0x310>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d022      	beq.n	800c056 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800c010:	4ba8      	ldr	r3, [pc, #672]	; (800c2b4 <_fx_directory_search+0x310>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d016      	beq.n	800c04e <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800c020:	4ba4      	ldr	r3, [pc, #656]	; (800c2b4 <_fx_directory_search+0x310>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c028:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c02c:	4619      	mov	r1, r3
 800c02e:	2370      	movs	r3, #112	; 0x70
 800c030:	461a      	mov	r2, r3
 800c032:	f008 fda5 	bl	8014b80 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800c036:	4b9f      	ldr	r3, [pc, #636]	; (800c2b4 <_fx_directory_search+0x310>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c03e:	3370      	adds	r3, #112	; 0x70
 800c040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800c044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c04c:	e01f      	b.n	800c08e <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c054:	e01b      	b.n	800c08e <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d012      	beq.n	800c088 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c068:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800c06c:	2370      	movs	r3, #112	; 0x70
 800c06e:	461a      	mov	r2, r3
 800c070:	f008 fd86 	bl	8014b80 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800c07a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800c07e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c086:	e002      	b.n	800c08e <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 81b9 	beq.w	800c40c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c0a6:	d02d      	beq.n	800c104 <_fx_directory_search+0x160>
 800c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b2f      	cmp	r3, #47	; 0x2f
 800c0ae:	d14c      	bne.n	800c14a <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800c0b0:	e028      	b.n	800c104 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800c0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b8:	4413      	add	r3, r2
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800c0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800c0d2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c0d6:	2b5c      	cmp	r3, #92	; 0x5c
 800c0d8:	d102      	bne.n	800c0e0 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800c0da:	232f      	movs	r3, #47	; 0x2f
 800c0dc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800c0e0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c0e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c0e6:	d102      	bne.n	800c0ee <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800c0e8:	232f      	movs	r3, #47	; 0x2f
 800c0ea:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800c0ee:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c0f2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d110      	bne.n	800c11c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800c0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fe:	3301      	adds	r3, #1
 800c100:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c108:	2bfe      	cmp	r3, #254	; 0xfe
 800c10a:	d808      	bhi.n	800c11e <_fx_directory_search+0x17a>
 800c10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c112:	4413      	add	r3, r2
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1cb      	bne.n	800c0b2 <_fx_directory_search+0x10e>
 800c11a:	e000      	b.n	800c11e <_fx_directory_search+0x17a>
                    break;
 800c11c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800c11e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c124:	4413      	add	r3, r2
 800c126:	7819      	ldrb	r1, [r3, #0]
 800c128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c12e:	4413      	add	r3, r2
 800c130:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	4299      	cmp	r1, r3
 800c138:	d003      	beq.n	800c142 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800c140:	e0cf      	b.n	800c2e2 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800c148:	e0cb      	b.n	800c2e2 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800c14a:	2301      	movs	r3, #1
 800c14c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800c150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c154:	2b00      	cmp	r3, #0
 800c156:	d043      	beq.n	800c1e0 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c158:	e029      	b.n	800c1ae <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800c15a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c160:	4413      	add	r3, r2
 800c162:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800c16c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c174:	4413      	add	r3, r2
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800c17c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c180:	2b5c      	cmp	r3, #92	; 0x5c
 800c182:	d102      	bne.n	800c18a <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800c184:	232f      	movs	r3, #47	; 0x2f
 800c186:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800c18a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c18e:	2b5c      	cmp	r3, #92	; 0x5c
 800c190:	d102      	bne.n	800c198 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800c192:	232f      	movs	r3, #47	; 0x2f
 800c194:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800c198:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c19c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d111      	bne.n	800c1c8 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800c1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b2:	2bfe      	cmp	r3, #254	; 0xfe
 800c1b4:	d809      	bhi.n	800c1ca <_fx_directory_search+0x226>
 800c1b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1c9      	bne.n	800c15a <_fx_directory_search+0x1b6>
 800c1c6:	e000      	b.n	800c1ca <_fx_directory_search+0x226>
                        break;
 800c1c8:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800c1ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1d2:	4413      	add	r3, r2
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800c1e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d07c      	beq.n	800c2e2 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800c1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b5c      	cmp	r3, #92	; 0x5c
 800c1f8:	d00c      	beq.n	800c214 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800c1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c200:	4413      	add	r3, r2
 800c202:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c206:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800c208:	2b2f      	cmp	r3, #47	; 0x2f
 800c20a:	d003      	beq.n	800c214 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c212:	e004      	b.n	800c21e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800c214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c218:	3301      	adds	r3, #1
 800c21a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800c21e:	2300      	movs	r3, #0
 800c220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800c224:	e02d      	b.n	800c282 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800c226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c228:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c22c:	4413      	add	r3, r2
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800c234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800c246:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c24a:	2b5c      	cmp	r3, #92	; 0x5c
 800c24c:	d102      	bne.n	800c254 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800c24e:	232f      	movs	r3, #47	; 0x2f
 800c250:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800c254:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c258:	2b5c      	cmp	r3, #92	; 0x5c
 800c25a:	d102      	bne.n	800c262 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800c25c:	232f      	movs	r3, #47	; 0x2f
 800c25e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800c262:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c266:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d119      	bne.n	800c2a2 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800c26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c272:	3301      	adds	r3, #1
 800c274:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800c278:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c27c:	3301      	adds	r3, #1
 800c27e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800c282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c286:	2bfe      	cmp	r3, #254	; 0xfe
 800c288:	d80c      	bhi.n	800c2a4 <_fx_directory_search+0x300>
 800c28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c290:	4413      	add	r3, r2
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <_fx_directory_search+0x300>
 800c298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1c2      	bne.n	800c226 <_fx_directory_search+0x282>
 800c2a0:	e000      	b.n	800c2a4 <_fx_directory_search+0x300>
                        break;
 800c2a2:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a8:	2bff      	cmp	r3, #255	; 0xff
 800c2aa:	d905      	bls.n	800c2b8 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2b2:	e016      	b.n	800c2e2 <_fx_directory_search+0x33e>
 800c2b4:	2401501c 	.word	0x2401501c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800c2b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d010      	beq.n	800c2e2 <_fx_directory_search+0x33e>
 800c2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2c6:	4413      	add	r3, r2
 800c2c8:	7819      	ldrb	r1, [r3, #0]
 800c2ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	d002      	beq.n	800c2e2 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800c2e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 8090 	beq.w	800c40c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800c2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800c2fe:	2270      	movs	r2, #112	; 0x70
 800c300:	4619      	mov	r1, r3
 800c302:	f008 fc3d 	bl	8014b80 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c30c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c30e:	2300      	movs	r3, #0
 800c310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c314:	e01d      	b.n	800c352 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800c316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c31a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c31e:	4413      	add	r3, r2
 800c320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c322:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c326:	440a      	add	r2, r1
 800c328:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800c32c:	7812      	ldrb	r2, [r2, #0]
 800c32e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800c330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c338:	4413      	add	r3, r2
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800c340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c344:	2bfe      	cmp	r3, #254	; 0xfe
 800c346:	d909      	bls.n	800c35c <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c34c:	3301      	adds	r3, #1
 800c34e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c356:	2bff      	cmp	r3, #255	; 0xff
 800c358:	d9dd      	bls.n	800c316 <_fx_directory_search+0x372>
 800c35a:	e000      	b.n	800c35e <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800c35c:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d041      	beq.n	800c3e8 <_fx_directory_search+0x444>
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d03c      	beq.n	800c3e8 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800c376:	6a3a      	ldr	r2, [r7, #32]
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	4610      	mov	r0, r2
 800c37c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c380:	2270      	movs	r2, #112	; 0x70
 800c382:	4619      	mov	r1, r3
 800c384:	f008 fbfc 	bl	8014b80 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c38e:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3a0:	e01c      	b.n	800c3dc <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800c3a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3aa:	441a      	add	r2, r3
 800c3ac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800c3b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3b4:	440b      	add	r3, r1
 800c3b6:	7812      	ldrb	r2, [r2, #0]
 800c3b8:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800c3ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c3be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3c2:	4413      	add	r3, r2
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c3ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3ce:	2bfe      	cmp	r3, #254	; 0xfe
 800c3d0:	d909      	bls.n	800c3e6 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c3d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3e0:	2bff      	cmp	r3, #255	; 0xff
 800c3e2:	d9de      	bls.n	800c3a2 <_fx_directory_search+0x3fe>
 800c3e4:	e000      	b.n	800c3e8 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800c3e6:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800c3e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800c3f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c3f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3f8:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800c408:	2300      	movs	r3, #0
 800c40a:	e2ff      	b.n	800ca0c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c40e:	2300      	movs	r3, #0
 800c410:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800c414:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800c41c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800c424:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c42a:	f7ff fd59 	bl	800bee0 <_fx_directory_name_extract>
 800c42e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800c430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80be 	beq.w	800c5b6 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c43a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c43e:	2300      	movs	r3, #0
 800c440:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800c442:	2300      	movs	r3, #0
 800c444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800c448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c452:	e02b      	b.n	800c4ac <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800c454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c458:	3301      	adds	r3, #1
 800c45a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800c45e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c462:	461a      	mov	r2, r3
 800c464:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800c468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46a:	f003 f8fb 	bl	800f664 <_fx_utility_FAT_entry_read>
 800c46e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800c472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800c47a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c47e:	e2c5      	b.n	800ca0c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800c480:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c484:	2b01      	cmp	r3, #1
 800c486:	d90b      	bls.n	800c4a0 <_fx_directory_search+0x4fc>
 800c488:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c48c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c490:	4293      	cmp	r3, r2
 800c492:	d005      	beq.n	800c4a0 <_fx_directory_search+0x4fc>
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d201      	bcs.n	800c4a4 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e2b3      	b.n	800ca0c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800c4a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c4b2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c4b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d3ca      	bcc.n	800c454 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	469a      	mov	sl, r3
 800c4c6:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c4d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	fb03 f20b 	mul.w	r2, r3, fp
 800c4dc:	460b      	mov	r3, r1
 800c4de:	fb0a f303 	mul.w	r3, sl, r3
 800c4e2:	4413      	add	r3, r2
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	fbaa 4502 	umull	r4, r5, sl, r2
 800c4ea:	442b      	add	r3, r5
 800c4ec:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c4ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	60bb      	str	r3, [r7, #8]
 800c4f6:	60fa      	str	r2, [r7, #12]
 800c4f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	fb03 f205 	mul.w	r2, r3, r5
 800c502:	460b      	mov	r3, r1
 800c504:	fb04 f303 	mul.w	r3, r4, r3
 800c508:	4413      	add	r3, r2
 800c50a:	4602      	mov	r2, r0
 800c50c:	fba4 8902 	umull	r8, r9, r4, r2
 800c510:	444b      	add	r3, r9
 800c512:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c514:	f04f 0200 	mov.w	r2, #0
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800c520:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800c524:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800c528:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800c52c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c530:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c534:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d046      	beq.n	800c5cc <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800c546:	6a3a      	ldr	r2, [r7, #32]
 800c548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c54c:	4610      	mov	r0, r2
 800c54e:	4619      	mov	r1, r3
 800c550:	2370      	movs	r3, #112	; 0x70
 800c552:	461a      	mov	r2, r3
 800c554:	f008 fb14 	bl	8014b80 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c558:	6a3a      	ldr	r2, [r7, #32]
 800c55a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c55e:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c56a:	2300      	movs	r3, #0
 800c56c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c570:	e01c      	b.n	800c5ac <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800c572:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c57a:	18d1      	adds	r1, r2, r3
 800c57c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c584:	441a      	add	r2, r3
 800c586:	780b      	ldrb	r3, [r1, #0]
 800c588:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800c58a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d103      	bne.n	800c5a2 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c59a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c59e:	2bfe      	cmp	r3, #254	; 0xfe
 800c5a0:	d913      	bls.n	800c5ca <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c5a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c5ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5b0:	2bff      	cmp	r3, #255	; 0xff
 800c5b2:	d9de      	bls.n	800c572 <_fx_directory_search+0x5ce>
 800c5b4:	e00a      	b.n	800c5cc <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800c5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	603b      	str	r3, [r7, #0]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800c5c8:	e000      	b.n	800c5cc <_fx_directory_search+0x628>
                            break;
 800c5ca:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800c5d8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c5e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e4:	f7fe f9d8 	bl	800a998 <_fx_directory_entry_read>
 800c5e8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800c5ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800c5f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d002      	beq.n	800c604 <_fx_directory_search+0x660>
            {
                return(status);
 800c5fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c602:	e203      	b.n	800ca0c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 80c6 	beq.w	800c79c <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	7f1b      	ldrb	r3, [r3, #28]
 800c614:	f003 0308 	and.w	r3, r3, #8
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f040 80a9 	bne.w	800c770 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2be5      	cmp	r3, #229	; 0xe5
 800c626:	d104      	bne.n	800c632 <_fx_directory_search+0x68e>
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	791b      	ldrb	r3, [r3, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80a1 	beq.w	800c774 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800c632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800c642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800c64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800c656:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c65a:	2b60      	cmp	r3, #96	; 0x60
 800c65c:	d908      	bls.n	800c670 <_fx_directory_search+0x6cc>
 800c65e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c662:	2b7a      	cmp	r3, #122	; 0x7a
 800c664:	d804      	bhi.n	800c670 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800c666:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c66a:	3b20      	subs	r3, #32
 800c66c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c670:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c674:	2b60      	cmp	r3, #96	; 0x60
 800c676:	d908      	bls.n	800c68a <_fx_directory_search+0x6e6>
 800c678:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c67c:	2b7a      	cmp	r3, #122	; 0x7a
 800c67e:	d804      	bhi.n	800c68a <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c680:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c684:	3b20      	subs	r3, #32
 800c686:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800c68a:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c68e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c692:	429a      	cmp	r2, r3
 800c694:	d10f      	bne.n	800c6b6 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800c696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c69a:	3301      	adds	r3, #1
 800c69c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800c6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800c6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1c6      	bne.n	800c642 <_fx_directory_search+0x69e>
 800c6b4:	e000      	b.n	800c6b8 <_fx_directory_search+0x714>
                    break;
 800c6b6:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c6b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10b      	bne.n	800c6da <_fx_directory_search+0x736>
 800c6c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6c6:	781a      	ldrb	r2, [r3, #0]
 800c6c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d103      	bne.n	800c6da <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c6d8:	e04d      	b.n	800c776 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	791b      	ldrb	r3, [r3, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d049      	beq.n	800c776 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800c6e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800c6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800c6fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c706:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c70a:	2b60      	cmp	r3, #96	; 0x60
 800c70c:	d908      	bls.n	800c720 <_fx_directory_search+0x77c>
 800c70e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c712:	2b7a      	cmp	r3, #122	; 0x7a
 800c714:	d804      	bhi.n	800c720 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c716:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c71a:	3b20      	subs	r3, #32
 800c71c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800c720:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c724:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c728:	429a      	cmp	r2, r3
 800c72a:	d10f      	bne.n	800c74c <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800c72c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c730:	3301      	adds	r3, #1
 800c732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800c736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c73a:	3301      	adds	r3, #1
 800c73c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800c740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1d3      	bne.n	800c6f2 <_fx_directory_search+0x74e>
 800c74a:	e000      	b.n	800c74e <_fx_directory_search+0x7aa>
                        break;
 800c74c:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10e      	bne.n	800c776 <_fx_directory_search+0x7d2>
 800c758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c75c:	781a      	ldrb	r2, [r3, #0]
 800c75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d106      	bne.n	800c776 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800c768:	2301      	movs	r3, #1
 800c76a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c76e:	e002      	b.n	800c776 <_fx_directory_search+0x7d2>
                continue;
 800c770:	bf00      	nop
 800c772:	e000      	b.n	800c776 <_fx_directory_search+0x7d2>
                continue;
 800c774:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800c776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c77a:	2200      	movs	r2, #0
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	61fa      	str	r2, [r7, #28]
 800c780:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c784:	69b9      	ldr	r1, [r7, #24]
 800c786:	4291      	cmp	r1, r2
 800c788:	69f9      	ldr	r1, [r7, #28]
 800c78a:	eb71 0303 	sbcs.w	r3, r1, r3
 800c78e:	d206      	bcs.n	800c79e <_fx_directory_search+0x7fa>
 800c790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c794:	2b00      	cmp	r3, #0
 800c796:	f43f af1f 	beq.w	800c5d8 <_fx_directory_search+0x634>
 800c79a:	e000      	b.n	800c79e <_fx_directory_search+0x7fa>
                break;
 800c79c:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800c79e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800c7a6:	2304      	movs	r3, #4
 800c7a8:	e130      	b.n	800ca0c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	7f1b      	ldrb	r3, [r3, #28]
 800c7ae:	f003 0310 	and.w	r3, r3, #16
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d04f      	beq.n	800c856 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c7bc:	4619      	mov	r1, r3
 800c7be:	2370      	movs	r3, #112	; 0x70
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	f008 f9dd 	bl	8014b80 <memcpy>
            search_dir_ptr =  &search_dir;
 800c7c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c7ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800c7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d13f      	bne.n	800c860 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800c7e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d02e      	beq.n	800c84e <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800c7f8:	6a3a      	ldr	r2, [r7, #32]
 800c7fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7fe:	4610      	mov	r0, r2
 800c800:	4619      	mov	r1, r3
 800c802:	2370      	movs	r3, #112	; 0x70
 800c804:	461a      	mov	r2, r3
 800c806:	f008 f9bb 	bl	8014b80 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c80a:	6a3a      	ldr	r2, [r7, #32]
 800c80c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c810:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c81c:	2300      	movs	r3, #0
 800c81e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c822:	e010      	b.n	800c846 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800c824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c82c:	18d1      	adds	r1, r2, r3
 800c82e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c836:	441a      	add	r2, r3
 800c838:	780b      	ldrb	r3, [r1, #0]
 800c83a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c83c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c840:	3301      	adds	r3, #1
 800c842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c84a:	2bff      	cmp	r3, #255	; 0xff
 800c84c:	d9ea      	bls.n	800c824 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c854:	e004      	b.n	800c860 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800c85c:	2304      	movs	r3, #4
 800c85e:	e0d5      	b.n	800ca0c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	f47f add6 	bne.w	800c414 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800c868:	2300      	movs	r3, #0
 800c86a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800c86e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b5c      	cmp	r3, #92	; 0x5c
 800c876:	d028      	beq.n	800c8ca <_fx_directory_search+0x926>
 800c878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b2f      	cmp	r3, #47	; 0x2f
 800c880:	d023      	beq.n	800c8ca <_fx_directory_search+0x926>
 800c882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c886:	2b00      	cmp	r3, #0
 800c888:	d01f      	beq.n	800c8ca <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c88a:	e012      	b.n	800c8b2 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800c88c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c894:	4413      	add	r3, r2
 800c896:	7819      	ldrb	r1, [r3, #0]
 800c898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c8a4:	460a      	mov	r2, r1
 800c8a6:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800c8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b6:	2bfe      	cmp	r3, #254	; 0xfe
 800c8b8:	d807      	bhi.n	800c8ca <_fx_directory_search+0x926>
 800c8ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c8be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c2:	4413      	add	r3, r2
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e0      	bne.n	800c88c <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800c8ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800c8d2:	d012      	beq.n	800c8fa <_fx_directory_search+0x956>
 800c8d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b2f      	cmp	r3, #47	; 0x2f
 800c8dc:	d00d      	beq.n	800c8fa <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800c8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e2:	2bfe      	cmp	r3, #254	; 0xfe
 800c8e4:	d809      	bhi.n	800c8fa <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800c8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f2:	4413      	add	r3, r2
 800c8f4:	222f      	movs	r2, #47	; 0x2f
 800c8f6:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c900:	e017      	b.n	800c932 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800c902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c90a:	4413      	add	r3, r2
 800c90c:	7819      	ldrb	r1, [r3, #0]
 800c90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c914:	4413      	add	r3, r2
 800c916:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c91a:	460a      	mov	r2, r1
 800c91c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800c91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c922:	3301      	adds	r3, #1
 800c924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800c928:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c92c:	3301      	adds	r3, #1
 800c92e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c936:	2bff      	cmp	r3, #255	; 0xff
 800c938:	d807      	bhi.n	800c94a <_fx_directory_search+0x9a6>
 800c93a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c93e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c942:	4413      	add	r3, r2
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1db      	bne.n	800c902 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800c94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94e:	2bff      	cmp	r3, #255	; 0xff
 800c950:	d808      	bhi.n	800c964 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800c952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c958:	4413      	add	r3, r2
 800c95a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c95e:	2200      	movs	r2, #0
 800c960:	701a      	strb	r2, [r3, #0]
 800c962:	e003      	b.n	800c96c <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	2200      	movs	r2, #0
 800c968:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800c96c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00e      	beq.n	800c992 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c97a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c97e:	4611      	mov	r1, r2
 800c980:	2270      	movs	r2, #112	; 0x70
 800c982:	4618      	mov	r0, r3
 800c984:	f008 f8fc 	bl	8014b80 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	2201      	movs	r2, #1
 800c98c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800c990:	e003      	b.n	800c99a <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2200      	movs	r2, #0
 800c996:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c99e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	2270      	movs	r2, #112	; 0x70
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f008 f8ea 	bl	8014b80 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c9be:	e01e      	b.n	800c9fe <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9c8:	4413      	add	r3, r2
 800c9ca:	7819      	ldrb	r1, [r3, #0]
 800c9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800c9d8:	460a      	mov	r2, r1
 800c9da:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9e4:	4413      	add	r3, r2
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800c9ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9f0:	2bfe      	cmp	r3, #254	; 0xfe
 800c9f2:	d909      	bls.n	800ca08 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c9f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c9fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ca02:	2bff      	cmp	r3, #255	; 0xff
 800ca04:	d9dc      	bls.n	800c9c0 <_fx_directory_search+0xa1c>
 800ca06:	e000      	b.n	800ca0a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800ca08:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ca12:	46bd      	mov	sp, r7
 800ca14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ca18 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a49      	ldr	r2, [pc, #292]	; (800cb4c <_fx_file_close+0x134>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d001      	beq.n	800ca2e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800ca2a:	2307      	movs	r3, #7
 800ca2c:	e08a      	b.n	800cb44 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca32:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a42      	ldr	r2, [pc, #264]	; (800cb50 <_fx_file_close+0x138>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d001      	beq.n	800ca50 <_fx_file_close+0x38>
 800ca4c:	2311      	movs	r3, #17
 800ca4e:	e079      	b.n	800cb44 <_fx_file_close+0x12c>
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca56:	f04f 31ff 	mov.w	r1, #4294967295
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f005 fe6e 	bl	801273c <_tx_mutex_get>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <_fx_file_close+0x52>
 800ca66:	2311      	movs	r3, #17
 800ca68:	e06c      	b.n	800cb44 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d104      	bne.n	800ca7e <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800ca7c:	e014      	b.n	800caa8 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800ca86:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800ca90:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d104      	bne.n	800caa8 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800caae:	1e5a      	subs	r2, r3, #1
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a26      	ldr	r2, [pc, #152]	; (800cb54 <_fx_file_close+0x13c>)
 800caba:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d138      	bne.n	800cb36 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d034      	beq.n	800cb36 <_fx_file_close+0x11e>
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cacc:	f3ef 8310 	mrs	r3, PRIMASK
 800cad0:	60fb      	str	r3, [r7, #12]
#endif
    return(posture);
 800cad2:	68fb      	ldr	r3, [r7, #12]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800cad4:	60bb      	str	r3, [r7, #8]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800cad6:	b672      	cpsid	i
#endif
    return(int_posture);
 800cad8:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800cada:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800cadc:	4b1e      	ldr	r3, [pc, #120]	; (800cb58 <_fx_file_close+0x140>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800cae6:	4b1d      	ldr	r3, [pc, #116]	; (800cb5c <_fx_file_close+0x144>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800caf0:	4b1a      	ldr	r3, [pc, #104]	; (800cb5c <_fx_file_close+0x144>)
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f383 8810 	msr	PRIMASK, r3
}
 800cb04:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3368      	adds	r3, #104	; 0x68
 800cb16:	4619      	mov	r1, r3
 800cb18:	69f8      	ldr	r0, [r7, #28]
 800cb1a:	f7fe fac3 	bl	800b0a4 <_fx_directory_entry_write>
 800cb1e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d007      	beq.n	800cb36 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f006 f87d 	bl	8012c2c <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	e006      	b.n	800cb44 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f006 f875 	bl	8012c2c <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3720      	adds	r7, #32
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	46494c45 	.word	0x46494c45
 800cb50:	4d454449 	.word	0x4d454449
 800cb54:	46494c43 	.word	0x46494c43
 800cb58:	24014d88 	.word	0x24014d88
 800cb5c:	24014d84 	.word	0x24014d84

0800cb60 <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800cb60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb64:	b0c2      	sub	sp, #264	; 0x108
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800cb6c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800cb76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4bcf      	ldr	r3, [pc, #828]	; (800cebc <_fx_file_extended_seek+0x35c>)
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d001      	beq.n	800cb86 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800cb82:	2307      	movs	r3, #7
 800cb84:	e2b5      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cb86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800cb90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb94:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cb98:	1c5a      	adds	r2, r3, #1
 800cb9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb9e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4bc3      	ldr	r3, [pc, #780]	; (800cec0 <_fx_file_extended_seek+0x360>)
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d001      	beq.n	800cbbc <_fx_file_extended_seek+0x5c>
 800cbb8:	2311      	movs	r3, #17
 800cbba:	e29a      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
 800cbbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbc0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cbc4:	f04f 31ff 	mov.w	r1, #4294967295
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f005 fdb7 	bl	801273c <_tx_mutex_get>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <_fx_file_extended_seek+0x78>
 800cbd4:	2311      	movs	r3, #17
 800cbd6:	e28c      	b.n	800d0f2 <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800cbd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbdc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800cbe0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cbe4:	428b      	cmp	r3, r1
 800cbe6:	bf08      	it	eq
 800cbe8:	4282      	cmpeq	r2, r0
 800cbea:	d108      	bne.n	800cbfe <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f006 f819 	bl	8012c2c <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e279      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cc12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d108      	bne.n	800cc2c <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cc1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f006 f802 	bl	8012c2c <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e262      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800cc2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc30:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800cc34:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc38:	4290      	cmp	r0, r2
 800cc3a:	eb71 0303 	sbcs.w	r3, r1, r3
 800cc3e:	d205      	bcs.n	800cc4c <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800cc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc44:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cc48:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800cc4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc50:	699b      	ldr	r3, [r3, #24]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cc5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc60:	2200      	movs	r2, #0
 800cc62:	469a      	mov	sl, r3
 800cc64:	4693      	mov	fp, r2
 800cc66:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	fb0a f203 	mul.w	r2, sl, r3
 800cc70:	4603      	mov	r3, r0
 800cc72:	fb03 f30b 	mul.w	r3, r3, fp
 800cc76:	4413      	add	r3, r2
 800cc78:	4602      	mov	r2, r0
 800cc7a:	fba2 450a 	umull	r4, r5, r2, sl
 800cc7e:	442b      	add	r3, r5
 800cc80:	461d      	mov	r5, r3
 800cc82:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc86:	42a2      	cmp	r2, r4
 800cc88:	41ab      	sbcs	r3, r5
 800cc8a:	f0c0 8156 	bcc.w	800cf3a <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800cc8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc94:	2200      	movs	r2, #0
 800cc96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc9a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cc9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cca8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ccac:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800ccb0:	462b      	mov	r3, r5
 800ccb2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800ccb6:	4652      	mov	r2, sl
 800ccb8:	fb02 f203 	mul.w	r2, r2, r3
 800ccbc:	465b      	mov	r3, fp
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	fb01 f303 	mul.w	r3, r1, r3
 800ccc4:	4413      	add	r3, r2
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	4651      	mov	r1, sl
 800ccca:	fba2 8901 	umull	r8, r9, r2, r1
 800ccce:	444b      	add	r3, r9
 800ccd0:	4699      	mov	r9, r3
 800ccd2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800ccd6:	4590      	cmp	r8, r2
 800ccd8:	eb79 0303 	sbcs.w	r3, r9, r3
 800ccdc:	d225      	bcs.n	800cd2a <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800ccde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cce2:	6a1b      	ldr	r3, [r3, #32]
 800cce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800cce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ccf2:	fb02 f303 	mul.w	r3, r2, r3
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ccfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800cd00:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cd04:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cd08:	4621      	mov	r1, r4
 800cd0a:	1a51      	subs	r1, r2, r1
 800cd0c:	6139      	str	r1, [r7, #16]
 800cd0e:	4629      	mov	r1, r5
 800cd10:	eb63 0301 	sbc.w	r3, r3, r1
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd1a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800cd1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cd28:	e0b7      	b.n	800ce9a <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd2e:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800cd30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd34:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cd36:	4413      	add	r3, r2
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800cd3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	1e5a      	subs	r2, r3, #1
 800cd46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd4a:	fb02 f303 	mul.w	r3, r2, r3
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd54:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800cd58:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cd5c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800cd60:	4621      	mov	r1, r4
 800cd62:	1a51      	subs	r1, r2, r1
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4629      	mov	r1, r5
 800cd68:	eb63 0301 	sbc.w	r3, r3, r1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cd72:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800cd76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd82:	e08a      	b.n	800ce9a <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800cd84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd88:	3301      	adds	r3, #1
 800cd8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800cd8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800cd92:	461a      	mov	r2, r3
 800cd94:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800cd98:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800cd9c:	f002 fc62 	bl	800f664 <_fx_utility_FAT_entry_read>
 800cda0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800cda4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d009      	beq.n	800cdc0 <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f005 ff39 	bl	8012c2c <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cdba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cdbe:	e198      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800cdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800cdd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdda:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800cdde:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cde2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800cde6:	4621      	mov	r1, r4
 800cde8:	4291      	cmp	r1, r2
 800cdea:	4629      	mov	r1, r5
 800cdec:	eb71 0303 	sbcs.w	r3, r1, r3
 800cdf0:	d216      	bcs.n	800ce20 <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800cdf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cdfc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ce00:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ce04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ce08:	4621      	mov	r1, r4
 800ce0a:	1a51      	subs	r1, r2, r1
 800ce0c:	6039      	str	r1, [r7, #0]
 800ce0e:	4629      	mov	r1, r5
 800ce10:	eb63 0301 	sbc.w	r3, r3, r1
 800ce14:	607b      	str	r3, [r7, #4]
 800ce16:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ce1a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800ce1e:	e03c      	b.n	800ce9a <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800ce20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce28:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800ce2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ce2e:	1e5a      	subs	r2, r3, #1
 800ce30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce34:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800ce36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ce40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ce44:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ce48:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	4283      	cmp	r3, r0
 800ce52:	bf08      	it	eq
 800ce54:	428a      	cmpeq	r2, r1
 800ce56:	d135      	bne.n	800cec4 <_fx_file_extended_seek+0x364>
 800ce58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d931      	bls.n	800cec4 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800ce60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ce68:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ce6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d227      	bcs.n	800cec4 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800ce74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7c:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800ce7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce8a:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800ce8c:	f04f 0200 	mov.w	r2, #0
 800ce90:	f04f 0300 	mov.w	r3, #0
 800ce94:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800ce98:	e014      	b.n	800cec4 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800ce9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d911      	bls.n	800cec6 <_fx_file_extended_seek+0x366>
 800cea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ceaa:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	f4ff af66 	bcc.w	800cd84 <_fx_file_extended_seek+0x224>
 800ceb8:	e005      	b.n	800cec6 <_fx_file_extended_seek+0x366>
 800ceba:	bf00      	nop
 800cebc:	46494c45 	.word	0x46494c45
 800cec0:	4d454449 	.word	0x4d454449
                    break;
 800cec4:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800cec6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ced0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ced4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ced8:	2200      	movs	r2, #0
 800ceda:	67bb      	str	r3, [r7, #120]	; 0x78
 800cedc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cede:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800cee2:	462b      	mov	r3, r5
 800cee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cee8:	4642      	mov	r2, r8
 800ceea:	fb02 f203 	mul.w	r2, r2, r3
 800ceee:	464b      	mov	r3, r9
 800cef0:	4621      	mov	r1, r4
 800cef2:	fb01 f303 	mul.w	r3, r1, r3
 800cef6:	4413      	add	r3, r2
 800cef8:	4622      	mov	r2, r4
 800cefa:	4641      	mov	r1, r8
 800cefc:	fba2 1201 	umull	r1, r2, r2, r1
 800cf00:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800cf04:	460a      	mov	r2, r1
 800cf06:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800cf0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800cf0e:	4413      	add	r3, r2
 800cf10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf14:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cf18:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4291      	cmp	r1, r2
 800cf20:	4629      	mov	r1, r5
 800cf22:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf26:	d22f      	bcs.n	800cf88 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800cf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf2c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cf30:	4618      	mov	r0, r3
 800cf32:	f005 fe7b 	bl	8012c2c <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800cf36:	2308      	movs	r3, #8
 800cf38:	e0db      	b.n	800d0f2 <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800cf3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf3e:	2200      	movs	r2, #0
 800cf40:	673b      	str	r3, [r7, #112]	; 0x70
 800cf42:	677a      	str	r2, [r7, #116]	; 0x74
 800cf44:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800cf48:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cf4c:	f7f3 fb38 	bl	80005c0 <__aeabi_uldivmod>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf58:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800cf5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf5e:	695a      	ldr	r2, [r3, #20]
 800cf60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf66:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800cf68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf6c:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800cf6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf72:	2200      	movs	r2, #0
 800cf74:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf78:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cf7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cf80:	f7f3 fb1e 	bl	80005c0 <__aeabi_uldivmod>
 800cf84:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800cf88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	663b      	str	r3, [r7, #96]	; 0x60
 800cf90:	667a      	str	r2, [r7, #100]	; 0x64
 800cf92:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cf96:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	4283      	cmp	r3, r0
 800cfa0:	bf08      	it	eq
 800cfa2:	428a      	cmpeq	r2, r1
 800cfa4:	d151      	bne.n	800d04a <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800cfac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfb2:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800cfb4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800cfb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfba:	fb01 f303 	mul.w	r3, r1, r3
 800cfbe:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800cfc0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800cfc4:	1e51      	subs	r1, r2, #1
 800cfc6:	65b9      	str	r1, [r7, #88]	; 0x58
 800cfc8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cfcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	653b      	str	r3, [r7, #80]	; 0x50
 800cfd8:	657a      	str	r2, [r7, #84]	; 0x54
 800cfda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cfde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cfe2:	f7f3 faed 	bl	80005c0 <__aeabi_uldivmod>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfea:	4613      	mov	r3, r2
 800cfec:	4423      	add	r3, r4
 800cfee:	2200      	movs	r2, #0
 800cff0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cff2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cff8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cffc:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d000:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d004:	1e51      	subs	r1, r2, #1
 800d006:	6439      	str	r1, [r7, #64]	; 0x40
 800d008:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d00c:	647b      	str	r3, [r7, #68]	; 0x44
 800d00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d014:	2200      	movs	r2, #0
 800d016:	63bb      	str	r3, [r7, #56]	; 0x38
 800d018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d01a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d01e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d022:	f7f3 facd 	bl	80005c0 <__aeabi_uldivmod>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d02e:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800d030:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d034:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d038:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d046:	631a      	str	r2, [r3, #48]	; 0x30
 800d048:	e04b      	b.n	800d0e2 <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d04e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d054:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d056:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d058:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800d05c:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d05e:	fb01 f303 	mul.w	r3, r1, r3
 800d062:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	2200      	movs	r2, #0
 800d06c:	633b      	str	r3, [r7, #48]	; 0x30
 800d06e:	637a      	str	r2, [r7, #52]	; 0x34
 800d070:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d074:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d078:	f7f3 faa2 	bl	80005c0 <__aeabi_uldivmod>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d080:	4613      	mov	r3, r2
 800d082:	4423      	add	r3, r4
 800d084:	2200      	movs	r2, #0
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28
 800d088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d08e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d092:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09c:	2200      	movs	r2, #0
 800d09e:	623b      	str	r3, [r7, #32]
 800d0a0:	627a      	str	r2, [r7, #36]	; 0x24
 800d0a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0a6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d0aa:	f7f3 fa89 	bl	80005c0 <__aeabi_uldivmod>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800d0b8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d0bc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d0c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	61bb      	str	r3, [r7, #24]
 800d0ce:	61fa      	str	r2, [r7, #28]
 800d0d0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d0d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0d8:	f7f3 fa72 	bl	80005c0 <__aeabi_uldivmod>
 800d0dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800d0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f005 fd9e 	bl	8012c2c <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0fe:	bf00      	nop

0800d100 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800d100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d104:	b0e8      	sub	sp, #416	; 0x1a0
 800d106:	af02      	add	r7, sp, #8
 800d108:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800d10c:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800d110:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800d114:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800d11e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	4bd9      	ldr	r3, [pc, #868]	; (800d48c <_fx_file_open+0x38c>)
 800d126:	429a      	cmp	r2, r3
 800d128:	d002      	beq.n	800d130 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800d12a:	2311      	movs	r3, #17
 800d12c:	f000 bcc4 	b.w	800dab8 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800d130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d134:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d13e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800d142:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d146:	2300      	movs	r3, #0
 800d148:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800d14c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d152:	2b00      	cmp	r3, #0
 800d154:	d006      	beq.n	800d164 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800d156:	4bce      	ldr	r3, [pc, #824]	; (800d490 <_fx_file_open+0x390>)
 800d158:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d15c:	2318      	movs	r3, #24
 800d15e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800d162:	e006      	b.n	800d172 <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800d164:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800d168:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d16c:	2318      	movs	r3, #24
 800d16e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800d172:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d176:	2b02      	cmp	r3, #2
 800d178:	d106      	bne.n	800d188 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800d17a:	2300      	movs	r3, #0
 800d17c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800d180:	2301      	movs	r3, #1
 800d182:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800d186:	e002      	b.n	800d18e <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800d188:	2300      	movs	r3, #0
 800d18a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d18e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	4bbd      	ldr	r3, [pc, #756]	; (800d48c <_fx_file_open+0x38c>)
 800d196:	429a      	cmp	r2, r3
 800d198:	d002      	beq.n	800d1a0 <_fx_file_open+0xa0>
 800d19a:	2311      	movs	r3, #17
 800d19c:	f000 bc8c 	b.w	800dab8 <_fx_file_open+0x9b8>
 800d1a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1a4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d1a8:	f04f 31ff 	mov.w	r1, #4294967295
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f005 fac5 	bl	801273c <_tx_mutex_get>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <_fx_file_open+0xbe>
 800d1b8:	2311      	movs	r3, #17
 800d1ba:	f000 bc7d 	b.w	800dab8 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800d1be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1c2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d1c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1ca:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800d1cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800d1d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d1de:	2300      	movs	r3, #0
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800d1e8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d1ec:	f7fe feda 	bl	800bfa4 <_fx_directory_search>
 800d1f0:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800d1f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d1fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d200:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d204:	4618      	mov	r0, r3
 800d206:	f005 fd11 	bl	8012c2c <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800d20a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d20e:	f000 bc53 	b.w	800dab8 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800d212:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d216:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800d21a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d21e:	4013      	ands	r3, r2
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d009      	beq.n	800d23a <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d226:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d22a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d22e:	4618      	mov	r0, r3
 800d230:	f005 fcfc 	bl	8012c2c <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800d234:	2305      	movs	r3, #5
 800d236:	f000 bc3f 	b.w	800dab8 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800d23a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d160      	bne.n	800d304 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800d242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d009      	beq.n	800d262 <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d24e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d252:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d256:	4618      	mov	r0, r3
 800d258:	f005 fce8 	bl	8012c2c <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800d25c:	2323      	movs	r3, #35	; 0x23
 800d25e:	f000 bc2b 	b.w	800dab8 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800d262:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d266:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d009      	beq.n	800d286 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d272:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d276:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d27a:	4618      	mov	r0, r3
 800d27c:	f005 fcd6 	bl	8012c2c <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800d280:	2306      	movs	r3, #6
 800d282:	f000 bc19 	b.w	800dab8 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800d286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d28a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d28e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800d292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d296:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d29a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800d29e:	e02d      	b.n	800d2fc <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d2a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d2a4:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d2a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2ac:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	bf08      	it	eq
 800d2b4:	4290      	cmpeq	r0, r2
 800d2b6:	d117      	bne.n	800d2e8 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800d2b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d2bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d2c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d10d      	bne.n	800d2e8 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800d2cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d2d0:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d108      	bne.n	800d2e8 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d2d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f005 fca4 	bl	8012c2c <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800d2e4:	2306      	movs	r3, #6
 800d2e6:	e3e7      	b.n	800dab8 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800d2e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800d2f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800d2fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1cd      	bne.n	800d2a0 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d304:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d30c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d310:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d314:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800d318:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d31c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d322:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d328:	fb02 f303 	mul.w	r3, r2, r3
 800d32c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800d330:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d334:	2300      	movs	r3, #0
 800d336:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d338:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d108      	bne.n	800d352 <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d344:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d348:	4618      	mov	r0, r3
 800d34a:	f005 fc6f 	bl	8012c2c <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d34e:	2302      	movs	r3, #2
 800d350:	e3b2      	b.n	800dab8 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800d352:	2300      	movs	r3, #0
 800d354:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800d358:	2300      	movs	r3, #0
 800d35a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800d35e:	2301      	movs	r3, #1
 800d360:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800d364:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d368:	2301      	movs	r3, #1
 800d36a:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800d36c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 8103 	beq.w	800d57c <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800d376:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d380:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d384:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d388:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d38c:	4621      	mov	r1, r4
 800d38e:	eb11 0a02 	adds.w	sl, r1, r2
 800d392:	4629      	mov	r1, r5
 800d394:	eb41 0b03 	adc.w	fp, r1, r3
 800d398:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800d39c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d3a0:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800d3a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d3a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d3b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d3b6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d3ba:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d3be:	f7f3 f8ff 	bl	80005c0 <__aeabi_uldivmod>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d3d4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d3d8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d3dc:	4623      	mov	r3, r4
 800d3de:	fb03 f201 	mul.w	r2, r3, r1
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	fb00 f303 	mul.w	r3, r0, r3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	fba0 8902 	umull	r8, r9, r0, r2
 800d3f0:	444b      	add	r3, r9
 800d3f2:	4699      	mov	r9, r3
 800d3f4:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d3f8:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d3fc:	e12f      	b.n	800d65e <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800d3fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d402:	3301      	adds	r3, #1
 800d404:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800d408:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800d40c:	461a      	mov	r2, r3
 800d40e:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800d412:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d416:	f002 f925 	bl	800f664 <_fx_utility_FAT_entry_read>
 800d41a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800d41e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d426:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d42a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d42e:	4618      	mov	r0, r3
 800d430:	f005 fbfc 	bl	8012c2c <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d434:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d438:	e33e      	b.n	800dab8 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800d43a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d43e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d442:	4293      	cmp	r3, r2
 800d444:	d006      	beq.n	800d454 <_fx_file_open+0x354>
 800d446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d44a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d44c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d450:	4293      	cmp	r3, r2
 800d452:	d908      	bls.n	800d466 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d454:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d458:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d45c:	4618      	mov	r0, r3
 800d45e:	f005 fbe5 	bl	8012c2c <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800d462:	2303      	movs	r3, #3
 800d464:	e328      	b.n	800dab8 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800d466:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d470:	429a      	cmp	r2, r3
 800d472:	d10f      	bne.n	800d494 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800d474:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00e      	beq.n	800d49a <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800d47c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d488:	619a      	str	r2, [r3, #24]
 800d48a:	e006      	b.n	800d49a <_fx_file_open+0x39a>
 800d48c:	4d454449 	.word	0x4d454449
 800d490:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800d494:	2300      	movs	r3, #0
 800d496:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800d49a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d49e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800d4a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d4a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800d4aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d4b4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d4b8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d4bc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800d4c0:	4641      	mov	r1, r8
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	eb71 0303 	sbcs.w	r3, r1, r3
 800d4ca:	d216      	bcs.n	800d4fa <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800d4cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d4d6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d4da:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d4de:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d4e2:	4641      	mov	r1, r8
 800d4e4:	1a51      	subs	r1, r2, r1
 800d4e6:	6039      	str	r1, [r7, #0]
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	eb63 0301 	sbc.w	r3, r3, r1
 800d4ee:	607b      	str	r3, [r7, #4]
 800d4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800d4f8:	e040      	b.n	800d57c <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800d4fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d13b      	bne.n	800d57c <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800d504:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d508:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d50c:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800d50e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d518:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800d51a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d524:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d528:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d52c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800d530:	4641      	mov	r1, r8
 800d532:	4648      	mov	r0, r9
 800d534:	4283      	cmp	r3, r0
 800d536:	bf08      	it	eq
 800d538:	428a      	cmpeq	r2, r1
 800d53a:	d11f      	bne.n	800d57c <_fx_file_open+0x47c>
 800d53c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d540:	2b01      	cmp	r3, #1
 800d542:	d91b      	bls.n	800d57c <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d54c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d550:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d554:	4293      	cmp	r3, r2
 800d556:	d211      	bcs.n	800d57c <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800d558:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d55c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d560:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800d562:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d56e:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800d570:	f04f 0200 	mov.w	r2, #0
 800d574:	f04f 0300 	mov.w	r3, #0
 800d578:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d57c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d580:	2b01      	cmp	r3, #1
 800d582:	d90a      	bls.n	800d59a <_fx_file_open+0x49a>
 800d584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d58c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d590:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d594:	4293      	cmp	r3, r2
 800d596:	f4ff af32 	bcc.w	800d3fe <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d59a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5a6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800d5aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d5b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d5ba:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800d5be:	464b      	mov	r3, r9
 800d5c0:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	fb02 f203 	mul.w	r2, r2, r3
 800d5ca:	465b      	mov	r3, fp
 800d5cc:	4641      	mov	r1, r8
 800d5ce:	fb01 f303 	mul.w	r3, r1, r3
 800d5d2:	4413      	add	r3, r2
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	4651      	mov	r1, sl
 800d5d8:	fba2 4501 	umull	r4, r5, r2, r1
 800d5dc:	442b      	add	r3, r5
 800d5de:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800d5e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5ea:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d5ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	fb03 f205 	mul.w	r2, r3, r5
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	fb04 f303 	mul.w	r3, r4, r3
 800d5fe:	4413      	add	r3, r2
 800d600:	4602      	mov	r2, r0
 800d602:	fba4 1202 	umull	r1, r2, r4, r2
 800d606:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800d60a:	460a      	mov	r2, r1
 800d60c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800d610:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d614:	4413      	add	r3, r2
 800d616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d61a:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800d61e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800d622:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800d626:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d62a:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d62e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d632:	4282      	cmp	r2, r0
 800d634:	418b      	sbcs	r3, r1
 800d636:	d309      	bcc.n	800d64c <_fx_file_open+0x54c>
 800d638:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00e      	beq.n	800d65e <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800d640:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d644:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d648:	4293      	cmp	r3, r2
 800d64a:	d908      	bls.n	800d65e <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800d64c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d650:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d654:	4618      	mov	r0, r3
 800d656:	f005 fae9 	bl	8012c2c <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800d65a:	2308      	movs	r3, #8
 800d65c:	e22c      	b.n	800dab8 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800d65e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d662:	4baa      	ldr	r3, [pc, #680]	; (800d90c <_fx_file_open+0x80c>)
 800d664:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800d666:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d66a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d66e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d672:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800d674:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d67c:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800d67e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d682:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d686:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800d688:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d68c:	2300      	movs	r3, #0
 800d68e:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800d690:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d694:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d698:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d69a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d69e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d6a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6a6:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800d6a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d6b0:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d6b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6b6:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d6ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6be:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800d6c2:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d6c6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d6ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800d6ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800d6d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d163      	bne.n	800d7a8 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800d6e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6e4:	695a      	ldr	r2, [r3, #20]
 800d6e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6ea:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800d6ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d6f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d700:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d704:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	3b02      	subs	r3, #2
 800d70c:	2200      	movs	r2, #0
 800d70e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d712:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d722:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d726:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800d72a:	462b      	mov	r3, r5
 800d72c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d730:	4642      	mov	r2, r8
 800d732:	fb02 f203 	mul.w	r2, r2, r3
 800d736:	464b      	mov	r3, r9
 800d738:	4621      	mov	r1, r4
 800d73a:	fb01 f303 	mul.w	r3, r1, r3
 800d73e:	4413      	add	r3, r2
 800d740:	4622      	mov	r2, r4
 800d742:	4641      	mov	r1, r8
 800d744:	fba2 1201 	umull	r1, r2, r2, r1
 800d748:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d74c:	460a      	mov	r2, r1
 800d74e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800d752:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800d756:	4413      	add	r3, r2
 800d758:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d75c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800d760:	4623      	mov	r3, r4
 800d762:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d766:	4602      	mov	r2, r0
 800d768:	189b      	adds	r3, r3, r2
 800d76a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d76e:	460b      	mov	r3, r1
 800d770:	462a      	mov	r2, r5
 800d772:	eb42 0303 	adc.w	r3, r2, r3
 800d776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d77a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d77e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d782:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800d786:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d78a:	2200      	movs	r2, #0
 800d78c:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800d78e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d792:	2200      	movs	r2, #0
 800d794:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800d796:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d79a:	f04f 0200 	mov.w	r2, #0
 800d79e:	f04f 0300 	mov.w	r3, #0
 800d7a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800d7a6:	e140      	b.n	800da2a <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800d7a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d7b2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d7b6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d7ba:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	4283      	cmp	r3, r0
 800d7c4:	bf08      	it	eq
 800d7c6:	428a      	cmpeq	r2, r1
 800d7c8:	f040 80a2 	bne.w	800d910 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d7cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d7d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d7dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d7e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d7ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	3b02      	subs	r3, #2
 800d7f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d7fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d808:	2200      	movs	r2, #0
 800d80a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d80e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d816:	462b      	mov	r3, r5
 800d818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d81c:	4642      	mov	r2, r8
 800d81e:	fb02 f203 	mul.w	r2, r2, r3
 800d822:	464b      	mov	r3, r9
 800d824:	4621      	mov	r1, r4
 800d826:	fb01 f303 	mul.w	r3, r1, r3
 800d82a:	4413      	add	r3, r2
 800d82c:	4622      	mov	r2, r4
 800d82e:	4641      	mov	r1, r8
 800d830:	fba2 1201 	umull	r1, r2, r2, r1
 800d834:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d838:	460a      	mov	r2, r1
 800d83a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d83e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d842:	4413      	add	r3, r2
 800d844:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d848:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d84c:	4623      	mov	r3, r4
 800d84e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d852:	4602      	mov	r2, r0
 800d854:	189b      	adds	r3, r3, r2
 800d856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d85a:	460b      	mov	r3, r1
 800d85c:	462a      	mov	r2, r5
 800d85e:	eb42 0303 	adc.w	r3, r2, r3
 800d862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d866:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d86a:	1e51      	subs	r1, r2, #1
 800d86c:	67b9      	str	r1, [r7, #120]	; 0x78
 800d86e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d872:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87a:	2200      	movs	r2, #0
 800d87c:	673b      	str	r3, [r7, #112]	; 0x70
 800d87e:	677a      	str	r2, [r7, #116]	; 0x74
 800d880:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d884:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d888:	f7f2 fe9a 	bl	80005c0 <__aeabi_uldivmod>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	2300      	movs	r3, #0
 800d892:	66ba      	str	r2, [r7, #104]	; 0x68
 800d894:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d896:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d89a:	4623      	mov	r3, r4
 800d89c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	189b      	adds	r3, r3, r2
 800d8a4:	663b      	str	r3, [r7, #96]	; 0x60
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	eb42 0303 	adc.w	r3, r2, r3
 800d8ae:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d8b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d8b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d8b8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d8bc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d8c0:	1e51      	subs	r1, r2, #1
 800d8c2:	65b9      	str	r1, [r7, #88]	; 0x58
 800d8c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d8c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	653b      	str	r3, [r7, #80]	; 0x50
 800d8d4:	657a      	str	r2, [r7, #84]	; 0x54
 800d8d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d8da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d8de:	f7f2 fe6f 	bl	80005c0 <__aeabi_uldivmod>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d8ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d8f0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d8f4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d8f8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d8fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d902:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d906:	631a      	str	r2, [r3, #48]	; 0x30
 800d908:	e08f      	b.n	800da2a <_fx_file_open+0x92a>
 800d90a:	bf00      	nop
 800d90c:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d916:	2200      	movs	r2, #0
 800d918:	64bb      	str	r3, [r7, #72]	; 0x48
 800d91a:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d91c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d920:	6a1b      	ldr	r3, [r3, #32]
 800d922:	2200      	movs	r2, #0
 800d924:	643b      	str	r3, [r7, #64]	; 0x40
 800d926:	647a      	str	r2, [r7, #68]	; 0x44
 800d928:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d92c:	460b      	mov	r3, r1
 800d92e:	3b02      	subs	r3, #2
 800d930:	63bb      	str	r3, [r7, #56]	; 0x38
 800d932:	4613      	mov	r3, r2
 800d934:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d938:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d93a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d940:	2200      	movs	r2, #0
 800d942:	633b      	str	r3, [r7, #48]	; 0x30
 800d944:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d946:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d94a:	462b      	mov	r3, r5
 800d94c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d950:	4642      	mov	r2, r8
 800d952:	fb02 f203 	mul.w	r2, r2, r3
 800d956:	464b      	mov	r3, r9
 800d958:	4621      	mov	r1, r4
 800d95a:	fb01 f303 	mul.w	r3, r1, r3
 800d95e:	4413      	add	r3, r2
 800d960:	4622      	mov	r2, r4
 800d962:	4641      	mov	r1, r8
 800d964:	fba2 1201 	umull	r1, r2, r2, r1
 800d968:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d96c:	460a      	mov	r2, r1
 800d96e:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d972:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d976:	4413      	add	r3, r2
 800d978:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d97c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d980:	4623      	mov	r3, r4
 800d982:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d986:	4602      	mov	r2, r0
 800d988:	189b      	adds	r3, r3, r2
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d98c:	460b      	mov	r3, r1
 800d98e:	462a      	mov	r2, r5
 800d990:	eb42 0303 	adc.w	r3, r2, r3
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99c:	2200      	movs	r2, #0
 800d99e:	623b      	str	r3, [r7, #32]
 800d9a0:	627a      	str	r2, [r7, #36]	; 0x24
 800d9a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9a6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d9aa:	f7f2 fe09 	bl	80005c0 <__aeabi_uldivmod>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61ba      	str	r2, [r7, #24]
 800d9b6:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d9b8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d9bc:	4623      	mov	r3, r4
 800d9be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	189b      	adds	r3, r3, r2
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	462a      	mov	r2, r5
 800d9cc:	eb42 0303 	adc.w	r3, r2, r3
 800d9d0:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d9d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d9d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d9da:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d9de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	60bb      	str	r3, [r7, #8]
 800d9e8:	60fa      	str	r2, [r7, #12]
 800d9ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d9ee:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d9f2:	f7f2 fde5 	bl	80005c0 <__aeabi_uldivmod>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800da00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da04:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800da08:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800da0c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800da10:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800da14:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800da18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800da1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da1e:	fb01 f202 	mul.w	r2, r1, r2
 800da22:	1a9a      	subs	r2, r3, r2
 800da24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da28:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800da2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d01f      	beq.n	800da76 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800da36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da40:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800da44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800da50:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800da52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800da5a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800da5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da60:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800da64:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800da66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da6a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da72:	65da      	str	r2, [r3, #92]	; 0x5c
 800da74:	e00f      	b.n	800da96 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800da76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800da7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800da82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800da8a:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800da8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800da94:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800da96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800daa4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800daa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800daac:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dab0:	4618      	mov	r0, r3
 800dab2:	f005 f8bb 	bl	8012c2c <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800dabe:	46bd      	mov	sp, r7
 800dac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dac4 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800dac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dac8:	b0aa      	sub	sp, #168	; 0xa8
 800daca:	af04      	add	r7, sp, #16
 800dacc:	66f8      	str	r0, [r7, #108]	; 0x6c
 800dace:	66b9      	str	r1, [r7, #104]	; 0x68
 800dad0:	667a      	str	r2, [r7, #100]	; 0x64
 800dad2:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800dad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	4b9d      	ldr	r3, [pc, #628]	; (800dd50 <_fx_file_read+0x28c>)
 800dada:	429a      	cmp	r2, r3
 800dadc:	d001      	beq.n	800dae2 <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800dade:	2307      	movs	r3, #7
 800dae0:	e28d      	b.n	800dffe <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800dae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae6:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800dae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800daea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800daee:	1c5a      	adds	r2, r3, #1
 800daf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800daf2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800daf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dafa:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800dafc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	4b94      	ldr	r3, [pc, #592]	; (800dd54 <_fx_file_read+0x290>)
 800db02:	429a      	cmp	r2, r3
 800db04:	d001      	beq.n	800db0a <_fx_file_read+0x46>
 800db06:	2311      	movs	r3, #17
 800db08:	e279      	b.n	800dffe <_fx_file_read+0x53a>
 800db0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db0c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db10:	f04f 31ff 	mov.w	r1, #4294967295
 800db14:	4618      	mov	r0, r3
 800db16:	f004 fe11 	bl	801273c <_tx_mutex_get>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <_fx_file_read+0x60>
 800db20:	2311      	movs	r3, #17
 800db22:	e26c      	b.n	800dffe <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800db24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800db2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db2c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800db30:	4290      	cmp	r0, r2
 800db32:	eb71 0303 	sbcs.w	r3, r1, r3
 800db36:	d30a      	bcc.n	800db4e <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800db38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db3a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db3e:	4618      	mov	r0, r3
 800db40:	f005 f874 	bl	8012c2c <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800db44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db46:	2200      	movs	r2, #0
 800db48:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800db4a:	2309      	movs	r3, #9
 800db4c:	e257      	b.n	800dffe <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800db4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800db54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db56:	2200      	movs	r2, #0
 800db58:	4698      	mov	r8, r3
 800db5a:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800db5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db5e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800db62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db64:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800db68:	1a84      	subs	r4, r0, r2
 800db6a:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800db6e:	4544      	cmp	r4, r8
 800db70:	eb75 0309 	sbcs.w	r3, r5, r9
 800db74:	d209      	bcs.n	800db8a <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800db76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db78:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800db7c:	4611      	mov	r1, r2
 800db7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800db84:	4613      	mov	r3, r2
 800db86:	1acb      	subs	r3, r1, r3
 800db88:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800db8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800db90:	e20a      	b.n	800dfa8 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800db92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db96:	2b00      	cmp	r3, #0
 800db98:	d105      	bne.n	800dba6 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800db9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800db9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d24d      	bcs.n	800dc42 <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dba8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dbac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbae:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dbb0:	2304      	movs	r3, #4
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	9200      	str	r2, [sp, #0]
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dbc0:	f003 f86a 	bl	8010c98 <_fx_utility_logical_sector_read>
 800dbc4:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800dbc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d007      	beq.n	800dbdc <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800dbcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f005 f82a 	bl	8012c2c <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800dbd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbda:	e210      	b.n	800dffe <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dbdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800dbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800dbea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dbee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d903      	bls.n	800dbfe <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800dbf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800dbfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc00:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800dc02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800dc06:	4413      	add	r3, r2
 800dc08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dc10:	4618      	mov	r0, r3
 800dc12:	f003 fc3d 	bl	8011490 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800dc16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc1e:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800dc20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc22:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800dc24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800dc32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dc36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc40:	e108      	b.n	800de54 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800dc42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800dc52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc5e:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dc60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800dc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc6e:	e033      	b.n	800dcd8 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800dc70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800dc74:	461a      	mov	r2, r3
 800dc76:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dc7a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc7c:	f001 fcf2 	bl	800f664 <_fx_utility_FAT_entry_read>
 800dc80:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10a      	bne.n	800dc9e <_fx_file_read+0x1da>
 800dc88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d907      	bls.n	800dc9e <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800dc8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc94:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800dc98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d20c      	bcs.n	800dcb8 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dc9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dca0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dca4:	4618      	mov	r0, r3
 800dca6:	f004 ffc1 	bl	8012c2c <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800dcaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <_fx_file_read+0x1f0>
                        {
                            return(status);
 800dcb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcb2:	e1a4      	b.n	800dffe <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	e1a2      	b.n	800dffe <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800dcb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d110      	bne.n	800dce6 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800dcc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800dcca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dcd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dcdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d3c5      	bcc.n	800dc70 <_fx_file_read+0x1ac>
 800dce4:	e000      	b.n	800dce8 <_fx_file_read+0x224>
                        break;
 800dce6:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800dce8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dcec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d203      	bcs.n	800dcfc <_fx_file_read+0x238>
            {
                sectors = i;
 800dcf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800dcfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d129      	bne.n	800dd58 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dd04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dd0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd0c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dd0e:	2304      	movs	r3, #4
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	2301      	movs	r3, #1
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	9200      	str	r2, [sp, #0]
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dd1e:	f002 ffbb 	bl	8010c98 <_fx_utility_logical_sector_read>
 800dd22:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800dd24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d007      	beq.n	800dd3a <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dd2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd2c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd30:	4618      	mov	r0, r3
 800dd32:	f004 ff7b 	bl	8012c2c <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800dd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd38:	e161      	b.n	800dffe <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800dd3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd3c:	6898      	ldr	r0, [r3, #8]
 800dd3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd42:	461a      	mov	r2, r3
 800dd44:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dd48:	f003 fba2 	bl	8011490 <_fx_utility_memory_copy>
 800dd4c:	e02f      	b.n	800ddae <_fx_file_read+0x2ea>
 800dd4e:	bf00      	nop
 800dd50:	46494c45 	.word	0x46494c45
 800dd54:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800dd58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd5a:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800dd5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd64:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd6a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800dd6e:	2304      	movs	r3, #4
 800dd70:	9302      	str	r3, [sp, #8]
 800dd72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dd84:	f002 ff88 	bl	8010c98 <_fx_utility_logical_sector_read>
 800dd88:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800dd8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd90:	461a      	mov	r2, r3
 800dd92:	2300      	movs	r3, #0
 800dd94:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800dd98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d007      	beq.n	800ddae <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dd9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dda0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dda4:	4618      	mov	r0, r3
 800dda6:	f004 ff41 	bl	8012c2c <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800ddaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddac:	e127      	b.n	800dffe <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800ddae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddb0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800ddb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	2200      	movs	r2, #0
 800ddbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddbe:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800ddc0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	18c3      	adds	r3, r0, r3
 800ddc8:	653b      	str	r3, [r7, #80]	; 0x50
 800ddca:	462b      	mov	r3, r5
 800ddcc:	eb41 0303 	adc.w	r3, r1, r3
 800ddd0:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800ddd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddd4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ddd8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800dddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddde:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800dde0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dde2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dde4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dde8:	4413      	add	r3, r2
 800ddea:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800ddec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800ddf0:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800ddf4:	18ca      	adds	r2, r1, r3
 800ddf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddf8:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800ddfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de02:	4413      	add	r3, r2
 800de04:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800de06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de0a:	fbb1 f3f2 	udiv	r3, r1, r2
 800de0e:	fb02 f303 	mul.w	r3, r2, r3
 800de12:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800de14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de16:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800de18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800de1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de1e:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800de20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de26:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800de28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de30:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800de34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de38:	1a9b      	subs	r3, r3, r2
 800de3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800de3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de46:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800de4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de4e:	4413      	add	r3, r2
 800de50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800de54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800de58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800de5c:	429a      	cmp	r2, r3
 800de5e:	f0c0 80a3 	bcc.w	800dfa8 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800de62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de66:	2b00      	cmp	r3, #0
 800de68:	d11a      	bne.n	800dea0 <_fx_file_read+0x3dc>
 800de6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800de70:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800de72:	2000      	movs	r0, #0
 800de74:	64b9      	str	r1, [r7, #72]	; 0x48
 800de76:	64f8      	str	r0, [r7, #76]	; 0x4c
 800de78:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800de7c:	4621      	mov	r1, r4
 800de7e:	1851      	adds	r1, r2, r1
 800de80:	6439      	str	r1, [r7, #64]	; 0x40
 800de82:	4629      	mov	r1, r5
 800de84:	414b      	adcs	r3, r1
 800de86:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800de88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de8a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800de8e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800de92:	4621      	mov	r1, r4
 800de94:	4291      	cmp	r1, r2
 800de96:	4629      	mov	r1, r5
 800de98:	eb71 0303 	sbcs.w	r3, r1, r3
 800de9c:	f080 808a 	bcs.w	800dfb4 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800dea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800deaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800deae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d368      	bcc.n	800df88 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800deb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb8:	6a19      	ldr	r1, [r3, #32]
 800deba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800debe:	461a      	mov	r2, r3
 800dec0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dec2:	f001 fbcf 	bl	800f664 <_fx_utility_FAT_entry_read>
 800dec6:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <_fx_file_read+0x420>
 800dece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d907      	bls.n	800dee4 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800ded4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ded6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800deda:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800dede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d20c      	bcs.n	800defe <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dee6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800deea:	4618      	mov	r0, r3
 800deec:	f004 fe9e 	bl	8012c2c <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800def0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <_fx_file_read+0x436>
                        {
                            return(status);
 800def6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def8:	e081      	b.n	800dffe <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800defa:	2308      	movs	r3, #8
 800defc:	e07f      	b.n	800dffe <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800defe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800df00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df02:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800df04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df0c:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800df0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df12:	2200      	movs	r2, #0
 800df14:	63bb      	str	r3, [r7, #56]	; 0x38
 800df16:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800df18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df1a:	2200      	movs	r2, #0
 800df1c:	633b      	str	r3, [r7, #48]	; 0x30
 800df1e:	637a      	str	r2, [r7, #52]	; 0x34
 800df20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800df24:	460b      	mov	r3, r1
 800df26:	3b02      	subs	r3, #2
 800df28:	62bb      	str	r3, [r7, #40]	; 0x28
 800df2a:	4613      	mov	r3, r2
 800df2c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800df32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df36:	2200      	movs	r2, #0
 800df38:	623b      	str	r3, [r7, #32]
 800df3a:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800df3c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800df40:	462b      	mov	r3, r5
 800df42:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800df46:	4642      	mov	r2, r8
 800df48:	fb02 f203 	mul.w	r2, r2, r3
 800df4c:	464b      	mov	r3, r9
 800df4e:	4621      	mov	r1, r4
 800df50:	fb01 f303 	mul.w	r3, r1, r3
 800df54:	4413      	add	r3, r2
 800df56:	4622      	mov	r2, r4
 800df58:	4641      	mov	r1, r8
 800df5a:	fba2 ab01 	umull	sl, fp, r2, r1
 800df5e:	445b      	add	r3, fp
 800df60:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800df62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800df66:	460b      	mov	r3, r1
 800df68:	eb13 030a 	adds.w	r3, r3, sl
 800df6c:	61bb      	str	r3, [r7, #24]
 800df6e:	4613      	mov	r3, r2
 800df70:	eb43 030b 	adc.w	r3, r3, fp
 800df74:	61fb      	str	r3, [r7, #28]
 800df76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df7c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800df80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df82:	2300      	movs	r3, #0
 800df84:	6393      	str	r3, [r2, #56]	; 0x38
 800df86:	e00c      	b.n	800dfa2 <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800df88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800df8e:	1c51      	adds	r1, r2, #1
 800df90:	6139      	str	r1, [r7, #16]
 800df92:	f143 0300 	adc.w	r3, r3, #0
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df9e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800dfa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800dfa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f47f adf0 	bne.w	800db92 <_fx_file_read+0xce>
 800dfb2:	e000      	b.n	800dfb6 <_fx_file_read+0x4f2>
                break;
 800dfb4:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800dfb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfb8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dfbc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dfc8:	4621      	mov	r1, r4
 800dfca:	1851      	adds	r1, r2, r1
 800dfcc:	6039      	str	r1, [r7, #0]
 800dfce:	4629      	mov	r1, r5
 800dfd0:	eb43 0101 	adc.w	r1, r3, r1
 800dfd4:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800dfd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dfdc:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800dfe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfe2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dfe4:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800dfe6:	4b08      	ldr	r3, [pc, #32]	; (800e008 <_fx_file_read+0x544>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800dff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dff2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dff6:	4618      	mov	r0, r3
 800dff8:	f004 fe18 	bl	8012c2c <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3798      	adds	r7, #152	; 0x98
 800e002:	46bd      	mov	sp, r7
 800e004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e008:	24014d84 	.word	0x24014d84

0800e00c <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	2000      	movs	r0, #0
 800e01a:	460a      	mov	r2, r1
 800e01c:	4603      	mov	r3, r0
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7fe fd9e 	bl	800cb60 <_fx_file_extended_seek>
 800e024:	4603      	mov	r3, r0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e02e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e03e:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	330b      	adds	r3, #11
 800e044:	4618      	mov	r0, r3
 800e046:	f001 faa7 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e04a:	4602      	mov	r2, r0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e054:	2b00      	cmp	r3, #0
 800e056:	d101      	bne.n	800e05c <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e058:	2302      	movs	r3, #2
 800e05a:	e08c      	b.n	800e176 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3318      	adds	r3, #24
 800e060:	4618      	mov	r0, r3
 800e062:	f001 fa99 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e066:	4602      	mov	r2, r0
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	331a      	adds	r3, #26
 800e070:	4618      	mov	r0, r3
 800e072:	f001 fa91 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e076:	4602      	mov	r2, r0
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3313      	adds	r3, #19
 800e080:	4618      	mov	r0, r3
 800e082:	f001 fa89 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e086:	4603      	mov	r3, r0
 800e088:	2200      	movs	r2, #0
 800e08a:	4698      	mov	r8, r3
 800e08c:	4691      	mov	r9, r2
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e09a:	4313      	orrs	r3, r2
 800e09c:	d10b      	bne.n	800e0b6 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3320      	adds	r3, #32
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f001 faa0 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	461c      	mov	r4, r3
 800e0ae:	4615      	mov	r5, r2
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	d101      	bne.n	800e0c4 <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	e058      	b.n	800e176 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	330e      	adds	r3, #14
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f001 fa65 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e0dc:	2302      	movs	r3, #2
 800e0de:	e04a      	b.n	800e176 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	330d      	adds	r3, #13
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	e03e      	b.n	800e176 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3316      	adds	r3, #22
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f001 fa4b 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e102:	4602      	mov	r2, r0
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d107      	bne.n	800e120 <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3324      	adds	r3, #36	; 0x24
 800e114:	4618      	mov	r0, r3
 800e116:	f001 fa67 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e11a:	4602      	mov	r2, r0
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e128:	2302      	movs	r3, #2
 800e12a:	e024      	b.n	800e176 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	3310      	adds	r3, #16
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	461a      	mov	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e140:	2301      	movs	r3, #1
 800e142:	e018      	b.n	800e176 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	331c      	adds	r3, #28
 800e148:	4618      	mov	r0, r3
 800e14a:	f001 fa4d 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e14e:	4602      	mov	r2, r0
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3311      	adds	r3, #17
 800e158:	4618      	mov	r0, r3
 800e15a:	f001 fa1d 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e15e:	4602      	mov	r2, r0
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	332c      	adds	r3, #44	; 0x2c
 800e168:	4618      	mov	r0, r3
 800e16a:	f001 fa3d 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e16e:	4602      	mov	r2, r0
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e180 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b090      	sub	sp, #64	; 0x40
 800e184:	af04      	add	r7, sp, #16
 800e186:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4aa2      	ldr	r2, [pc, #648]	; (800e424 <_fx_media_flush+0x2a4>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d001      	beq.n	800e1a4 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e1a0:	2311      	movs	r3, #17
 800e1a2:	e175      	b.n	800e490 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a9e      	ldr	r2, [pc, #632]	; (800e424 <_fx_media_flush+0x2a4>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d001      	beq.n	800e1b2 <_fx_media_flush+0x32>
 800e1ae:	2311      	movs	r3, #17
 800e1b0:	e16e      	b.n	800e490 <_fx_media_flush+0x310>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e1b8:	f04f 31ff 	mov.w	r1, #4294967295
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f004 fabd 	bl	801273c <_tx_mutex_get>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d001      	beq.n	800e1cc <_fx_media_flush+0x4c>
 800e1c8:	2311      	movs	r3, #17
 800e1ca:	e161      	b.n	800e490 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d007      	beq.n	800e1e6 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f004 fd25 	bl	8012c2c <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800e1e2:	2323      	movs	r3, #35	; 0x23
 800e1e4:	e154      	b.n	800e490 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e1f4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800e1f6:	e040      	b.n	800e27a <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d136      	bne.n	800e26e <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e204:	2b00      	cmp	r3, #0
 800e206:	d032      	beq.n	800e26e <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e208:	f3ef 8310 	mrs	r3, PRIMASK
 800e20c:	613b      	str	r3, [r7, #16]
    return(posture);
 800e20e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e210:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e212:	b672      	cpsid	i
    return(int_posture);
 800e214:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800e216:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e218:	4b83      	ldr	r3, [pc, #524]	; (800e428 <_fx_media_flush+0x2a8>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e222:	4b82      	ldr	r3, [pc, #520]	; (800e42c <_fx_media_flush+0x2ac>)
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f383 8810 	msr	PRIMASK, r3
}
 800e236:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e23e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e240:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e246:	3368      	adds	r3, #104	; 0x68
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7fc ff2a 	bl	800b0a4 <_fx_directory_entry_write>
 800e250:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e25e:	4618      	mov	r0, r3
 800e260:	f004 fce4 	bl	8012c2c <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	e113      	b.n	800e490 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	2200      	movs	r2, #0
 800e26c:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	3b01      	subs	r3, #1
 800e278:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1bb      	bne.n	800e1f8 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f001 fc18 	bl	800fab6 <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f001 ff66 	bl	8010158 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e292:	2100      	movs	r1, #0
 800e294:	9102      	str	r1, [sp, #8]
 800e296:	e9cd 2300 	strd	r2, r3, [sp]
 800e29a:	f04f 0201 	mov.w	r2, #1
 800e29e:	f04f 0300 	mov.w	r3, #0
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 fae2 	bl	801086c <_fx_utility_logical_sector_flush>
 800e2a8:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f004 fcb8 	bl	8012c2c <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	e0e7      	b.n	800e490 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f000 80bb 	beq.w	800e440 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	f000 80b4 	beq.w	800e440 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	69d9      	ldr	r1, [r3, #28]
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	69db      	ldr	r3, [r3, #28]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2290      	movs	r2, #144	; 0x90
 800e304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a3a      	ldr	r2, [r7, #32]
 800e30c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2203      	movs	r2, #3
 800e326:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e352:	4618      	mov	r0, r3
 800e354:	f004 fc6a 	bl	8012c2c <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800e358:	2390      	movs	r3, #144	; 0x90
 800e35a:	e099      	b.n	800e490 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e362:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800e364:	6a38      	ldr	r0, [r7, #32]
 800e366:	f001 f93f 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e36a:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	4a30      	ldr	r2, [pc, #192]	; (800e430 <_fx_media_flush+0x2b0>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d165      	bne.n	800e440 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e37a:	4618      	mov	r0, r3
 800e37c:	f001 f934 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800e380:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4a2b      	ldr	r2, [pc, #172]	; (800e434 <_fx_media_flush+0x2b4>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d15a      	bne.n	800e440 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e394:	4619      	mov	r1, r3
 800e396:	4610      	mov	r0, r2
 800e398:	f001 f943 	bl	800f622 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800e39c:	6a3b      	ldr	r3, [r7, #32]
 800e39e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	f001 f939 	bl	800f622 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2290      	movs	r2, #144	; 0x90
 800e3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a3a      	ldr	r2, [r7, #32]
 800e3c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2203      	movs	r2, #3
 800e3de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e3f0:	1c5a      	adds	r2, r3, #1
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e410:	2b00      	cmp	r3, #0
 800e412:	d011      	beq.n	800e438 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e41a:	4618      	mov	r0, r3
 800e41c:	f004 fc06 	bl	8012c2c <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800e420:	2390      	movs	r3, #144	; 0x90
 800e422:	e035      	b.n	800e490 <_fx_media_flush+0x310>
 800e424:	4d454449 	.word	0x4d454449
 800e428:	24014d88 	.word	0x24014d88
 800e42c:	24014d84 	.word	0x24014d84
 800e430:	41615252 	.word	0x41615252
 800e434:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2202      	movs	r2, #2
 800e452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2290      	movs	r2, #144	; 0x90
 800e45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e478:	4618      	mov	r0, r3
 800e47a:	f004 fbd7 	bl	8012c2c <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800e47e:	2390      	movs	r3, #144	; 0x90
 800e480:	e006      	b.n	800e490 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e488:	4618      	mov	r0, r3
 800e48a:	f004 fbcf 	bl	8012c2c <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3730      	adds	r7, #48	; 0x30
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800e498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e49c:	b09a      	sub	sp, #104	; 0x68
 800e49e:	af04      	add	r7, sp, #16
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
 800e4a6:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e4a8:	4bba      	ldr	r3, [pc, #744]	; (800e794 <_fx_media_open+0x2fc>)
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	4bba      	ldr	r3, [pc, #744]	; (800e798 <_fx_media_open+0x300>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	4bba      	ldr	r3, [pc, #744]	; (800e79c <_fx_media_open+0x304>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800e4bc:	4bb8      	ldr	r3, [pc, #736]	; (800e7a0 <_fx_media_open+0x308>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d102      	bne.n	800e4ca <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800e4c4:	2322      	movs	r3, #34	; 0x22
 800e4c6:	f000 bd53 	b.w	800ef70 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4dc:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e4e2:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800e4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e500:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2290      	movs	r2, #144	; 0x90
 800e6ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800e726:	2390      	movs	r3, #144	; 0x90
 800e728:	f000 bc22 	b.w	800ef70 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2205      	movs	r2, #5
 800e73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2290      	movs	r2, #144	; 0x90
 800e746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2201      	movs	r2, #1
 800e756:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e772:	2b00      	cmp	r3, #0
 800e774:	d016      	beq.n	800e7a4 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2208      	movs	r2, #8
 800e77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2290      	movs	r2, #144	; 0x90
 800e782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800e790:	2301      	movs	r3, #1
 800e792:	e3ed      	b.n	800ef70 <_fx_media_open+0xad8>
 800e794:	24014d94 	.word	0x24014d94
 800e798:	24014d98 	.word	0x24014d98
 800e79c:	24014d9c 	.word	0x24014d9c
 800e7a0:	24000014 	.word	0x24000014
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f7ff fc42 	bl	800e02e <_fx_media_boot_info_extract>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00e      	beq.n	800e7ce <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2208      	movs	r2, #8
 800e7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2290      	movs	r2, #144	; 0x90
 800e7bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	e3d0      	b.n	800ef70 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d4:	3330      	adds	r3, #48	; 0x30
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 fede 	bl	800f598 <_fx_utility_16_unsigned_read>
 800e7dc:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d20e      	bcs.n	800e806 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2208      	movs	r2, #8
 800e7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2290      	movs	r2, #144	; 0x90
 800e7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800e802:	2321      	movs	r3, #33	; 0x21
 800e804:	e3b4      	b.n	800ef70 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e80c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	695b      	ldr	r3, [r3, #20]
 800e818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e81c:	d903      	bls.n	800e826 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e824:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800e832:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800e834:	e01c      	b.n	800e870 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800e836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e83a:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800e83c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800e84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e84c:	2200      	movs	r2, #0
 800e84e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800e850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e852:	2200      	movs	r2, #0
 800e854:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800e856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e858:	f103 0218 	add.w	r2, r3, #24
 800e85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e85e:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800e860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e862:	3318      	adds	r3, #24
 800e864:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e86c:	4413      	add	r3, r2
 800e86e:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800e870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e872:	1e5a      	subs	r2, r3, #1
 800e874:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1dd      	bne.n	800e836 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800e87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e87c:	3b18      	subs	r3, #24
 800e87e:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800e880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e882:	2200      	movs	r2, #0
 800e884:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800e886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e888:	1e5a      	subs	r2, r3, #1
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	2b0f      	cmp	r3, #15
 800e8aa:	d91a      	bls.n	800e8e2 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	695a      	ldr	r2, [r3, #20]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6959      	ldr	r1, [r3, #20]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	695b      	ldr	r3, [r3, #20]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d10c      	bne.n	800e8e2 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	089b      	lsrs	r3, r3, #2
 800e8d4:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800e8dc:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800e8e0:	e002      	b.n	800e8e8 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8ec:	e023      	b.n	800e936 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800e8ee:	68f9      	ldr	r1, [r7, #12]
 800e8f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800e900:	2200      	movs	r2, #0
 800e902:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800e904:	68f9      	ldr	r1, [r7, #12]
 800e906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e908:	4613      	mov	r3, r2
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	440b      	add	r3, r1
 800e912:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800e91a:	68f9      	ldr	r1, [r7, #12]
 800e91c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e91e:	4613      	mov	r3, r2
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	4413      	add	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	440b      	add	r3, r1
 800e928:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800e92c:	2200      	movs	r2, #0
 800e92e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800e930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e932:	3301      	adds	r3, #1
 800e934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e938:	2b0f      	cmp	r3, #15
 800e93a:	d9d8      	bls.n	800e8ee <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800e93c:	2300      	movs	r3, #0
 800e93e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e940:	e009      	b.n	800e956 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e946:	4413      	add	r3, r2
 800e948:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e94c:	2200      	movs	r2, #0
 800e94e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800e950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e952:	3301      	adds	r3, #1
 800e954:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e958:	2b7f      	cmp	r3, #127	; 0x7f
 800e95a:	d9f2      	bls.n	800e942 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800e964:	68f9      	ldr	r1, [r7, #12]
 800e966:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800e968:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800e96c:	441a      	add	r2, r3
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e976:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800e97c:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e97e:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800e984:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800e994:	441a      	add	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e9a0:	68f9      	ldr	r1, [r7, #12]
 800e9a2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	ebb2 0804 	subs.w	r8, r2, r4
 800e9ae:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	469a      	mov	sl, r3
 800e9ba:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800e9bc:	4652      	mov	r2, sl
 800e9be:	465b      	mov	r3, fp
 800e9c0:	4640      	mov	r0, r8
 800e9c2:	4649      	mov	r1, r9
 800e9c4:	f7f1 fdfc 	bl	80005c0 <__aeabi_uldivmod>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d819      	bhi.n	800ea10 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800e9fa:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea04:	461a      	mov	r2, r3
 800ea06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea0a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800ea0e:	e037      	b.n	800ea80 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea14:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d819      	bhi.n	800ea50 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea34:	461a      	mov	r2, r3
 800ea36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800ea3a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea44:	461a      	mov	r2, r3
 800ea46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea4a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800ea4e:	e017      	b.n	800ea80 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea60:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4b95      	ldr	r3, [pc, #596]	; (800ecc0 <_fx_media_open+0x828>)
 800ea6c:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ea76:	461a      	mov	r2, r3
 800ea78:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ea7c:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d15f      	bne.n	800eb48 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d801      	bhi.n	800ea94 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800ea90:	2302      	movs	r3, #2
 800ea92:	e26d      	b.n	800ef70 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea9c:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800eaa2:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800eaa6:	441a      	add	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eab4:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800eab6:	f107 0310 	add.w	r3, r7, #16
 800eaba:	461a      	mov	r2, r3
 800eabc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 fdd0 	bl	800f664 <_fx_utility_FAT_entry_read>
 800eac4:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800eac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac8:	3301      	adds	r3, #1
 800eaca:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00e      	beq.n	800eaf0 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2208      	movs	r2, #8
 800ead6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2290      	movs	r2, #144	; 0x90
 800eade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800eaec:	2303      	movs	r3, #3
 800eaee:	e23f      	b.n	800ef70 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d004      	beq.n	800eb02 <_fx_media_open+0x66a>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d90e      	bls.n	800eb20 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2208      	movs	r2, #8
 800eb06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2290      	movs	r2, #144	; 0x90
 800eb0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	e227      	b.n	800ef70 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	4a68      	ldr	r2, [pc, #416]	; (800ecc4 <_fx_media_open+0x82c>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d802      	bhi.n	800eb2e <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800eb2c:	e7c3      	b.n	800eab6 <_fx_media_open+0x61e>
                break;
 800eb2e:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb36:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800eb3e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800eb42:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 808e 	beq.w	800ec7c <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	69db      	ldr	r3, [r3, #28]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	69d9      	ldr	r1, [r3, #28]
 800eb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb70:	f04f 33ff 	mov.w	r3, #4294967295
 800eb74:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	69db      	ldr	r3, [r3, #28]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2290      	movs	r2, #144	; 0x90
 800eb8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2203      	movs	r2, #3
 800ebae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d150      	bne.n	800ec76 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebda:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800ebdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebde:	f000 fd03 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800ebe2:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	4a38      	ldr	r2, [pc, #224]	; (800ecc8 <_fx_media_open+0x830>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d140      	bne.n	800ec6e <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ebec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 fcf8 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800ebf8:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	4a33      	ldr	r2, [pc, #204]	; (800eccc <_fx_media_open+0x834>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d131      	bne.n	800ec66 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800ec02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 fced 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800ec1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 fce0 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d80c      	bhi.n	800ec56 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec46:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d804      	bhi.n	800ec56 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d812      	bhi.n	800ec7c <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ec64:	e00a      	b.n	800ec7c <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	669a      	str	r2, [r3, #104]	; 0x68
 800ec6c:	e006      	b.n	800ec7c <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	669a      	str	r2, [r3, #104]	; 0x68
 800ec74:	e002      	b.n	800ec7c <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d040      	beq.n	800ed06 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800ec84:	2302      	movs	r3, #2
 800ec86:	657b      	str	r3, [r7, #84]	; 0x54
 800ec88:	e036      	b.n	800ecf8 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800ec8a:	f107 0310 	add.w	r3, r7, #16
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f000 fce6 	bl	800f664 <_fx_utility_FAT_entry_read>
 800ec98:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d017      	beq.n	800ecd0 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2208      	movs	r2, #8
 800eca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2290      	movs	r2, #144	; 0x90
 800ecac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e158      	b.n	800ef70 <_fx_media_open+0xad8>
 800ecbe:	bf00      	nop
 800ecc0:	0ffffff0 	.word	0x0ffffff0
 800ecc4:	0fffffef 	.word	0x0fffffef
 800ecc8:	41615252 	.word	0x41615252
 800eccc:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10d      	bne.n	800ecf2 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d103      	bne.n	800ecf2 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800ecf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfc:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800ecfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d3c2      	bcc.n	800ec8a <_fx_media_open+0x7f2>
 800ed04:	e0b4      	b.n	800ee70 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f040 80b0 	bne.w	800ee70 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ed16:	2101      	movs	r1, #1
 800ed18:	9102      	str	r1, [sp, #8]
 800ed1a:	e9cd 2300 	strd	r2, r3, [sp]
 800ed1e:	f04f 0201 	mov.w	r2, #1
 800ed22:	f04f 0300 	mov.w	r3, #0
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f001 fda0 	bl	801086c <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed30:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800ed36:	2300      	movs	r3, #0
 800ed38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed3a:	e093      	b.n	800ee64 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed42:	4413      	add	r3, r2
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	695b      	ldr	r3, [r3, #20]
 800ed54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d902      	bls.n	800ed60 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2290      	movs	r2, #144	; 0x90
 800ed6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	689a      	ldr	r2, [r3, #8]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2202      	movs	r2, #2
 800ed8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00e      	beq.n	800edc4 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2208      	movs	r2, #8
 800edaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2290      	movs	r2, #144	; 0x90
 800edb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800edc0:	2303      	movs	r3, #3
 800edc2:	e0d5      	b.n	800ef70 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edca:	fb02 f303 	mul.w	r3, r2, r3
 800edce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800edd0:	2300      	movs	r3, #0
 800edd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800edd4:	e03d      	b.n	800ee52 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d009      	beq.n	800edf2 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	689a      	ldr	r2, [r3, #8]
 800ede2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ede4:	4413      	add	r3, r2
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800edea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edec:	3304      	adds	r3, #4
 800edee:	64bb      	str	r3, [r7, #72]	; 0x48
 800edf0:	e011      	b.n	800ee16 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	689a      	ldr	r2, [r3, #8]
 800edf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf8:	4413      	add	r3, r2
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee04:	3301      	adds	r3, #1
 800ee06:	4413      	add	r3, r2
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800ee0c:	430b      	orrs	r3, r1
 800ee0e:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800ee10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee12:	3302      	adds	r3, #2
 800ee14:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10d      	bne.n	800ee38 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d103      	bne.n	800ee38 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800ee38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee42:	3302      	adds	r3, #2
 800ee44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d303      	bcc.n	800ee52 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee4e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800ee50:	e003      	b.n	800ee5a <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800ee52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d3bd      	bcc.n	800edd6 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee60:	4413      	add	r3, r2
 800ee62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	f4ff af66 	bcc.w	800ed3c <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d103      	bne.n	800ee82 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eed6:	2200      	movs	r2, #0
 800eed8:	4928      	ldr	r1, [pc, #160]	; (800ef7c <_fx_media_open+0xae4>)
 800eeda:	4618      	mov	r0, r3
 800eedc:	f003 fbd4 	bl	8012688 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eee0:	f3ef 8310 	mrs	r3, PRIMASK
 800eee4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800eee6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800eee8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eeea:	b672      	cpsid	i
    return(int_posture);
 800eeec:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	4a23      	ldr	r2, [pc, #140]	; (800ef80 <_fx_media_open+0xae8>)
 800eef4:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800eef6:	4b23      	ldr	r3, [pc, #140]	; (800ef84 <_fx_media_open+0xaec>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d017      	beq.n	800ef2e <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800eefe:	4b21      	ldr	r3, [pc, #132]	; (800ef84 <_fx_media_open+0xaec>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ef06:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800ef08:	4b1e      	ldr	r3, [pc, #120]	; (800ef84 <_fx_media_open+0xaec>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6a3a      	ldr	r2, [r7, #32]
 800ef1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800ef22:	4b18      	ldr	r3, [pc, #96]	; (800ef84 <_fx_media_open+0xaec>)
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800ef2c:	e00a      	b.n	800ef44 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800ef2e:	4a15      	ldr	r2, [pc, #84]	; (800ef84 <_fx_media_open+0xaec>)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800ef44:	4b10      	ldr	r3, [pc, #64]	; (800ef88 <_fx_media_open+0xaf0>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	4a0f      	ldr	r2, [pc, #60]	; (800ef88 <_fx_media_open+0xaf0>)
 800ef4c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d004      	beq.n	800ef62 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	4798      	blx	r3
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f383 8810 	msr	PRIMASK, r3
}
 800ef6c:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3758      	adds	r7, #88	; 0x58
 800ef74:	46bd      	mov	sp, r7
 800ef76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08015f14 	.word	0x08015f14
 800ef80:	4d454449 	.word	0x4d454449
 800ef84:	24014d7c 	.word	0x24014d7c
 800ef88:	24014d80 	.word	0x24014d80

0800ef8c <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800ef8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ef90:	b090      	sub	sp, #64	; 0x40
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	607a      	str	r2, [r7, #4]
 800ef9a:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800efa0:	2300      	movs	r3, #0
 800efa2:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	2be9      	cmp	r3, #233	; 0xe9
 800efaa:	d008      	beq.n	800efbe <_fx_partition_offset_calculate+0x32>
 800efac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2beb      	cmp	r3, #235	; 0xeb
 800efb2:	d17d      	bne.n	800f0b0 <_fx_partition_offset_calculate+0x124>
 800efb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb6:	3302      	adds	r3, #2
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	2b90      	cmp	r3, #144	; 0x90
 800efbc:	d178      	bne.n	800f0b0 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800efbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc0:	3316      	adds	r3, #22
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d118      	bne.n	800effa <_fx_partition_offset_calculate+0x6e>
 800efc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efca:	3317      	adds	r3, #23
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d113      	bne.n	800effa <_fx_partition_offset_calculate+0x6e>
 800efd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd4:	3324      	adds	r3, #36	; 0x24
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10e      	bne.n	800effa <_fx_partition_offset_calculate+0x6e>
 800efdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efde:	3325      	adds	r3, #37	; 0x25
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d109      	bne.n	800effa <_fx_partition_offset_calculate+0x6e>
 800efe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe8:	3326      	adds	r3, #38	; 0x26
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d104      	bne.n	800effa <_fx_partition_offset_calculate+0x6e>
 800eff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff2:	3327      	adds	r3, #39	; 0x27
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d05a      	beq.n	800f0b0 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800effa:	f04f 0200 	mov.w	r2, #0
 800effe:	f04f 0300 	mov.w	r3, #0
 800f002:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800f006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f008:	3313      	adds	r3, #19
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d104      	bne.n	800f01a <_fx_partition_offset_calculate+0x8e>
 800f010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f012:	3314      	adds	r3, #20
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00d      	beq.n	800f036 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800f01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01c:	3314      	adds	r3, #20
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	021b      	lsls	r3, r3, #8
 800f022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f024:	3213      	adds	r2, #19
 800f026:	7812      	ldrb	r2, [r2, #0]
 800f028:	4313      	orrs	r3, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	4698      	mov	r8, r3
 800f02e:	4691      	mov	r9, r2
 800f030:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800f034:	e02a      	b.n	800f08c <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800f036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f038:	3320      	adds	r3, #32
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10e      	bne.n	800f05e <_fx_partition_offset_calculate+0xd2>
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	3321      	adds	r3, #33	; 0x21
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d109      	bne.n	800f05e <_fx_partition_offset_calculate+0xd2>
 800f04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04c:	3322      	adds	r3, #34	; 0x22
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d104      	bne.n	800f05e <_fx_partition_offset_calculate+0xd2>
 800f054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f056:	3323      	adds	r3, #35	; 0x23
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d016      	beq.n	800f08c <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f060:	3323      	adds	r3, #35	; 0x23
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f068:	3322      	adds	r3, #34	; 0x22
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f06e:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f072:	3321      	adds	r3, #33	; 0x21
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800f078:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800f07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f07c:	3220      	adds	r2, #32
 800f07e:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800f080:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800f082:	2200      	movs	r2, #0
 800f084:	461c      	mov	r4, r3
 800f086:	4615      	mov	r5, r2
 800f088:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800f08c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f090:	4313      	orrs	r3, r2
 800f092:	d00d      	beq.n	800f0b0 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800f0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e032      	b.n	800f116 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800f0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b55      	cmp	r3, #85	; 0x55
 800f0ba:	d105      	bne.n	800f0c8 <_fx_partition_offset_calculate+0x13c>
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	2baa      	cmp	r3, #170	; 0xaa
 800f0c6:	d001      	beq.n	800f0cc <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	e024      	b.n	800f116 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800f0cc:	f107 0110 	add.w	r1, r7, #16
 800f0d0:	f107 0014 	add.w	r0, r7, #20
 800f0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f000 f822 	bl	800f120 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d301      	bcc.n	800f0e8 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	e016      	b.n	800f116 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d007      	beq.n	800f0fe <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	3340      	adds	r3, #64	; 0x40
 800f0f4:	443b      	add	r3, r7
 800f0f6:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d007      	beq.n	800f114 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	00db      	lsls	r3, r3, #3
 800f108:	3340      	adds	r3, #64	; 0x40
 800f10a:	443b      	add	r3, r7
 800f10c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3740      	adds	r7, #64	; 0x40
 800f11a:	46bd      	mov	sp, r7
 800f11c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f120 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800f120:	b480      	push	{r7}
 800f122:	b089      	sub	sp, #36	; 0x24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
 800f12c:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800f12e:	2300      	movs	r3, #0
 800f130:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800f132:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800f136:	61fb      	str	r3, [r7, #28]
 800f138:	e06f      	b.n	800f21a <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	3304      	adds	r3, #4
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	4413      	add	r3, r2
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10e      	bne.n	800f166 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	4413      	add	r3, r2
 800f152:	2200      	movs	r2, #0
 800f154:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	00db      	lsls	r3, r3, #3
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	2200      	movs	r2, #0
 800f162:	605a      	str	r2, [r3, #4]
 800f164:	e051      	b.n	800f20a <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	3308      	adds	r3, #8
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	4413      	add	r3, r2
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	3309      	adds	r3, #9
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	4413      	add	r3, r2
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	021b      	lsls	r3, r3, #8
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	330a      	adds	r3, #10
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	4413      	add	r3, r2
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	041b      	lsls	r3, r3, #16
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	4313      	orrs	r3, r2
 800f194:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	330b      	adds	r3, #11
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	4413      	add	r3, r2
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	061b      	lsls	r3, r3, #24
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	6979      	ldr	r1, [r7, #20]
 800f1b4:	69ba      	ldr	r2, [r7, #24]
 800f1b6:	440a      	add	r2, r1
 800f1b8:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	330c      	adds	r3, #12
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	330d      	adds	r3, #13
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	021b      	lsls	r3, r3, #8
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	330e      	adds	r3, #14
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	4413      	add	r3, r2
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	330f      	adds	r3, #15
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	061b      	lsls	r3, r3, #24
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	4413      	add	r3, r2
 800f206:	697a      	ldr	r2, [r7, #20]
 800f208:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	1c5a      	adds	r2, r3, #1
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	3310      	adds	r3, #16
 800f218:	61fb      	str	r3, [r7, #28]
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800f220:	d98b      	bls.n	800f13a <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3724      	adds	r7, #36	; 0x24
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800f236:	4b27      	ldr	r3, [pc, #156]	; (800f2d4 <_fx_system_initialize+0xa4>)
 800f238:	2200      	movs	r2, #0
 800f23a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800f23c:	4b26      	ldr	r3, [pc, #152]	; (800f2d8 <_fx_system_initialize+0xa8>)
 800f23e:	2200      	movs	r2, #0
 800f240:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800f242:	4b26      	ldr	r3, [pc, #152]	; (800f2dc <_fx_system_initialize+0xac>)
 800f244:	f644 2221 	movw	r2, #18977	; 0x4a21
 800f248:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800f24a:	4b25      	ldr	r3, [pc, #148]	; (800f2e0 <_fx_system_initialize+0xb0>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800f250:	4b24      	ldr	r3, [pc, #144]	; (800f2e4 <_fx_system_initialize+0xb4>)
 800f252:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f256:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800f258:	4b23      	ldr	r3, [pc, #140]	; (800f2e8 <_fx_system_initialize+0xb8>)
 800f25a:	2210      	movs	r2, #16
 800f25c:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800f25e:	2301      	movs	r3, #1
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	4b1f      	ldr	r3, [pc, #124]	; (800f2ec <_fx_system_initialize+0xbc>)
 800f270:	4a1f      	ldr	r2, [pc, #124]	; (800f2f0 <_fx_system_initialize+0xc0>)
 800f272:	4920      	ldr	r1, [pc, #128]	; (800f2f4 <_fx_system_initialize+0xc4>)
 800f274:	4820      	ldr	r0, [pc, #128]	; (800f2f8 <_fx_system_initialize+0xc8>)
 800f276:	f004 fe55 	bl	8013f24 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800f27a:	4b20      	ldr	r3, [pc, #128]	; (800f2fc <_fx_system_initialize+0xcc>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f282:	4a1e      	ldr	r2, [pc, #120]	; (800f2fc <_fx_system_initialize+0xcc>)
 800f284:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800f286:	4b1d      	ldr	r3, [pc, #116]	; (800f2fc <_fx_system_initialize+0xcc>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f28e:	4a1b      	ldr	r2, [pc, #108]	; (800f2fc <_fx_system_initialize+0xcc>)
 800f290:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800f292:	4b1b      	ldr	r3, [pc, #108]	; (800f300 <_fx_system_initialize+0xd0>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f29a:	4a19      	ldr	r2, [pc, #100]	; (800f300 <_fx_system_initialize+0xd0>)
 800f29c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800f29e:	4b18      	ldr	r3, [pc, #96]	; (800f300 <_fx_system_initialize+0xd0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2a6:	4a16      	ldr	r2, [pc, #88]	; (800f300 <_fx_system_initialize+0xd0>)
 800f2a8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800f2aa:	4b15      	ldr	r3, [pc, #84]	; (800f300 <_fx_system_initialize+0xd0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f043 0310 	orr.w	r3, r3, #16
 800f2b2:	4a13      	ldr	r2, [pc, #76]	; (800f300 <_fx_system_initialize+0xd0>)
 800f2b4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800f2b6:	4b13      	ldr	r3, [pc, #76]	; (800f304 <_fx_system_initialize+0xd4>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800f2be:	4a11      	ldr	r2, [pc, #68]	; (800f304 <_fx_system_initialize+0xd4>)
 800f2c0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800f2c2:	4b10      	ldr	r3, [pc, #64]	; (800f304 <_fx_system_initialize+0xd4>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800f2ca:	4a0e      	ldr	r2, [pc, #56]	; (800f304 <_fx_system_initialize+0xd4>)
 800f2cc:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800f2ce:	bf00      	nop
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	24014d7c 	.word	0x24014d7c
 800f2d8:	24014d80 	.word	0x24014d80
 800f2dc:	24014d84 	.word	0x24014d84
 800f2e0:	24014d88 	.word	0x24014d88
 800f2e4:	24014d8c 	.word	0x24014d8c
 800f2e8:	24014d90 	.word	0x24014d90
 800f2ec:	46585359 	.word	0x46585359
 800f2f0:	0800f309 	.word	0x0800f309
 800f2f4:	08015f28 	.word	0x08015f28
 800f2f8:	24014da0 	.word	0x24014da0
 800f2fc:	24014d94 	.word	0x24014d94
 800f300:	24014d98 	.word	0x24014d98
 800f304:	24014d9c 	.word	0x24014d9c

0800f308 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800f308:	b480      	push	{r7}
 800f30a:	b089      	sub	sp, #36	; 0x24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a9d      	ldr	r2, [pc, #628]	; (800f588 <_fx_system_timer_entry+0x280>)
 800f314:	4293      	cmp	r3, r2
 800f316:	f040 8132 	bne.w	800f57e <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800f31a:	4b9c      	ldr	r3, [pc, #624]	; (800f58c <_fx_system_timer_entry+0x284>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f003 031f 	and.w	r3, r3, #31
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800f326:	4b99      	ldr	r3, [pc, #612]	; (800f58c <_fx_system_timer_entry+0x284>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	095b      	lsrs	r3, r3, #5
 800f32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f330:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800f332:	4b96      	ldr	r3, [pc, #600]	; (800f58c <_fx_system_timer_entry+0x284>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	0adb      	lsrs	r3, r3, #11
 800f338:	f003 031f 	and.w	r3, r3, #31
 800f33c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800f33e:	4b94      	ldr	r3, [pc, #592]	; (800f590 <_fx_system_timer_entry+0x288>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f003 031f 	and.w	r3, r3, #31
 800f346:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800f348:	4b91      	ldr	r3, [pc, #580]	; (800f590 <_fx_system_timer_entry+0x288>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	095b      	lsrs	r3, r3, #5
 800f34e:	f003 030f 	and.w	r3, r3, #15
 800f352:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800f354:	4b8e      	ldr	r3, [pc, #568]	; (800f590 <_fx_system_timer_entry+0x288>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	0a5b      	lsrs	r3, r3, #9
 800f35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f35e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800f362:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	330a      	adds	r3, #10
 800f368:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	2b3b      	cmp	r3, #59	; 0x3b
 800f36e:	f240 80d4 	bls.w	800f51a <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	4a87      	ldr	r2, [pc, #540]	; (800f594 <_fx_system_timer_entry+0x28c>)
 800f376:	fba2 2303 	umull	r2, r3, r2, r3
 800f37a:	095b      	lsrs	r3, r3, #5
 800f37c:	69ba      	ldr	r2, [r7, #24]
 800f37e:	4413      	add	r3, r2
 800f380:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800f382:	69fa      	ldr	r2, [r7, #28]
 800f384:	4b83      	ldr	r3, [pc, #524]	; (800f594 <_fx_system_timer_entry+0x28c>)
 800f386:	fba3 1302 	umull	r1, r3, r3, r2
 800f38a:	0959      	lsrs	r1, r3, #5
 800f38c:	460b      	mov	r3, r1
 800f38e:	011b      	lsls	r3, r3, #4
 800f390:	1a5b      	subs	r3, r3, r1
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	1ad3      	subs	r3, r2, r3
 800f396:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	2b3b      	cmp	r3, #59	; 0x3b
 800f39c:	f240 80bd 	bls.w	800f51a <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	4a7c      	ldr	r2, [pc, #496]	; (800f594 <_fx_system_timer_entry+0x28c>)
 800f3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f3a8:	095b      	lsrs	r3, r3, #5
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	4b78      	ldr	r3, [pc, #480]	; (800f594 <_fx_system_timer_entry+0x28c>)
 800f3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800f3b8:	0959      	lsrs	r1, r3, #5
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	011b      	lsls	r3, r3, #4
 800f3be:	1a5b      	subs	r3, r3, r1
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	1ad3      	subs	r3, r2, r3
 800f3c4:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	2b17      	cmp	r3, #23
 800f3ca:	f240 80a6 	bls.w	800f51a <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	617b      	str	r3, [r7, #20]
                    day++;
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	2b0b      	cmp	r3, #11
 800f3de:	f200 80cb 	bhi.w	800f578 <_fx_system_timer_entry+0x270>
 800f3e2:	a201      	add	r2, pc, #4	; (adr r2, 800f3e8 <_fx_system_timer_entry+0xe0>)
 800f3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e8:	0800f419 	.word	0x0800f419
 800f3ec:	0800f42b 	.word	0x0800f42b
 800f3f0:	0800f459 	.word	0x0800f459
 800f3f4:	0800f46b 	.word	0x0800f46b
 800f3f8:	0800f47d 	.word	0x0800f47d
 800f3fc:	0800f48f 	.word	0x0800f48f
 800f400:	0800f4a1 	.word	0x0800f4a1
 800f404:	0800f4b3 	.word	0x0800f4b3
 800f408:	0800f4c5 	.word	0x0800f4c5
 800f40c:	0800f4d7 	.word	0x0800f4d7
 800f410:	0800f4e9 	.word	0x0800f4e9
 800f414:	0800f4fb 	.word	0x0800f4fb

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	2b1f      	cmp	r3, #31
 800f41c:	d97f      	bls.n	800f51e <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f41e:	2301      	movs	r3, #1
 800f420:	613b      	str	r3, [r7, #16]
                            month++;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3301      	adds	r3, #1
 800f426:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f428:	e079      	b.n	800f51e <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f003 0303 	and.w	r3, r3, #3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d108      	bne.n	800f446 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	2b1d      	cmp	r3, #29
 800f438:	d973      	bls.n	800f522 <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800f43a:	2301      	movs	r3, #1
 800f43c:	613b      	str	r3, [r7, #16]
                                month++;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	3301      	adds	r3, #1
 800f442:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800f444:	e06d      	b.n	800f522 <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	2b1c      	cmp	r3, #28
 800f44a:	d96a      	bls.n	800f522 <_fx_system_timer_entry+0x21a>
                                day = 1;
 800f44c:	2301      	movs	r3, #1
 800f44e:	613b      	str	r3, [r7, #16]
                                month++;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3301      	adds	r3, #1
 800f454:	60fb      	str	r3, [r7, #12]
                        break;
 800f456:	e064      	b.n	800f522 <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b1f      	cmp	r3, #31
 800f45c:	d963      	bls.n	800f526 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f45e:	2301      	movs	r3, #1
 800f460:	613b      	str	r3, [r7, #16]
                            month++;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3301      	adds	r3, #1
 800f466:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f468:	e05d      	b.n	800f526 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	2b1e      	cmp	r3, #30
 800f46e:	d95c      	bls.n	800f52a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f470:	2301      	movs	r3, #1
 800f472:	613b      	str	r3, [r7, #16]
                            month++;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f47a:	e056      	b.n	800f52a <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	2b1f      	cmp	r3, #31
 800f480:	d955      	bls.n	800f52e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f482:	2301      	movs	r3, #1
 800f484:	613b      	str	r3, [r7, #16]
                            month++;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3301      	adds	r3, #1
 800f48a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f48c:	e04f      	b.n	800f52e <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	2b1e      	cmp	r3, #30
 800f492:	d94e      	bls.n	800f532 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f494:	2301      	movs	r3, #1
 800f496:	613b      	str	r3, [r7, #16]
                            month++;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	3301      	adds	r3, #1
 800f49c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f49e:	e048      	b.n	800f532 <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	2b1f      	cmp	r3, #31
 800f4a4:	d947      	bls.n	800f536 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	613b      	str	r3, [r7, #16]
                            month++;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f4b0:	e041      	b.n	800f536 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2b1f      	cmp	r3, #31
 800f4b6:	d940      	bls.n	800f53a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	613b      	str	r3, [r7, #16]
                            month++;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f4c2:	e03a      	b.n	800f53a <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	2b1e      	cmp	r3, #30
 800f4c8:	d939      	bls.n	800f53e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	613b      	str	r3, [r7, #16]
                            month++;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f4d4:	e033      	b.n	800f53e <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	2b1f      	cmp	r3, #31
 800f4da:	d932      	bls.n	800f542 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	613b      	str	r3, [r7, #16]
                            month++;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f4e6:	e02c      	b.n	800f542 <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	2b1e      	cmp	r3, #30
 800f4ec:	d92b      	bls.n	800f546 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	613b      	str	r3, [r7, #16]
                            month++;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800f4f8:	e025      	b.n	800f546 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	2b1f      	cmp	r3, #31
 800f4fe:	d924      	bls.n	800f54a <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 800f500:	2301      	movs	r3, #1
 800f502:	613b      	str	r3, [r7, #16]
                            month = 1;
 800f504:	2301      	movs	r3, #1
 800f506:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	3301      	adds	r3, #1
 800f50c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f640 023b 	movw	r2, #2107	; 0x83b
 800f514:	4293      	cmp	r3, r2
 800f516:	d831      	bhi.n	800f57c <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 800f518:	e017      	b.n	800f54a <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800f51a:	bf00      	nop
 800f51c:	e016      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f51e:	bf00      	nop
 800f520:	e014      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f522:	bf00      	nop
 800f524:	e012      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f526:	bf00      	nop
 800f528:	e010      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f52a:	bf00      	nop
 800f52c:	e00e      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f52e:	bf00      	nop
 800f530:	e00c      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f532:	bf00      	nop
 800f534:	e00a      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f536:	bf00      	nop
 800f538:	e008      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f53a:	bf00      	nop
 800f53c:	e006      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f53e:	bf00      	nop
 800f540:	e004      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f542:	bf00      	nop
 800f544:	e002      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f546:	bf00      	nop
 800f548:	e000      	b.n	800f54c <_fx_system_timer_entry+0x244>
                        break;
 800f54a:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800f552:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f558:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800f55e:	4a0c      	ldr	r2, [pc, #48]	; (800f590 <_fx_system_timer_entry+0x288>)
 800f560:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f56a:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	085b      	lsrs	r3, r3, #1
 800f570:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800f572:	4a06      	ldr	r2, [pc, #24]	; (800f58c <_fx_system_timer_entry+0x284>)
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	e002      	b.n	800f57e <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 800f578:	bf00      	nop
 800f57a:	e000      	b.n	800f57e <_fx_system_timer_entry+0x276>
                                return;
 800f57c:	bf00      	nop
    }
}
 800f57e:	3724      	adds	r7, #36	; 0x24
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr
 800f588:	46585359 	.word	0x46585359
 800f58c:	24014d88 	.word	0x24014d88
 800f590:	24014d84 	.word	0x24014d84
 800f594:	88888889 	.word	0x88888889

0800f598 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr

0800f5be <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800f5be:	b480      	push	{r7}
 800f5c0:	b083      	sub	sp, #12
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	b2da      	uxtb	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	0a1a      	lsrs	r2, r3, #8
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	b2d2      	uxtb	r2, r2
 800f5da:	701a      	strb	r2, [r3, #0]
}
 800f5dc:	bf00      	nop
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3303      	adds	r3, #3
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f600:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3301      	adds	r3, #1
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800f60a:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800f610:	4313      	orrs	r3, r2
 800f612:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800f614:	68fb      	ldr	r3, [r7, #12]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800f622:	b480      	push	{r7}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	0a1a      	lsrs	r2, r3, #8
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2d2      	uxtb	r2, r2
 800f63e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	0c1a      	lsrs	r2, r3, #16
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3302      	adds	r3, #2
 800f648:	b2d2      	uxtb	r2, r2
 800f64a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	0e1a      	lsrs	r2, r3, #24
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3303      	adds	r3, #3
 800f654:	b2d2      	uxtb	r2, r2
 800f656:	701a      	strb	r2, [r3, #0]
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800f664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f668:	b098      	sub	sp, #96	; 0x60
 800f66a:	af04      	add	r7, sp, #16
 800f66c:	61f8      	str	r0, [r7, #28]
 800f66e:	61b9      	str	r1, [r7, #24]
 800f670:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	f003 0303 	and.w	r3, r3, #3
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800f698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f69a:	4613      	mov	r3, r2
 800f69c:	005b      	lsls	r3, r3, #1
 800f69e:	4413      	add	r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f6a6:	69fa      	ldr	r2, [r7, #28]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800f6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	69ba      	ldr	r2, [r7, #24]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d105      	bne.n	800f6c2 <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800f6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b8:	685a      	ldr	r2, [r3, #4]
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e1f4      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800f6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6c4:	330c      	adds	r3, #12
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d11d      	bne.n	800f70a <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800f6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d0:	330c      	adds	r3, #12
 800f6d2:	685a      	ldr	r2, [r3, #4]
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6de:	ca07      	ldmia	r2, {r0, r1, r2}
 800f6e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800f6e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6e8:	4614      	mov	r4, r2
 800f6ea:	330c      	adds	r3, #12
 800f6ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f6f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f6:	330c      	adds	r3, #12
 800f6f8:	461c      	mov	r4, r3
 800f6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f702:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f706:	2300      	movs	r3, #0
 800f708:	e1d0      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800f70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70c:	3318      	adds	r3, #24
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	69ba      	ldr	r2, [r7, #24]
 800f712:	429a      	cmp	r2, r3
 800f714:	d127      	bne.n	800f766 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800f716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f718:	3318      	adds	r3, #24
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f726:	ca07      	ldmia	r2, {r0, r1, r2}
 800f728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800f72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f730:	4614      	mov	r4, r2
 800f732:	3318      	adds	r3, #24
 800f734:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73e:	f103 0218 	add.w	r2, r3, #24
 800f742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f744:	4614      	mov	r4, r2
 800f746:	330c      	adds	r3, #12
 800f748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f74c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f752:	330c      	adds	r3, #12
 800f754:	461c      	mov	r4, r3
 800f756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f75a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f75e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f762:	2300      	movs	r3, #0
 800f764:	e1a2      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800f766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f768:	3324      	adds	r3, #36	; 0x24
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	69ba      	ldr	r2, [r7, #24]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d131      	bne.n	800f7d6 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800f772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f774:	3324      	adds	r3, #36	; 0x24
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800f77c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f782:	ca07      	ldmia	r2, {r0, r1, r2}
 800f784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800f788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78c:	4614      	mov	r4, r2
 800f78e:	3324      	adds	r3, #36	; 0x24
 800f790:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f794:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800f798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a0:	4614      	mov	r4, r2
 800f7a2:	3318      	adds	r3, #24
 800f7a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800f7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ae:	f103 0218 	add.w	r2, r3, #24
 800f7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b4:	4614      	mov	r4, r2
 800f7b6:	330c      	adds	r3, #12
 800f7b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800f7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7c2:	330c      	adds	r3, #12
 800f7c4:	461c      	mov	r4, r3
 800f7c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e16a      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800f7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7d8:	1cda      	adds	r2, r3, #3
 800f7da:	69f9      	ldr	r1, [r7, #28]
 800f7dc:	4613      	mov	r3, r2
 800f7de:	005b      	lsls	r3, r3, #1
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	440b      	add	r3, r1
 800f7e6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d008      	beq.n	800f802 <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800f7f0:	69f8      	ldr	r0, [r7, #28]
 800f7f2:	f000 f960 	bl	800fab6 <_fx_utility_FAT_flush>
 800f7f6:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f800:	e154      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f808:	1e5a      	subs	r2, r3, #1
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 80a7 	beq.w	800f976 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	005a      	lsls	r2, r3, #1
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	4413      	add	r3, r2
 800f830:	085b      	lsrs	r3, r3, #1
 800f832:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f83a:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f842:	4413      	add	r3, r2
 800f844:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f848:	2200      	movs	r2, #0
 800f84a:	60bb      	str	r3, [r7, #8]
 800f84c:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f852:	2202      	movs	r2, #2
 800f854:	9202      	str	r2, [sp, #8]
 800f856:	2201      	movs	r2, #1
 800f858:	9201      	str	r2, [sp, #4]
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f860:	69f8      	ldr	r0, [r7, #28]
 800f862:	f001 fa19 	bl	8010c98 <_fx_utility_logical_sector_read>
 800f866:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800f86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f870:	e11c      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f878:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800f87a:	69fa      	ldr	r2, [r7, #28]
 800f87c:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f87e:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800f882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	689a      	ldr	r2, [r3, #8]
 800f88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88e:	4413      	add	r3, r2
 800f890:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d030      	beq.n	800f8fe <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800f89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	091b      	lsrs	r3, r3, #4
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800f8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d11b      	bne.n	800f8f0 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	603b      	str	r3, [r7, #0]
 800f8c4:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	9202      	str	r2, [sp, #8]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	9201      	str	r2, [sp, #4]
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d8:	69f8      	ldr	r0, [r7, #28]
 800f8da:	f001 f9dd 	bl	8010c98 <_fx_utility_logical_sector_read>
 800f8de:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d001      	beq.n	800f8ea <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800f8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e8:	e0e0      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f8ea:	69fb      	ldr	r3, [r7, #28]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800f8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	011b      	lsls	r3, r3, #4
 800f8f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8fc:	e02f      	b.n	800f95e <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800f8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800f904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f906:	3301      	adds	r3, #1
 800f908:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f90e:	3b01      	subs	r3, #1
 800f910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f912:	429a      	cmp	r2, r3
 800f914:	d11b      	bne.n	800f94e <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800f916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f918:	3301      	adds	r3, #1
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91e:	2200      	movs	r2, #0
 800f920:	469a      	mov	sl, r3
 800f922:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f928:	2202      	movs	r2, #2
 800f92a:	9202      	str	r2, [sp, #8]
 800f92c:	2201      	movs	r2, #1
 800f92e:	9201      	str	r2, [sp, #4]
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	4652      	mov	r2, sl
 800f934:	465b      	mov	r3, fp
 800f936:	69f8      	ldr	r0, [r7, #28]
 800f938:	f001 f9ae 	bl	8010c98 <_fx_utility_logical_sector_read>
 800f93c:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800f93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800f944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f946:	e0b1      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800f94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	021b      	lsls	r3, r3, #8
 800f954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f95a:	4313      	orrs	r3, r2
 800f95c:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800f95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f960:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800f964:	d303      	bcc.n	800f96e <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800f966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f968:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800f96c:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	e078      	b.n	800fa68 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d139      	bne.n	800f9f2 <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f98a:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f992:	4413      	add	r3, r2
 800f994:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f998:	2200      	movs	r2, #0
 800f99a:	4698      	mov	r8, r3
 800f99c:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	9202      	str	r2, [sp, #8]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	9201      	str	r2, [sp, #4]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	4642      	mov	r2, r8
 800f9ae:	464b      	mov	r3, r9
 800f9b0:	69f8      	ldr	r0, [r7, #28]
 800f9b2:	f001 f971 	bl	8010c98 <_fx_utility_logical_sector_read>
 800f9b6:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800f9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800f9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c0:	e074      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9c8:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800f9ca:	69fa      	ldr	r2, [r7, #28]
 800f9cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800f9ce:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800f9d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	4413      	add	r3, r2
 800f9e0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800f9e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f9e4:	f7ff fdd8 	bl	800f598 <_fx_utility_16_unsigned_read>
 800f9e8:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	e03a      	b.n	800fa68 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fe:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fa06:	4413      	add	r3, r2
 800fa08:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa10:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa14:	fb01 f202 	mul.w	r2, r1, r2
 800fa18:	1a9b      	subs	r3, r3, r2
 800fa1a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1e:	2200      	movs	r2, #0
 800fa20:	461c      	mov	r4, r3
 800fa22:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fa28:	2202      	movs	r2, #2
 800fa2a:	9202      	str	r2, [sp, #8]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	9201      	str	r2, [sp, #4]
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	4622      	mov	r2, r4
 800fa34:	462b      	mov	r3, r5
 800fa36:	69f8      	ldr	r0, [r7, #28]
 800fa38:	f001 f92e 	bl	8010c98 <_fx_utility_logical_sector_read>
 800fa3c:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800fa3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d001      	beq.n	800fa48 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800fa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa46:	e031      	b.n	800faac <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	689a      	ldr	r2, [r3, #8]
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	4413      	add	r3, r2
 800fa50:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800fa52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fa54:	f7ff fdc8 	bl	800f5e8 <_fx_utility_32_unsigned_read>
 800fa58:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa60:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa66:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800fa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa6a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa70:	4614      	mov	r4, r2
 800fa72:	3318      	adds	r3, #24
 800fa74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800fa7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa7e:	f103 0218 	add.w	r2, r3, #24
 800fa82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa84:	4614      	mov	r4, r2
 800fa86:	330c      	adds	r3, #12
 800fa88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800fa90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa92:	330c      	adds	r3, #12
 800fa94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa96:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa98:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800fa9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa9e:	69ba      	ldr	r2, [r7, #24]
 800faa0:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faa8:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3750      	adds	r7, #80	; 0x50
 800fab0:	46bd      	mov	sp, r7
 800fab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fab6 <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 800fab6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800faba:	b09a      	sub	sp, #104	; 0x68
 800fabc:	af04      	add	r7, sp, #16
 800fabe:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800face:	2300      	movs	r3, #0
 800fad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fad2:	e337      	b.n	8010144 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800fad4:	69f9      	ldr	r1, [r7, #28]
 800fad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fad8:	4613      	mov	r3, r2
 800fada:	005b      	lsls	r3, r3, #1
 800fadc:	4413      	add	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	440b      	add	r3, r1
 800fae2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 8325 	beq.w	8010138 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 800faee:	69f9      	ldr	r1, [r7, #28]
 800faf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faf2:	4613      	mov	r3, r2
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	440b      	add	r3, r1
 800fafc:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 816c 	beq.w	800fde6 <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800fb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb10:	005a      	lsls	r2, r3, #1
 800fb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb14:	4413      	add	r3, r2
 800fb16:	085b      	lsrs	r3, r3, #1
 800fb18:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb20:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fb28:	4413      	add	r3, r2
 800fb2a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 800fb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb30:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb34:	2200      	movs	r2, #0
 800fb36:	461c      	mov	r4, r3
 800fb38:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fb3e:	2302      	movs	r3, #2
 800fb40:	9302      	str	r3, [sp, #8]
 800fb42:	2301      	movs	r3, #1
 800fb44:	9301      	str	r3, [sp, #4]
 800fb46:	9200      	str	r2, [sp, #0]
 800fb48:	4622      	mov	r2, r4
 800fb4a:	462b      	mov	r3, r5
 800fb4c:	69f8      	ldr	r0, [r7, #28]
 800fb4e:	f001 f8a3 	bl	8010c98 <_fx_utility_logical_sector_read>
 800fb52:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	e2f7      	b.n	801014e <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 800fb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb64:	d037      	beq.n	800fbd6 <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 800fb6c:	69f9      	ldr	r1, [r7, #28]
 800fb6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb70:	4613      	mov	r3, r2
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	4413      	add	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	440b      	add	r3, r1
 800fb7a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800fb82:	69f9      	ldr	r1, [r7, #28]
 800fb84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb86:	4613      	mov	r3, r2
 800fb88:	005b      	lsls	r3, r3, #1
 800fb8a:	4413      	add	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	440b      	add	r3, r1
 800fb90:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800fb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d005      	beq.n	800fbae <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	091b      	lsrs	r3, r3, #4
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbaa:	7013      	strb	r3, [r2, #0]
 800fbac:	e010      	b.n	800fbd0 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbb6:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbe:	0a1b      	lsrs	r3, r3, #8
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	f003 030f 	and.w	r3, r3, #15
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbce:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 800fbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbd8:	653b      	str	r3, [r7, #80]	; 0x50
 800fbda:	e0a0      	b.n	800fd1e <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800fbdc:	69f9      	ldr	r1, [r7, #28]
 800fbde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	440b      	add	r3, r1
 800fbea:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 808a 	beq.w	800fd0a <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800fbf6:	69f9      	ldr	r1, [r7, #28]
 800fbf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	4413      	add	r3, r2
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	440b      	add	r3, r1
 800fc04:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800fc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0e:	005a      	lsls	r2, r3, #1
 800fc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc12:	4413      	add	r3, r2
 800fc14:	085b      	lsrs	r3, r3, #1
 800fc16:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc1e:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fc26:	4413      	add	r3, r2
 800fc28:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 800fc2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d16d      	bne.n	800fd0e <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800fc32:	69f9      	ldr	r1, [r7, #28]
 800fc34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc36:	4613      	mov	r3, r2
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	4413      	add	r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	440b      	add	r3, r1
 800fc40:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc4e:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fc54:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 800fc58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc62:	3b01      	subs	r3, #1
 800fc64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d101      	bne.n	800fc6e <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 800fc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6c:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	689a      	ldr	r2, [r3, #8]
 800fc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc74:	4413      	add	r3, r2
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800fc78:	69f9      	ldr	r1, [r7, #28]
 800fc7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	4413      	add	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	440b      	add	r3, r1
 800fc86:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800fc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d01b      	beq.n	800fcd0 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	f003 030f 	and.w	r3, r3, #15
 800fca0:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	011b      	lsls	r3, r3, #4
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb4:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800fcb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d029      	beq.n	800fd12 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 800fcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800fcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc6:	091b      	lsrs	r3, r3, #4
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fccc:	7013      	strb	r3, [r2, #0]
 800fcce:	e023      	b.n	800fd18 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800fcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcd6:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800fcd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d01a      	beq.n	800fd16 <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	3301      	adds	r3, #1
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcee:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf6:	0a1b      	lsrs	r3, r3, #8
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	f003 030f 	and.w	r3, r3, #15
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	4313      	orrs	r3, r2
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd06:	7013      	strb	r3, [r2, #0]
 800fd08:	e006      	b.n	800fd18 <_fx_utility_FAT_flush+0x262>
                        continue;
 800fd0a:	bf00      	nop
 800fd0c:	e004      	b.n	800fd18 <_fx_utility_FAT_flush+0x262>
                        continue;
 800fd0e:	bf00      	nop
 800fd10:	e002      	b.n	800fd18 <_fx_utility_FAT_flush+0x262>
                            continue;
 800fd12:	bf00      	nop
 800fd14:	e000      	b.n	800fd18 <_fx_utility_FAT_flush+0x262>
                            continue;
 800fd16:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	653b      	str	r3, [r7, #80]	; 0x50
 800fd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd20:	2b0f      	cmp	r3, #15
 800fd22:	f67f af5b 	bls.w	800fbdc <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd28:	2200      	movs	r2, #0
 800fd2a:	4698      	mov	r8, r3
 800fd2c:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fd32:	2302      	movs	r3, #2
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	2301      	movs	r3, #1
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	9200      	str	r2, [sp, #0]
 800fd3c:	4642      	mov	r2, r8
 800fd3e:	464b      	mov	r3, r9
 800fd40:	69f8      	ldr	r0, [r7, #28]
 800fd42:	f001 fa3d 	bl	80111c0 <_fx_utility_logical_sector_write>
 800fd46:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800fd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd50:	e1fd      	b.n	801014e <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d105      	bne.n	800fd6a <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd62:	0a9b      	lsrs	r3, r3, #10
 800fd64:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800fd68:	e006      	b.n	800fd78 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd6e:	0a9b      	lsrs	r3, r3, #10
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	3301      	adds	r3, #1
 800fd74:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 800fd78:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 800fd80:	2302      	movs	r3, #2
 800fd82:	e1e4      	b.n	801014e <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd90:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd94:	08db      	lsrs	r3, r3, #3
 800fd96:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fd98:	69fa      	ldr	r2, [r7, #28]
 800fd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdac:	1a9a      	subs	r2, r3, r2
 800fdae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdb6:	f003 0207 	and.w	r2, r3, #7
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4093      	lsls	r3, r2
 800fdbe:	b25b      	sxtb	r3, r3
 800fdc0:	430b      	orrs	r3, r1
 800fdc2:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800fdc4:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800fdc6:	69fa      	ldr	r2, [r7, #28]
 800fdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdca:	4413      	add	r3, r2
 800fdcc:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 800fdd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdda:	f000 81af 	beq.w	801013c <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 800fdde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde0:	3301      	adds	r3, #1
 800fde2:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fde4:	e6a5      	b.n	800fb32 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f040 80d2 	bne.w	800ff94 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 800fdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdfc:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fe04:	4413      	add	r3, r2
 800fe06:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	469a      	mov	sl, r3
 800fe0e:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800fe14:	2302      	movs	r3, #2
 800fe16:	9302      	str	r3, [sp, #8]
 800fe18:	2301      	movs	r3, #1
 800fe1a:	9301      	str	r3, [sp, #4]
 800fe1c:	9200      	str	r2, [sp, #0]
 800fe1e:	4652      	mov	r2, sl
 800fe20:	465b      	mov	r3, fp
 800fe22:	69f8      	ldr	r0, [r7, #28]
 800fe24:	f000 ff38 	bl	8010c98 <_fx_utility_logical_sector_read>
 800fe28:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d001      	beq.n	800fe34 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 800fe30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe32:	e18c      	b.n	801014e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fe34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe36:	653b      	str	r3, [r7, #80]	; 0x50
 800fe38:	e057      	b.n	800feea <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800fe3a:	69f9      	ldr	r1, [r7, #28]
 800fe3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe3e:	4613      	mov	r3, r2
 800fe40:	005b      	lsls	r3, r3, #1
 800fe42:	4413      	add	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	440b      	add	r3, r1
 800fe48:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d045      	beq.n	800fede <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800fe52:	69f9      	ldr	r1, [r7, #28]
 800fe54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe56:	4613      	mov	r3, r2
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	4413      	add	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	440b      	add	r3, r1
 800fe60:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 800fe68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe74:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800fe7c:	4413      	add	r3, r2
 800fe7e:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800fe80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d12c      	bne.n	800fee2 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe8e:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800fe94:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800fe98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	689a      	ldr	r2, [r3, #8]
 800fea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea4:	4413      	add	r3, r2
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800fea8:	69f9      	ldr	r1, [r7, #28]
 800feaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feac:	4613      	mov	r3, r2
 800feae:	005b      	lsls	r3, r3, #1
 800feb0:	4413      	add	r3, r2
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	440b      	add	r3, r1
 800feb6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 800febe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fec2:	f7ff fb7c 	bl	800f5be <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800fec6:	69f9      	ldr	r1, [r7, #28]
 800fec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feca:	4613      	mov	r3, r2
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	4413      	add	r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	440b      	add	r3, r1
 800fed4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fed8:	2200      	movs	r2, #0
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	e002      	b.n	800fee4 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800fede:	bf00      	nop
 800fee0:	e000      	b.n	800fee4 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800fee2:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	3301      	adds	r3, #1
 800fee8:	653b      	str	r3, [r7, #80]	; 0x50
 800feea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feec:	2b0f      	cmp	r3, #15
 800feee:	d9a4      	bls.n	800fe3a <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fef2:	2200      	movs	r2, #0
 800fef4:	613b      	str	r3, [r7, #16]
 800fef6:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800fefc:	2302      	movs	r3, #2
 800fefe:	9302      	str	r3, [sp, #8]
 800ff00:	2301      	movs	r3, #1
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	9200      	str	r2, [sp, #0]
 800ff06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ff0a:	69f8      	ldr	r0, [r7, #28]
 800ff0c:	f001 f958 	bl	80111c0 <_fx_utility_logical_sector_write>
 800ff10:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d001      	beq.n	800ff1c <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	e118      	b.n	801014e <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d105      	bne.n	800ff34 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2c:	0a9b      	lsrs	r3, r3, #10
 800ff2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ff32:	e006      	b.n	800ff42 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff38:	0a9b      	lsrs	r3, r3, #10
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff48:	1ad2      	subs	r2, r2, r3
 800ff4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ff4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff52:	08db      	lsrs	r3, r3, #3
 800ff54:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800ff56:	69fa      	ldr	r2, [r7, #28]
 800ff58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5a:	4413      	add	r3, r2
 800ff5c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff6a:	1a9a      	subs	r2, r3, r2
 800ff6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ff70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff74:	f003 0207 	and.w	r2, r3, #7
 800ff78:	2301      	movs	r3, #1
 800ff7a:	4093      	lsls	r3, r2
 800ff7c:	b25b      	sxtb	r3, r3
 800ff7e:	430b      	orrs	r3, r1
 800ff80:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800ff82:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800ff84:	69fa      	ldr	r2, [r7, #28]
 800ff86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff88:	4413      	add	r3, r2
 800ff8a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800ff8e:	460b      	mov	r3, r1
 800ff90:	7013      	strb	r3, [r2, #0]
 800ff92:	e0d4      	b.n	801013e <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 800ff94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffa0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ffa8:	4413      	add	r3, r2
 800ffaa:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ffac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffae:	2200      	movs	r2, #0
 800ffb0:	60bb      	str	r3, [r7, #8]
 800ffb2:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800ffb8:	2302      	movs	r3, #2
 800ffba:	9302      	str	r3, [sp, #8]
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	9200      	str	r2, [sp, #0]
 800ffc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffc6:	69f8      	ldr	r0, [r7, #28]
 800ffc8:	f000 fe66 	bl	8010c98 <_fx_utility_logical_sector_read>
 800ffcc:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800ffce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	e0ba      	b.n	801014e <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ffd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffda:	653b      	str	r3, [r7, #80]	; 0x50
 800ffdc:	e057      	b.n	801008e <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800ffde:	69f9      	ldr	r1, [r7, #28]
 800ffe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	440b      	add	r3, r1
 800ffec:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d045      	beq.n	8010082 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800fff6:	69f9      	ldr	r1, [r7, #28]
 800fff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fffa:	4613      	mov	r3, r2
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	4413      	add	r3, r2
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	440b      	add	r3, r1
 8010004:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 801000c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010018:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010020:	4413      	add	r3, r2
 8010022:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010028:	429a      	cmp	r2, r3
 801002a:	d12c      	bne.n	8010086 <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010032:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010038:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801003c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	689a      	ldr	r2, [r3, #8]
 8010046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010048:	4413      	add	r3, r2
 801004a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801004c:	69f9      	ldr	r1, [r7, #28]
 801004e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010050:	4613      	mov	r3, r2
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	440b      	add	r3, r1
 801005a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8010062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010066:	f7ff fadc 	bl	800f622 <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801006a:	69f9      	ldr	r1, [r7, #28]
 801006c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801006e:	4613      	mov	r3, r2
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	4413      	add	r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	440b      	add	r3, r1
 8010078:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801007c:	2200      	movs	r2, #0
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e002      	b.n	8010088 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010082:	bf00      	nop
 8010084:	e000      	b.n	8010088 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010086:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801008a:	3301      	adds	r3, #1
 801008c:	653b      	str	r3, [r7, #80]	; 0x50
 801008e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010090:	2b0f      	cmp	r3, #15
 8010092:	d9a4      	bls.n	800ffde <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010096:	2200      	movs	r2, #0
 8010098:	603b      	str	r3, [r7, #0]
 801009a:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80100a0:	2302      	movs	r3, #2
 80100a2:	9302      	str	r3, [sp, #8]
 80100a4:	2301      	movs	r3, #1
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	9200      	str	r2, [sp, #0]
 80100aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100ae:	69f8      	ldr	r0, [r7, #28]
 80100b0:	f001 f886 	bl	80111c0 <_fx_utility_logical_sector_write>
 80100b4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	e046      	b.n	801014e <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d105      	bne.n	80100d8 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100d0:	0a9b      	lsrs	r3, r3, #10
 80100d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80100d6:	e006      	b.n	80100e6 <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100dc:	0a9b      	lsrs	r3, r3, #10
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	3301      	adds	r3, #1
 80100e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100ec:	1ad2      	subs	r2, r2, r3
 80100ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80100f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80100f6:	08db      	lsrs	r3, r3, #3
 80100f8:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80100fa:	69fa      	ldr	r2, [r7, #28]
 80100fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fe:	4413      	add	r3, r2
 8010100:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801010c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801010e:	1a9a      	subs	r2, r3, r2
 8010110:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010114:	fbb2 f3f3 	udiv	r3, r2, r3
 8010118:	f003 0207 	and.w	r2, r3, #7
 801011c:	2301      	movs	r3, #1
 801011e:	4093      	lsls	r3, r2
 8010120:	b25b      	sxtb	r3, r3
 8010122:	430b      	orrs	r3, r1
 8010124:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010126:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010128:	69fa      	ldr	r2, [r7, #28]
 801012a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012c:	4413      	add	r3, r2
 801012e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010132:	460b      	mov	r3, r1
 8010134:	7013      	strb	r3, [r2, #0]
 8010136:	e002      	b.n	801013e <_fx_utility_FAT_flush+0x688>
            continue;
 8010138:	bf00      	nop
 801013a:	e000      	b.n	801013e <_fx_utility_FAT_flush+0x688>
                    break;
 801013c:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 801013e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010140:	3301      	adds	r3, #1
 8010142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010146:	2b0f      	cmp	r3, #15
 8010148:	f67f acc4 	bls.w	800fad4 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3758      	adds	r7, #88	; 0x58
 8010152:	46bd      	mov	sp, r7
 8010154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010158 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8010158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801015c:	b092      	sub	sp, #72	; 0x48
 801015e:	af04      	add	r7, sp, #16
 8010160:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801016a:	2b00      	cmp	r3, #0
 801016c:	d105      	bne.n	801017a <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010172:	0a9b      	lsrs	r3, r3, #10
 8010174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010178:	e006      	b.n	8010188 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801017e:	0a9b      	lsrs	r3, r3, #10
 8010180:	b2db      	uxtb	r3, r3
 8010182:	3301      	adds	r3, #1
 8010184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010188:	2300      	movs	r3, #0
 801018a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801018c:	e089      	b.n	80102a2 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 801018e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010190:	08db      	lsrs	r3, r3, #3
 8010192:	69fa      	ldr	r2, [r7, #28]
 8010194:	4413      	add	r3, r2
 8010196:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 801019a:	461a      	mov	r2, r3
 801019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019e:	f003 0307 	and.w	r3, r3, #7
 80101a2:	fa42 f303 	asr.w	r3, r2, r3
 80101a6:	f003 0301 	and.w	r3, r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d075      	beq.n	801029a <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 80101ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101b4:	fb03 f202 	mul.w	r2, r3, r2
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101bc:	4413      	add	r3, r2
 80101be:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 80101c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c6:	4413      	add	r3, r2
 80101c8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101d2:	4413      	add	r3, r2
 80101d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d95a      	bls.n	8010290 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e2:	4413      	add	r3, r2
 80101e4:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 80101e6:	e053      	b.n	8010290 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80101e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ea:	2200      	movs	r2, #0
 80101ec:	613b      	str	r3, [r7, #16]
 80101ee:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80101f4:	2302      	movs	r3, #2
 80101f6:	9302      	str	r3, [sp, #8]
 80101f8:	2301      	movs	r3, #1
 80101fa:	9301      	str	r3, [sp, #4]
 80101fc:	9200      	str	r2, [sp, #0]
 80101fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010202:	69f8      	ldr	r0, [r7, #28]
 8010204:	f000 fd48 	bl	8010c98 <_fx_utility_logical_sector_read>
 8010208:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	e05c      	b.n	80102ce <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010218:	3b01      	subs	r3, #1
 801021a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 801021c:	e032      	b.n	8010284 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 801021e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010220:	2200      	movs	r2, #0
 8010222:	60bb      	str	r3, [r7, #8]
 8010224:	60fa      	str	r2, [r7, #12]
 8010226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010228:	2200      	movs	r2, #0
 801022a:	4698      	mov	r8, r3
 801022c:	4691      	mov	r9, r2
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010232:	2200      	movs	r2, #0
 8010234:	469a      	mov	sl, r3
 8010236:	4693      	mov	fp, r2
 8010238:	fb0a f209 	mul.w	r2, sl, r9
 801023c:	fb08 f30b 	mul.w	r3, r8, fp
 8010240:	4413      	add	r3, r2
 8010242:	fba8 450a 	umull	r4, r5, r8, sl
 8010246:	442b      	add	r3, r5
 8010248:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 801024a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801024e:	460b      	mov	r3, r1
 8010250:	191b      	adds	r3, r3, r4
 8010252:	603b      	str	r3, [r7, #0]
 8010254:	4613      	mov	r3, r2
 8010256:	416b      	adcs	r3, r5
 8010258:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 801025e:	2302      	movs	r3, #2
 8010260:	9302      	str	r3, [sp, #8]
 8010262:	2301      	movs	r3, #1
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	9200      	str	r2, [sp, #0]
 8010268:	e9d7 2300 	ldrd	r2, r3, [r7]
 801026c:	69f8      	ldr	r0, [r7, #28]
 801026e:	f000 ffa7 	bl	80111c0 <_fx_utility_logical_sector_write>
 8010272:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010274:	6a3b      	ldr	r3, [r7, #32]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 801027a:	6a3b      	ldr	r3, [r7, #32]
 801027c:	e027      	b.n	80102ce <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 801027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010280:	3b01      	subs	r3, #1
 8010282:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1c9      	bne.n	801021e <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 801028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028c:	3301      	adds	r3, #1
 801028e:	637b      	str	r3, [r7, #52]	; 0x34
 8010290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	429a      	cmp	r2, r3
 8010296:	d3a7      	bcc.n	80101e8 <_fx_utility_FAT_map_flush+0x90>
 8010298:	e000      	b.n	801029c <_fx_utility_FAT_map_flush+0x144>
            continue;
 801029a:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029e:	3301      	adds	r3, #1
 80102a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102a8:	f4ff af71 	bcc.w	801018e <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 80102ac:	2300      	movs	r3, #0
 80102ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102b0:	e009      	b.n	80102c6 <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 80102b2:	69fa      	ldr	r2, [r7, #28]
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	4413      	add	r3, r2
 80102b8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80102bc:	2200      	movs	r2, #0
 80102be:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 80102c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c2:	3301      	adds	r3, #1
 80102c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c8:	2b7f      	cmp	r3, #127	; 0x7f
 80102ca:	d9f2      	bls.n	80102b2 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3738      	adds	r7, #56	; 0x38
 80102d2:	46bd      	mov	sp, r7
 80102d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080102d8 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 80102d8:	b480      	push	{r7}
 80102da:	b08f      	sub	sp, #60	; 0x3c
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f000 8275 	beq.w	80107d8 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80102f6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80102fa:	4013      	ands	r3, r2
 80102fc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6a1a      	ldr	r2, [r3, #32]
 8010302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010304:	f003 031f 	and.w	r3, r3, #31
 8010308:	2101      	movs	r1, #1
 801030a:	fa01 f303 	lsl.w	r3, r1, r3
 801030e:	431a      	orrs	r2, r3
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8010314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801031a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801031c:	4613      	mov	r3, r2
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	00db      	lsls	r3, r3, #3
 8010324:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	4413      	add	r3, r2
 801032c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010330:	7c5b      	ldrb	r3, [r3, #17]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d015      	beq.n	8010362 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 8010336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010338:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801033c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010340:	4299      	cmp	r1, r3
 8010342:	bf08      	it	eq
 8010344:	4290      	cmpeq	r0, r2
 8010346:	d10c      	bne.n	8010362 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801035e:	2300      	movs	r3, #0
 8010360:	e27e      	b.n	8010860 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8010362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010364:	3318      	adds	r3, #24
 8010366:	7c5b      	ldrb	r3, [r3, #17]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d060      	beq.n	801042e <_fx_utility_logical_sector_cache_entry_read+0x156>
 801036c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036e:	3318      	adds	r3, #24
 8010370:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010378:	4299      	cmp	r1, r3
 801037a:	bf08      	it	eq
 801037c:	4290      	cmpeq	r0, r2
 801037e:	d156      	bne.n	801042e <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010382:	3318      	adds	r3, #24
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010390:	1c5a      	adds	r2, r3, #1
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80103a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80103a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103aa:	7c1b      	ldrb	r3, [r3, #16]
 80103ac:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80103b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b2:	7c5b      	ldrb	r3, [r3, #17]
 80103b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80103b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ba:	7c9b      	ldrb	r3, [r3, #18]
 80103bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80103c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c2:	3318      	adds	r3, #24
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c8:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 80103ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103cc:	3318      	adds	r3, #24
 80103ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80103d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80103d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103da:	3318      	adds	r3, #24
 80103dc:	7c1a      	ldrb	r2, [r3, #16]
 80103de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e0:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 80103e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e4:	3318      	adds	r3, #24
 80103e6:	7c5a      	ldrb	r2, [r3, #17]
 80103e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ea:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 80103ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ee:	3318      	adds	r3, #24
 80103f0:	7c9a      	ldrb	r2, [r3, #18]
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80103f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f8:	3318      	adds	r3, #24
 80103fa:	693a      	ldr	r2, [r7, #16]
 80103fc:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80103fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010400:	f103 0118 	add.w	r1, r3, #24
 8010404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010408:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	3318      	adds	r3, #24
 8010410:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010414:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010418:	3318      	adds	r3, #24
 801041a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801041e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010422:	3318      	adds	r3, #24
 8010424:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010428:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801042a:	2300      	movs	r3, #0
 801042c:	e218      	b.n	8010860 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 801042e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010430:	3330      	adds	r3, #48	; 0x30
 8010432:	7c5b      	ldrb	r3, [r3, #17]
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 8086 	beq.w	8010546 <_fx_utility_logical_sector_cache_entry_read+0x26e>
 801043a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801043c:	3330      	adds	r3, #48	; 0x30
 801043e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010446:	4299      	cmp	r1, r3
 8010448:	bf08      	it	eq
 801044a:	4290      	cmpeq	r0, r2
 801044c:	d17b      	bne.n	8010546 <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801044e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010450:	3330      	adds	r3, #48	; 0x30
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801045e:	1c5a      	adds	r2, r3, #1
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 801046c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010472:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010478:	7c1b      	ldrb	r3, [r3, #16]
 801047a:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801047e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010480:	7c5b      	ldrb	r3, [r3, #17]
 8010482:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8010486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010488:	7c9b      	ldrb	r3, [r3, #18]
 801048a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 801048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010490:	3330      	adds	r3, #48	; 0x30
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010496:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8010498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049a:	3330      	adds	r3, #48	; 0x30
 801049c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80104a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80104a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a8:	3330      	adds	r3, #48	; 0x30
 80104aa:	7c1a      	ldrb	r2, [r3, #16]
 80104ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ae:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 80104b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b2:	3330      	adds	r3, #48	; 0x30
 80104b4:	7c5a      	ldrb	r2, [r3, #17]
 80104b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b8:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 80104ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104bc:	3330      	adds	r3, #48	; 0x30
 80104be:	7c9a      	ldrb	r2, [r3, #18]
 80104c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c2:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80104c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c6:	f103 0218 	add.w	r2, r3, #24
 80104ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104cc:	3330      	adds	r3, #48	; 0x30
 80104ce:	6812      	ldr	r2, [r2, #0]
 80104d0:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80104d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d4:	3318      	adds	r3, #24
 80104d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104d8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80104dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80104e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80104e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e6:	f103 0218 	add.w	r2, r3, #24
 80104ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ec:	3330      	adds	r3, #48	; 0x30
 80104ee:	7c12      	ldrb	r2, [r2, #16]
 80104f0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80104f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f4:	f103 0218 	add.w	r2, r3, #24
 80104f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fa:	3330      	adds	r3, #48	; 0x30
 80104fc:	7c52      	ldrb	r2, [r2, #17]
 80104fe:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010502:	f103 0218 	add.w	r2, r3, #24
 8010506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010508:	3330      	adds	r3, #48	; 0x30
 801050a:	7c92      	ldrb	r2, [r2, #18]
 801050c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	3318      	adds	r3, #24
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8010516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010518:	f103 0118 	add.w	r1, r3, #24
 801051c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010520:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010526:	3318      	adds	r3, #24
 8010528:	f897 2020 	ldrb.w	r2, [r7, #32]
 801052c:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010530:	3318      	adds	r3, #24
 8010532:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8010536:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8010538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053a:	3318      	adds	r3, #24
 801053c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010540:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8010542:	2300      	movs	r3, #0
 8010544:	e18c      	b.n	8010860 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8010546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010548:	3348      	adds	r3, #72	; 0x48
 801054a:	7c5b      	ldrb	r3, [r3, #17]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f000 80ac 	beq.w	80106aa <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8010552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010554:	3348      	adds	r3, #72	; 0x48
 8010556:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801055a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801055e:	4299      	cmp	r1, r3
 8010560:	bf08      	it	eq
 8010562:	4290      	cmpeq	r0, r2
 8010564:	f040 80a1 	bne.w	80106aa <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8010568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056a:	3348      	adds	r3, #72	; 0x48
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8010580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8010586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010588:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801058c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8010590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010592:	7c1b      	ldrb	r3, [r3, #16]
 8010594:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8010598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059a:	7c5b      	ldrb	r3, [r3, #17]
 801059c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80105a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a2:	7c9b      	ldrb	r3, [r3, #18]
 80105a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	3348      	adds	r3, #72	; 0x48
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b0:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 80105b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b4:	3348      	adds	r3, #72	; 0x48
 80105b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80105ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80105c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c2:	3348      	adds	r3, #72	; 0x48
 80105c4:	7c1a      	ldrb	r2, [r3, #16]
 80105c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c8:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 80105ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105cc:	3348      	adds	r3, #72	; 0x48
 80105ce:	7c5a      	ldrb	r2, [r3, #17]
 80105d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d2:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 80105d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d6:	3348      	adds	r3, #72	; 0x48
 80105d8:	7c9a      	ldrb	r2, [r3, #18]
 80105da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105dc:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80105de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80105e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e6:	3348      	adds	r3, #72	; 0x48
 80105e8:	6812      	ldr	r2, [r2, #0]
 80105ea:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80105ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ee:	3330      	adds	r3, #48	; 0x30
 80105f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f2:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80105f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80105fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010606:	3348      	adds	r3, #72	; 0x48
 8010608:	7c12      	ldrb	r2, [r2, #16]
 801060a:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010614:	3348      	adds	r3, #72	; 0x48
 8010616:	7c52      	ldrb	r2, [r2, #17]
 8010618:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	3348      	adds	r3, #72	; 0x48
 8010624:	7c92      	ldrb	r2, [r2, #18]
 8010626:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	f103 0218 	add.w	r2, r3, #24
 801062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010630:	3330      	adds	r3, #48	; 0x30
 8010632:	6812      	ldr	r2, [r2, #0]
 8010634:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010638:	3318      	adds	r3, #24
 801063a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801063c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8010640:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010644:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064a:	f103 0218 	add.w	r2, r3, #24
 801064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010650:	3330      	adds	r3, #48	; 0x30
 8010652:	7c12      	ldrb	r2, [r2, #16]
 8010654:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010658:	f103 0218 	add.w	r2, r3, #24
 801065c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065e:	3330      	adds	r3, #48	; 0x30
 8010660:	7c52      	ldrb	r2, [r2, #17]
 8010662:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010666:	f103 0218 	add.w	r2, r3, #24
 801066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066c:	3330      	adds	r3, #48	; 0x30
 801066e:	7c92      	ldrb	r2, [r2, #18]
 8010670:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	3318      	adds	r3, #24
 8010676:	693a      	ldr	r2, [r7, #16]
 8010678:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067c:	f103 0118 	add.w	r1, r3, #24
 8010680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010684:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8010688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068a:	3318      	adds	r3, #24
 801068c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010690:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8010692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010694:	3318      	adds	r3, #24
 8010696:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801069a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 801069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069e:	3318      	adds	r3, #24
 80106a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80106a4:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80106a6:	2300      	movs	r3, #0
 80106a8:	e0da      	b.n	8010860 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80106aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ac:	3348      	adds	r3, #72	; 0x48
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 80106b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b4:	3348      	adds	r3, #72	; 0x48
 80106b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80106ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80106be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c0:	3348      	adds	r3, #72	; 0x48
 80106c2:	7c1b      	ldrb	r3, [r3, #16]
 80106c4:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 80106c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ca:	3348      	adds	r3, #72	; 0x48
 80106cc:	7c5b      	ldrb	r3, [r3, #17]
 80106ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	3348      	adds	r3, #72	; 0x48
 80106d6:	7c9b      	ldrb	r3, [r3, #18]
 80106d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80106dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e4:	3348      	adds	r3, #72	; 0x48
 80106e6:	6812      	ldr	r2, [r2, #0]
 80106e8:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	3330      	adds	r3, #48	; 0x30
 80106ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106f0:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80106f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80106f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010704:	3348      	adds	r3, #72	; 0x48
 8010706:	7c12      	ldrb	r2, [r2, #16]
 8010708:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010712:	3348      	adds	r3, #72	; 0x48
 8010714:	7c52      	ldrb	r2, [r2, #17]
 8010716:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8010718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010720:	3348      	adds	r3, #72	; 0x48
 8010722:	7c92      	ldrb	r2, [r2, #18]
 8010724:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8010726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010728:	f103 0218 	add.w	r2, r3, #24
 801072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072e:	3330      	adds	r3, #48	; 0x30
 8010730:	6812      	ldr	r2, [r2, #0]
 8010732:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8010734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010736:	3318      	adds	r3, #24
 8010738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801073a:	f102 0130 	add.w	r1, r2, #48	; 0x30
 801073e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010742:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8010746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010748:	f103 0218 	add.w	r2, r3, #24
 801074c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074e:	3330      	adds	r3, #48	; 0x30
 8010750:	7c12      	ldrb	r2, [r2, #16]
 8010752:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010756:	f103 0218 	add.w	r2, r3, #24
 801075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075c:	3330      	adds	r3, #48	; 0x30
 801075e:	7c52      	ldrb	r2, [r2, #17]
 8010760:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	f103 0218 	add.w	r2, r3, #24
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076a:	3330      	adds	r3, #48	; 0x30
 801076c:	7c92      	ldrb	r2, [r2, #18]
 801076e:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8010770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010772:	3318      	adds	r3, #24
 8010774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010776:	6812      	ldr	r2, [r2, #0]
 8010778:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 801077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077c:	f103 0118 	add.w	r1, r3, #24
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010786:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	3318      	adds	r3, #24
 801078e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010790:	7c12      	ldrb	r2, [r2, #16]
 8010792:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	3318      	adds	r3, #24
 8010798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801079a:	7c52      	ldrb	r2, [r2, #17]
 801079c:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 801079e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a0:	3318      	adds	r3, #24
 80107a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107a4:	7c92      	ldrb	r2, [r2, #18]
 80107a6:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 80107a8:	693a      	ldr	r2, [r7, #16]
 80107aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ac:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 80107ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80107b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 80107b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80107bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107be:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 80107c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80107c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c6:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 80107c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 80107d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	e042      	b.n	801085e <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	695b      	ldr	r3, [r3, #20]
 80107dc:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 80107e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e6:	2200      	movs	r2, #0
 80107e8:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 80107ea:	e033      	b.n	8010854 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80107ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ee:	7c5b      	ldrb	r3, [r3, #17]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d025      	beq.n	8010840 <_fx_utility_logical_sector_cache_entry_read+0x568>
 80107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80107fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107fe:	4299      	cmp	r1, r3
 8010800:	bf08      	it	eq
 8010802:	4290      	cmpeq	r0, r2
 8010804:	d11c      	bne.n	8010840 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 801080e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00b      	beq.n	801082e <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8010816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010818:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801081a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801081c:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801081e:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8010824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010826:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801082c:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 801083c:	2300      	movs	r3, #0
 801083e:	e00f      	b.n	8010860 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8010840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010842:	695b      	ldr	r3, [r3, #20]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d005      	beq.n	8010854 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8010848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801084a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801084c:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 801084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010850:	695b      	ldr	r3, [r3, #20]
 8010852:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	1e5a      	subs	r2, r3, #1
 8010858:	633a      	str	r2, [r7, #48]	; 0x30
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1c6      	bne.n	80107ec <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8010860:	4618      	mov	r0, r3
 8010862:	373c      	adds	r7, #60	; 0x3c
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 801086c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010870:	b094      	sub	sp, #80	; 0x50
 8010872:	af00      	add	r7, sp, #0
 8010874:	61f8      	str	r0, [r7, #28]
 8010876:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 801087a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801087e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010882:	1884      	adds	r4, r0, r2
 8010884:	eb41 0503 	adc.w	r5, r1, r3
 8010888:	1e63      	subs	r3, r4, #1
 801088a:	60bb      	str	r3, [r7, #8]
 801088c:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010890:	60fb      	str	r3, [r7, #12]
 8010892:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010896:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089e:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f040 80b4 	bne.w	8010a12 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	695b      	ldr	r3, [r3, #20]
 80108ae:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	69db      	ldr	r3, [r3, #28]
 80108b4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80108b6:	e09f      	b.n	80109f8 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80108b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d103      	bne.n	80108c6 <_fx_utility_logical_sector_flush+0x5a>
 80108be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 81de 	beq.w	8010c82 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 80108c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80108ca:	4313      	orrs	r3, r2
 80108cc:	f000 81db 	beq.w	8010c86 <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 80108d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d2:	7c5b      	ldrb	r3, [r3, #17]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 808c 	beq.w	80109f2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80108da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 80108e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80108e4:	4290      	cmp	r0, r2
 80108e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80108ea:	f0c0 8082 	bcc.w	80109f2 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 80108ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 80108f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80108f8:	4290      	cmp	r0, r2
 80108fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80108fe:	d378      	bcc.n	80109f2 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010902:	7c1b      	ldrb	r3, [r3, #16]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d04d      	beq.n	80109a4 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801090e:	2b00      	cmp	r3, #0
 8010910:	d148      	bne.n	80109a4 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010918:	1c5a      	adds	r2, r3, #1
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	2201      	movs	r2, #1
 8010924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	2290      	movs	r2, #144	; 0x90
 801092c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 801093a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801093c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	2201      	movs	r2, #1
 801094a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 801094e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010950:	7c9b      	ldrb	r3, [r3, #18]
 8010952:	461a      	mov	r2, r3
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801095c:	7c9b      	ldrb	r3, [r3, #18]
 801095e:	2b04      	cmp	r3, #4
 8010960:	d003      	beq.n	801096a <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	2201      	movs	r2, #1
 8010966:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010970:	69f8      	ldr	r0, [r7, #28]
 8010972:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	2200      	movs	r2, #0
 8010978:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010982:	2b00      	cmp	r3, #0
 8010984:	d003      	beq.n	801098e <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801098c:	e17f      	b.n	8010c8e <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010990:	2200      	movs	r2, #0
 8010992:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010998:	1e5a      	subs	r2, r3, #1
 801099a:	69fb      	ldr	r3, [r7, #28]
 801099c:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a0:	3b01      	subs	r3, #1
 80109a2:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 80109a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d018      	beq.n	80109dc <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80109aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ac:	2200      	movs	r2, #0
 80109ae:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80109b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80109b2:	f04f 32ff 	mov.w	r2, #4294967295
 80109b6:	f04f 33ff 	mov.w	r3, #4294967295
 80109ba:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80109be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109c0:	7c1b      	ldrb	r3, [r3, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00a      	beq.n	80109dc <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80109c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109c8:	2200      	movs	r2, #0
 80109ca:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d0:	1e5a      	subs	r2, r3, #1
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	3b01      	subs	r3, #1
 80109da:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 80109dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80109e0:	1e51      	subs	r1, r2, #1
 80109e2:	6039      	str	r1, [r7, #0]
 80109e4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80109e8:	607b      	str	r3, [r7, #4]
 80109ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80109ee:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80109f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80109f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109fa:	1e5a      	subs	r2, r3, #1
 80109fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f000 8144 	beq.w	8010c8c <_fx_utility_logical_sector_flush+0x420>
 8010a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	f47f af54 	bne.w	80108b8 <_fx_utility_logical_sector_flush+0x4c>
 8010a10:	e13c      	b.n	8010c8c <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	695b      	ldr	r3, [r3, #20]
 8010a16:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	6a1b      	ldr	r3, [r3, #32]
 8010a20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8010a22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010a26:	2a20      	cmp	r2, #32
 8010a28:	f173 0300 	sbcs.w	r3, r3, #0
 8010a2c:	d202      	bcs.n	8010a34 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8010a2e:	2301      	movs	r3, #1
 8010a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a32:	e121      	b.n	8010c78 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8010a34:	2300      	movs	r3, #0
 8010a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8010a38:	e11e      	b.n	8010c78 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d103      	bne.n	8010a48 <_fx_utility_logical_sector_flush+0x1dc>
 8010a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 8121 	beq.w	8010c8a <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8010a48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	f000 811d 	beq.w	8010c8c <_fx_utility_logical_sector_flush+0x420>
 8010a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010a5a:	4290      	cmp	r0, r2
 8010a5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8010a60:	f0c0 8114 	bcc.w	8010c8c <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8010a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d015      	beq.n	8010a96 <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010a72:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8010a76:	4013      	ands	r3, r2
 8010a78:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7c:	f003 031f 	and.w	r3, r3, #31
 8010a80:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a88:	e00d      	b.n	8010aa6 <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	085b      	lsrs	r3, r3, #1
 8010a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8010a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a92:	3301      	adds	r3, #1
 8010a94:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 8010a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a98:	f003 0301 	and.w	r3, r3, #1
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d0f4      	beq.n	8010a8a <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8010aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8010aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8010ab8:	69fa      	ldr	r2, [r7, #28]
 8010aba:	4413      	add	r3, r2
 8010abc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 8010abe:	2300      	movs	r3, #0
 8010ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8010ac2:	e0a7      	b.n	8010c14 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8010ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac6:	7c5b      	ldrb	r3, [r3, #17]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 8089 	beq.w	8010be0 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8010ad4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ad8:	4290      	cmp	r0, r2
 8010ada:	eb71 0303 	sbcs.w	r3, r1, r3
 8010ade:	d37f      	bcc.n	8010be0 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8010ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8010ae6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010aea:	4290      	cmp	r0, r2
 8010aec:	eb71 0303 	sbcs.w	r3, r1, r3
 8010af0:	d376      	bcc.n	8010be0 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010af4:	7c1b      	ldrb	r3, [r3, #16]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d04d      	beq.n	8010b96 <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d148      	bne.n	8010b96 <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	2290      	movs	r2, #144	; 0x90
 8010b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b42:	7c9b      	ldrb	r3, [r3, #18]
 8010b44:	461a      	mov	r2, r3
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b4e:	7c9b      	ldrb	r3, [r3, #18]
 8010b50:	2b04      	cmp	r3, #4
 8010b52:	d003      	beq.n	8010b5c <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	2201      	movs	r2, #1
 8010b58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010b62:	69f8      	ldr	r0, [r7, #28]
 8010b64:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d003      	beq.n	8010b80 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b7e:	e086      	b.n	8010c8e <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b82:	2200      	movs	r2, #0
 8010b84:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	1e5a      	subs	r2, r3, #1
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8010b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b92:	3b01      	subs	r3, #1
 8010b94:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 8010b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d018      	beq.n	8010bce <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010ba2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bac:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8010bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb2:	7c1b      	ldrb	r3, [r3, #16]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00a      	beq.n	8010bce <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bba:	2200      	movs	r2, #0
 8010bbc:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc2:	1e5a      	subs	r2, r3, #1
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8010bce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010bd2:	f112 38ff 	adds.w	r8, r2, #4294967295
 8010bd6:	f143 39ff 	adc.w	r9, r3, #4294967295
 8010bda:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8010bde:	e006      	b.n	8010bee <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8010be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be2:	7c5b      	ldrb	r3, [r3, #17]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 8010be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bea:	3301      	adds	r3, #1
 8010bec:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d102      	bne.n	8010bfa <_fx_utility_logical_sector_flush+0x38e>
 8010bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d011      	beq.n	8010c1e <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8010bfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	d102      	bne.n	8010c08 <_fx_utility_logical_sector_flush+0x39c>
 8010c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00c      	beq.n	8010c22 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 8010c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c0a:	3318      	adds	r3, #24
 8010c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 8010c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c10:	3301      	adds	r3, #1
 8010c12:	647b      	str	r3, [r7, #68]	; 0x44
 8010c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	f67f af54 	bls.w	8010ac4 <_fx_utility_logical_sector_flush+0x258>
 8010c1c:	e002      	b.n	8010c24 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010c1e:	bf00      	nop
 8010c20:	e000      	b.n	8010c24 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8010c22:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8010c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c26:	3380      	adds	r3, #128	; 0x80
 8010c28:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 8010c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	f4ff af3b 	bcc.w	8010aaa <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 8010c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00c      	beq.n	8010c54 <_fx_utility_logical_sector_flush+0x3e8>
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	6a1a      	ldr	r2, [r3, #32]
 8010c44:	2101      	movs	r1, #1
 8010c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c48:	fa01 f303 	lsl.w	r3, r1, r3
 8010c4c:	43db      	mvns	r3, r3
 8010c4e:	401a      	ands	r2, r3
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8010c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d008      	beq.n	8010c6c <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 8010c5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c5e:	f112 0a01 	adds.w	sl, r2, #1
 8010c62:	f143 0b00 	adc.w	fp, r3, #0
 8010c66:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8010c6a:	e005      	b.n	8010c78 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 8010c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6e:	085b      	lsrs	r3, r3, #1
 8010c70:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 8010c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c74:	3301      	adds	r3, #1
 8010c76:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f47f aedd 	bne.w	8010a3a <_fx_utility_logical_sector_flush+0x1ce>
 8010c80:	e004      	b.n	8010c8c <_fx_utility_logical_sector_flush+0x420>
                break;
 8010c82:	bf00      	nop
 8010c84:	e002      	b.n	8010c8c <_fx_utility_logical_sector_flush+0x420>
                break;
 8010c86:	bf00      	nop
 8010c88:	e000      	b.n	8010c8c <_fx_utility_logical_sector_flush+0x420>
                break;
 8010c8a:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3750      	adds	r7, #80	; 0x50
 8010c92:	46bd      	mov	sp, r7
 8010c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010c98 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8010c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c9c:	b09c      	sub	sp, #112	; 0x70
 8010c9e:	af04      	add	r7, sp, #16
 8010ca0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010ca2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8010ca6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d106      	bne.n	8010cbc <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8010cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8010cc2:	1c5a      	adds	r2, r3, #1
 8010cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ccc:	689a      	ldr	r2, [r3, #8]
 8010cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	f0c0 80d9 	bcc.w	8010e8a <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8010cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cda:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8010cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	f200 80d2 	bhi.w	8010e8a <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8010ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010cf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010cf2:	f7ff faf1 	bl	80102d8 <_fx_utility_logical_sector_cache_entry_read>
 8010cf6:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8010cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d101      	bne.n	8010d02 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 8010cfe:	2300      	movs	r3, #0
 8010d00:	e259      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8010d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d04:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8010d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d12:	7c5b      	ldrb	r3, [r3, #17]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d049      	beq.n	8010dac <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8010d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d1a:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d045      	beq.n	8010dac <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8010d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d22:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8010d26:	1c5a      	adds	r2, r3, #1
 8010d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d2a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8010d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d30:	2201      	movs	r2, #1
 8010d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d38:	2290      	movs	r2, #144	; 0x90
 8010d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8010d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8010d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d56:	2201      	movs	r2, #1
 8010d58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8010d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d5e:	7c9b      	ldrb	r3, [r3, #18]
 8010d60:	461a      	mov	r2, r3
 8010d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d64:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8010d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d6a:	7c9b      	ldrb	r3, [r3, #18]
 8010d6c:	2b04      	cmp	r3, #4
 8010d6e:	d003      	beq.n	8010d78 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8010d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d72:	2201      	movs	r2, #1
 8010d74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010d7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d80:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8010d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d84:	2200      	movs	r2, #0
 8010d86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 8010d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d003      	beq.n	8010d9c <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8010d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d9a:	e20c      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8010d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d9e:	2200      	movs	r2, #0
 8010da0:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8010da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da6:	1e5a      	subs	r2, r3, #1
 8010da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010daa:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8010dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010db2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8010db6:	4290      	cmp	r0, r2
 8010db8:	eb71 0303 	sbcs.w	r3, r1, r3
 8010dbc:	d301      	bcc.n	8010dc2 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8010dbe:	2389      	movs	r3, #137	; 0x89
 8010dc0:	e1f9      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8010dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8010dc8:	1c5a      	adds	r2, r3, #1
 8010dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dcc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8010dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dda:	2290      	movs	r2, #144	; 0x90
 8010ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8010de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8010dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 8010df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010df4:	2201      	movs	r2, #1
 8010df6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8010dfa:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8010dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8010e04:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010e08:	2b04      	cmp	r3, #4
 8010e0a:	d103      	bne.n	8010e14 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010e1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010e1c:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8010e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e20:	2200      	movs	r2, #0
 8010e22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8010e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d11a      	bne.n	8010e66 <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8010e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e36:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8010e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8010e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e42:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8010e46:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8010e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d015      	beq.n	8010e7a <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8010e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8010e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e52:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8010e54:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8010e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e58:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8010e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e5c:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8010e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e62:	61da      	str	r2, [r3, #28]
 8010e64:	e009      	b.n	8010e7a <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8010e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e68:	2200      	movs	r2, #0
 8010e6a:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8010e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e72:	f04f 33ff 	mov.w	r3, #4294967295
 8010e76:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8010e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e80:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8010e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e88:	e195      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8010e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e8e:	2200      	movs	r2, #0
 8010e90:	469a      	mov	sl, r3
 8010e92:	4693      	mov	fp, r2
 8010e94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e98:	eb1a 0402 	adds.w	r4, sl, r2
 8010e9c:	eb4b 0503 	adc.w	r5, fp, r3
 8010ea0:	f114 38ff 	adds.w	r8, r4, #4294967295
 8010ea4:	f145 39ff 	adc.w	r9, r5, #4294967295
 8010ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010eae:	2300      	movs	r3, #0
 8010eb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8010eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010eb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8010eb8:	460b      	mov	r3, r1
 8010eba:	4543      	cmp	r3, r8
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	eb73 0309 	sbcs.w	r3, r3, r9
 8010ec2:	d22c      	bcs.n	8010f1e <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8010ec4:	2389      	movs	r3, #137	; 0x89
 8010ec6:	e176      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8010ec8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ed2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010ed4:	f7ff fa00 	bl	80102d8 <_fx_utility_logical_sector_cache_entry_read>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d124      	bne.n	8010f28 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8010ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ee0:	6898      	ldr	r0, [r3, #8]
 8010ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010eec:	f000 fad0 	bl	8011490 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8010ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ef8:	4413      	add	r3, r2
 8010efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8010efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010f02:	1c51      	adds	r1, r2, #1
 8010f04:	61b9      	str	r1, [r7, #24]
 8010f06:	f143 0300 	adc.w	r3, r3, #0
 8010f0a:	61fb      	str	r3, [r7, #28]
 8010f0c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010f10:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8010f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8010f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1d0      	bne.n	8010ec8 <_fx_utility_logical_sector_read+0x230>
 8010f26:	e000      	b.n	8010f2a <_fx_utility_logical_sector_read+0x292>
                break;
 8010f28:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8010f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f2e:	2200      	movs	r2, #0
 8010f30:	633b      	str	r3, [r7, #48]	; 0x30
 8010f32:	637a      	str	r2, [r7, #52]	; 0x34
 8010f34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010f38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	1889      	adds	r1, r1, r2
 8010f40:	62b9      	str	r1, [r7, #40]	; 0x28
 8010f42:	4629      	mov	r1, r5
 8010f44:	eb43 0101 	adc.w	r1, r3, r1
 8010f48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010f4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010f4e:	460b      	mov	r3, r1
 8010f50:	3b01      	subs	r3, #1
 8010f52:	613b      	str	r3, [r7, #16]
 8010f54:	4613      	mov	r3, r2
 8010f56:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010f5a:	617b      	str	r3, [r7, #20]
 8010f5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010f60:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8010f64:	e02b      	b.n	8010fbe <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8010f66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010f70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010f72:	f7ff f9b1 	bl	80102d8 <_fx_utility_logical_sector_cache_entry_read>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d125      	bne.n	8010fc8 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f7e:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8010f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f84:	3b01      	subs	r3, #1
 8010f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010f8a:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f92:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8010f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8010f98:	461a      	mov	r2, r3
 8010f9a:	f000 fa79 	bl	8011490 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8010f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010fa2:	1e51      	subs	r1, r2, #1
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010faa:	60fb      	str	r3, [r7, #12]
 8010fac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010fb0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8010fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8010fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1cf      	bne.n	8010f66 <_fx_utility_logical_sector_read+0x2ce>
 8010fc6:	e000      	b.n	8010fca <_fx_utility_logical_sector_read+0x332>
                break;
 8010fc8:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8010fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	e0ef      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8010fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fda:	2200      	movs	r2, #0
 8010fdc:	623b      	str	r3, [r7, #32]
 8010fde:	627a      	str	r2, [r7, #36]	; 0x24
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	9302      	str	r3, [sp, #8]
 8010fe4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010fe8:	e9cd 3400 	strd	r3, r4, [sp]
 8010fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ff0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010ff2:	f7ff fc3b 	bl	801086c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8010ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011000:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011006:	2200      	movs	r2, #0
 8011008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801100c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100e:	2290      	movs	r2, #144	; 0x90
 8011010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801101a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801101e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011022:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011028:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801102c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011030:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011036:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 801103a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801103e:	2b04      	cmp	r3, #4
 8011040:	d103      	bne.n	801104a <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011044:	2201      	movs	r2, #1
 8011046:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801104a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801104c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011050:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011052:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011056:	2200      	movs	r2, #0
 8011058:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 801105c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801105e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011062:	2b00      	cmp	r3, #0
 8011064:	f040 80a4 	bne.w	80111b0 <_fx_utility_logical_sector_read+0x518>
 8011068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801106a:	695b      	ldr	r3, [r3, #20]
 801106c:	089b      	lsrs	r3, r3, #2
 801106e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011072:	429a      	cmp	r2, r3
 8011074:	f080 809c 	bcs.w	80111b0 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8011078:	e095      	b.n	80111a6 <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801107a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011084:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011086:	f7ff f927 	bl	80102d8 <_fx_utility_logical_sector_cache_entry_read>
 801108a:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 801108c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801108e:	2b00      	cmp	r3, #0
 8011090:	d101      	bne.n	8011096 <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8011092:	2300      	movs	r3, #0
 8011094:	e08f      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011098:	7c5b      	ldrb	r3, [r3, #17]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d049      	beq.n	8011132 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 801109e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110a0:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d045      	beq.n	8011132 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 80110a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80110ac:	1c5a      	adds	r2, r3, #1
 80110ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80110b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b6:	2201      	movs	r2, #1
 80110b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80110bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110be:	2290      	movs	r2, #144	; 0x90
 80110c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80110c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80110ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 80110da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110dc:	2201      	movs	r2, #1
 80110de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80110e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e4:	7c9b      	ldrb	r3, [r3, #18]
 80110e6:	461a      	mov	r2, r3
 80110e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80110ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110f0:	7c9b      	ldrb	r3, [r3, #18]
 80110f2:	2b04      	cmp	r3, #4
 80110f4:	d003      	beq.n	80110fe <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80110f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f8:	2201      	movs	r2, #1
 80110fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80110fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011100:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011104:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011106:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801110a:	2200      	movs	r2, #0
 801110c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8011110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011116:	2b00      	cmp	r3, #0
 8011118:	d003      	beq.n	8011122 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 801111a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801111c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011120:	e049      	b.n	80111b6 <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011124:	2200      	movs	r2, #0
 8011126:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8011128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112c:	1e5a      	subs	r2, r3, #1
 801112e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011130:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8011132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011134:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011138:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 801113c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801113e:	2201      	movs	r2, #1
 8011140:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8011142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011144:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011148:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 801114a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8011152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011154:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011156:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801115a:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801115c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801115e:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011164:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011168:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801116a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801116e:	461a      	mov	r2, r3
 8011170:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011174:	f000 f98c 	bl	8011490 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011180:	4413      	add	r3, r2
 8011182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8011186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801118a:	1c51      	adds	r1, r2, #1
 801118c:	6039      	str	r1, [r7, #0]
 801118e:	f143 0300 	adc.w	r3, r3, #0
 8011192:	607b      	str	r3, [r7, #4]
 8011194:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011198:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 801119c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111a0:	3b01      	subs	r3, #1
 80111a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 80111a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f47f af65 	bne.w	801107a <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80111b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3760      	adds	r7, #96	; 0x60
 80111ba:	46bd      	mov	sp, r7
 80111bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080111c0 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80111c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80111c4:	b096      	sub	sp, #88	; 0x58
 80111c6:	af04      	add	r7, sp, #16
 80111c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80111ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 80111ce:	2300      	movs	r3, #0
 80111d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80111d4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d106      	bne.n	80111ea <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80111f0:	1c5a      	adds	r2, r3, #1
 80111f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	689a      	ldr	r2, [r3, #8]
 80111fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80111fe:	4293      	cmp	r3, r2
 8011200:	f0c0 80d8 	bcc.w	80113b4 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801120a:	4293      	cmp	r3, r2
 801120c:	f200 80d2 	bhi.w	80113b4 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d030      	beq.n	801127a <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8011218:	6a3a      	ldr	r2, [r7, #32]
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011220:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011224:	4013      	ands	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801122a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801122c:	4613      	mov	r3, r2
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	4413      	add	r3, r2
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801123a:	4413      	add	r3, r2
 801123c:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801123e:	2300      	movs	r3, #0
 8011240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011242:	e016      	b.n	8011272 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011246:	7c5b      	ldrb	r3, [r3, #17]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00c      	beq.n	8011266 <_fx_utility_logical_sector_write+0xa6>
 801124c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801124e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011252:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011256:	4299      	cmp	r1, r3
 8011258:	bf08      	it	eq
 801125a:	4290      	cmpeq	r0, r2
 801125c:	d103      	bne.n	8011266 <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 801125e:	2301      	movs	r3, #1
 8011260:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011264:	e02d      	b.n	80112c2 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011268:	3301      	adds	r3, #1
 801126a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801126c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126e:	3318      	adds	r3, #24
 8011270:	647b      	str	r3, [r7, #68]	; 0x44
 8011272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011274:	2b03      	cmp	r3, #3
 8011276:	d9e5      	bls.n	8011244 <_fx_utility_logical_sector_write+0x84>
 8011278:	e023      	b.n	80112c2 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8011286:	e017      	b.n	80112b8 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801128a:	7c5b      	ldrb	r3, [r3, #17]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00c      	beq.n	80112aa <_fx_utility_logical_sector_write+0xea>
 8011290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011292:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011296:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801129a:	4299      	cmp	r1, r3
 801129c:	bf08      	it	eq
 801129e:	4290      	cmpeq	r0, r2
 80112a0:	d103      	bne.n	80112aa <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 80112a2:	2301      	movs	r3, #1
 80112a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 80112a8:	e00b      	b.n	80112c2 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 80112aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112ac:	695b      	ldr	r3, [r3, #20]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d002      	beq.n	80112b8 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 80112b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b4:	695b      	ldr	r3, [r3, #20]
 80112b6:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 80112b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ba:	1e5a      	subs	r2, r3, #1
 80112bc:	643a      	str	r2, [r7, #64]	; 0x40
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1e2      	bne.n	8011288 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 80112c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00d      	beq.n	80112e6 <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 80112ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112cc:	7c1b      	ldrb	r3, [r3, #16]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d107      	bne.n	80112e2 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112da:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 80112dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112de:	2201      	movs	r2, #1
 80112e0:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 80112e2:	2300      	movs	r3, #0
 80112e4:	e0cf      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80112e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80112ea:	4313      	orrs	r3, r2
 80112ec:	d004      	beq.n	80112f8 <_fx_utility_logical_sector_write+0x138>
 80112ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80112f2:	1c51      	adds	r1, r2, #1
 80112f4:	430b      	orrs	r3, r1
 80112f6:	d101      	bne.n	80112fc <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 80112f8:	2389      	movs	r3, #137	; 0x89
 80112fa:	e0c4      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80112fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112fe:	2200      	movs	r2, #0
 8011300:	61bb      	str	r3, [r7, #24]
 8011302:	61fa      	str	r2, [r7, #28]
 8011304:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011308:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801130c:	4621      	mov	r1, r4
 801130e:	1889      	adds	r1, r1, r2
 8011310:	6139      	str	r1, [r7, #16]
 8011312:	4629      	mov	r1, r5
 8011314:	eb43 0101 	adc.w	r1, r3, r1
 8011318:	6179      	str	r1, [r7, #20]
 801131a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801131e:	460b      	mov	r3, r1
 8011320:	f113 3aff 	adds.w	sl, r3, #4294967295
 8011324:	4613      	mov	r3, r2
 8011326:	f143 3bff 	adc.w	fp, r3, #4294967295
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011330:	4592      	cmp	sl, r2
 8011332:	eb7b 0303 	sbcs.w	r3, fp, r3
 8011336:	d301      	bcc.n	801133c <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8011338:	2389      	movs	r3, #137	; 0x89
 801133a:	e0a4      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011342:	1c5a      	adds	r2, r3, #1
 8011344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011346:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	2201      	movs	r2, #1
 801134e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	2290      	movs	r2, #144	; 0x90
 8011356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801135e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011362:	6a3a      	ldr	r2, [r7, #32]
 8011364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011366:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801136e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011372:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801137c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011380:	2b04      	cmp	r3, #4
 8011382:	d003      	beq.n	801138c <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011386:	2201      	movs	r2, #1
 8011388:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011394:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011398:	2200      	movs	r2, #0
 801139a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d003      	beq.n	80113b0 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 80113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113ae:	e06a      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 80113b0:	2300      	movs	r3, #0
 80113b2:	e068      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80113b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	d004      	beq.n	80113c6 <_fx_utility_logical_sector_write+0x206>
 80113bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80113c0:	1c51      	adds	r1, r2, #1
 80113c2:	430b      	orrs	r3, r1
 80113c4:	d101      	bne.n	80113ca <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 80113c6:	2389      	movs	r3, #137	; 0x89
 80113c8:	e05d      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80113ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113cc:	2200      	movs	r2, #0
 80113ce:	60bb      	str	r3, [r7, #8]
 80113d0:	60fa      	str	r2, [r7, #12]
 80113d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80113d6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80113da:	4651      	mov	r1, sl
 80113dc:	eb11 0802 	adds.w	r8, r1, r2
 80113e0:	4659      	mov	r1, fp
 80113e2:	eb41 0903 	adc.w	r9, r1, r3
 80113e6:	f118 34ff 	adds.w	r4, r8, #4294967295
 80113ea:	f149 35ff 	adc.w	r5, r9, #4294967295
 80113ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80113f4:	4294      	cmp	r4, r2
 80113f6:	eb75 0303 	sbcs.w	r3, r5, r3
 80113fa:	d301      	bcc.n	8011400 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 80113fc:	2389      	movs	r3, #137	; 0x89
 80113fe:	e042      	b.n	8011486 <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011402:	2200      	movs	r2, #0
 8011404:	603b      	str	r3, [r7, #0]
 8011406:	607a      	str	r2, [r7, #4]
 8011408:	2301      	movs	r3, #1
 801140a:	9302      	str	r3, [sp, #8]
 801140c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011410:	e9cd 3400 	strd	r3, r4, [sp]
 8011414:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801141a:	f7ff fa27 	bl	801086c <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 801141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011420:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011424:	1c5a      	adds	r2, r3, #1
 8011426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011428:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	2201      	movs	r2, #1
 8011430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011436:	2290      	movs	r2, #144	; 0x90
 8011438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011444:	6a3a      	ldr	r2, [r7, #32]
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011450:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011454:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8011458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 801145e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011462:	2b04      	cmp	r3, #4
 8011464:	d003      	beq.n	801146e <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	2201      	movs	r2, #1
 801146a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 801146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011470:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011476:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	2200      	movs	r2, #0
 801147c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011486:	4618      	mov	r0, r3
 8011488:	3748      	adds	r7, #72	; 0x48
 801148a:	46bd      	mov	sp, r7
 801148c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011490 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	68f9      	ldr	r1, [r7, #12]
 80114a0:	68b8      	ldr	r0, [r7, #8]
 80114a2:	f003 fb6d 	bl	8014b80 <memcpy>
}
 80114a6:	bf00      	nop
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
	...

080114b0 <_fxe_directory_information_get>:
/**************************************************************************/
UINT  _fxe_directory_information_get(FX_MEDIA *media_ptr, CHAR *directory_name,
                                     UINT *attributes, ULONG *size,
                                     UINT *year, UINT *month, UINT *day,
                                     UINT *hour, UINT *minute, UINT *second)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b08c      	sub	sp, #48	; 0x30
 80114b4:	af06      	add	r7, sp, #24
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]
 80114bc:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null media pointer or all null return parameter pointers.  */
    if ((media_ptr == FX_NULL) ||
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d017      	beq.n	80114f4 <_fxe_directory_information_get+0x44>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d116      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
        ((attributes == FX_NULL) && (size == FX_NULL) && (year == FX_NULL) && (month == FX_NULL) &&
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d113      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d110      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
 80114d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10d      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10a      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
         (day == FX_NULL) && (hour == FX_NULL) && (minute == FX_NULL) && (second == FX_NULL)))
 80114e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d107      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
 80114e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d104      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
 80114ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <_fxe_directory_information_get+0x48>
    {
        return(FX_PTR_ERROR);
 80114f4:	2318      	movs	r3, #24
 80114f6:	e027      	b.n	8011548 <_fxe_directory_information_get+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114f8:	f3ef 8305 	mrs	r3, IPSR
 80114fc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80114fe:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011500:	4b13      	ldr	r3, [pc, #76]	; (8011550 <_fxe_directory_information_get+0xa0>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4313      	orrs	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d108      	bne.n	801151c <_fxe_directory_information_get+0x6c>
 801150a:	4b12      	ldr	r3, [pc, #72]	; (8011554 <_fxe_directory_information_get+0xa4>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d004      	beq.n	801151c <_fxe_directory_information_get+0x6c>
 8011512:	4b10      	ldr	r3, [pc, #64]	; (8011554 <_fxe_directory_information_get+0xa4>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4a10      	ldr	r2, [pc, #64]	; (8011558 <_fxe_directory_information_get+0xa8>)
 8011518:	4293      	cmp	r3, r2
 801151a:	d101      	bne.n	8011520 <_fxe_directory_information_get+0x70>
 801151c:	2320      	movs	r3, #32
 801151e:	e013      	b.n	8011548 <_fxe_directory_information_get+0x98>

    /* Call actual directory information get service.  */
    status =  _fx_directory_information_get(media_ptr, directory_name, attributes, size,
 8011520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011522:	9305      	str	r3, [sp, #20]
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	9304      	str	r3, [sp, #16]
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	9303      	str	r3, [sp, #12]
 801152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152e:	9302      	str	r3, [sp, #8]
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	68b9      	ldr	r1, [r7, #8]
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f7fa fbec 	bl	800bd1c <_fx_directory_information_get>
 8011544:	6178      	str	r0, [r7, #20]
                                            year, month, day, hour, minute, second);

    /* Directory information get is complete, return status.  */
    return(status);
 8011546:	697b      	ldr	r3, [r7, #20]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3718      	adds	r7, #24
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	24000070 	.word	0x24000070
 8011554:	2401501c 	.word	0x2401501c
 8011558:	24015164 	.word	0x24015164

0801155c <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 801156a:	2318      	movs	r3, #24
 801156c:	e018      	b.n	80115a0 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801156e:	f3ef 8305 	mrs	r3, IPSR
 8011572:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011574:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011576:	4b0c      	ldr	r3, [pc, #48]	; (80115a8 <_fxe_file_close+0x4c>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	2b00      	cmp	r3, #0
 801157e:	d108      	bne.n	8011592 <_fxe_file_close+0x36>
 8011580:	4b0a      	ldr	r3, [pc, #40]	; (80115ac <_fxe_file_close+0x50>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d004      	beq.n	8011592 <_fxe_file_close+0x36>
 8011588:	4b08      	ldr	r3, [pc, #32]	; (80115ac <_fxe_file_close+0x50>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4a08      	ldr	r2, [pc, #32]	; (80115b0 <_fxe_file_close+0x54>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d101      	bne.n	8011596 <_fxe_file_close+0x3a>
 8011592:	2320      	movs	r3, #32
 8011594:	e004      	b.n	80115a0 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7fb fa3e 	bl	800ca18 <_fx_file_close>
 801159c:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801159e:	68fb      	ldr	r3, [r7, #12]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3710      	adds	r7, #16
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	24000070 	.word	0x24000070
 80115ac:	2401501c 	.word	0x2401501c
 80115b0:	24015164 	.word	0x24015164

080115b4 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b088      	sub	sp, #32
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00b      	beq.n	80115e0 <_fxe_file_open+0x2c>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a36      	ldr	r2, [pc, #216]	; (80116a8 <_fxe_file_open+0xf4>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d106      	bne.n	80115e0 <_fxe_file_open+0x2c>
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <_fxe_file_open+0x2c>
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80115de:	d001      	beq.n	80115e4 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 80115e0:	2318      	movs	r3, #24
 80115e2:	e05d      	b.n	80116a0 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d007      	beq.n	80115fa <_fxe_file_open+0x46>
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	2b02      	cmp	r3, #2
 80115ee:	d004      	beq.n	80115fa <_fxe_file_open+0x46>
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d001      	beq.n	80115fa <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 80115f6:	2306      	movs	r3, #6
 80115f8:	e052      	b.n	80116a0 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115fa:	f3ef 8305 	mrs	r3, IPSR
 80115fe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011600:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011602:	4b2a      	ldr	r3, [pc, #168]	; (80116ac <_fxe_file_open+0xf8>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	4313      	orrs	r3, r2
 8011608:	2b00      	cmp	r3, #0
 801160a:	d108      	bne.n	801161e <_fxe_file_open+0x6a>
 801160c:	4b28      	ldr	r3, [pc, #160]	; (80116b0 <_fxe_file_open+0xfc>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <_fxe_file_open+0x6a>
 8011614:	4b26      	ldr	r3, [pc, #152]	; (80116b0 <_fxe_file_open+0xfc>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a26      	ldr	r2, [pc, #152]	; (80116b4 <_fxe_file_open+0x100>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d101      	bne.n	8011622 <_fxe_file_open+0x6e>
 801161e:	2320      	movs	r3, #32
 8011620:	e03e      	b.n	80116a0 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4a20      	ldr	r2, [pc, #128]	; (80116a8 <_fxe_file_open+0xf4>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d001      	beq.n	8011630 <_fxe_file_open+0x7c>
 801162c:	2311      	movs	r3, #17
 801162e:	e037      	b.n	80116a0 <_fxe_file_open+0xec>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8011636:	f04f 31ff 	mov.w	r1, #4294967295
 801163a:	4618      	mov	r0, r3
 801163c:	f001 f87e 	bl	801273c <_tx_mutex_get>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <_fxe_file_open+0x96>
 8011646:	2311      	movs	r3, #17
 8011648:	e02a      	b.n	80116a0 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011650:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011658:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801165a:	e00e      	b.n	801167a <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	429a      	cmp	r2, r3
 8011662:	d107      	bne.n	8011674 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801166a:	4618      	mov	r0, r3
 801166c:	f001 fade 	bl	8012c2c <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8011670:	2318      	movs	r3, #24
 8011672:	e015      	b.n	80116a0 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011678:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	1e5a      	subs	r2, r3, #1
 801167e:	61ba      	str	r2, [r7, #24]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1eb      	bne.n	801165c <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801168a:	4618      	mov	r0, r3
 801168c:	f001 face 	bl	8012c2c <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	68b9      	ldr	r1, [r7, #8]
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7fb fd32 	bl	800d100 <_fx_file_open>
 801169c:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 801169e:	697b      	ldr	r3, [r7, #20]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3720      	adds	r7, #32
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	4d454449 	.word	0x4d454449
 80116ac:	24000070 	.word	0x24000070
 80116b0:	2401501c 	.word	0x2401501c
 80116b4:	24015164 	.word	0x24015164

080116b8 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d005      	beq.n	80116d8 <_fxe_file_read+0x20>
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d002      	beq.n	80116d8 <_fxe_file_read+0x20>
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d101      	bne.n	80116dc <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 80116d8:	2318      	movs	r3, #24
 80116da:	e01b      	b.n	8011714 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80116dc:	f3ef 8305 	mrs	r3, IPSR
 80116e0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80116e2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80116e4:	4b0d      	ldr	r3, [pc, #52]	; (801171c <_fxe_file_read+0x64>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d108      	bne.n	8011700 <_fxe_file_read+0x48>
 80116ee:	4b0c      	ldr	r3, [pc, #48]	; (8011720 <_fxe_file_read+0x68>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d004      	beq.n	8011700 <_fxe_file_read+0x48>
 80116f6:	4b0a      	ldr	r3, [pc, #40]	; (8011720 <_fxe_file_read+0x68>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a0a      	ldr	r2, [pc, #40]	; (8011724 <_fxe_file_read+0x6c>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d101      	bne.n	8011704 <_fxe_file_read+0x4c>
 8011700:	2320      	movs	r3, #32
 8011702:	e007      	b.n	8011714 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	68b9      	ldr	r1, [r7, #8]
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f7fc f9da 	bl	800dac4 <_fx_file_read>
 8011710:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8011712:	697b      	ldr	r3, [r7, #20]
}
 8011714:	4618      	mov	r0, r3
 8011716:	3718      	adds	r7, #24
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	24000070 	.word	0x24000070
 8011720:	2401501c 	.word	0x2401501c
 8011724:	24015164 	.word	0x24015164

08011728 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d101      	bne.n	801173c <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8011738:	2318      	movs	r3, #24
 801173a:	e019      	b.n	8011770 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801173c:	f3ef 8305 	mrs	r3, IPSR
 8011740:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011742:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011744:	4b0c      	ldr	r3, [pc, #48]	; (8011778 <_fxe_file_seek+0x50>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4313      	orrs	r3, r2
 801174a:	2b00      	cmp	r3, #0
 801174c:	d108      	bne.n	8011760 <_fxe_file_seek+0x38>
 801174e:	4b0b      	ldr	r3, [pc, #44]	; (801177c <_fxe_file_seek+0x54>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d004      	beq.n	8011760 <_fxe_file_seek+0x38>
 8011756:	4b09      	ldr	r3, [pc, #36]	; (801177c <_fxe_file_seek+0x54>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4a09      	ldr	r2, [pc, #36]	; (8011780 <_fxe_file_seek+0x58>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d101      	bne.n	8011764 <_fxe_file_seek+0x3c>
 8011760:	2320      	movs	r3, #32
 8011762:	e005      	b.n	8011770 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7fc fc50 	bl	800e00c <_fx_file_seek>
 801176c:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 801176e:	68fb      	ldr	r3, [r7, #12]
}
 8011770:	4618      	mov	r0, r3
 8011772:	3710      	adds	r7, #16
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	24000070 	.word	0x24000070
 801177c:	2401501c 	.word	0x2401501c
 8011780:	24015164 	.word	0x24015164

08011784 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8011792:	2318      	movs	r3, #24
 8011794:	e018      	b.n	80117c8 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011796:	f3ef 8305 	mrs	r3, IPSR
 801179a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801179c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801179e:	4b0c      	ldr	r3, [pc, #48]	; (80117d0 <_fxe_media_flush+0x4c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d108      	bne.n	80117ba <_fxe_media_flush+0x36>
 80117a8:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <_fxe_media_flush+0x50>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <_fxe_media_flush+0x36>
 80117b0:	4b08      	ldr	r3, [pc, #32]	; (80117d4 <_fxe_media_flush+0x50>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4a08      	ldr	r2, [pc, #32]	; (80117d8 <_fxe_media_flush+0x54>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d101      	bne.n	80117be <_fxe_media_flush+0x3a>
 80117ba:	2320      	movs	r3, #32
 80117bc:	e004      	b.n	80117c8 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7fc fcde 	bl	800e180 <_fx_media_flush>
 80117c4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	24000070 	.word	0x24000070
 80117d4:	2401501c 	.word	0x2401501c
 80117d8:	24015164 	.word	0x24015164

080117dc <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b08e      	sub	sp, #56	; 0x38
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d00a      	beq.n	8011806 <_fxe_media_open+0x2a>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d007      	beq.n	8011806 <_fxe_media_open+0x2a>
 80117f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d004      	beq.n	8011806 <_fxe_media_open+0x2a>
 80117fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117fe:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8011802:	4293      	cmp	r3, r2
 8011804:	d001      	beq.n	801180a <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 8011806:	2318      	movs	r3, #24
 8011808:	e071      	b.n	80118ee <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801180a:	f3ef 8305 	mrs	r3, IPSR
 801180e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011810:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8011812:	4b39      	ldr	r3, [pc, #228]	; (80118f8 <_fxe_media_open+0x11c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4313      	orrs	r3, r2
 8011818:	2b00      	cmp	r3, #0
 801181a:	d108      	bne.n	801182e <_fxe_media_open+0x52>
 801181c:	4b37      	ldr	r3, [pc, #220]	; (80118fc <_fxe_media_open+0x120>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d004      	beq.n	801182e <_fxe_media_open+0x52>
 8011824:	4b35      	ldr	r3, [pc, #212]	; (80118fc <_fxe_media_open+0x120>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a35      	ldr	r2, [pc, #212]	; (8011900 <_fxe_media_open+0x124>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d101      	bne.n	8011832 <_fxe_media_open+0x56>
 801182e:	2320      	movs	r3, #32
 8011830:	e05d      	b.n	80118ee <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8011832:	4b34      	ldr	r3, [pc, #208]	; (8011904 <_fxe_media_open+0x128>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8011838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183a:	425b      	negs	r3, r3
 801183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801183e:	4013      	ands	r3, r2
 8011840:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	2b01      	cmp	r3, #1
 8011846:	d004      	beq.n	8011852 <_fxe_media_open+0x76>
 8011848:	4b2e      	ldr	r3, [pc, #184]	; (8011904 <_fxe_media_open+0x128>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801184e:	429a      	cmp	r2, r3
 8011850:	d001      	beq.n	8011856 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011852:	2302      	movs	r3, #2
 8011854:	e04b      	b.n	80118ee <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8011856:	4b2c      	ldr	r3, [pc, #176]	; (8011908 <_fxe_media_open+0x12c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	425b      	negs	r3, r3
 8011860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011862:	4013      	ands	r3, r2
 8011864:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8011866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011868:	2b01      	cmp	r3, #1
 801186a:	d004      	beq.n	8011876 <_fxe_media_open+0x9a>
 801186c:	4b26      	ldr	r3, [pc, #152]	; (8011908 <_fxe_media_open+0x12c>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011872:	429a      	cmp	r2, r3
 8011874:	d001      	beq.n	801187a <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8011876:	2302      	movs	r3, #2
 8011878:	e039      	b.n	80118ee <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 801187a:	f001 ff3b 	bl	80136f4 <_tx_thread_identify>
 801187e:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8011880:	f107 0314 	add.w	r3, r7, #20
 8011884:	461a      	mov	r2, r3
 8011886:	2100      	movs	r1, #0
 8011888:	6a38      	ldr	r0, [r7, #32]
 801188a:	f001 ff8d 	bl	80137a8 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 801188e:	4b1f      	ldr	r3, [pc, #124]	; (801190c <_fxe_media_open+0x130>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8011894:	4b1e      	ldr	r3, [pc, #120]	; (8011910 <_fxe_media_open+0x134>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 801189a:	e010      	b.n	80118be <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d108      	bne.n	80118b6 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	f107 0214 	add.w	r2, r7, #20
 80118aa:	4619      	mov	r1, r3
 80118ac:	6a38      	ldr	r0, [r7, #32]
 80118ae:	f001 ff7b 	bl	80137a8 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 80118b2:	2318      	movs	r3, #24
 80118b4:	e01b      	b.n	80118ee <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 80118b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80118bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 80118be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c0:	1e5a      	subs	r2, r3, #1
 80118c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1e9      	bne.n	801189c <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	f107 0214 	add.w	r2, r7, #20
 80118ce:	4619      	mov	r1, r3
 80118d0:	6a38      	ldr	r0, [r7, #32]
 80118d2:	f001 ff69 	bl	80137a8 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 80118d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d8:	9301      	str	r3, [sp, #4]
 80118da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f7fc fdd7 	bl	800e498 <_fx_media_open>
 80118ea:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 80118ec:	69fb      	ldr	r3, [r7, #28]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3730      	adds	r7, #48	; 0x30
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	24000070 	.word	0x24000070
 80118fc:	2401501c 	.word	0x2401501c
 8011900:	24015164 	.word	0x24015164
 8011904:	24014d8c 	.word	0x24014d8c
 8011908:	24014d90 	.word	0x24014d90
 801190c:	24014d7c 	.word	0x24014d7c
 8011910:	24014d80 	.word	0x24014d80

08011914 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 801191c:	f002 fae4 	bl	8013ee8 <_tx_time_get>
 8011920:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8011922:	e007      	b.n	8011934 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7f8 ffcd 	bl	800a8c4 <fx_stm32_sd_get_status>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d101      	bne.n	8011934 <check_sd_status+0x20>
    {
      return 0;
 8011930:	2300      	movs	r3, #0
 8011932:	e008      	b.n	8011946 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8011934:	f002 fad8 	bl	8013ee8 <_tx_time_get>
 8011938:	4602      	mov	r2, r0
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011942:	d3ef      	bcc.n	8011924 <check_sd_status+0x10>
    }
  }

  return 1;
 8011944:	2301      	movs	r3, #1
}
 8011946:	4618      	mov	r0, r3
 8011948:	3710      	adds	r7, #16
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 8011958:	4b7e      	ldr	r3, [pc, #504]	; (8011b54 <fx_stm32_sd_driver+0x204>)
 801195a:	2201      	movs	r2, #1
 801195c:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 801195e:	4b7d      	ldr	r3, [pc, #500]	; (8011b54 <fx_stm32_sd_driver+0x204>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d10a      	bne.n	801197c <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8011966:	2000      	movs	r0, #0
 8011968:	f7ff ffd4 	bl	8011914 <check_sd_status>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d004      	beq.n	801197c <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2290      	movs	r2, #144	; 0x90
 8011976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801197a:	e0e7      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011982:	f003 0303 	and.w	r3, r3, #3
 8011986:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801198e:	2b08      	cmp	r3, #8
 8011990:	f200 80d2 	bhi.w	8011b38 <fx_stm32_sd_driver+0x1e8>
 8011994:	a201      	add	r2, pc, #4	; (adr r2, 801199c <fx_stm32_sd_driver+0x4c>)
 8011996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199a:	bf00      	nop
 801199c:	08011a0f 	.word	0x08011a0f
 80119a0:	08011a43 	.word	0x08011a43
 80119a4:	08011a75 	.word	0x08011a75
 80119a8:	08011a7f 	.word	0x08011a7f
 80119ac:	080119c1 	.word	0x080119c1
 80119b0:	08011a89 	.word	0x08011a89
 80119b4:	08011b39 	.word	0x08011b39
 80119b8:	08011b1d 	.word	0x08011b1d
 80119bc:	080119f9 	.word	0x080119f9
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 80119c8:	231c      	movs	r3, #28
 80119ca:	2200      	movs	r2, #0
 80119cc:	4962      	ldr	r1, [pc, #392]	; (8011b58 <fx_stm32_sd_driver+0x208>)
 80119ce:	4863      	ldr	r0, [pc, #396]	; (8011b5c <fx_stm32_sd_driver+0x20c>)
 80119d0:	f002 fe56 	bl	8014680 <_txe_semaphore_create>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d109      	bne.n	80119ee <fx_stm32_sd_driver+0x9e>
 80119da:	231c      	movs	r3, #28
 80119dc:	2200      	movs	r2, #0
 80119de:	4960      	ldr	r1, [pc, #384]	; (8011b60 <fx_stm32_sd_driver+0x210>)
 80119e0:	4860      	ldr	r0, [pc, #384]	; (8011b64 <fx_stm32_sd_driver+0x214>)
 80119e2:	f002 fe4d 	bl	8014680 <_txe_semaphore_create>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 80aa 	beq.w	8011b42 <fx_stm32_sd_driver+0x1f2>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2290      	movs	r2, #144	; 0x90
 80119f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 80119f6:	e0a4      	b.n	8011b42 <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2200      	movs	r2, #0
 80119fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 8011a00:	4856      	ldr	r0, [pc, #344]	; (8011b5c <fx_stm32_sd_driver+0x20c>)
 8011a02:	f002 fed3 	bl	80147ac <_txe_semaphore_delete>
 8011a06:	4857      	ldr	r0, [pc, #348]	; (8011b64 <fx_stm32_sd_driver+0x214>)
 8011a08:	f002 fed0 	bl	80147ac <_txe_semaphore_delete>

      break;
 8011a0c:	e09e      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2290      	movs	r2, #144	; 0x90
 8011a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a20:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f89c 	bl	8011b68 <sd_read_data>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f040 8087 	bne.w	8011b46 <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8011a40:	e081      	b.n	8011b46 <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2290      	movs	r2, #144	; 0x90
 8011a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a54:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f940 	bl	8011ce4 <sd_write_data>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d16f      	bne.n	8011b4a <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8011a72:	e06a      	b.n	8011b4a <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8011a7c:	e066      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 8011a86:	e061      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2100      	movs	r1, #0
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f868 	bl	8011b68 <sd_read_data>
 8011a98:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d004      	beq.n	8011aaa <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	693a      	ldr	r2, [r7, #16]
 8011aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8011aa8:	e050      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8011ab4:	f107 0308 	add.w	r3, r7, #8
 8011ab8:	f107 020c 	add.w	r2, r7, #12
 8011abc:	2100      	movs	r1, #0
 8011abe:	f7fd fa65 	bl	800ef8c <_fx_partition_offset_calculate>
 8011ac2:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d004      	beq.n	8011ad4 <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2290      	movs	r2, #144	; 0x90
 8011ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8011ad2:	e03b      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d01b      	beq.n	8011b12 <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8011ada:	2000      	movs	r0, #0
 8011adc:	f7ff ff1a 	bl	8011914 <check_sd_status>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d004      	beq.n	8011af0 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2290      	movs	r2, #144	; 0x90
 8011aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8011aee:	e02d      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8011af0:	68f9      	ldr	r1, [r7, #12]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f834 	bl	8011b68 <sd_read_data>
 8011b00:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d004      	beq.n	8011b12 <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	693a      	ldr	r2, [r7, #16]
 8011b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8011b10:	e01c      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8011b1a:	e017      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2100      	movs	r1, #0
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 f8dc 	bl	8011ce4 <sd_write_data>
 8011b2c:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	693a      	ldr	r2, [r7, #16]
 8011b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 8011b36:	e009      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2290      	movs	r2, #144	; 0x90
 8011b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8011b40:	e004      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
      break;
 8011b42:	bf00      	nop
 8011b44:	e002      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
      break;
 8011b46:	bf00      	nop
 8011b48:	e000      	b.n	8011b4c <fx_stm32_sd_driver+0x1fc>
      break;
 8011b4a:	bf00      	nop
    }
  }
}
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	24014fe0 	.word	0x24014fe0
 8011b58:	08015f3c 	.word	0x08015f3c
 8011b5c:	24014d60 	.word	0x24014d60
 8011b60:	08015f58 	.word	0x08015f58
 8011b64:	24014d44 	.word	0x24014d44

08011b68 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b090      	sub	sp, #64	; 0x40
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
 8011b74:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8011b76:	2300      	movs	r3, #0
 8011b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d061      	beq.n	8011c44 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b86:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b8c:	e04c      	b.n	8011c28 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8011b8e:	68ba      	ldr	r2, [r7, #8]
 8011b90:	1c53      	adds	r3, r2, #1
 8011b92:	60bb      	str	r3, [r7, #8]
 8011b94:	2301      	movs	r3, #1
 8011b96:	4950      	ldr	r1, [pc, #320]	; (8011cd8 <sd_read_data+0x170>)
 8011b98:	2000      	movs	r0, #0
 8011b9a:	f7f8 fea9 	bl	800a8f0 <fx_stm32_sd_read_blocks>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8011ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d001      	beq.n	8011bac <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8011ba8:	2390      	movs	r3, #144	; 0x90
 8011baa:	e090      	b.n	8011cce <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8011bac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011bb0:	484a      	ldr	r0, [pc, #296]	; (8011cdc <sd_read_data+0x174>)
 8011bb2:	f002 fe39 	bl	8014828 <_txe_semaphore_get>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d001      	beq.n	8011bc0 <sd_read_data+0x58>
 8011bbc:	2390      	movs	r3, #144	; 0x90
 8011bbe:	e086      	b.n	8011cce <sd_read_data+0x166>
 8011bc0:	4b45      	ldr	r3, [pc, #276]	; (8011cd8 <sd_read_data+0x170>)
 8011bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8011bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	dd1d      	ble.n	8011c0c <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	f003 021f 	and.w	r2, r3, #31
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	4413      	add	r3, r2
 8011bda:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011be0:	f3bf 8f4f 	dsb	sy
}
 8011be4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011be6:	4a3e      	ldr	r2, [pc, #248]	; (8011ce0 <sd_read_data+0x178>)
 8011be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bea:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	3320      	adds	r3, #32
 8011bf2:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf6:	3b20      	subs	r3, #32
 8011bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8011bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dcf2      	bgt.n	8011be6 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011c00:	f3bf 8f4f 	dsb	sy
}
 8011c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011c06:	f3bf 8f6f 	isb	sy
}
 8011c0a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8011c0c:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8011c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c14:	4830      	ldr	r0, [pc, #192]	; (8011cd8 <sd_read_data+0x170>)
 8011c16:	f7ff fc3b 	bl	8011490 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8011c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011c20:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 8011c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c24:	3301      	adds	r3, #1
 8011c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d8ae      	bhi.n	8011b8e <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8011c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d102      	bne.n	8011c3e <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c3c:	e046      	b.n	8011ccc <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8011c3e:	2321      	movs	r3, #33	; 0x21
 8011c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c42:	e043      	b.n	8011ccc <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	2000      	movs	r0, #0
 8011c50:	f7f8 fe4e 	bl	800a8f0 <fx_stm32_sd_read_blocks>
 8011c54:	4603      	mov	r3, r0
 8011c56:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8011c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8011c5e:	2390      	movs	r3, #144	; 0x90
 8011c60:	e035      	b.n	8011cce <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8011c62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011c66:	481d      	ldr	r0, [pc, #116]	; (8011cdc <sd_read_data+0x174>)
 8011c68:	f002 fdde 	bl	8014828 <_txe_semaphore_get>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d001      	beq.n	8011c76 <sd_read_data+0x10e>
 8011c72:	2390      	movs	r3, #144	; 0x90
 8011c74:	e02b      	b.n	8011cce <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	025b      	lsls	r3, r3, #9
 8011c80:	623a      	str	r2, [r7, #32]
 8011c82:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dd1d      	ble.n	8011cc6 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011c8a:	6a3b      	ldr	r3, [r7, #32]
 8011c8c:	f003 021f 	and.w	r2, r3, #31
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	4413      	add	r3, r2
 8011c94:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011c9a:	f3bf 8f4f 	dsb	sy
}
 8011c9e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011ca0:	4a0f      	ldr	r2, [pc, #60]	; (8011ce0 <sd_read_data+0x178>)
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	3320      	adds	r3, #32
 8011cac:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	3b20      	subs	r3, #32
 8011cb2:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	dcf2      	bgt.n	8011ca0 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8011cba:	f3bf 8f4f 	dsb	sy
}
 8011cbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011cc0:	f3bf 8f6f 	isb	sy
}
 8011cc4:	bf00      	nop
}
 8011cc6:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3740      	adds	r7, #64	; 0x40
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	24014de0 	.word	0x24014de0
 8011cdc:	24014d60 	.word	0x24014d60
 8011ce0:	e000ed00 	.word	0xe000ed00

08011ce4 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b090      	sub	sp, #64	; 0x40
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d061      	beq.n	8011dc0 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d02:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8011d04:	2300      	movs	r3, #0
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d08:	e04c      	b.n	8011da4 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8011d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d0e:	4951      	ldr	r1, [pc, #324]	; (8011e54 <sd_write_data+0x170>)
 8011d10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d12:	f7ff fbbd 	bl	8011490 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8011d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8011d1e:	4b4d      	ldr	r3, [pc, #308]	; (8011e54 <sd_write_data+0x170>)
 8011d20:	633b      	str	r3, [r7, #48]	; 0x30
 8011d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8011d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	dd1d      	ble.n	8011d6a <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d30:	f003 021f 	and.w	r2, r3, #31
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	4413      	add	r3, r2
 8011d38:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011d3e:	f3bf 8f4f 	dsb	sy
}
 8011d42:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011d44:	4a44      	ldr	r2, [pc, #272]	; (8011e58 <sd_write_data+0x174>)
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d48:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	3320      	adds	r3, #32
 8011d50:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d54:	3b20      	subs	r3, #32
 8011d56:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8011d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	dcf2      	bgt.n	8011d44 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d5e:	f3bf 8f4f 	dsb	sy
}
 8011d62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d64:	f3bf 8f6f 	isb	sy
}
 8011d68:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8011d6a:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	1c53      	adds	r3, r2, #1
 8011d70:	60bb      	str	r3, [r7, #8]
 8011d72:	2301      	movs	r3, #1
 8011d74:	4937      	ldr	r1, [pc, #220]	; (8011e54 <sd_write_data+0x170>)
 8011d76:	2000      	movs	r0, #0
 8011d78:	f7f8 fdd6 	bl	800a928 <fx_stm32_sd_write_blocks>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d001      	beq.n	8011d8a <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8011d86:	2390      	movs	r3, #144	; 0x90
 8011d88:	e05f      	b.n	8011e4a <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8011d8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011d8e:	4833      	ldr	r0, [pc, #204]	; (8011e5c <sd_write_data+0x178>)
 8011d90:	f002 fd4a 	bl	8014828 <_txe_semaphore_get>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <sd_write_data+0xba>
 8011d9a:	2390      	movs	r3, #144	; 0x90
 8011d9c:	e055      	b.n	8011e4a <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 8011d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011da0:	3301      	adds	r3, #1
 8011da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d8ae      	bhi.n	8011d0a <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8011dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d102      	bne.n	8011dba <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8011db4:	2300      	movs	r3, #0
 8011db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011db8:	e046      	b.n	8011e48 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8011dba:	2321      	movs	r3, #33	; 0x21
 8011dbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011dbe:	e043      	b.n	8011e48 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	025b      	lsls	r3, r3, #9
 8011dca:	623a      	str	r2, [r7, #32]
 8011dcc:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	dd1d      	ble.n	8011e10 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	f003 021f 	and.w	r2, r3, #31
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	4413      	add	r3, r2
 8011dde:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011de0:	6a3b      	ldr	r3, [r7, #32]
 8011de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011de4:	f3bf 8f4f 	dsb	sy
}
 8011de8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011dea:	4a1b      	ldr	r2, [pc, #108]	; (8011e58 <sd_write_data+0x174>)
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	3320      	adds	r3, #32
 8011df6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	3b20      	subs	r3, #32
 8011dfc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	dcf2      	bgt.n	8011dea <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8011e04:	f3bf 8f4f 	dsb	sy
}
 8011e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e0a:	f3bf 8f6f 	isb	sy
}
 8011e0e:	bf00      	nop
}
 8011e10:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	f7f8 fd83 	bl	800a928 <fx_stm32_sd_write_blocks>
 8011e22:	4603      	mov	r3, r0
 8011e24:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8011e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8011e2c:	2390      	movs	r3, #144	; 0x90
 8011e2e:	e00c      	b.n	8011e4a <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8011e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011e34:	4809      	ldr	r0, [pc, #36]	; (8011e5c <sd_write_data+0x178>)
 8011e36:	f002 fcf7 	bl	8014828 <_txe_semaphore_get>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d001      	beq.n	8011e44 <sd_write_data+0x160>
 8011e40:	2390      	movs	r3, #144	; 0x90
 8011e42:	e002      	b.n	8011e4a <sd_write_data+0x166>

    status = FX_SUCCESS;
 8011e44:	2300      	movs	r3, #0
 8011e46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8011e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3740      	adds	r7, #64	; 0x40
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	24014de0 	.word	0x24014de0
 8011e58:	e000ed00 	.word	0xe000ed00
 8011e5c:	24014d44 	.word	0x24014d44

08011e60 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b096      	sub	sp, #88	; 0x58
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
 8011e6c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	3303      	adds	r3, #3
 8011e72:	f023 0303 	bic.w	r3, r3, #3
 8011e76:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e78:	f3ef 8310 	mrs	r3, PRIMASK
 8011e7c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011e80:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e82:	b672      	cpsid	i
    return(int_posture);
 8011e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8011e86:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011e88:	4b55      	ldr	r3, [pc, #340]	; (8011fe0 <_tx_byte_allocate+0x180>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e96:	621a      	str	r2, [r3, #32]
 8011e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e9a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9e:	f383 8810 	msr	PRIMASK, r3
}
 8011ea2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f000 f9b2 	bl	8012210 <_tx_byte_pool_search>
 8011eac:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011eae:	f3ef 8310 	mrs	r3, PRIMASK
 8011eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011eb8:	b672      	cpsid	i
    return(int_posture);
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8011ebc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8011ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d002      	beq.n	8011eca <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ec8:	e006      	b.n	8011ed8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d101      	bne.n	8011ed8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8011ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d0d9      	beq.n	8011e92 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ee2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8011ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d008      	beq.n	8011efc <_tx_byte_allocate+0x9c>
 8011eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	f383 8810 	msr	PRIMASK, r3
}
 8011ef4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8011efa:	e06c      	b.n	8011fd6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d061      	beq.n	8011fc6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8011f02:	4b38      	ldr	r3, [pc, #224]	; (8011fe4 <_tx_byte_allocate+0x184>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d007      	beq.n	8011f1a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8011f0a:	2310      	movs	r3, #16
 8011f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8011f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f10:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	f383 8810 	msr	PRIMASK, r3
}
 8011f18:	e05d      	b.n	8011fd6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8011f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f1c:	4a32      	ldr	r2, [pc, #200]	; (8011fe8 <_tx_byte_allocate+0x188>)
 8011f1e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8011f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8011f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f28:	68ba      	ldr	r2, [r7, #8]
 8011f2a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8011f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011f38:	1c5a      	adds	r2, r3, #1
 8011f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f44:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f4a:	1c5a      	adds	r2, r3, #1
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d109      	bne.n	8011f6a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f5a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f60:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f66:	675a      	str	r2, [r3, #116]	; 0x74
 8011f68:	e011      	b.n	8011f8e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f74:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f7a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f80:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f86:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f8c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8011f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f90:	2209      	movs	r2, #9
 8011f92:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f96:	2201      	movs	r2, #1
 8011f98:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f9c:	683a      	ldr	r2, [r7, #0]
 8011f9e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011fa0:	4b10      	ldr	r3, [pc, #64]	; (8011fe4 <_tx_byte_allocate+0x184>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	4a0f      	ldr	r2, [pc, #60]	; (8011fe4 <_tx_byte_allocate+0x184>)
 8011fa8:	6013      	str	r3, [r2, #0]
 8011faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	f383 8810 	msr	PRIMASK, r3
}
 8011fb4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011fb6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011fb8:	f001 fdf0 	bl	8013b9c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8011fc4:	e007      	b.n	8011fd6 <_tx_byte_allocate+0x176>
 8011fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fc8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	f383 8810 	msr	PRIMASK, r3
}
 8011fd0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8011fd2:	2310      	movs	r3, #16
 8011fd4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8011fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3758      	adds	r7, #88	; 0x58
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	2401501c 	.word	0x2401501c
 8011fe4:	240150b4 	.word	0x240150b4
 8011fe8:	08011fed 	.word	0x08011fed

08011fec <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08e      	sub	sp, #56	; 0x38
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8011ffa:	623b      	str	r3, [r7, #32]
    return(posture);
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011ffe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012000:	b672      	cpsid	i
    return(int_posture);
 8012002:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012004:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801200a:	4a33      	ldr	r2, [pc, #204]	; (80120d8 <_tx_byte_pool_cleanup+0xec>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d158      	bne.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012016:	683a      	ldr	r2, [r7, #0]
 8012018:	429a      	cmp	r2, r3
 801201a:	d152      	bne.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012020:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012024:	2b00      	cmp	r3, #0
 8012026:	d04c      	beq.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	4a2b      	ldr	r2, [pc, #172]	; (80120dc <_tx_byte_pool_cleanup+0xf0>)
 801202e:	4293      	cmp	r3, r2
 8012030:	d147      	bne.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012036:	2b00      	cmp	r3, #0
 8012038:	d043      	beq.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2200      	movs	r2, #0
 801203e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012044:	1e5a      	subs	r2, r3, #1
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012052:	2b00      	cmp	r3, #0
 8012054:	d103      	bne.n	801205e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012058:	2200      	movs	r2, #0
 801205a:	625a      	str	r2, [r3, #36]	; 0x24
 801205c:	e013      	b.n	8012086 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012062:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012068:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801206e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012074:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801207a:	687a      	ldr	r2, [r7, #4]
 801207c:	429a      	cmp	r2, r3
 801207e:	d102      	bne.n	8012086 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012084:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208a:	2b09      	cmp	r3, #9
 801208c:	d119      	bne.n	80120c2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2210      	movs	r2, #16
 8012092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012096:	4b12      	ldr	r3, [pc, #72]	; (80120e0 <_tx_byte_pool_cleanup+0xf4>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3301      	adds	r3, #1
 801209c:	4a10      	ldr	r2, [pc, #64]	; (80120e0 <_tx_byte_pool_cleanup+0xf4>)
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	f383 8810 	msr	PRIMASK, r3
}
 80120aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f001 fc75 	bl	801399c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120b2:	f3ef 8310 	mrs	r3, PRIMASK
 80120b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80120b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80120ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80120bc:	b672      	cpsid	i
    return(int_posture);
 80120be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80120c0:	637b      	str	r3, [r7, #52]	; 0x34
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f383 8810 	msr	PRIMASK, r3
}
 80120cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80120ce:	bf00      	nop
 80120d0:	3738      	adds	r7, #56	; 0x38
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	08011fed 	.word	0x08011fed
 80120dc:	42595445 	.word	0x42595445
 80120e0:	240150b4 	.word	0x240150b4

080120e4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08e      	sub	sp, #56	; 0x38
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
 80120f0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80120f2:	2234      	movs	r2, #52	; 0x34
 80120f4:	2100      	movs	r1, #0
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f002 fd50 	bl	8014b9c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	f023 0303 	bic.w	r3, r3, #3
 8012102:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	683a      	ldr	r2, [r7, #0]
 8012114:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	f1a3 0208 	sub.w	r2, r3, #8
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2202      	movs	r2, #2
 8012130:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	4413      	add	r3, r2
 801213c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012140:	3b04      	subs	r3, #4
 8012142:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012150:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012154:	3b04      	subs	r3, #4
 8012156:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012168:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801216e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8012174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012176:	3304      	adds	r3, #4
 8012178:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801217c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012180:	4a1f      	ldr	r2, [pc, #124]	; (8012200 <_tx_byte_pool_create+0x11c>)
 8012182:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801218a:	f3ef 8310 	mrs	r3, PRIMASK
 801218e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012190:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012192:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012194:	b672      	cpsid	i
    return(int_posture);
 8012196:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8012198:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	4a19      	ldr	r2, [pc, #100]	; (8012204 <_tx_byte_pool_create+0x120>)
 801219e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80121a0:	4b19      	ldr	r3, [pc, #100]	; (8012208 <_tx_byte_pool_create+0x124>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d109      	bne.n	80121bc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80121a8:	4a18      	ldr	r2, [pc, #96]	; (801220c <_tx_byte_pool_create+0x128>)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	631a      	str	r2, [r3, #48]	; 0x30
 80121ba:	e011      	b.n	80121e0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80121bc:	4b13      	ldr	r3, [pc, #76]	; (801220c <_tx_byte_pool_create+0x128>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121c6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	68fa      	ldr	r2, [r7, #12]
 80121cc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	68fa      	ldr	r2, [r7, #12]
 80121d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	69fa      	ldr	r2, [r7, #28]
 80121d8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	6a3a      	ldr	r2, [r7, #32]
 80121de:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80121e0:	4b09      	ldr	r3, [pc, #36]	; (8012208 <_tx_byte_pool_create+0x124>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	3301      	adds	r3, #1
 80121e6:	4a08      	ldr	r2, [pc, #32]	; (8012208 <_tx_byte_pool_create+0x124>)
 80121e8:	6013      	str	r3, [r2, #0]
 80121ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	f383 8810 	msr	PRIMASK, r3
}
 80121f4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80121f6:	2300      	movs	r3, #0
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3738      	adds	r7, #56	; 0x38
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	ffffeeee 	.word	0xffffeeee
 8012204:	42595445 	.word	0x42595445
 8012208:	24015010 	.word	0x24015010
 801220c:	2401500c 	.word	0x2401500c

08012210 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012210:	b480      	push	{r7}
 8012212:	b097      	sub	sp, #92	; 0x5c
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801221a:	2300      	movs	r3, #0
 801221c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801221e:	f3ef 8310 	mrs	r3, PRIMASK
 8012222:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012226:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012228:	b672      	cpsid	i
    return(int_posture);
 801222a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801222c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	689a      	ldr	r2, [r3, #8]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	3b02      	subs	r3, #2
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	4413      	add	r3, r2
 801223c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012242:	429a      	cmp	r2, r3
 8012244:	d308      	bcc.n	8012258 <_tx_byte_pool_search+0x48>
 8012246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012248:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	f383 8810 	msr	PRIMASK, r3
}
 8012250:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8012252:	2300      	movs	r3, #0
 8012254:	653b      	str	r3, [r7, #80]	; 0x50
 8012256:	e0dd      	b.n	8012414 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012258:	4b72      	ldr	r3, [pc, #456]	; (8012424 <_tx_byte_pool_search+0x214>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012262:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	695b      	ldr	r3, [r3, #20]
 8012268:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	3301      	adds	r3, #1
 8012270:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8012272:	2300      	movs	r3, #0
 8012274:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8012276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012278:	3304      	adds	r3, #4
 801227a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a68      	ldr	r2, [pc, #416]	; (8012428 <_tx_byte_pool_search+0x218>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d143      	bne.n	8012312 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801228a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801228c:	2b00      	cmp	r3, #0
 801228e:	d104      	bne.n	801229a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012294:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8012296:	2301      	movs	r3, #1
 8012298:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801229a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801229c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 801229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80122a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80122ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ae:	3b08      	subs	r3, #8
 80122b0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80122b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d257      	bcs.n	801236a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80122ba:	2300      	movs	r3, #0
 80122bc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80122be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c0:	3304      	adds	r3, #4
 80122c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80122c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80122c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a56      	ldr	r2, [pc, #344]	; (8012428 <_tx_byte_pool_search+0x218>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d113      	bne.n	80122fa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	1e5a      	subs	r2, r3, #1
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d114      	bne.n	801231c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80122f6:	615a      	str	r2, [r3, #20]
 80122f8:	e010      	b.n	801231c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80122fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8012304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012306:	2b00      	cmp	r3, #0
 8012308:	d008      	beq.n	801231c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801230c:	3b01      	subs	r3, #1
 801230e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012310:	e004      	b.n	801231c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8012312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012314:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801231c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801231e:	2b00      	cmp	r3, #0
 8012320:	d002      	beq.n	8012328 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8012322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012324:	3b01      	subs	r3, #1
 8012326:	64bb      	str	r3, [r7, #72]	; 0x48
 8012328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801232a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	f383 8810 	msr	PRIMASK, r3
}
 8012332:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012334:	f3ef 8310 	mrs	r3, PRIMASK
 8012338:	61bb      	str	r3, [r7, #24]
    return(posture);
 801233a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801233c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801233e:	b672      	cpsid	i
    return(int_posture);
 8012340:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8012342:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6a1b      	ldr	r3, [r3, #32]
 8012348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801234a:	429a      	cmp	r2, r3
 801234c:	d009      	beq.n	8012362 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	695b      	ldr	r3, [r3, #20]
 8012352:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	3301      	adds	r3, #1
 801235a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012360:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8012362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012364:	2b00      	cmp	r3, #0
 8012366:	d186      	bne.n	8012276 <_tx_byte_pool_search+0x66>
 8012368:	e000      	b.n	801236c <_tx_byte_pool_search+0x15c>
                    break;
 801236a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236e:	2b00      	cmp	r3, #0
 8012370:	d048      	beq.n	8012404 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8012372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	2b13      	cmp	r3, #19
 801237a:	d91e      	bls.n	80123ba <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	3308      	adds	r3, #8
 8012380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012382:	4413      	add	r3, r2
 8012384:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8012386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012388:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801238a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801238c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	3304      	adds	r3, #4
 801239a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80123a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123a2:	4a21      	ldr	r2, [pc, #132]	; (8012428 <_tx_byte_pool_search+0x218>)
 80123a4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80123b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123b4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80123ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123bc:	3304      	adds	r3, #4
 80123be:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80123c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80123c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	689a      	ldr	r2, [r3, #8]
 80123ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	f1a3 0208 	sub.w	r2, r3, #8
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	695b      	ldr	r3, [r3, #20]
 80123de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d105      	bne.n	80123f0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80123e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80123e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	615a      	str	r2, [r3, #20]
 80123f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f383 8810 	msr	PRIMASK, r3
}
 80123fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80123fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123fe:	3308      	adds	r3, #8
 8012400:	653b      	str	r3, [r7, #80]	; 0x50
 8012402:	e007      	b.n	8012414 <_tx_byte_pool_search+0x204>
 8012404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012406:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	f383 8810 	msr	PRIMASK, r3
}
 801240e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8012410:	2300      	movs	r3, #0
 8012412:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8012414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012416:	4618      	mov	r0, r3
 8012418:	375c      	adds	r7, #92	; 0x5c
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
 8012422:	bf00      	nop
 8012424:	2401501c 	.word	0x2401501c
 8012428:	ffffeeee 	.word	0xffffeeee

0801242c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8012430:	f001 f97e 	bl	8013730 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8012434:	f001 fdfc 	bl	8014030 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8012438:	4b12      	ldr	r3, [pc, #72]	; (8012484 <_tx_initialize_high_level+0x58>)
 801243a:	2200      	movs	r2, #0
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	4b12      	ldr	r3, [pc, #72]	; (8012488 <_tx_initialize_high_level+0x5c>)
 8012440:	2200      	movs	r2, #0
 8012442:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8012444:	4b11      	ldr	r3, [pc, #68]	; (801248c <_tx_initialize_high_level+0x60>)
 8012446:	2200      	movs	r2, #0
 8012448:	601a      	str	r2, [r3, #0]
 801244a:	4b11      	ldr	r3, [pc, #68]	; (8012490 <_tx_initialize_high_level+0x64>)
 801244c:	2200      	movs	r2, #0
 801244e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8012450:	4b10      	ldr	r3, [pc, #64]	; (8012494 <_tx_initialize_high_level+0x68>)
 8012452:	2200      	movs	r2, #0
 8012454:	601a      	str	r2, [r3, #0]
 8012456:	4b10      	ldr	r3, [pc, #64]	; (8012498 <_tx_initialize_high_level+0x6c>)
 8012458:	2200      	movs	r2, #0
 801245a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801245c:	4b0f      	ldr	r3, [pc, #60]	; (801249c <_tx_initialize_high_level+0x70>)
 801245e:	2200      	movs	r2, #0
 8012460:	601a      	str	r2, [r3, #0]
 8012462:	4b0f      	ldr	r3, [pc, #60]	; (80124a0 <_tx_initialize_high_level+0x74>)
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8012468:	4b0e      	ldr	r3, [pc, #56]	; (80124a4 <_tx_initialize_high_level+0x78>)
 801246a:	2200      	movs	r2, #0
 801246c:	601a      	str	r2, [r3, #0]
 801246e:	4b0e      	ldr	r3, [pc, #56]	; (80124a8 <_tx_initialize_high_level+0x7c>)
 8012470:	2200      	movs	r2, #0
 8012472:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8012474:	4b0d      	ldr	r3, [pc, #52]	; (80124ac <_tx_initialize_high_level+0x80>)
 8012476:	2200      	movs	r2, #0
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	4b0d      	ldr	r3, [pc, #52]	; (80124b0 <_tx_initialize_high_level+0x84>)
 801247c:	2200      	movs	r2, #0
 801247e:	601a      	str	r2, [r3, #0]
#endif
}
 8012480:	bf00      	nop
 8012482:	bd80      	pop	{r7, pc}
 8012484:	24014fe4 	.word	0x24014fe4
 8012488:	24014fe8 	.word	0x24014fe8
 801248c:	24014fec 	.word	0x24014fec
 8012490:	24014ff0 	.word	0x24014ff0
 8012494:	24014ff4 	.word	0x24014ff4
 8012498:	24014ff8 	.word	0x24014ff8
 801249c:	24015004 	.word	0x24015004
 80124a0:	24015008 	.word	0x24015008
 80124a4:	2401500c 	.word	0x2401500c
 80124a8:	24015010 	.word	0x24015010
 80124ac:	24014ffc 	.word	0x24014ffc
 80124b0:	24015000 	.word	0x24015000

080124b4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80124b8:	4b10      	ldr	r3, [pc, #64]	; (80124fc <_tx_initialize_kernel_enter+0x48>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80124c0:	d00c      	beq.n	80124dc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80124c2:	4b0e      	ldr	r3, [pc, #56]	; (80124fc <_tx_initialize_kernel_enter+0x48>)
 80124c4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80124c8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80124ca:	f7ed ff09 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80124ce:	f7ff ffad 	bl	801242c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80124d2:	4b0b      	ldr	r3, [pc, #44]	; (8012500 <_tx_initialize_kernel_enter+0x4c>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	3301      	adds	r3, #1
 80124d8:	4a09      	ldr	r2, [pc, #36]	; (8012500 <_tx_initialize_kernel_enter+0x4c>)
 80124da:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80124dc:	4b07      	ldr	r3, [pc, #28]	; (80124fc <_tx_initialize_kernel_enter+0x48>)
 80124de:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80124e2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80124e4:	4b07      	ldr	r3, [pc, #28]	; (8012504 <_tx_initialize_kernel_enter+0x50>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7ee f9eb 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80124ee:	4b03      	ldr	r3, [pc, #12]	; (80124fc <_tx_initialize_kernel_enter+0x48>)
 80124f0:	2200      	movs	r2, #0
 80124f2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80124f4:	f7ed ff34 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80124f8:	bf00      	nop
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	24000070 	.word	0x24000070
 8012500:	240150b4 	.word	0x240150b4
 8012504:	24015014 	.word	0x24015014

08012508 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b08e      	sub	sp, #56	; 0x38
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012512:	f3ef 8310 	mrs	r3, PRIMASK
 8012516:	623b      	str	r3, [r7, #32]
    return(posture);
 8012518:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801251a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801251c:	b672      	cpsid	i
    return(int_posture);
 801251e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8012520:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012526:	4a33      	ldr	r2, [pc, #204]	; (80125f4 <_tx_mutex_cleanup+0xec>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d158      	bne.n	80125de <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	429a      	cmp	r2, r3
 8012536:	d152      	bne.n	80125de <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801253c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	2b00      	cmp	r3, #0
 8012542:	d04c      	beq.n	80125de <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8012544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4a2b      	ldr	r2, [pc, #172]	; (80125f8 <_tx_mutex_cleanup+0xf0>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d147      	bne.n	80125de <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012550:	69db      	ldr	r3, [r3, #28]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d043      	beq.n	80125de <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	69db      	ldr	r3, [r3, #28]
 8012560:	1e5a      	subs	r2, r3, #1
 8012562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012564:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	69db      	ldr	r3, [r3, #28]
 801256a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	2b00      	cmp	r3, #0
 8012570:	d103      	bne.n	801257a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012574:	2200      	movs	r2, #0
 8012576:	619a      	str	r2, [r3, #24]
 8012578:	e013      	b.n	80125a2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801257e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012584:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801258a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012590:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	699b      	ldr	r3, [r3, #24]
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	429a      	cmp	r2, r3
 801259a:	d102      	bne.n	80125a2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125a0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125a6:	2b0d      	cmp	r3, #13
 80125a8:	d119      	bne.n	80125de <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	221d      	movs	r2, #29
 80125ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80125b2:	4b12      	ldr	r3, [pc, #72]	; (80125fc <_tx_mutex_cleanup+0xf4>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	4a10      	ldr	r2, [pc, #64]	; (80125fc <_tx_mutex_cleanup+0xf4>)
 80125ba:	6013      	str	r3, [r2, #0]
 80125bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	f383 8810 	msr	PRIMASK, r3
}
 80125c6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f001 f9e7 	bl	801399c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125ce:	f3ef 8310 	mrs	r3, PRIMASK
 80125d2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80125d4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80125d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125d8:	b672      	cpsid	i
    return(int_posture);
 80125da:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80125dc:	637b      	str	r3, [r7, #52]	; 0x34
 80125de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f383 8810 	msr	PRIMASK, r3
}
 80125e8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80125ea:	bf00      	nop
 80125ec:	3738      	adds	r7, #56	; 0x38
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	08012509 	.word	0x08012509
 80125f8:	4d555445 	.word	0x4d555445
 80125fc:	240150b4 	.word	0x240150b4

08012600 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08a      	sub	sp, #40	; 0x28
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012608:	f3ef 8310 	mrs	r3, PRIMASK
 801260c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801260e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012610:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012612:	b672      	cpsid	i
    return(int_posture);
 8012614:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8012616:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012618:	4b1a      	ldr	r3, [pc, #104]	; (8012684 <_tx_mutex_thread_release+0x84>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	3301      	adds	r3, #1
 801261e:	4a19      	ldr	r2, [pc, #100]	; (8012684 <_tx_mutex_thread_release+0x84>)
 8012620:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012628:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801262a:	6a3b      	ldr	r3, [r7, #32]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d017      	beq.n	8012660 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	2201      	movs	r2, #1
 8012634:	609a      	str	r2, [r3, #8]
 8012636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012638:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f383 8810 	msr	PRIMASK, r3
}
 8012640:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8012642:	6a38      	ldr	r0, [r7, #32]
 8012644:	f000 faf2 	bl	8012c2c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012648:	f3ef 8310 	mrs	r3, PRIMASK
 801264c:	617b      	str	r3, [r7, #20]
    return(posture);
 801264e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012650:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012652:	b672      	cpsid	i
    return(int_posture);
 8012654:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8012656:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801265e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1dd      	bne.n	8012622 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8012666:	4b07      	ldr	r3, [pc, #28]	; (8012684 <_tx_mutex_thread_release+0x84>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	3b01      	subs	r3, #1
 801266c:	4a05      	ldr	r2, [pc, #20]	; (8012684 <_tx_mutex_thread_release+0x84>)
 801266e:	6013      	str	r3, [r2, #0]
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	f383 8810 	msr	PRIMASK, r3
}
 801267a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 801267c:	bf00      	nop
 801267e:	3728      	adds	r7, #40	; 0x28
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	240150b4 	.word	0x240150b4

08012688 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b08a      	sub	sp, #40	; 0x28
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8012694:	2234      	movs	r2, #52	; 0x34
 8012696:	2100      	movs	r1, #0
 8012698:	68f8      	ldr	r0, [r7, #12]
 801269a:	f002 fa7f 	bl	8014b9c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80126aa:	f3ef 8310 	mrs	r3, PRIMASK
 80126ae:	61bb      	str	r3, [r7, #24]
    return(posture);
 80126b0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80126b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80126b4:	b672      	cpsid	i
    return(int_posture);
 80126b6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80126b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	4a1a      	ldr	r2, [pc, #104]	; (8012728 <_tx_mutex_create+0xa0>)
 80126be:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80126c0:	4b1a      	ldr	r3, [pc, #104]	; (801272c <_tx_mutex_create+0xa4>)
 80126c2:	4a1b      	ldr	r2, [pc, #108]	; (8012730 <_tx_mutex_create+0xa8>)
 80126c4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80126c6:	4b1b      	ldr	r3, [pc, #108]	; (8012734 <_tx_mutex_create+0xac>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d109      	bne.n	80126e2 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80126ce:	4a1a      	ldr	r2, [pc, #104]	; (8012738 <_tx_mutex_create+0xb0>)
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	68fa      	ldr	r2, [r7, #12]
 80126d8:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	625a      	str	r2, [r3, #36]	; 0x24
 80126e0:	e011      	b.n	8012706 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80126e2:	4b15      	ldr	r3, [pc, #84]	; (8012738 <_tx_mutex_create+0xb0>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80126e8:	6a3b      	ldr	r3, [r7, #32]
 80126ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ec:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80126ee:	6a3b      	ldr	r3, [r7, #32]
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	69fa      	ldr	r2, [r7, #28]
 80126fe:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6a3a      	ldr	r2, [r7, #32]
 8012704:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8012706:	4b0b      	ldr	r3, [pc, #44]	; (8012734 <_tx_mutex_create+0xac>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	3301      	adds	r3, #1
 801270c:	4a09      	ldr	r2, [pc, #36]	; (8012734 <_tx_mutex_create+0xac>)
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	f383 8810 	msr	PRIMASK, r3
}
 801271a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801271c:	2300      	movs	r3, #0
}
 801271e:	4618      	mov	r0, r3
 8012720:	3728      	adds	r7, #40	; 0x28
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	4d555445 	.word	0x4d555445
 801272c:	240150b8 	.word	0x240150b8
 8012730:	08012601 	.word	0x08012601
 8012734:	24015000 	.word	0x24015000
 8012738:	24014ffc 	.word	0x24014ffc

0801273c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b092      	sub	sp, #72	; 0x48
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012746:	f3ef 8310 	mrs	r3, PRIMASK
 801274a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801274e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012750:	b672      	cpsid	i
    return(int_posture);
 8012752:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8012754:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012756:	4b7a      	ldr	r3, [pc, #488]	; (8012940 <_tx_mutex_get+0x204>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d144      	bne.n	80127ee <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2201      	movs	r2, #1
 8012768:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801276e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8012770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012772:	2b00      	cmp	r3, #0
 8012774:	d032      	beq.n	80127dc <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	691b      	ldr	r3, [r3, #16]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d106      	bne.n	801278c <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2220      	movs	r2, #32
 801278a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801278e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012792:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8012794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00f      	beq.n	80127ba <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801279e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80127a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80127a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127b0:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80127b8:	e009      	b.n	80127ce <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80127ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80127ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80127d4:	1c5a      	adds	r2, r3, #1
 80127d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80127dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	f383 8810 	msr	PRIMASK, r3
}
 80127e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80127e8:	2300      	movs	r3, #0
 80127ea:	647b      	str	r3, [r7, #68]	; 0x44
 80127ec:	e0a2      	b.n	8012934 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d10d      	bne.n	8012814 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	609a      	str	r2, [r3, #8]
 8012802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012804:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	f383 8810 	msr	PRIMASK, r3
}
 801280c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801280e:	2300      	movs	r3, #0
 8012810:	647b      	str	r3, [r7, #68]	; 0x44
 8012812:	e08f      	b.n	8012934 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	f000 8084 	beq.w	8012924 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801281c:	4b49      	ldr	r3, [pc, #292]	; (8012944 <_tx_mutex_get+0x208>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d008      	beq.n	8012836 <_tx_mutex_get+0xfa>
 8012824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012826:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f383 8810 	msr	PRIMASK, r3
}
 801282e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8012830:	231d      	movs	r3, #29
 8012832:	647b      	str	r3, [r7, #68]	; 0x44
 8012834:	e07e      	b.n	8012934 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801283e:	4a42      	ldr	r2, [pc, #264]	; (8012948 <_tx_mutex_get+0x20c>)
 8012840:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8012842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801284a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801284e:	1c5a      	adds	r2, r3, #1
 8012850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012852:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	69db      	ldr	r3, [r3, #28]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d109      	bne.n	8012872 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012862:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012868:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801286a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801286e:	675a      	str	r2, [r3, #116]	; 0x74
 8012870:	e011      	b.n	8012896 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	699b      	ldr	r3, [r3, #24]
 8012876:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801287a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801287c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012882:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012888:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801288e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012894:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	69db      	ldr	r3, [r3, #28]
 801289a:	1c5a      	adds	r2, r3, #1
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80128a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a2:	220d      	movs	r2, #13
 80128a4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80128a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128a8:	2201      	movs	r2, #1
 80128aa:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80128ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ae:	683a      	ldr	r2, [r7, #0]
 80128b0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80128b2:	4b24      	ldr	r3, [pc, #144]	; (8012944 <_tx_mutex_get+0x208>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	3301      	adds	r3, #1
 80128b8:	4a22      	ldr	r2, [pc, #136]	; (8012944 <_tx_mutex_get+0x208>)
 80128ba:	6013      	str	r3, [r2, #0]
 80128bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	f383 8810 	msr	PRIMASK, r3
}
 80128c6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d121      	bne.n	8012914 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80128d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d8:	429a      	cmp	r2, r3
 80128da:	d903      	bls.n	80128e4 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80128dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80128e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d204      	bcs.n	80128fc <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80128f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80128fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012904:	429a      	cmp	r2, r3
 8012906:	d905      	bls.n	8012914 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8012908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801290c:	4619      	mov	r1, r3
 801290e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012910:	f000 f8ce 	bl	8012ab0 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012916:	f001 f941 	bl	8013b9c <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801291a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012920:	647b      	str	r3, [r7, #68]	; 0x44
 8012922:	e007      	b.n	8012934 <_tx_mutex_get+0x1f8>
 8012924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012926:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f383 8810 	msr	PRIMASK, r3
}
 801292e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8012930:	231d      	movs	r3, #29
 8012932:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8012934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012936:	4618      	mov	r0, r3
 8012938:	3748      	adds	r7, #72	; 0x48
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	2401501c 	.word	0x2401501c
 8012944:	240150b4 	.word	0x240150b4
 8012948:	08012509 	.word	0x08012509

0801294c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b092      	sub	sp, #72	; 0x48
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012954:	f3ef 8310 	mrs	r3, PRIMASK
 8012958:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801295c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801295e:	b672      	cpsid	i
    return(int_posture);
 8012960:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8012962:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	69db      	ldr	r3, [r3, #28]
 8012968:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801296c:	2b01      	cmp	r3, #1
 801296e:	d805      	bhi.n	801297c <_tx_mutex_prioritize+0x30>
 8012970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012972:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	f383 8810 	msr	PRIMASK, r3
}
 801297a:	e092      	b.n	8012aa2 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 801297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801297e:	2b02      	cmp	r3, #2
 8012980:	d114      	bne.n	80129ac <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	699b      	ldr	r3, [r3, #24]
 8012986:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8012988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801298c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012996:	429a      	cmp	r2, r3
 8012998:	d202      	bcs.n	80129a0 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801299e:	619a      	str	r2, [r3, #24]
 80129a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	f383 8810 	msr	PRIMASK, r3
}
 80129aa:	e07a      	b.n	8012aa2 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	699b      	ldr	r3, [r3, #24]
 80129b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80129b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129ba:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80129bc:	4b3b      	ldr	r3, [pc, #236]	; (8012aac <_tx_mutex_prioritize+0x160>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	3301      	adds	r3, #1
 80129c2:	4a3a      	ldr	r2, [pc, #232]	; (8012aac <_tx_mutex_prioritize+0x160>)
 80129c4:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80129c6:	2300      	movs	r3, #0
 80129c8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80129ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d201      	bcs.n	80129da <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80129d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f383 8810 	msr	PRIMASK, r3
}
 80129e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80129e6:	f3ef 8310 	mrs	r3, PRIMASK
 80129ea:	617b      	str	r3, [r7, #20]
    return(posture);
 80129ec:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80129ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80129f0:	b672      	cpsid	i
    return(int_posture);
 80129f2:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80129f4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	699b      	ldr	r3, [r3, #24]
 80129fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d002      	beq.n	8012a06 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8012a00:	2301      	movs	r3, #1
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30
 8012a04:	e006      	b.n	8012a14 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	69db      	ldr	r3, [r3, #28]
 8012a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d001      	beq.n	8012a14 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8012a10:	2301      	movs	r3, #1
 8012a12:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d103      	bne.n	8012a22 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8012a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8012a20:	e00c      	b.n	8012a3c <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	699b      	ldr	r3, [r3, #24]
 8012a26:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	69db      	ldr	r3, [r3, #28]
 8012a2c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a30:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8012a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a36:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8012a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d1c2      	bne.n	80129ca <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <_tx_mutex_prioritize+0x160>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	3b01      	subs	r3, #1
 8012a4a:	4a18      	ldr	r2, [pc, #96]	; (8012aac <_tx_mutex_prioritize+0x160>)
 8012a4c:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8012a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d01d      	beq.n	8012a92 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8012a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8012a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a60:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a66:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8012a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a72:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8012a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a78:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8012a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a7e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a84:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8012a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a8a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a90:	619a      	str	r2, [r3, #24]
 8012a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	f383 8810 	msr	PRIMASK, r3
}
 8012a9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012a9e:	f000 ff43 	bl	8013928 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8012aa2:	2300      	movs	r3, #0
#endif
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3748      	adds	r7, #72	; 0x48
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	240150b4 	.word	0x240150b4

08012ab0 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b090      	sub	sp, #64	; 0x40
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012aba:	f3ef 8310 	mrs	r3, PRIMASK
 8012abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ac4:	b672      	cpsid	i
    return(int_posture);
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d017      	beq.n	8012b02 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	683a      	ldr	r2, [r7, #0]
 8012ad6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d905      	bls.n	8012af0 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	63da      	str	r2, [r3, #60]	; 0x3c
 8012aee:	e002      	b.n	8012af6 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	63da      	str	r2, [r3, #60]	; 0x3c
 8012af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	f383 8810 	msr	PRIMASK, r3
}
 8012b00:	e089      	b.n	8012c16 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8012b02:	4b47      	ldr	r3, [pc, #284]	; (8012c20 <_tx_mutex_priority_change+0x170>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8012b0e:	4b45      	ldr	r3, [pc, #276]	; (8012c24 <_tx_mutex_priority_change+0x174>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	3302      	adds	r3, #2
 8012b14:	4a43      	ldr	r2, [pc, #268]	; (8012c24 <_tx_mutex_priority_change+0x174>)
 8012b16:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	220e      	movs	r2, #14
 8012b1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2201      	movs	r2, #1
 8012b22:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2200      	movs	r2, #0
 8012b28:	64da      	str	r2, [r3, #76]	; 0x4c
 8012b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	f383 8810 	msr	PRIMASK, r3
}
 8012b34:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f001 f830 	bl	8013b9c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8012b40:	623b      	str	r3, [r7, #32]
    return(posture);
 8012b42:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012b44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b46:	b672      	cpsid	i
    return(int_posture);
 8012b48:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8012b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012b58:	683a      	ldr	r2, [r7, #0]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d905      	bls.n	8012b6a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b68:	e002      	b.n	8012b70 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b72:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f383 8810 	msr	PRIMASK, r3
}
 8012b7a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f000 ff0d 	bl	801399c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b82:	f3ef 8310 	mrs	r3, PRIMASK
 8012b86:	617b      	str	r3, [r7, #20]
    return(posture);
 8012b88:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012b8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b8c:	b672      	cpsid	i
    return(int_posture);
 8012b8e:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8012b90:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8012b92:	4b23      	ldr	r3, [pc, #140]	; (8012c20 <_tx_mutex_priority_change+0x170>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d034      	beq.n	8012c0a <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d130      	bne.n	8012c0a <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d811      	bhi.n	8012bd8 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8012bb4:	687a      	ldr	r2, [r7, #4]
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d126      	bne.n	8012c0a <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8012bbc:	4a18      	ldr	r2, [pc, #96]	; (8012c20 <_tx_mutex_priority_change+0x170>)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8012bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d21f      	bcs.n	8012c0a <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bce:	4916      	ldr	r1, [pc, #88]	; (8012c28 <_tx_mutex_priority_change+0x178>)
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012bd6:	e018      	b.n	8012c0a <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d212      	bcs.n	8012c0a <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d80c      	bhi.n	8012c0a <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012bf0:	4a0b      	ldr	r2, [pc, #44]	; (8012c20 <_tx_mutex_priority_change+0x170>)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8012bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d205      	bcs.n	8012c0a <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c02:	4909      	ldr	r1, [pc, #36]	; (8012c28 <_tx_mutex_priority_change+0x178>)
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	f383 8810 	msr	PRIMASK, r3
}
 8012c14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012c16:	bf00      	nop
 8012c18:	3740      	adds	r7, #64	; 0x40
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	24015020 	.word	0x24015020
 8012c24:	240150b4 	.word	0x240150b4
 8012c28:	24015034 	.word	0x24015034

08012c2c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b0a6      	sub	sp, #152	; 0x98
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8012c34:	2320      	movs	r3, #32
 8012c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8012c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8012c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8012c42:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c44:	b672      	cpsid	i
    return(int_posture);
 8012c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8012c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	689b      	ldr	r3, [r3, #8]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f000 81ff 	beq.w	8013054 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012c5c:	4ba3      	ldr	r3, [pc, #652]	; (8012eec <_tx_mutex_put+0x2c0>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d00d      	beq.n	8012c88 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8012c6c:	4ba0      	ldr	r3, [pc, #640]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d109      	bne.n	8012c88 <_tx_mutex_put+0x5c>
 8012c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c78:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c7c:	f383 8810 	msr	PRIMASK, r3
}
 8012c80:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8012c82:	231e      	movs	r3, #30
 8012c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8012c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012c8c:	2b20      	cmp	r3, #32
 8012c8e:	f040 81eb 	bne.w	8013068 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	689b      	ldr	r3, [r3, #8]
 8012c96:	1e5a      	subs	r2, r3, #1
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00a      	beq.n	8012cba <_tx_mutex_put+0x8e>
 8012ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ca8:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cac:	f383 8810 	msr	PRIMASK, r3
}
 8012cb0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cb8:	e1d6      	b.n	8013068 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8012cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d10a      	bne.n	8012cd6 <_tx_mutex_put+0xaa>
 8012cc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cc8:	f383 8810 	msr	PRIMASK, r3
}
 8012ccc:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cd4:	e1c8      	b.n	8013068 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8012cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012cdc:	1e5a      	subs	r2, r3, #1
 8012cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ce0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8012ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d104      	bne.n	8012cf8 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8012cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8012cf6:	e019      	b.n	8012d2c <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d04:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8012d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012d0c:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8012d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012d14:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8012d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d104      	bne.n	8012d2c <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8012d22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d110      	bne.n	8012d56 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	691b      	ldr	r3, [r3, #16]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10c      	bne.n	8012d56 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	60da      	str	r2, [r3, #12]
 8012d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d46:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d4a:	f383 8810 	msr	PRIMASK, r3
}
 8012d4e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8012d50:	2300      	movs	r3, #0
 8012d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8012d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012d5a:	2b20      	cmp	r3, #32
 8012d5c:	f040 8184 	bne.w	8013068 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8012d60:	2300      	movs	r3, #0
 8012d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8012d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	691b      	ldr	r3, [r3, #16]
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d155      	bne.n	8012e24 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012d78:	4b5d      	ldr	r3, [pc, #372]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	4a5c      	ldr	r2, [pc, #368]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d86:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8a:	f383 8810 	msr	PRIMASK, r3
}
 8012d8e:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012d90:	2320      	movs	r3, #32
 8012d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8012d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012da0:	e01f      	b.n	8012de2 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8012da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012da6:	691b      	ldr	r3, [r3, #16]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d10b      	bne.n	8012dc4 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8012dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d904      	bls.n	8012dc4 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8012dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8012dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8012dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012dd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d102      	bne.n	8012de2 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8012de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1db      	bne.n	8012da2 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012dea:	f3ef 8310 	mrs	r3, PRIMASK
 8012dee:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8012df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8012df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012df4:	b672      	cpsid	i
    return(int_posture);
 8012df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012dfc:	4b3c      	ldr	r3, [pc, #240]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	4a3b      	ldr	r2, [pc, #236]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e04:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8012e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012e0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8012e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d203      	bcs.n	8012e24 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8012e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	69db      	ldr	r3, [r3, #28]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d920      	bls.n	8012e6e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d11c      	bne.n	8012e6e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8012e34:	4b2e      	ldr	r3, [pc, #184]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	4a2d      	ldr	r2, [pc, #180]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e46:	f383 8810 	msr	PRIMASK, r3
}
 8012e4a:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff fd7d 	bl	801294c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e52:	f3ef 8310 	mrs	r3, PRIMASK
 8012e56:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012e5a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e5c:	b672      	cpsid	i
    return(int_posture);
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8012e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8012e64:	4b22      	ldr	r3, [pc, #136]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	4a21      	ldr	r2, [pc, #132]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e6c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	699b      	ldr	r3, [r3, #24]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d13e      	bne.n	8012ef4 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012e76:	4b1e      	ldr	r3, [pc, #120]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	4a1c      	ldr	r2, [pc, #112]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	f383 8810 	msr	PRIMASK, r3
}
 8012e8c:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2220      	movs	r2, #32
 8012e92:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d006      	beq.n	8012eb0 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff fe00 	bl	8012ab0 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8012eb4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012eb8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012eba:	b672      	cpsid	i
    return(int_posture);
 8012ebc:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8012ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8012ec2:	4b0b      	ldr	r3, [pc, #44]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	4a09      	ldr	r2, [pc, #36]	; (8012ef0 <_tx_mutex_put+0x2c4>)
 8012eca:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	60da      	str	r2, [r3, #12]
 8012ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	f383 8810 	msr	PRIMASK, r3
}
 8012ede:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8012ee0:	f000 fd22 	bl	8013928 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012eea:	e0bd      	b.n	8013068 <_tx_mutex_put+0x43c>
 8012eec:	2401501c 	.word	0x2401501c
 8012ef0:	240150b4 	.word	0x240150b4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	699b      	ldr	r3, [r3, #24]
 8012ef8:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	691b      	ldr	r3, [r3, #16]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d10a      	bne.n	8012f18 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8012f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2220      	movs	r2, #32
 8012f16:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8012f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012f1e:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8012f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10a      	bne.n	8012f3c <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8012f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	631a      	str	r2, [r3, #48]	; 0x30
 8012f3a:	e016      	b.n	8012f6a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8012f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8012f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f4c:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8012f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8012f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012f60:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012f68:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8012f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f6c:	1c5a      	adds	r2, r3, #1
 8012f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2201      	movs	r2, #1
 8012f78:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012f7e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	69db      	ldr	r3, [r3, #28]
 8012f84:	1e5a      	subs	r2, r3, #1
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	69db      	ldr	r3, [r3, #28]
 8012f8e:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8012f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d103      	bne.n	8012f9e <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	619a      	str	r2, [r3, #24]
 8012f9c:	e00e      	b.n	8012fbc <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8012f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa2:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fa8:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8012faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fae:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8012fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012fb4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8012fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fba:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012fca:	4b2a      	ldr	r3, [pc, #168]	; (8013074 <_tx_mutex_put+0x448>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	4a28      	ldr	r2, [pc, #160]	; (8013074 <_tx_mutex_put+0x448>)
 8012fd2:	6013      	str	r3, [r2, #0]
 8012fd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012fd8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	f383 8810 	msr	PRIMASK, r3
}
 8012fe0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	d12d      	bne.n	8013046 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	69db      	ldr	r3, [r3, #28]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d01c      	beq.n	801302c <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fcaa 	bl	801294c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8012ffc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012ffe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013000:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013002:	b672      	cpsid	i
    return(int_posture);
 8013004:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8013006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	699b      	ldr	r3, [r3, #24]
 801300e:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8013010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013012:	2b00      	cmp	r3, #0
 8013014:	d003      	beq.n	801301e <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8013016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	629a      	str	r2, [r3, #40]	; 0x28
 801301e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013022:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	f383 8810 	msr	PRIMASK, r3
}
 801302a:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 801302c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013032:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013036:	429a      	cmp	r2, r3
 8013038:	d005      	beq.n	8013046 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801303a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801303e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013042:	f7ff fd35 	bl	8012ab0 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8013046:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013048:	f000 fca8 	bl	801399c <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 801304c:	2300      	movs	r3, #0
 801304e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013052:	e009      	b.n	8013068 <_tx_mutex_put+0x43c>
 8013054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013058:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f383 8810 	msr	PRIMASK, r3
}
 8013060:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8013062:	231e      	movs	r3, #30
 8013064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8013068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 801306c:	4618      	mov	r0, r3
 801306e:	3798      	adds	r7, #152	; 0x98
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}
 8013074:	240150b4 	.word	0x240150b4

08013078 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08e      	sub	sp, #56	; 0x38
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013082:	f3ef 8310 	mrs	r3, PRIMASK
 8013086:	623b      	str	r3, [r7, #32]
    return(posture);
 8013088:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801308a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801308c:	b672      	cpsid	i
    return(int_posture);
 801308e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8013090:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013096:	4a33      	ldr	r2, [pc, #204]	; (8013164 <_tx_semaphore_cleanup+0xec>)
 8013098:	4293      	cmp	r3, r2
 801309a:	d158      	bne.n	801314e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d152      	bne.n	801314e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ac:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d04c      	beq.n	801314e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80130b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a2b      	ldr	r2, [pc, #172]	; (8013168 <_tx_semaphore_cleanup+0xf0>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d147      	bne.n	801314e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	691b      	ldr	r3, [r3, #16]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d043      	beq.n	801314e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80130cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ce:	691b      	ldr	r3, [r3, #16]
 80130d0:	1e5a      	subs	r2, r3, #1
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80130d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d103      	bne.n	80130ea <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	2200      	movs	r2, #0
 80130e6:	60da      	str	r2, [r3, #12]
 80130e8:	e013      	b.n	8013112 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ee:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130f4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130fa:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013100:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8013102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	429a      	cmp	r2, r3
 801310a:	d102      	bne.n	8013112 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013110:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013116:	2b06      	cmp	r3, #6
 8013118:	d119      	bne.n	801314e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	220d      	movs	r2, #13
 801311e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013122:	4b12      	ldr	r3, [pc, #72]	; (801316c <_tx_semaphore_cleanup+0xf4>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	3301      	adds	r3, #1
 8013128:	4a10      	ldr	r2, [pc, #64]	; (801316c <_tx_semaphore_cleanup+0xf4>)
 801312a:	6013      	str	r3, [r2, #0]
 801312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	f383 8810 	msr	PRIMASK, r3
}
 8013136:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 fc2f 	bl	801399c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801313e:	f3ef 8310 	mrs	r3, PRIMASK
 8013142:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013144:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013146:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013148:	b672      	cpsid	i
    return(int_posture);
 801314a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801314c:	637b      	str	r3, [r7, #52]	; 0x34
 801314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013150:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f383 8810 	msr	PRIMASK, r3
}
 8013158:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801315a:	bf00      	nop
 801315c:	3738      	adds	r7, #56	; 0x38
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	08013079 	.word	0x08013079
 8013168:	53454d41 	.word	0x53454d41
 801316c:	240150b4 	.word	0x240150b4

08013170 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b08a      	sub	sp, #40	; 0x28
 8013174:	af00      	add	r7, sp, #0
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 801317c:	221c      	movs	r2, #28
 801317e:	2100      	movs	r1, #0
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f001 fd0b 	bl	8014b9c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	68ba      	ldr	r2, [r7, #8]
 801318a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013192:	f3ef 8310 	mrs	r3, PRIMASK
 8013196:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013198:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801319a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801319c:	b672      	cpsid	i
    return(int_posture);
 801319e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80131a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	4a18      	ldr	r2, [pc, #96]	; (8013208 <_tx_semaphore_create+0x98>)
 80131a6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80131a8:	4b18      	ldr	r3, [pc, #96]	; (801320c <_tx_semaphore_create+0x9c>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d109      	bne.n	80131c4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80131b0:	4a17      	ldr	r2, [pc, #92]	; (8013210 <_tx_semaphore_create+0xa0>)
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	619a      	str	r2, [r3, #24]
 80131c2:	e011      	b.n	80131e8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80131c4:	4b12      	ldr	r3, [pc, #72]	; (8013210 <_tx_semaphore_create+0xa0>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80131ca:	6a3b      	ldr	r3, [r7, #32]
 80131cc:	699b      	ldr	r3, [r3, #24]
 80131ce:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80131d0:	6a3b      	ldr	r3, [r7, #32]
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	69fa      	ldr	r2, [r7, #28]
 80131e0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	6a3a      	ldr	r2, [r7, #32]
 80131e6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80131e8:	4b08      	ldr	r3, [pc, #32]	; (801320c <_tx_semaphore_create+0x9c>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	3301      	adds	r3, #1
 80131ee:	4a07      	ldr	r2, [pc, #28]	; (801320c <_tx_semaphore_create+0x9c>)
 80131f0:	6013      	str	r3, [r2, #0]
 80131f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	f383 8810 	msr	PRIMASK, r3
}
 80131fc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80131fe:	2300      	movs	r3, #0
}
 8013200:	4618      	mov	r0, r3
 8013202:	3728      	adds	r7, #40	; 0x28
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	53454d41 	.word	0x53454d41
 801320c:	24014fe8 	.word	0x24014fe8
 8013210:	24014fe4 	.word	0x24014fe4

08013214 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b092      	sub	sp, #72	; 0x48
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801321c:	f3ef 8310 	mrs	r3, PRIMASK
 8013220:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013224:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013226:	b672      	cpsid	i
    return(int_posture);
 8013228:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801322a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8013232:	4b3d      	ldr	r3, [pc, #244]	; (8013328 <_tx_semaphore_delete+0x114>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	3b01      	subs	r3, #1
 8013238:	4a3b      	ldr	r2, [pc, #236]	; (8013328 <_tx_semaphore_delete+0x114>)
 801323a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801323c:	4b3a      	ldr	r3, [pc, #232]	; (8013328 <_tx_semaphore_delete+0x114>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d103      	bne.n	801324c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8013244:	4b39      	ldr	r3, [pc, #228]	; (801332c <_tx_semaphore_delete+0x118>)
 8013246:	2200      	movs	r2, #0
 8013248:	601a      	str	r2, [r3, #0]
 801324a:	e013      	b.n	8013274 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	695b      	ldr	r3, [r3, #20]
 8013250:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	699b      	ldr	r3, [r3, #24]
 8013256:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8013258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801325c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013262:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8013264:	4b31      	ldr	r3, [pc, #196]	; (801332c <_tx_semaphore_delete+0x118>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	429a      	cmp	r2, r3
 801326c:	d102      	bne.n	8013274 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801326e:	4a2f      	ldr	r2, [pc, #188]	; (801332c <_tx_semaphore_delete+0x118>)
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013274:	4b2e      	ldr	r3, [pc, #184]	; (8013330 <_tx_semaphore_delete+0x11c>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	3301      	adds	r3, #1
 801327a:	4a2d      	ldr	r2, [pc, #180]	; (8013330 <_tx_semaphore_delete+0x11c>)
 801327c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2200      	movs	r2, #0
 8013288:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	691b      	ldr	r3, [r3, #16]
 801328e:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	611a      	str	r2, [r3, #16]
 8013296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013298:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329c:	f383 8810 	msr	PRIMASK, r3
}
 80132a0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80132a2:	e024      	b.n	80132ee <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80132a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a6:	3b01      	subs	r3, #1
 80132a8:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132aa:	f3ef 8310 	mrs	r3, PRIMASK
 80132ae:	61fb      	str	r3, [r7, #28]
    return(posture);
 80132b0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80132b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132b4:	b672      	cpsid	i
    return(int_posture);
 80132b6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80132b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80132ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132bc:	2200      	movs	r2, #0
 80132be:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80132c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c2:	2201      	movs	r2, #1
 80132c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80132c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132cc:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80132ce:	4b18      	ldr	r3, [pc, #96]	; (8013330 <_tx_semaphore_delete+0x11c>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3301      	adds	r3, #1
 80132d4:	4a16      	ldr	r2, [pc, #88]	; (8013330 <_tx_semaphore_delete+0x11c>)
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132dc:	6a3b      	ldr	r3, [r7, #32]
 80132de:	f383 8810 	msr	PRIMASK, r3
}
 80132e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80132e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80132e6:	f000 fb59 	bl	801399c <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80132ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ec:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80132ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1d7      	bne.n	80132a4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132f4:	f3ef 8310 	mrs	r3, PRIMASK
 80132f8:	613b      	str	r3, [r7, #16]
    return(posture);
 80132fa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80132fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132fe:	b672      	cpsid	i
    return(int_posture);
 8013300:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013302:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013304:	4b0a      	ldr	r3, [pc, #40]	; (8013330 <_tx_semaphore_delete+0x11c>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	3b01      	subs	r3, #1
 801330a:	4a09      	ldr	r2, [pc, #36]	; (8013330 <_tx_semaphore_delete+0x11c>)
 801330c:	6013      	str	r3, [r2, #0]
 801330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013310:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	f383 8810 	msr	PRIMASK, r3
}
 8013318:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801331a:	f000 fb05 	bl	8013928 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801331e:	2300      	movs	r3, #0
}
 8013320:	4618      	mov	r0, r3
 8013322:	3748      	adds	r7, #72	; 0x48
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	24014fe8 	.word	0x24014fe8
 801332c:	24014fe4 	.word	0x24014fe4
 8013330:	240150b4 	.word	0x240150b4

08013334 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b08e      	sub	sp, #56	; 0x38
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801333e:	2300      	movs	r3, #0
 8013340:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013342:	f3ef 8310 	mrs	r3, PRIMASK
 8013346:	623b      	str	r3, [r7, #32]
    return(posture);
 8013348:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801334a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801334c:	b672      	cpsid	i
    return(int_posture);
 801334e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8013350:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	689b      	ldr	r3, [r3, #8]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00a      	beq.n	8013370 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	689b      	ldr	r3, [r3, #8]
 801335e:	1e5a      	subs	r2, r3, #1
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	609a      	str	r2, [r3, #8]
 8013364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013366:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	f383 8810 	msr	PRIMASK, r3
}
 801336e:	e068      	b.n	8013442 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d05d      	beq.n	8013432 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013376:	4b35      	ldr	r3, [pc, #212]	; (801344c <_tx_semaphore_get+0x118>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d008      	beq.n	8013390 <_tx_semaphore_get+0x5c>
 801337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013380:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	f383 8810 	msr	PRIMASK, r3
}
 8013388:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801338a:	230d      	movs	r3, #13
 801338c:	637b      	str	r3, [r7, #52]	; 0x34
 801338e:	e058      	b.n	8013442 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013390:	4b2f      	ldr	r3, [pc, #188]	; (8013450 <_tx_semaphore_get+0x11c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8013396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013398:	4a2e      	ldr	r2, [pc, #184]	; (8013454 <_tx_semaphore_get+0x120>)
 801339a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 801339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80133a8:	1c5a      	adds	r2, r3, #1
 80133aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	691b      	ldr	r3, [r3, #16]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d109      	bne.n	80133cc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133bc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80133be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133c2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80133c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133c8:	675a      	str	r2, [r3, #116]	; 0x74
 80133ca:	e011      	b.n	80133f0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80133d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133d6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80133d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133dc:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80133de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133e2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80133e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133e8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80133ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133ee:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	1c5a      	adds	r2, r3, #1
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80133fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fc:	2206      	movs	r2, #6
 80133fe:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013402:	2201      	movs	r2, #1
 8013404:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013408:	683a      	ldr	r2, [r7, #0]
 801340a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801340c:	4b0f      	ldr	r3, [pc, #60]	; (801344c <_tx_semaphore_get+0x118>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	3301      	adds	r3, #1
 8013412:	4a0e      	ldr	r2, [pc, #56]	; (801344c <_tx_semaphore_get+0x118>)
 8013414:	6013      	str	r3, [r2, #0]
 8013416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013418:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	f383 8810 	msr	PRIMASK, r3
}
 8013420:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013424:	f000 fbba 	bl	8013b9c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801342e:	637b      	str	r3, [r7, #52]	; 0x34
 8013430:	e007      	b.n	8013442 <_tx_semaphore_get+0x10e>
 8013432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013434:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f383 8810 	msr	PRIMASK, r3
}
 801343c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801343e:	230d      	movs	r3, #13
 8013440:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8013442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013444:	4618      	mov	r0, r3
 8013446:	3738      	adds	r7, #56	; 0x38
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	240150b4 	.word	0x240150b4
 8013450:	2401501c 	.word	0x2401501c
 8013454:	08013079 	.word	0x08013079

08013458 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b08c      	sub	sp, #48	; 0x30
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013460:	f3ef 8310 	mrs	r3, PRIMASK
 8013464:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013466:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013468:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801346a:	b672      	cpsid	i
    return(int_posture);
 801346c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801346e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	691b      	ldr	r3, [r3, #16]
 8013474:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013478:	2b00      	cmp	r3, #0
 801347a:	d10a      	bne.n	8013492 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	1c5a      	adds	r2, r3, #1
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	609a      	str	r2, [r3, #8]
 8013486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013488:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	f383 8810 	msr	PRIMASK, r3
}
 8013490:	e033      	b.n	80134fa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349a:	3b01      	subs	r3, #1
 801349c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d103      	bne.n	80134ac <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2200      	movs	r2, #0
 80134a8:	60da      	str	r2, [r3, #12]
 80134aa:	e00e      	b.n	80134ca <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6a3a      	ldr	r2, [r7, #32]
 80134b6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134bc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	69fa      	ldr	r2, [r7, #28]
 80134c2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	6a3a      	ldr	r2, [r7, #32]
 80134c8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134ce:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	2200      	movs	r2, #0
 80134d4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80134d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d8:	2200      	movs	r2, #0
 80134da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80134de:	4b09      	ldr	r3, [pc, #36]	; (8013504 <_tx_semaphore_put+0xac>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	3301      	adds	r3, #1
 80134e4:	4a07      	ldr	r2, [pc, #28]	; (8013504 <_tx_semaphore_put+0xac>)
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f383 8810 	msr	PRIMASK, r3
}
 80134f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80134f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134f6:	f000 fa51 	bl	801399c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3730      	adds	r7, #48	; 0x30
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	240150b4 	.word	0x240150b4

08013508 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b092      	sub	sp, #72	; 0x48
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8013516:	2300      	movs	r3, #0
 8013518:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801351a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801351c:	21ef      	movs	r1, #239	; 0xef
 801351e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013520:	f001 fb3c 	bl	8014b9c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8013524:	22b0      	movs	r2, #176	; 0xb0
 8013526:	2100      	movs	r1, #0
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f001 fb37 	bl	8014b9c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	68ba      	ldr	r2, [r7, #8]
 8013532:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	683a      	ldr	r2, [r7, #0]
 801353e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013544:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801354a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013550:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801355e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013564:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2220      	movs	r2, #32
 801356a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013570:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8013572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013574:	3b01      	subs	r3, #1
 8013576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013578:	4413      	add	r3, r2
 801357a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013580:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8013582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013586:	429a      	cmp	r2, r3
 8013588:	d007      	beq.n	801359a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	2200      	movs	r2, #0
 801358e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8013598:	e006      	b.n	80135a8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801359e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80135a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2203      	movs	r2, #3
 80135ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	4a48      	ldr	r2, [pc, #288]	; (80136d4 <_tx_thread_create+0x1cc>)
 80135b2:	655a      	str	r2, [r3, #84]	; 0x54
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80135ba:	4947      	ldr	r1, [pc, #284]	; (80136d8 <_tx_thread_create+0x1d0>)
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f7ec ff2f 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135c2:	f3ef 8310 	mrs	r3, PRIMASK
 80135c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80135c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80135ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80135cc:	b672      	cpsid	i
    return(int_posture);
 80135ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80135d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	4a41      	ldr	r2, [pc, #260]	; (80136dc <_tx_thread_create+0x1d4>)
 80135d6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80135d8:	4b41      	ldr	r3, [pc, #260]	; (80136e0 <_tx_thread_create+0x1d8>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d10b      	bne.n	80135f8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80135e0:	4a40      	ldr	r2, [pc, #256]	; (80136e4 <_tx_thread_create+0x1dc>)
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80135f6:	e016      	b.n	8013626 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80135f8:	4b3a      	ldr	r3, [pc, #232]	; (80136e4 <_tx_thread_create+0x1dc>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80135fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013604:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8013606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013608:	68fa      	ldr	r2, [r7, #12]
 801360a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	68fa      	ldr	r2, [r7, #12]
 8013612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801361a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8013626:	4b2e      	ldr	r3, [pc, #184]	; (80136e0 <_tx_thread_create+0x1d8>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	3301      	adds	r3, #1
 801362c:	4a2c      	ldr	r2, [pc, #176]	; (80136e0 <_tx_thread_create+0x1d8>)
 801362e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013630:	4b2d      	ldr	r3, [pc, #180]	; (80136e8 <_tx_thread_create+0x1e0>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	3301      	adds	r3, #1
 8013636:	4a2c      	ldr	r2, [pc, #176]	; (80136e8 <_tx_thread_create+0x1e0>)
 8013638:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363c:	2b01      	cmp	r3, #1
 801363e:	d129      	bne.n	8013694 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013640:	f3ef 8305 	mrs	r3, IPSR
 8013644:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8013646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8013648:	4b28      	ldr	r3, [pc, #160]	; (80136ec <_tx_thread_create+0x1e4>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4313      	orrs	r3, r2
 801364e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013652:	d30d      	bcc.n	8013670 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8013654:	4b26      	ldr	r3, [pc, #152]	; (80136f0 <_tx_thread_create+0x1e8>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801365c:	2b00      	cmp	r3, #0
 801365e:	d009      	beq.n	8013674 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8013660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013664:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8013666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801366c:	63da      	str	r2, [r3, #60]	; 0x3c
 801366e:	e001      	b.n	8013674 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8013670:	2300      	movs	r3, #0
 8013672:	647b      	str	r3, [r7, #68]	; 0x44
 8013674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013676:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013678:	6a3b      	ldr	r3, [r7, #32]
 801367a:	f383 8810 	msr	PRIMASK, r3
}
 801367e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 f98b 	bl	801399c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8013686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013688:	2b00      	cmp	r3, #0
 801368a:	d01e      	beq.n	80136ca <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801368c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801368e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013690:	63da      	str	r2, [r3, #60]	; 0x3c
 8013692:	e01a      	b.n	80136ca <_tx_thread_create+0x1c2>
 8013694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013696:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	f383 8810 	msr	PRIMASK, r3
}
 801369e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136a0:	f3ef 8310 	mrs	r3, PRIMASK
 80136a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80136a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80136a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80136aa:	b672      	cpsid	i
    return(int_posture);
 80136ac:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80136ae:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80136b0:	4b0d      	ldr	r3, [pc, #52]	; (80136e8 <_tx_thread_create+0x1e0>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	3b01      	subs	r3, #1
 80136b6:	4a0c      	ldr	r2, [pc, #48]	; (80136e8 <_tx_thread_create+0x1e0>)
 80136b8:	6013      	str	r3, [r2, #0]
 80136ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136be:	69fb      	ldr	r3, [r7, #28]
 80136c0:	f383 8810 	msr	PRIMASK, r3
}
 80136c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80136c6:	f000 f92f 	bl	8013928 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80136ca:	2300      	movs	r3, #0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3748      	adds	r7, #72	; 0x48
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	08013e71 	.word	0x08013e71
 80136d8:	08013891 	.word	0x08013891
 80136dc:	54485244 	.word	0x54485244
 80136e0:	24015028 	.word	0x24015028
 80136e4:	24015024 	.word	0x24015024
 80136e8:	240150b4 	.word	0x240150b4
 80136ec:	24000070 	.word	0x24000070
 80136f0:	24015020 	.word	0x24015020

080136f4 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b087      	sub	sp, #28
 80136f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136fa:	f3ef 8310 	mrs	r3, PRIMASK
 80136fe:	60bb      	str	r3, [r7, #8]
    return(posture);
 8013700:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8013702:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013704:	b672      	cpsid	i
    return(int_posture);
 8013706:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013708:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801370a:	4b08      	ldr	r3, [pc, #32]	; (801372c <_tx_thread_identify+0x38>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	613b      	str	r3, [r7, #16]
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f383 8810 	msr	PRIMASK, r3
}
 801371a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 801371c:	693b      	ldr	r3, [r7, #16]
}
 801371e:	4618      	mov	r0, r3
 8013720:	371c      	adds	r7, #28
 8013722:	46bd      	mov	sp, r7
 8013724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop
 801372c:	2401501c 	.word	0x2401501c

08013730 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8013734:	4b12      	ldr	r3, [pc, #72]	; (8013780 <_tx_thread_initialize+0x50>)
 8013736:	2200      	movs	r2, #0
 8013738:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801373a:	4b12      	ldr	r3, [pc, #72]	; (8013784 <_tx_thread_initialize+0x54>)
 801373c:	2200      	movs	r2, #0
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	4b11      	ldr	r3, [pc, #68]	; (8013788 <_tx_thread_initialize+0x58>)
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013746:	4b11      	ldr	r3, [pc, #68]	; (801378c <_tx_thread_initialize+0x5c>)
 8013748:	2220      	movs	r2, #32
 801374a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801374c:	2280      	movs	r2, #128	; 0x80
 801374e:	2100      	movs	r1, #0
 8013750:	480f      	ldr	r0, [pc, #60]	; (8013790 <_tx_thread_initialize+0x60>)
 8013752:	f001 fa23 	bl	8014b9c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8013756:	4b0f      	ldr	r3, [pc, #60]	; (8013794 <_tx_thread_initialize+0x64>)
 8013758:	2200      	movs	r2, #0
 801375a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801375c:	4b0e      	ldr	r3, [pc, #56]	; (8013798 <_tx_thread_initialize+0x68>)
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8013762:	4b0e      	ldr	r3, [pc, #56]	; (801379c <_tx_thread_initialize+0x6c>)
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8013768:	4b0d      	ldr	r3, [pc, #52]	; (80137a0 <_tx_thread_initialize+0x70>)
 801376a:	2200      	movs	r2, #0
 801376c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801376e:	4b0d      	ldr	r3, [pc, #52]	; (80137a4 <_tx_thread_initialize+0x74>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8013776:	4a0b      	ldr	r2, [pc, #44]	; (80137a4 <_tx_thread_initialize+0x74>)
 8013778:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801377a:	bf00      	nop
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	2401501c 	.word	0x2401501c
 8013784:	24015020 	.word	0x24015020
 8013788:	2401502c 	.word	0x2401502c
 801378c:	24015030 	.word	0x24015030
 8013790:	24015034 	.word	0x24015034
 8013794:	24015024 	.word	0x24015024
 8013798:	24015028 	.word	0x24015028
 801379c:	240150b4 	.word	0x240150b4
 80137a0:	240150b8 	.word	0x240150b8
 80137a4:	240150bc 	.word	0x240150bc

080137a8 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b08c      	sub	sp, #48	; 0x30
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80137b4:	2300      	movs	r3, #0
 80137b6:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80137be:	68ba      	ldr	r2, [r7, #8]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d004      	beq.n	80137ce <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 80137ca:	2300      	movs	r3, #0
 80137cc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137ce:	f3ef 8310 	mrs	r3, PRIMASK
 80137d2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80137d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80137d8:	b672      	cpsid	i
    return(int_posture);
 80137da:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80137dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d902      	bls.n	80137f0 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80137ea:	2318      	movs	r3, #24
 80137ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80137ee:	e03e      	b.n	801386e <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	68ba      	ldr	r2, [r7, #8]
 80137fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	429a      	cmp	r2, r3
 801380c:	d203      	bcs.n	8013816 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	63da      	str	r2, [r3, #60]	; 0x3c
 8013814:	e004      	b.n	8013820 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013824:	4b17      	ldr	r3, [pc, #92]	; (8013884 <_tx_thread_preemption_change+0xdc>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	429a      	cmp	r2, r3
 801382a:	d920      	bls.n	801386e <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 801382c:	4b15      	ldr	r3, [pc, #84]	; (8013884 <_tx_thread_preemption_change+0xdc>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	429a      	cmp	r2, r3
 8013834:	d91b      	bls.n	801386e <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8013836:	4b14      	ldr	r3, [pc, #80]	; (8013888 <_tx_thread_preemption_change+0xe0>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	429a      	cmp	r2, r3
 801383e:	d116      	bne.n	801386e <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013840:	4b10      	ldr	r3, [pc, #64]	; (8013884 <_tx_thread_preemption_change+0xdc>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	4a11      	ldr	r2, [pc, #68]	; (801388c <_tx_thread_preemption_change+0xe4>)
 8013846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801384a:	4a0f      	ldr	r2, [pc, #60]	; (8013888 <_tx_thread_preemption_change+0xe0>)
 801384c:	6013      	str	r3, [r2, #0]
 801384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013850:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	f383 8810 	msr	PRIMASK, r3
}
 8013858:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 801385a:	f000 f865 	bl	8013928 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801385e:	f3ef 8310 	mrs	r3, PRIMASK
 8013862:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013864:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013866:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013868:	b672      	cpsid	i
    return(int_posture);
 801386a:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	f383 8810 	msr	PRIMASK, r3
}
 8013878:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801387c:	4618      	mov	r0, r3
 801387e:	3730      	adds	r7, #48	; 0x30
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	24015030 	.word	0x24015030
 8013888:	24015020 	.word	0x24015020
 801388c:	24015034 	.word	0x24015034

08013890 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b088      	sub	sp, #32
 8013894:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013896:	4b21      	ldr	r3, [pc, #132]	; (801391c <_tx_thread_shell_entry+0x8c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138a0:	69fa      	ldr	r2, [r7, #28]
 80138a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80138a4:	4610      	mov	r0, r2
 80138a6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80138a8:	4b1d      	ldr	r3, [pc, #116]	; (8013920 <_tx_thread_shell_entry+0x90>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d003      	beq.n	80138b8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80138b0:	4b1b      	ldr	r3, [pc, #108]	; (8013920 <_tx_thread_shell_entry+0x90>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	69f8      	ldr	r0, [r7, #28]
 80138b6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138b8:	f3ef 8310 	mrs	r3, PRIMASK
 80138bc:	607b      	str	r3, [r7, #4]
    return(posture);
 80138be:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80138c0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80138c2:	b672      	cpsid	i
    return(int_posture);
 80138c4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80138c6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	2201      	movs	r2, #1
 80138cc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2201      	movs	r2, #1
 80138d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	2200      	movs	r2, #0
 80138d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80138da:	4b12      	ldr	r3, [pc, #72]	; (8013924 <_tx_thread_shell_entry+0x94>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	3301      	adds	r3, #1
 80138e0:	4a10      	ldr	r2, [pc, #64]	; (8013924 <_tx_thread_shell_entry+0x94>)
 80138e2:	6013      	str	r3, [r2, #0]
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	f383 8810 	msr	PRIMASK, r3
}
 80138ee:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80138f0:	f3ef 8314 	mrs	r3, CONTROL
 80138f4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80138f6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80138f8:	617b      	str	r3, [r7, #20]
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	f023 0304 	bic.w	r3, r3, #4
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	f383 8814 	msr	CONTROL, r3
}
 801390c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801390e:	69f8      	ldr	r0, [r7, #28]
 8013910:	f000 f944 	bl	8013b9c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8013914:	bf00      	nop
 8013916:	3720      	adds	r7, #32
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	2401501c 	.word	0x2401501c
 8013920:	240150b8 	.word	0x240150b8
 8013924:	240150b4 	.word	0x240150b4

08013928 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8013928:	b480      	push	{r7}
 801392a:	b089      	sub	sp, #36	; 0x24
 801392c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801392e:	4b17      	ldr	r3, [pc, #92]	; (801398c <_tx_thread_system_preempt_check+0x64>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d121      	bne.n	801397e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801393a:	4b15      	ldr	r3, [pc, #84]	; (8013990 <_tx_thread_system_preempt_check+0x68>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8013940:	4b14      	ldr	r3, [pc, #80]	; (8013994 <_tx_thread_system_preempt_check+0x6c>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8013946:	69ba      	ldr	r2, [r7, #24]
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	429a      	cmp	r2, r3
 801394c:	d017      	beq.n	801397e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801394e:	4b12      	ldr	r3, [pc, #72]	; (8013998 <_tx_thread_system_preempt_check+0x70>)
 8013950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013954:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013956:	f3ef 8305 	mrs	r3, IPSR
 801395a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801395c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801395e:	2b00      	cmp	r3, #0
 8013960:	d10c      	bne.n	801397c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013962:	f3ef 8310 	mrs	r3, PRIMASK
 8013966:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013968:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801396a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801396c:	b662      	cpsie	i
}
 801396e:	bf00      	nop
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f383 8810 	msr	PRIMASK, r3
}
 801397a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 801397c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801397e:	bf00      	nop
 8013980:	3724      	adds	r7, #36	; 0x24
 8013982:	46bd      	mov	sp, r7
 8013984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013988:	4770      	bx	lr
 801398a:	bf00      	nop
 801398c:	240150b4 	.word	0x240150b4
 8013990:	2401501c 	.word	0x2401501c
 8013994:	24015020 	.word	0x24015020
 8013998:	e000ed04 	.word	0xe000ed04

0801399c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b096      	sub	sp, #88	; 0x58
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139a4:	f3ef 8310 	mrs	r3, PRIMASK
 80139a8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80139aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80139ac:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80139ae:	b672      	cpsid	i
    return(int_posture);
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80139b2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d005      	beq.n	80139c8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	334c      	adds	r3, #76	; 0x4c
 80139c0:	4618      	mov	r0, r3
 80139c2:	f000 fc13 	bl	80141ec <_tx_timer_system_deactivate>
 80139c6:	e002      	b.n	80139ce <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80139ce:	4b6c      	ldr	r3, [pc, #432]	; (8013b80 <_tx_thread_system_resume+0x1e4>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	3b01      	subs	r3, #1
 80139d4:	4a6a      	ldr	r2, [pc, #424]	; (8013b80 <_tx_thread_system_resume+0x1e4>)
 80139d6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f040 8083 	bne.w	8013ae8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f000 8097 	beq.w	8013b1a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d172      	bne.n	8013ada <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139fe:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8013a00:	4a60      	ldr	r2, [pc, #384]	; (8013b84 <_tx_thread_system_resume+0x1e8>)
 8013a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a08:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8013a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d154      	bne.n	8013aba <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8013a10:	495c      	ldr	r1, [pc, #368]	; (8013b84 <_tx_thread_system_resume+0x1e8>)
 8013a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8013a26:	2201      	movs	r2, #1
 8013a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a2e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8013a30:	4b55      	ldr	r3, [pc, #340]	; (8013b88 <_tx_thread_system_resume+0x1ec>)
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a36:	4313      	orrs	r3, r2
 8013a38:	4a53      	ldr	r2, [pc, #332]	; (8013b88 <_tx_thread_system_resume+0x1ec>)
 8013a3a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8013a3c:	4b53      	ldr	r3, [pc, #332]	; (8013b8c <_tx_thread_system_resume+0x1f0>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d269      	bcs.n	8013b1a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8013a46:	4a51      	ldr	r2, [pc, #324]	; (8013b8c <_tx_thread_system_resume+0x1f0>)
 8013a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a4a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8013a4c:	4b50      	ldr	r3, [pc, #320]	; (8013b90 <_tx_thread_system_resume+0x1f4>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8013a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d103      	bne.n	8013a60 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8013a58:	4a4d      	ldr	r2, [pc, #308]	; (8013b90 <_tx_thread_system_resume+0x1f4>)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6013      	str	r3, [r2, #0]
 8013a5e:	e05c      	b.n	8013b1a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8013a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d257      	bcs.n	8013b1a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8013a6a:	4a49      	ldr	r2, [pc, #292]	; (8013b90 <_tx_thread_system_resume+0x1f4>)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6013      	str	r3, [r2, #0]
 8013a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a76:	f383 8810 	msr	PRIMASK, r3
}
 8013a7a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013a7c:	4b40      	ldr	r3, [pc, #256]	; (8013b80 <_tx_thread_system_resume+0x1e4>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8013a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d174      	bne.n	8013b72 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013a88:	4b42      	ldr	r3, [pc, #264]	; (8013b94 <_tx_thread_system_resume+0x1f8>)
 8013a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a8e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a90:	f3ef 8305 	mrs	r3, IPSR
 8013a94:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d10c      	bne.n	8013ab6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8013aa0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8013aa4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013aa6:	b662      	cpsie	i
}
 8013aa8:	bf00      	nop
 8013aaa:	6a3b      	ldr	r3, [r7, #32]
 8013aac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	f383 8810 	msr	PRIMASK, r3
}
 8013ab4:	bf00      	nop
}
 8013ab6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8013ab8:	e05b      	b.n	8013b72 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8013aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013abe:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8013ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8013ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ad0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013ad6:	621a      	str	r2, [r3, #32]
 8013ad8:	e01f      	b.n	8013b1a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2200      	movs	r2, #0
 8013ade:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2203      	movs	r2, #3
 8013ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8013ae6:	e018      	b.n	8013b1a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d014      	beq.n	8013b1a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013af4:	2b02      	cmp	r3, #2
 8013af6:	d010      	beq.n	8013b1a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d106      	bne.n	8013b0e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8013b0c:	e005      	b.n	8013b1a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2203      	movs	r2, #3
 8013b18:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013b1a:	4b1f      	ldr	r3, [pc, #124]	; (8013b98 <_tx_thread_system_resume+0x1fc>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b22:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	f383 8810 	msr	PRIMASK, r3
}
 8013b2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013b2c:	4b18      	ldr	r3, [pc, #96]	; (8013b90 <_tx_thread_system_resume+0x1f4>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d020      	beq.n	8013b78 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013b36:	4b12      	ldr	r3, [pc, #72]	; (8013b80 <_tx_thread_system_resume+0x1e4>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8013b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d11a      	bne.n	8013b78 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013b42:	4b14      	ldr	r3, [pc, #80]	; (8013b94 <_tx_thread_system_resume+0x1f8>)
 8013b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b48:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b4a:	f3ef 8305 	mrs	r3, IPSR
 8013b4e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013b50:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d10f      	bne.n	8013b76 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b56:	f3ef 8310 	mrs	r3, PRIMASK
 8013b5a:	613b      	str	r3, [r7, #16]
    return(posture);
 8013b5c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8013b5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013b60:	b662      	cpsie	i
}
 8013b62:	bf00      	nop
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	f383 8810 	msr	PRIMASK, r3
}
 8013b6e:	bf00      	nop
}
 8013b70:	e001      	b.n	8013b76 <_tx_thread_system_resume+0x1da>
                                return;
 8013b72:	bf00      	nop
 8013b74:	e000      	b.n	8013b78 <_tx_thread_system_resume+0x1dc>
 8013b76:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8013b78:	3758      	adds	r7, #88	; 0x58
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	240150b4 	.word	0x240150b4
 8013b84:	24015034 	.word	0x24015034
 8013b88:	2401502c 	.word	0x2401502c
 8013b8c:	24015030 	.word	0x24015030
 8013b90:	24015020 	.word	0x24015020
 8013b94:	e000ed04 	.word	0xe000ed04
 8013b98:	2401501c 	.word	0x2401501c

08013b9c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b09e      	sub	sp, #120	; 0x78
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013ba4:	4b81      	ldr	r3, [pc, #516]	; (8013dac <_tx_thread_system_suspend+0x210>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013baa:	f3ef 8310 	mrs	r3, PRIMASK
 8013bae:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8013bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8013bb2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8013bb4:	b672      	cpsid	i
    return(int_posture);
 8013bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013bb8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d112      	bne.n	8013be8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bc6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8013bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d008      	beq.n	8013be0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8013bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bd4:	d004      	beq.n	8013be0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	334c      	adds	r3, #76	; 0x4c
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f000 faa4 	bl	8014128 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	69db      	ldr	r3, [r3, #28]
 8013be4:	4a72      	ldr	r2, [pc, #456]	; (8013db0 <_tx_thread_system_suspend+0x214>)
 8013be6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8013be8:	4b72      	ldr	r3, [pc, #456]	; (8013db4 <_tx_thread_system_suspend+0x218>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	3b01      	subs	r3, #1
 8013bee:	4a71      	ldr	r2, [pc, #452]	; (8013db4 <_tx_thread_system_suspend+0x218>)
 8013bf0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	f040 80a6 	bne.w	8013d48 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c06:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6a1b      	ldr	r3, [r3, #32]
 8013c0c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8013c0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d015      	beq.n	8013c42 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c1a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8013c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013c20:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8013c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c26:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8013c28:	4a63      	ldr	r2, [pc, #396]	; (8013db8 <_tx_thread_system_suspend+0x21c>)
 8013c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d157      	bne.n	8013ce6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8013c36:	4960      	ldr	r1, [pc, #384]	; (8013db8 <_tx_thread_system_suspend+0x21c>)
 8013c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013c40:	e051      	b.n	8013ce6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8013c42:	4a5d      	ldr	r2, [pc, #372]	; (8013db8 <_tx_thread_system_suspend+0x21c>)
 8013c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c46:	2100      	movs	r1, #0
 8013c48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c50:	fa02 f303 	lsl.w	r3, r2, r3
 8013c54:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8013c56:	4b59      	ldr	r3, [pc, #356]	; (8013dbc <_tx_thread_system_suspend+0x220>)
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c5c:	43db      	mvns	r3, r3
 8013c5e:	4013      	ands	r3, r2
 8013c60:	4a56      	ldr	r2, [pc, #344]	; (8013dbc <_tx_thread_system_suspend+0x220>)
 8013c62:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8013c64:	2300      	movs	r3, #0
 8013c66:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8013c68:	4b54      	ldr	r3, [pc, #336]	; (8013dbc <_tx_thread_system_suspend+0x220>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8013c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d12b      	bne.n	8013ccc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013c74:	4b52      	ldr	r3, [pc, #328]	; (8013dc0 <_tx_thread_system_suspend+0x224>)
 8013c76:	2220      	movs	r2, #32
 8013c78:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8013c7a:	4b52      	ldr	r3, [pc, #328]	; (8013dc4 <_tx_thread_system_suspend+0x228>)
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c82:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c86:	f383 8810 	msr	PRIMASK, r3
}
 8013c8a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013c8c:	4b49      	ldr	r3, [pc, #292]	; (8013db4 <_tx_thread_system_suspend+0x218>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8013c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f040 8081 	bne.w	8013d9c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013c9a:	4b4b      	ldr	r3, [pc, #300]	; (8013dc8 <_tx_thread_system_suspend+0x22c>)
 8013c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ca0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ca2:	f3ef 8305 	mrs	r3, IPSR
 8013ca6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8013ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d10c      	bne.n	8013cc8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cae:	f3ef 8310 	mrs	r3, PRIMASK
 8013cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8013cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8013cb6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013cb8:	b662      	cpsie	i
}
 8013cba:	bf00      	nop
 8013cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cbe:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cc2:	f383 8810 	msr	PRIMASK, r3
}
 8013cc6:	bf00      	nop
}
 8013cc8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8013cca:	e067      	b.n	8013d9c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8013ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cce:	fa93 f3a3 	rbit	r3, r3
 8013cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8013cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cd6:	fab3 f383 	clz	r3, r3
 8013cda:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8013cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ce0:	4413      	add	r3, r2
 8013ce2:	4a37      	ldr	r2, [pc, #220]	; (8013dc0 <_tx_thread_system_suspend+0x224>)
 8013ce4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8013ce6:	4b37      	ldr	r3, [pc, #220]	; (8013dc4 <_tx_thread_system_suspend+0x228>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d12b      	bne.n	8013d48 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013cf0:	4b33      	ldr	r3, [pc, #204]	; (8013dc0 <_tx_thread_system_suspend+0x224>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	4a30      	ldr	r2, [pc, #192]	; (8013db8 <_tx_thread_system_suspend+0x21c>)
 8013cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cfa:	4a32      	ldr	r2, [pc, #200]	; (8013dc4 <_tx_thread_system_suspend+0x228>)
 8013cfc:	6013      	str	r3, [r2, #0]
 8013cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d00:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d04:	f383 8810 	msr	PRIMASK, r3
}
 8013d08:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013d0a:	4b2a      	ldr	r3, [pc, #168]	; (8013db4 <_tx_thread_system_suspend+0x218>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8013d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d144      	bne.n	8013da0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013d16:	4b2c      	ldr	r3, [pc, #176]	; (8013dc8 <_tx_thread_system_suspend+0x22c>)
 8013d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d1c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d1e:	f3ef 8305 	mrs	r3, IPSR
 8013d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8013d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d10c      	bne.n	8013d44 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8013d32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013d34:	b662      	cpsie	i
}
 8013d36:	bf00      	nop
 8013d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d3c:	6a3b      	ldr	r3, [r7, #32]
 8013d3e:	f383 8810 	msr	PRIMASK, r3
}
 8013d42:	bf00      	nop
}
 8013d44:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8013d46:	e02b      	b.n	8013da0 <_tx_thread_system_suspend+0x204>
 8013d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	f383 8810 	msr	PRIMASK, r3
}
 8013d52:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8013d54:	4b1b      	ldr	r3, [pc, #108]	; (8013dc4 <_tx_thread_system_suspend+0x228>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d022      	beq.n	8013da4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8013d5e:	4b15      	ldr	r3, [pc, #84]	; (8013db4 <_tx_thread_system_suspend+0x218>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8013d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d11c      	bne.n	8013da4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8013d6a:	4b17      	ldr	r3, [pc, #92]	; (8013dc8 <_tx_thread_system_suspend+0x22c>)
 8013d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d72:	f3ef 8305 	mrs	r3, IPSR
 8013d76:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013d78:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d10c      	bne.n	8013d98 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013d82:	617b      	str	r3, [r7, #20]
    return(posture);
 8013d84:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8013d86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8013d88:	b662      	cpsie	i
}
 8013d8a:	bf00      	nop
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f383 8810 	msr	PRIMASK, r3
}
 8013d96:	bf00      	nop
}
 8013d98:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8013d9a:	e003      	b.n	8013da4 <_tx_thread_system_suspend+0x208>
                return;
 8013d9c:	bf00      	nop
 8013d9e:	e002      	b.n	8013da6 <_tx_thread_system_suspend+0x20a>
            return;
 8013da0:	bf00      	nop
 8013da2:	e000      	b.n	8013da6 <_tx_thread_system_suspend+0x20a>
    return;
 8013da4:	bf00      	nop
}
 8013da6:	3778      	adds	r7, #120	; 0x78
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	2401501c 	.word	0x2401501c
 8013db0:	24015620 	.word	0x24015620
 8013db4:	240150b4 	.word	0x240150b4
 8013db8:	24015034 	.word	0x24015034
 8013dbc:	2401502c 	.word	0x2401502c
 8013dc0:	24015030 	.word	0x24015030
 8013dc4:	24015020 	.word	0x24015020
 8013dc8:	e000ed04 	.word	0xe000ed04

08013dcc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b087      	sub	sp, #28
 8013dd0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013dd2:	4b21      	ldr	r3, [pc, #132]	; (8013e58 <_tx_thread_time_slice+0x8c>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8013ddc:	60fb      	str	r3, [r7, #12]
    return(posture);
 8013dde:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8013de0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013de2:	b672      	cpsid	i
    return(int_posture);
 8013de4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8013de6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013de8:	4b1c      	ldr	r3, [pc, #112]	; (8013e5c <_tx_thread_time_slice+0x90>)
 8013dea:	2200      	movs	r2, #0
 8013dec:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d024      	beq.n	8013e3e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d120      	bne.n	8013e3e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	69da      	ldr	r2, [r3, #28]
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	4a15      	ldr	r2, [pc, #84]	; (8013e60 <_tx_thread_time_slice+0x94>)
 8013e0a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	6a1b      	ldr	r3, [r3, #32]
 8013e10:	697a      	ldr	r2, [r7, #20]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d013      	beq.n	8013e3e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d10d      	bne.n	8013e3e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	6a12      	ldr	r2, [r2, #32]
 8013e2a:	490e      	ldr	r1, [pc, #56]	; (8013e64 <_tx_thread_time_slice+0x98>)
 8013e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013e30:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <_tx_thread_time_slice+0x9c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4a0b      	ldr	r2, [pc, #44]	; (8013e64 <_tx_thread_time_slice+0x98>)
 8013e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e3a:	4a0c      	ldr	r2, [pc, #48]	; (8013e6c <_tx_thread_time_slice+0xa0>)
 8013e3c:	6013      	str	r3, [r2, #0]
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f383 8810 	msr	PRIMASK, r3
}
 8013e48:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013e4a:	bf00      	nop
 8013e4c:	371c      	adds	r7, #28
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop
 8013e58:	2401501c 	.word	0x2401501c
 8013e5c:	240150c4 	.word	0x240150c4
 8013e60:	24015620 	.word	0x24015620
 8013e64:	24015034 	.word	0x24015034
 8013e68:	24015030 	.word	0x24015030
 8013e6c:	24015020 	.word	0x24015020

08013e70 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b08a      	sub	sp, #40	; 0x28
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e80:	617b      	str	r3, [r7, #20]
    return(posture);
 8013e82:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013e84:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e86:	b672      	cpsid	i
    return(int_posture);
 8013e88:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013e8a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e90:	2b04      	cmp	r3, #4
 8013e92:	d10e      	bne.n	8013eb2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8013e94:	4b13      	ldr	r3, [pc, #76]	; (8013ee4 <_tx_thread_timeout+0x74>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	4a12      	ldr	r2, [pc, #72]	; (8013ee4 <_tx_thread_timeout+0x74>)
 8013e9c:	6013      	str	r3, [r2, #0]
 8013e9e:	6a3b      	ldr	r3, [r7, #32]
 8013ea0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f383 8810 	msr	PRIMASK, r3
}
 8013ea8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013eac:	f7ff fd76 	bl	801399c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013eb0:	e013      	b.n	8013eda <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013eb6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013ebe:	61bb      	str	r3, [r7, #24]
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	f383 8810 	msr	PRIMASK, r3
}
 8013eca:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d003      	beq.n	8013eda <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	69b9      	ldr	r1, [r7, #24]
 8013ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ed8:	4798      	blx	r3
}
 8013eda:	bf00      	nop
 8013edc:	3728      	adds	r7, #40	; 0x28
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	240150b4 	.word	0x240150b4

08013ee8 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b087      	sub	sp, #28
 8013eec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013eee:	f3ef 8310 	mrs	r3, PRIMASK
 8013ef2:	60bb      	str	r3, [r7, #8]
    return(posture);
 8013ef4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8013ef6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ef8:	b672      	cpsid	i
    return(int_posture);
 8013efa:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8013efc:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8013efe:	4b08      	ldr	r3, [pc, #32]	; (8013f20 <_tx_time_get+0x38>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	613b      	str	r3, [r7, #16]
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	f383 8810 	msr	PRIMASK, r3
}
 8013f0e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8013f10:	693b      	ldr	r3, [r7, #16]
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	371c      	adds	r7, #28
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	240150c0 	.word	0x240150c0

08013f24 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08a      	sub	sp, #40	; 0x28
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8013f32:	222c      	movs	r2, #44	; 0x2c
 8013f34:	2100      	movs	r1, #0
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f000 fe30 	bl	8014b9c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f46:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f4c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	683a      	ldr	r2, [r7, #0]
 8013f58:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013f60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013f62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f64:	b672      	cpsid	i
    return(int_posture);
 8013f66:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8013f68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	4a1c      	ldr	r2, [pc, #112]	; (8013fe0 <_tx_timer_create+0xbc>)
 8013f6e:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8013f70:	4b1c      	ldr	r3, [pc, #112]	; (8013fe4 <_tx_timer_create+0xc0>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d109      	bne.n	8013f8c <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8013f78:	4a1b      	ldr	r2, [pc, #108]	; (8013fe8 <_tx_timer_create+0xc4>)
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	68fa      	ldr	r2, [r7, #12]
 8013f82:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	629a      	str	r2, [r3, #40]	; 0x28
 8013f8a:	e011      	b.n	8013fb0 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8013f8c:	4b16      	ldr	r3, [pc, #88]	; (8013fe8 <_tx_timer_create+0xc4>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8013f92:	6a3b      	ldr	r3, [r7, #32]
 8013f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f96:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8013f98:	6a3b      	ldr	r3, [r7, #32]
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6a3a      	ldr	r2, [r7, #32]
 8013fae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8013fb0:	4b0c      	ldr	r3, [pc, #48]	; (8013fe4 <_tx_timer_create+0xc0>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	4a0b      	ldr	r2, [pc, #44]	; (8013fe4 <_tx_timer_create+0xc0>)
 8013fb8:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8013fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d104      	bne.n	8013fca <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	3308      	adds	r3, #8
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f000 f8af 	bl	8014128 <_tx_timer_system_activate>
 8013fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	f383 8810 	msr	PRIMASK, r3
}
 8013fd4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013fd6:	2300      	movs	r3, #0
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3728      	adds	r7, #40	; 0x28
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	4154494d 	.word	0x4154494d
 8013fe4:	2401515c 	.word	0x2401515c
 8013fe8:	24015158 	.word	0x24015158

08013fec <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ff6:	607b      	str	r3, [r7, #4]
    return(posture);
 8013ff8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013ffa:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ffc:	b672      	cpsid	i
    return(int_posture);
 8013ffe:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8014000:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8014002:	4b09      	ldr	r3, [pc, #36]	; (8014028 <_tx_timer_expiration_process+0x3c>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	3301      	adds	r3, #1
 8014008:	4a07      	ldr	r2, [pc, #28]	; (8014028 <_tx_timer_expiration_process+0x3c>)
 801400a:	6013      	str	r3, [r2, #0]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	f383 8810 	msr	PRIMASK, r3
}
 8014016:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8014018:	4804      	ldr	r0, [pc, #16]	; (801402c <_tx_timer_expiration_process+0x40>)
 801401a:	f7ff fcbf 	bl	801399c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801401e:	bf00      	nop
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	240150b4 	.word	0x240150b4
 801402c:	24015164 	.word	0x24015164

08014030 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8014030:	b590      	push	{r4, r7, lr}
 8014032:	b089      	sub	sp, #36	; 0x24
 8014034:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8014036:	4b28      	ldr	r3, [pc, #160]	; (80140d8 <_tx_timer_initialize+0xa8>)
 8014038:	2200      	movs	r2, #0
 801403a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801403c:	4b27      	ldr	r3, [pc, #156]	; (80140dc <_tx_timer_initialize+0xac>)
 801403e:	2200      	movs	r2, #0
 8014040:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8014042:	4b27      	ldr	r3, [pc, #156]	; (80140e0 <_tx_timer_initialize+0xb0>)
 8014044:	2200      	movs	r2, #0
 8014046:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8014048:	4b26      	ldr	r3, [pc, #152]	; (80140e4 <_tx_timer_initialize+0xb4>)
 801404a:	2200      	movs	r2, #0
 801404c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801404e:	4b26      	ldr	r3, [pc, #152]	; (80140e8 <_tx_timer_initialize+0xb8>)
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8014054:	2280      	movs	r2, #128	; 0x80
 8014056:	2100      	movs	r1, #0
 8014058:	4824      	ldr	r0, [pc, #144]	; (80140ec <_tx_timer_initialize+0xbc>)
 801405a:	f000 fd9f 	bl	8014b9c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801405e:	4b24      	ldr	r3, [pc, #144]	; (80140f0 <_tx_timer_initialize+0xc0>)
 8014060:	4a22      	ldr	r2, [pc, #136]	; (80140ec <_tx_timer_initialize+0xbc>)
 8014062:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8014064:	4b23      	ldr	r3, [pc, #140]	; (80140f4 <_tx_timer_initialize+0xc4>)
 8014066:	4a21      	ldr	r2, [pc, #132]	; (80140ec <_tx_timer_initialize+0xbc>)
 8014068:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801406a:	4b23      	ldr	r3, [pc, #140]	; (80140f8 <_tx_timer_initialize+0xc8>)
 801406c:	4a23      	ldr	r2, [pc, #140]	; (80140fc <_tx_timer_initialize+0xcc>)
 801406e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8014070:	4b21      	ldr	r3, [pc, #132]	; (80140f8 <_tx_timer_initialize+0xc8>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	3304      	adds	r3, #4
 8014076:	4a20      	ldr	r2, [pc, #128]	; (80140f8 <_tx_timer_initialize+0xc8>)
 8014078:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801407a:	4b21      	ldr	r3, [pc, #132]	; (8014100 <_tx_timer_initialize+0xd0>)
 801407c:	4a21      	ldr	r2, [pc, #132]	; (8014104 <_tx_timer_initialize+0xd4>)
 801407e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8014080:	4b21      	ldr	r3, [pc, #132]	; (8014108 <_tx_timer_initialize+0xd8>)
 8014082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014086:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8014088:	4b20      	ldr	r3, [pc, #128]	; (801410c <_tx_timer_initialize+0xdc>)
 801408a:	2200      	movs	r2, #0
 801408c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801408e:	4b1c      	ldr	r3, [pc, #112]	; (8014100 <_tx_timer_initialize+0xd0>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4a1d      	ldr	r2, [pc, #116]	; (8014108 <_tx_timer_initialize+0xd8>)
 8014094:	6812      	ldr	r2, [r2, #0]
 8014096:	491d      	ldr	r1, [pc, #116]	; (801410c <_tx_timer_initialize+0xdc>)
 8014098:	6809      	ldr	r1, [r1, #0]
 801409a:	481c      	ldr	r0, [pc, #112]	; (801410c <_tx_timer_initialize+0xdc>)
 801409c:	6800      	ldr	r0, [r0, #0]
 801409e:	2400      	movs	r4, #0
 80140a0:	9405      	str	r4, [sp, #20]
 80140a2:	2400      	movs	r4, #0
 80140a4:	9404      	str	r4, [sp, #16]
 80140a6:	9003      	str	r0, [sp, #12]
 80140a8:	9102      	str	r1, [sp, #8]
 80140aa:	9201      	str	r2, [sp, #4]
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	4b18      	ldr	r3, [pc, #96]	; (8014110 <_tx_timer_initialize+0xe0>)
 80140b0:	4a18      	ldr	r2, [pc, #96]	; (8014114 <_tx_timer_initialize+0xe4>)
 80140b2:	4919      	ldr	r1, [pc, #100]	; (8014118 <_tx_timer_initialize+0xe8>)
 80140b4:	4819      	ldr	r0, [pc, #100]	; (801411c <_tx_timer_initialize+0xec>)
 80140b6:	f7ff fa27 	bl	8013508 <_tx_thread_create>
 80140ba:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d1e5      	bne.n	801408e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80140c2:	4b17      	ldr	r3, [pc, #92]	; (8014120 <_tx_timer_initialize+0xf0>)
 80140c4:	2200      	movs	r2, #0
 80140c6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80140c8:	4b16      	ldr	r3, [pc, #88]	; (8014124 <_tx_timer_initialize+0xf4>)
 80140ca:	2200      	movs	r2, #0
 80140cc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80140ce:	bf00      	nop
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd90      	pop	{r4, r7, pc}
 80140d6:	bf00      	nop
 80140d8:	240150c0 	.word	0x240150c0
 80140dc:	24015620 	.word	0x24015620
 80140e0:	240150c4 	.word	0x240150c4
 80140e4:	24015154 	.word	0x24015154
 80140e8:	24015160 	.word	0x24015160
 80140ec:	240150c8 	.word	0x240150c8
 80140f0:	24015148 	.word	0x24015148
 80140f4:	24015150 	.word	0x24015150
 80140f8:	2401514c 	.word	0x2401514c
 80140fc:	24015144 	.word	0x24015144
 8014100:	24015214 	.word	0x24015214
 8014104:	24015220 	.word	0x24015220
 8014108:	24015218 	.word	0x24015218
 801410c:	2401521c 	.word	0x2401521c
 8014110:	4154494d 	.word	0x4154494d
 8014114:	0801425d 	.word	0x0801425d
 8014118:	08015f74 	.word	0x08015f74
 801411c:	24015164 	.word	0x24015164
 8014120:	24015158 	.word	0x24015158
 8014124:	2401515c 	.word	0x2401515c

08014128 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014128:	b480      	push	{r7}
 801412a:	b089      	sub	sp, #36	; 0x24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d04a      	beq.n	80141d2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014142:	d046      	beq.n	80141d2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	699b      	ldr	r3, [r3, #24]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d142      	bne.n	80141d2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	2b20      	cmp	r3, #32
 8014150:	d902      	bls.n	8014158 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8014152:	231f      	movs	r3, #31
 8014154:	61bb      	str	r3, [r7, #24]
 8014156:	e002      	b.n	801415e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	3b01      	subs	r3, #1
 801415c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801415e:	4b20      	ldr	r3, [pc, #128]	; (80141e0 <_tx_timer_system_activate+0xb8>)
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801416a:	4b1e      	ldr	r3, [pc, #120]	; (80141e4 <_tx_timer_system_activate+0xbc>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	69fa      	ldr	r2, [r7, #28]
 8014170:	429a      	cmp	r2, r3
 8014172:	d30b      	bcc.n	801418c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8014174:	4b1b      	ldr	r3, [pc, #108]	; (80141e4 <_tx_timer_system_activate+0xbc>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	69fa      	ldr	r2, [r7, #28]
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	109b      	asrs	r3, r3, #2
 801417e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8014180:	4b19      	ldr	r3, [pc, #100]	; (80141e8 <_tx_timer_system_activate+0xc0>)
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4413      	add	r3, r2
 801418a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d109      	bne.n	80141a8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	687a      	ldr	r2, [r7, #4]
 801419e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	601a      	str	r2, [r3, #0]
 80141a6:	e011      	b.n	80141cc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	695b      	ldr	r3, [r3, #20]
 80141b2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	68ba      	ldr	r2, [r7, #8]
 80141ca:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	69fa      	ldr	r2, [r7, #28]
 80141d0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80141d2:	bf00      	nop
 80141d4:	3724      	adds	r7, #36	; 0x24
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	24015150 	.word	0x24015150
 80141e4:	2401514c 	.word	0x2401514c
 80141e8:	24015148 	.word	0x24015148

080141ec <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b087      	sub	sp, #28
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	699b      	ldr	r3, [r3, #24]
 80141f8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d026      	beq.n	801424e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	693b      	ldr	r3, [r7, #16]
 801420a:	429a      	cmp	r2, r3
 801420c:	d108      	bne.n	8014220 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	429a      	cmp	r2, r3
 8014216:	d117      	bne.n	8014248 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	2200      	movs	r2, #0
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	e013      	b.n	8014248 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	695b      	ldr	r3, [r3, #20]
 8014224:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	693a      	ldr	r2, [r7, #16]
 8014230:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	429a      	cmp	r2, r3
 801423a:	d105      	bne.n	8014248 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	697a      	ldr	r2, [r7, #20]
 8014240:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	693a      	ldr	r2, [r7, #16]
 8014246:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	619a      	str	r2, [r3, #24]
    }
}
 801424e:	bf00      	nop
 8014250:	371c      	adds	r7, #28
 8014252:	46bd      	mov	sp, r7
 8014254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014258:	4770      	bx	lr
	...

0801425c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b098      	sub	sp, #96	; 0x60
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8014264:	2300      	movs	r3, #0
 8014266:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	4a73      	ldr	r2, [pc, #460]	; (8014438 <_tx_timer_thread_entry+0x1dc>)
 801426c:	4293      	cmp	r3, r2
 801426e:	f040 80de 	bne.w	801442e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014272:	f3ef 8310 	mrs	r3, PRIMASK
 8014276:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801427a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801427c:	b672      	cpsid	i
    return(int_posture);
 801427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8014280:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8014282:	4b6e      	ldr	r3, [pc, #440]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d003      	beq.n	8014298 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	f107 020c 	add.w	r2, r7, #12
 8014296:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8014298:	4b68      	ldr	r3, [pc, #416]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2200      	movs	r2, #0
 801429e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80142a0:	4b66      	ldr	r3, [pc, #408]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	3304      	adds	r3, #4
 80142a6:	4a65      	ldr	r2, [pc, #404]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 80142a8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80142aa:	4b64      	ldr	r3, [pc, #400]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	4b64      	ldr	r3, [pc, #400]	; (8014440 <_tx_timer_thread_entry+0x1e4>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d103      	bne.n	80142be <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80142b6:	4b63      	ldr	r3, [pc, #396]	; (8014444 <_tx_timer_thread_entry+0x1e8>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4a60      	ldr	r2, [pc, #384]	; (801443c <_tx_timer_thread_entry+0x1e0>)
 80142bc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80142be:	4b62      	ldr	r3, [pc, #392]	; (8014448 <_tx_timer_thread_entry+0x1ec>)
 80142c0:	2200      	movs	r2, #0
 80142c2:	601a      	str	r2, [r3, #0]
 80142c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ca:	f383 8810 	msr	PRIMASK, r3
}
 80142ce:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142d0:	f3ef 8310 	mrs	r3, PRIMASK
 80142d4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80142d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80142d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80142da:	b672      	cpsid	i
    return(int_posture);
 80142dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80142de:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80142e0:	e07f      	b.n	80143e2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	691b      	ldr	r3, [r3, #16]
 80142ea:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80142ec:	2300      	movs	r3, #0
 80142ee:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80142f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d102      	bne.n	80142fe <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80142f8:	2300      	movs	r3, #0
 80142fa:	60fb      	str	r3, [r7, #12]
 80142fc:	e00e      	b.n	801431c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80142fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014300:	695b      	ldr	r3, [r3, #20]
 8014302:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014308:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801430e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014312:	f107 020c 	add.w	r2, r7, #12
 8014316:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8014318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801431a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801431c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b20      	cmp	r3, #32
 8014322:	d911      	bls.n	8014348 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 801432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801432e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8014330:	2300      	movs	r3, #0
 8014332:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014336:	f107 0208 	add.w	r2, r7, #8
 801433a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801433e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014340:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8014342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014344:	60bb      	str	r3, [r7, #8]
 8014346:	e01a      	b.n	801437e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8014348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801434a:	689b      	ldr	r3, [r3, #8]
 801434c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8014354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014356:	685a      	ldr	r2, [r3, #4]
 8014358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801435c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d009      	beq.n	8014378 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014366:	f107 0208 	add.w	r2, r7, #8
 801436a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014370:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8014372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014374:	60bb      	str	r3, [r7, #8]
 8014376:	e002      	b.n	801437e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801437a:	2200      	movs	r2, #0
 801437c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801437e:	4a33      	ldr	r2, [pc, #204]	; (801444c <_tx_timer_thread_entry+0x1f0>)
 8014380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014382:	6013      	str	r3, [r2, #0]
 8014384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014386:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438a:	f383 8810 	msr	PRIMASK, r3
}
 801438e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014392:	2b00      	cmp	r3, #0
 8014394:	d002      	beq.n	801439c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8014396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014398:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801439a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801439c:	f3ef 8310 	mrs	r3, PRIMASK
 80143a0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80143a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80143a4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80143a6:	b672      	cpsid	i
    return(int_posture);
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80143aa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80143ac:	4b27      	ldr	r3, [pc, #156]	; (801444c <_tx_timer_thread_entry+0x1f0>)
 80143ae:	2200      	movs	r2, #0
 80143b0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d105      	bne.n	80143c6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80143ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143bc:	2200      	movs	r2, #0
 80143be:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80143c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80143c2:	f7ff feb1 	bl	8014128 <_tx_timer_system_activate>
 80143c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143ca:	69bb      	ldr	r3, [r7, #24]
 80143cc:	f383 8810 	msr	PRIMASK, r3
}
 80143d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143d2:	f3ef 8310 	mrs	r3, PRIMASK
 80143d6:	623b      	str	r3, [r7, #32]
    return(posture);
 80143d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80143da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80143dc:	b672      	cpsid	i
    return(int_posture);
 80143de:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80143e0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f47f af7c 	bne.w	80142e2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80143ea:	4b17      	ldr	r3, [pc, #92]	; (8014448 <_tx_timer_thread_entry+0x1ec>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d116      	bne.n	8014420 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80143f2:	4b17      	ldr	r3, [pc, #92]	; (8014450 <_tx_timer_thread_entry+0x1f4>)
 80143f4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80143f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143f8:	2203      	movs	r2, #3
 80143fa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80143fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143fe:	2201      	movs	r2, #1
 8014400:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014402:	4b14      	ldr	r3, [pc, #80]	; (8014454 <_tx_timer_thread_entry+0x1f8>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	3301      	adds	r3, #1
 8014408:	4a12      	ldr	r2, [pc, #72]	; (8014454 <_tx_timer_thread_entry+0x1f8>)
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801440e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	f383 8810 	msr	PRIMASK, r3
}
 8014416:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014418:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801441a:	f7ff fbbf 	bl	8013b9c <_tx_thread_system_suspend>
 801441e:	e728      	b.n	8014272 <_tx_timer_thread_entry+0x16>
 8014420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014422:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	f383 8810 	msr	PRIMASK, r3
}
 801442a:	bf00      	nop
            TX_DISABLE
 801442c:	e721      	b.n	8014272 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801442e:	bf00      	nop
 8014430:	3760      	adds	r7, #96	; 0x60
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	4154494d 	.word	0x4154494d
 801443c:	24015150 	.word	0x24015150
 8014440:	2401514c 	.word	0x2401514c
 8014444:	24015148 	.word	0x24015148
 8014448:	24015154 	.word	0x24015154
 801444c:	24015160 	.word	0x24015160
 8014450:	24015164 	.word	0x24015164
 8014454:	240150b4 	.word	0x240150b4

08014458 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b08a      	sub	sp, #40	; 0x28
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
 8014464:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014466:	2300      	movs	r3, #0
 8014468:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d102      	bne.n	8014476 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014470:	2302      	movs	r3, #2
 8014472:	627b      	str	r3, [r7, #36]	; 0x24
 8014474:	e029      	b.n	80144ca <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a2d      	ldr	r2, [pc, #180]	; (8014530 <_txe_byte_allocate+0xd8>)
 801447c:	4293      	cmp	r3, r2
 801447e:	d002      	beq.n	8014486 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014480:	2302      	movs	r3, #2
 8014482:	627b      	str	r3, [r7, #36]	; 0x24
 8014484:	e021      	b.n	80144ca <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d102      	bne.n	8014492 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801448c:	2303      	movs	r3, #3
 801448e:	627b      	str	r3, [r7, #36]	; 0x24
 8014490:	e01b      	b.n	80144ca <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d102      	bne.n	801449e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014498:	2305      	movs	r3, #5
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
 801449c:	e015      	b.n	80144ca <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	69db      	ldr	r3, [r3, #28]
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d902      	bls.n	80144ae <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80144a8:	2305      	movs	r3, #5
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
 80144ac:	e00d      	b.n	80144ca <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00a      	beq.n	80144ca <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144b4:	f3ef 8305 	mrs	r3, IPSR
 80144b8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80144ba:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80144bc:	4b1d      	ldr	r3, [pc, #116]	; (8014534 <_txe_byte_allocate+0xdc>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4313      	orrs	r3, r2
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d001      	beq.n	80144ca <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80144c6:	2304      	movs	r3, #4
 80144c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80144ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d108      	bne.n	80144e2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80144d0:	4b19      	ldr	r3, [pc, #100]	; (8014538 <_txe_byte_allocate+0xe0>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80144d6:	6a3b      	ldr	r3, [r7, #32]
 80144d8:	4a18      	ldr	r2, [pc, #96]	; (801453c <_txe_byte_allocate+0xe4>)
 80144da:	4293      	cmp	r3, r2
 80144dc:	d101      	bne.n	80144e2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80144de:	2313      	movs	r3, #19
 80144e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d114      	bne.n	8014512 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144e8:	f3ef 8305 	mrs	r3, IPSR
 80144ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80144ee:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80144f0:	4b10      	ldr	r3, [pc, #64]	; (8014534 <_txe_byte_allocate+0xdc>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4313      	orrs	r3, r2
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00b      	beq.n	8014512 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144fa:	f3ef 8305 	mrs	r3, IPSR
 80144fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014500:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014502:	4b0c      	ldr	r3, [pc, #48]	; (8014534 <_txe_byte_allocate+0xdc>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	4313      	orrs	r3, r2
 8014508:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801450c:	d201      	bcs.n	8014512 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801450e:	2313      	movs	r3, #19
 8014510:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014514:	2b00      	cmp	r3, #0
 8014516:	d106      	bne.n	8014526 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	687a      	ldr	r2, [r7, #4]
 801451c:	68b9      	ldr	r1, [r7, #8]
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f7fd fc9e 	bl	8011e60 <_tx_byte_allocate>
 8014524:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8014526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014528:	4618      	mov	r0, r3
 801452a:	3728      	adds	r7, #40	; 0x28
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	42595445 	.word	0x42595445
 8014534:	24000070 	.word	0x24000070
 8014538:	2401501c 	.word	0x2401501c
 801453c:	24015164 	.word	0x24015164

08014540 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b092      	sub	sp, #72	; 0x48
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
 801454c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801454e:	2300      	movs	r3, #0
 8014550:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d102      	bne.n	801455e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014558:	2302      	movs	r3, #2
 801455a:	647b      	str	r3, [r7, #68]	; 0x44
 801455c:	e075      	b.n	801464a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014560:	2b34      	cmp	r3, #52	; 0x34
 8014562:	d002      	beq.n	801456a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014564:	2302      	movs	r3, #2
 8014566:	647b      	str	r3, [r7, #68]	; 0x44
 8014568:	e06f      	b.n	801464a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801456a:	f3ef 8310 	mrs	r3, PRIMASK
 801456e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014572:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014574:	b672      	cpsid	i
    return(int_posture);
 8014576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014578:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801457a:	4b3b      	ldr	r3, [pc, #236]	; (8014668 <_txe_byte_pool_create+0x128>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	3301      	adds	r3, #1
 8014580:	4a39      	ldr	r2, [pc, #228]	; (8014668 <_txe_byte_pool_create+0x128>)
 8014582:	6013      	str	r3, [r2, #0]
 8014584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014586:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458a:	f383 8810 	msr	PRIMASK, r3
}
 801458e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014590:	4b36      	ldr	r3, [pc, #216]	; (801466c <_txe_byte_pool_create+0x12c>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014596:	2300      	movs	r3, #0
 8014598:	643b      	str	r3, [r7, #64]	; 0x40
 801459a:	e009      	b.n	80145b0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 801459c:	68fa      	ldr	r2, [r7, #12]
 801459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d00b      	beq.n	80145bc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80145a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80145aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ac:	3301      	adds	r3, #1
 80145ae:	643b      	str	r3, [r7, #64]	; 0x40
 80145b0:	4b2f      	ldr	r3, [pc, #188]	; (8014670 <_txe_byte_pool_create+0x130>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d3f0      	bcc.n	801459c <_txe_byte_pool_create+0x5c>
 80145ba:	e000      	b.n	80145be <_txe_byte_pool_create+0x7e>
                break;
 80145bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145be:	f3ef 8310 	mrs	r3, PRIMASK
 80145c2:	623b      	str	r3, [r7, #32]
    return(posture);
 80145c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80145c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80145c8:	b672      	cpsid	i
    return(int_posture);
 80145ca:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80145cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80145ce:	4b26      	ldr	r3, [pc, #152]	; (8014668 <_txe_byte_pool_create+0x128>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	3b01      	subs	r3, #1
 80145d4:	4a24      	ldr	r2, [pc, #144]	; (8014668 <_txe_byte_pool_create+0x128>)
 80145d6:	6013      	str	r3, [r2, #0]
 80145d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145da:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145de:	f383 8810 	msr	PRIMASK, r3
}
 80145e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80145e4:	f7ff f9a0 	bl	8013928 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80145e8:	68fa      	ldr	r2, [r7, #12]
 80145ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d102      	bne.n	80145f6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80145f0:	2302      	movs	r3, #2
 80145f2:	647b      	str	r3, [r7, #68]	; 0x44
 80145f4:	e029      	b.n	801464a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d102      	bne.n	8014602 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80145fc:	2303      	movs	r3, #3
 80145fe:	647b      	str	r3, [r7, #68]	; 0x44
 8014600:	e023      	b.n	801464a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	2b63      	cmp	r3, #99	; 0x63
 8014606:	d802      	bhi.n	801460e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014608:	2305      	movs	r3, #5
 801460a:	647b      	str	r3, [r7, #68]	; 0x44
 801460c:	e01d      	b.n	801464a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801460e:	4b19      	ldr	r3, [pc, #100]	; (8014674 <_txe_byte_pool_create+0x134>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014616:	4a18      	ldr	r2, [pc, #96]	; (8014678 <_txe_byte_pool_create+0x138>)
 8014618:	4293      	cmp	r3, r2
 801461a:	d101      	bne.n	8014620 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801461c:	2313      	movs	r3, #19
 801461e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014620:	f3ef 8305 	mrs	r3, IPSR
 8014624:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014626:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014628:	4b14      	ldr	r3, [pc, #80]	; (801467c <_txe_byte_pool_create+0x13c>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	4313      	orrs	r3, r2
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00b      	beq.n	801464a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014632:	f3ef 8305 	mrs	r3, IPSR
 8014636:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014638:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801463a:	4b10      	ldr	r3, [pc, #64]	; (801467c <_txe_byte_pool_create+0x13c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4313      	orrs	r3, r2
 8014640:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014644:	d201      	bcs.n	801464a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014646:	2313      	movs	r3, #19
 8014648:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801464a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801464c:	2b00      	cmp	r3, #0
 801464e:	d106      	bne.n	801465e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	68b9      	ldr	r1, [r7, #8]
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	f7fd fd44 	bl	80120e4 <_tx_byte_pool_create>
 801465c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014660:	4618      	mov	r0, r3
 8014662:	3748      	adds	r7, #72	; 0x48
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	240150b4 	.word	0x240150b4
 801466c:	2401500c 	.word	0x2401500c
 8014670:	24015010 	.word	0x24015010
 8014674:	2401501c 	.word	0x2401501c
 8014678:	24015164 	.word	0x24015164
 801467c:	24000070 	.word	0x24000070

08014680 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b092      	sub	sp, #72	; 0x48
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801468e:	2300      	movs	r3, #0
 8014690:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d102      	bne.n	801469e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8014698:	230c      	movs	r3, #12
 801469a:	647b      	str	r3, [r7, #68]	; 0x44
 801469c:	e054      	b.n	8014748 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	2b1c      	cmp	r3, #28
 80146a2:	d002      	beq.n	80146aa <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80146a4:	230c      	movs	r3, #12
 80146a6:	647b      	str	r3, [r7, #68]	; 0x44
 80146a8:	e04e      	b.n	8014748 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146aa:	f3ef 8310 	mrs	r3, PRIMASK
 80146ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80146b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80146b4:	b672      	cpsid	i
    return(int_posture);
 80146b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80146b8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80146ba:	4b36      	ldr	r3, [pc, #216]	; (8014794 <_txe_semaphore_create+0x114>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	3301      	adds	r3, #1
 80146c0:	4a34      	ldr	r2, [pc, #208]	; (8014794 <_txe_semaphore_create+0x114>)
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ca:	f383 8810 	msr	PRIMASK, r3
}
 80146ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80146d0:	4b31      	ldr	r3, [pc, #196]	; (8014798 <_txe_semaphore_create+0x118>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80146d6:	2300      	movs	r3, #0
 80146d8:	643b      	str	r3, [r7, #64]	; 0x40
 80146da:	e009      	b.n	80146f0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d00b      	beq.n	80146fc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80146e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e6:	695b      	ldr	r3, [r3, #20]
 80146e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80146ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ec:	3301      	adds	r3, #1
 80146ee:	643b      	str	r3, [r7, #64]	; 0x40
 80146f0:	4b2a      	ldr	r3, [pc, #168]	; (801479c <_txe_semaphore_create+0x11c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d3f0      	bcc.n	80146dc <_txe_semaphore_create+0x5c>
 80146fa:	e000      	b.n	80146fe <_txe_semaphore_create+0x7e>
                break;
 80146fc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014702:	623b      	str	r3, [r7, #32]
    return(posture);
 8014704:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014706:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014708:	b672      	cpsid	i
    return(int_posture);
 801470a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801470c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801470e:	4b21      	ldr	r3, [pc, #132]	; (8014794 <_txe_semaphore_create+0x114>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	3b01      	subs	r3, #1
 8014714:	4a1f      	ldr	r2, [pc, #124]	; (8014794 <_txe_semaphore_create+0x114>)
 8014716:	6013      	str	r3, [r2, #0]
 8014718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471e:	f383 8810 	msr	PRIMASK, r3
}
 8014722:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014724:	f7ff f900 	bl	8013928 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801472c:	429a      	cmp	r2, r3
 801472e:	d102      	bne.n	8014736 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8014730:	230c      	movs	r3, #12
 8014732:	647b      	str	r3, [r7, #68]	; 0x44
 8014734:	e008      	b.n	8014748 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014736:	4b1a      	ldr	r3, [pc, #104]	; (80147a0 <_txe_semaphore_create+0x120>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473e:	4a19      	ldr	r2, [pc, #100]	; (80147a4 <_txe_semaphore_create+0x124>)
 8014740:	4293      	cmp	r3, r2
 8014742:	d101      	bne.n	8014748 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014744:	2313      	movs	r3, #19
 8014746:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801474a:	2b00      	cmp	r3, #0
 801474c:	d114      	bne.n	8014778 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801474e:	f3ef 8305 	mrs	r3, IPSR
 8014752:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014754:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014756:	4b14      	ldr	r3, [pc, #80]	; (80147a8 <_txe_semaphore_create+0x128>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	4313      	orrs	r3, r2
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00b      	beq.n	8014778 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014760:	f3ef 8305 	mrs	r3, IPSR
 8014764:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014766:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014768:	4b0f      	ldr	r3, [pc, #60]	; (80147a8 <_txe_semaphore_create+0x128>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	4313      	orrs	r3, r2
 801476e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014772:	d201      	bcs.n	8014778 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014774:	2313      	movs	r3, #19
 8014776:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801477a:	2b00      	cmp	r3, #0
 801477c:	d105      	bne.n	801478a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	68b9      	ldr	r1, [r7, #8]
 8014782:	68f8      	ldr	r0, [r7, #12]
 8014784:	f7fe fcf4 	bl	8013170 <_tx_semaphore_create>
 8014788:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801478c:	4618      	mov	r0, r3
 801478e:	3748      	adds	r7, #72	; 0x48
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	240150b4 	.word	0x240150b4
 8014798:	24014fe4 	.word	0x24014fe4
 801479c:	24014fe8 	.word	0x24014fe8
 80147a0:	2401501c 	.word	0x2401501c
 80147a4:	24015164 	.word	0x24015164
 80147a8:	24000070 	.word	0x24000070

080147ac <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80147b4:	2300      	movs	r3, #0
 80147b6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d102      	bne.n	80147c4 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80147be:	230c      	movs	r3, #12
 80147c0:	617b      	str	r3, [r7, #20]
 80147c2:	e01c      	b.n	80147fe <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	4a13      	ldr	r2, [pc, #76]	; (8014818 <_txe_semaphore_delete+0x6c>)
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d002      	beq.n	80147d4 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80147ce:	230c      	movs	r3, #12
 80147d0:	617b      	str	r3, [r7, #20]
 80147d2:	e014      	b.n	80147fe <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80147d4:	f3ef 8305 	mrs	r3, IPSR
 80147d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80147da:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80147dc:	4b0f      	ldr	r3, [pc, #60]	; (801481c <_txe_semaphore_delete+0x70>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	4313      	orrs	r3, r2
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d002      	beq.n	80147ec <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80147e6:	2313      	movs	r3, #19
 80147e8:	617b      	str	r3, [r7, #20]
 80147ea:	e008      	b.n	80147fe <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80147ec:	4b0c      	ldr	r3, [pc, #48]	; (8014820 <_txe_semaphore_delete+0x74>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	4a0b      	ldr	r2, [pc, #44]	; (8014824 <_txe_semaphore_delete+0x78>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d101      	bne.n	80147fe <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80147fa:	2313      	movs	r3, #19
 80147fc:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d103      	bne.n	801480c <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7fe fd05 	bl	8013214 <_tx_semaphore_delete>
 801480a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801480c:	697b      	ldr	r3, [r7, #20]
}
 801480e:	4618      	mov	r0, r3
 8014810:	3718      	adds	r7, #24
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	53454d41 	.word	0x53454d41
 801481c:	24000070 	.word	0x24000070
 8014820:	2401501c 	.word	0x2401501c
 8014824:	24015164 	.word	0x24015164

08014828 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014832:	2300      	movs	r3, #0
 8014834:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d102      	bne.n	8014842 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801483c:	230c      	movs	r3, #12
 801483e:	617b      	str	r3, [r7, #20]
 8014840:	e01f      	b.n	8014882 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a15      	ldr	r2, [pc, #84]	; (801489c <_txe_semaphore_get+0x74>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d002      	beq.n	8014852 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801484c:	230c      	movs	r3, #12
 801484e:	617b      	str	r3, [r7, #20]
 8014850:	e017      	b.n	8014882 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d014      	beq.n	8014882 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014858:	f3ef 8305 	mrs	r3, IPSR
 801485c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801485e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014860:	4b0f      	ldr	r3, [pc, #60]	; (80148a0 <_txe_semaphore_get+0x78>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4313      	orrs	r3, r2
 8014866:	2b00      	cmp	r3, #0
 8014868:	d002      	beq.n	8014870 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801486a:	2304      	movs	r3, #4
 801486c:	617b      	str	r3, [r7, #20]
 801486e:	e008      	b.n	8014882 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8014870:	4b0c      	ldr	r3, [pc, #48]	; (80148a4 <_txe_semaphore_get+0x7c>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	4a0b      	ldr	r2, [pc, #44]	; (80148a8 <_txe_semaphore_get+0x80>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d101      	bne.n	8014882 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801487e:	2304      	movs	r3, #4
 8014880:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d104      	bne.n	8014892 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f7fe fd52 	bl	8013334 <_tx_semaphore_get>
 8014890:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014892:	697b      	ldr	r3, [r7, #20]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3718      	adds	r7, #24
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	53454d41 	.word	0x53454d41
 80148a0:	24000070 	.word	0x24000070
 80148a4:	2401501c 	.word	0x2401501c
 80148a8:	24015164 	.word	0x24015164

080148ac <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d102      	bne.n	80148c0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80148ba:	230c      	movs	r3, #12
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	e00b      	b.n	80148d8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4a07      	ldr	r2, [pc, #28]	; (80148e4 <_txe_semaphore_put+0x38>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d002      	beq.n	80148d0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80148ca:	230c      	movs	r3, #12
 80148cc:	60fb      	str	r3, [r7, #12]
 80148ce:	e003      	b.n	80148d8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f7fe fdc1 	bl	8013458 <_tx_semaphore_put>
 80148d6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80148d8:	68fb      	ldr	r3, [r7, #12]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	53454d41 	.word	0x53454d41

080148e8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b09a      	sub	sp, #104	; 0x68
 80148ec:	af06      	add	r7, sp, #24
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
 80148f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80148f6:	2300      	movs	r3, #0
 80148f8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d102      	bne.n	8014906 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014900:	230e      	movs	r3, #14
 8014902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014904:	e0bb      	b.n	8014a7e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8014906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014908:	2bb0      	cmp	r3, #176	; 0xb0
 801490a:	d002      	beq.n	8014912 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801490c:	230e      	movs	r3, #14
 801490e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014910:	e0b5      	b.n	8014a7e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014912:	f3ef 8310 	mrs	r3, PRIMASK
 8014916:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014918:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801491a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801491c:	b672      	cpsid	i
    return(int_posture);
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014920:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014922:	4b64      	ldr	r3, [pc, #400]	; (8014ab4 <_txe_thread_create+0x1cc>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	3301      	adds	r3, #1
 8014928:	4a62      	ldr	r2, [pc, #392]	; (8014ab4 <_txe_thread_create+0x1cc>)
 801492a:	6013      	str	r3, [r2, #0]
 801492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801492e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014932:	f383 8810 	msr	PRIMASK, r3
}
 8014936:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014938:	2300      	movs	r3, #0
 801493a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801493c:	4b5e      	ldr	r3, [pc, #376]	; (8014ab8 <_txe_thread_create+0x1d0>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014944:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8014946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014948:	3b01      	subs	r3, #1
 801494a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801494c:	4413      	add	r3, r2
 801494e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014952:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014954:	2300      	movs	r3, #0
 8014956:	647b      	str	r3, [r7, #68]	; 0x44
 8014958:	e02b      	b.n	80149b2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801495a:	68fa      	ldr	r2, [r7, #12]
 801495c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801495e:	429a      	cmp	r2, r3
 8014960:	d101      	bne.n	8014966 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8014962:	2301      	movs	r3, #1
 8014964:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8014966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014968:	2b01      	cmp	r3, #1
 801496a:	d028      	beq.n	80149be <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014972:	429a      	cmp	r2, r3
 8014974:	d308      	bcc.n	8014988 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8014976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014978:	691b      	ldr	r3, [r3, #16]
 801497a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801497c:	429a      	cmp	r2, r3
 801497e:	d203      	bcs.n	8014988 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014980:	2300      	movs	r3, #0
 8014982:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014984:	2301      	movs	r3, #1
 8014986:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801498e:	429a      	cmp	r2, r3
 8014990:	d308      	bcc.n	80149a4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8014992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014994:	691b      	ldr	r3, [r3, #16]
 8014996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014998:	429a      	cmp	r2, r3
 801499a:	d203      	bcs.n	80149a4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801499c:	2300      	movs	r3, #0
 801499e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80149a0:	2301      	movs	r3, #1
 80149a2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80149a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80149aa:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80149ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149ae:	3301      	adds	r3, #1
 80149b0:	647b      	str	r3, [r7, #68]	; 0x44
 80149b2:	4b42      	ldr	r3, [pc, #264]	; (8014abc <_txe_thread_create+0x1d4>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d3ce      	bcc.n	801495a <_txe_thread_create+0x72>
 80149bc:	e000      	b.n	80149c0 <_txe_thread_create+0xd8>
                break;
 80149be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149c0:	f3ef 8310 	mrs	r3, PRIMASK
 80149c4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80149c6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80149c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80149ca:	b672      	cpsid	i
    return(int_posture);
 80149cc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80149ce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80149d0:	4b38      	ldr	r3, [pc, #224]	; (8014ab4 <_txe_thread_create+0x1cc>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	3b01      	subs	r3, #1
 80149d6:	4a37      	ldr	r2, [pc, #220]	; (8014ab4 <_txe_thread_create+0x1cc>)
 80149d8:	6013      	str	r3, [r2, #0]
 80149da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149dc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	f383 8810 	msr	PRIMASK, r3
}
 80149e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80149e6:	f7fe ff9f 	bl	8013928 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80149ea:	68fa      	ldr	r2, [r7, #12]
 80149ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d102      	bne.n	80149f8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80149f2:	230e      	movs	r3, #14
 80149f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149f6:	e042      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80149f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d102      	bne.n	8014a04 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80149fe:	2303      	movs	r3, #3
 8014a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a02:	e03c      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d102      	bne.n	8014a10 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a0e:	e036      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8014a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a12:	2bc7      	cmp	r3, #199	; 0xc7
 8014a14:	d802      	bhi.n	8014a1c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8014a16:	2305      	movs	r3, #5
 8014a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a1a:	e030      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8014a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a1e:	2b1f      	cmp	r3, #31
 8014a20:	d902      	bls.n	8014a28 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8014a22:	230f      	movs	r3, #15
 8014a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a26:	e02a      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8014a28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d902      	bls.n	8014a36 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8014a30:	2318      	movs	r3, #24
 8014a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a34:	e023      	b.n	8014a7e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8014a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d902      	bls.n	8014a42 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014a3c:	2310      	movs	r3, #16
 8014a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a40:	e01d      	b.n	8014a7e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014a42:	4b1f      	ldr	r3, [pc, #124]	; (8014ac0 <_txe_thread_create+0x1d8>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8014a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4a:	4a1e      	ldr	r2, [pc, #120]	; (8014ac4 <_txe_thread_create+0x1dc>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d101      	bne.n	8014a54 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014a50:	2313      	movs	r3, #19
 8014a52:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a54:	f3ef 8305 	mrs	r3, IPSR
 8014a58:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014a5a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014a5c:	4b1a      	ldr	r3, [pc, #104]	; (8014ac8 <_txe_thread_create+0x1e0>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	4313      	orrs	r3, r2
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d00b      	beq.n	8014a7e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014a66:	f3ef 8305 	mrs	r3, IPSR
 8014a6a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014a6c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014a6e:	4b16      	ldr	r3, [pc, #88]	; (8014ac8 <_txe_thread_create+0x1e0>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	4313      	orrs	r3, r2
 8014a74:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014a78:	d201      	bcs.n	8014a7e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014a7a:	2313      	movs	r3, #19
 8014a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d112      	bne.n	8014aaa <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a86:	9305      	str	r3, [sp, #20]
 8014a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014a8a:	9304      	str	r3, [sp, #16]
 8014a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014a8e:	9303      	str	r3, [sp, #12]
 8014a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014a92:	9302      	str	r3, [sp, #8]
 8014a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	f7fe fd30 	bl	8013508 <_tx_thread_create>
 8014aa8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3750      	adds	r7, #80	; 0x50
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	240150b4 	.word	0x240150b4
 8014ab8:	24015024 	.word	0x24015024
 8014abc:	24015028 	.word	0x24015028
 8014ac0:	2401501c 	.word	0x2401501c
 8014ac4:	24015164 	.word	0x24015164
 8014ac8:	24000070 	.word	0x24000070

08014acc <__assert_func>:
 8014acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ace:	4614      	mov	r4, r2
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <__assert_func+0x2c>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	68d8      	ldr	r0, [r3, #12]
 8014ada:	b14c      	cbz	r4, 8014af0 <__assert_func+0x24>
 8014adc:	4b07      	ldr	r3, [pc, #28]	; (8014afc <__assert_func+0x30>)
 8014ade:	9100      	str	r1, [sp, #0]
 8014ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ae4:	4906      	ldr	r1, [pc, #24]	; (8014b00 <__assert_func+0x34>)
 8014ae6:	462b      	mov	r3, r5
 8014ae8:	f000 f814 	bl	8014b14 <fiprintf>
 8014aec:	f000 fc9a 	bl	8015424 <abort>
 8014af0:	4b04      	ldr	r3, [pc, #16]	; (8014b04 <__assert_func+0x38>)
 8014af2:	461c      	mov	r4, r3
 8014af4:	e7f3      	b.n	8014ade <__assert_func+0x12>
 8014af6:	bf00      	nop
 8014af8:	24000074 	.word	0x24000074
 8014afc:	08015fdc 	.word	0x08015fdc
 8014b00:	08015fe9 	.word	0x08015fe9
 8014b04:	08016017 	.word	0x08016017

08014b08 <__errno>:
 8014b08:	4b01      	ldr	r3, [pc, #4]	; (8014b10 <__errno+0x8>)
 8014b0a:	6818      	ldr	r0, [r3, #0]
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop
 8014b10:	24000074 	.word	0x24000074

08014b14 <fiprintf>:
 8014b14:	b40e      	push	{r1, r2, r3}
 8014b16:	b503      	push	{r0, r1, lr}
 8014b18:	4601      	mov	r1, r0
 8014b1a:	ab03      	add	r3, sp, #12
 8014b1c:	4805      	ldr	r0, [pc, #20]	; (8014b34 <fiprintf+0x20>)
 8014b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b22:	6800      	ldr	r0, [r0, #0]
 8014b24:	9301      	str	r3, [sp, #4]
 8014b26:	f000 f86b 	bl	8014c00 <_vfiprintf_r>
 8014b2a:	b002      	add	sp, #8
 8014b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b30:	b003      	add	sp, #12
 8014b32:	4770      	bx	lr
 8014b34:	24000074 	.word	0x24000074

08014b38 <__libc_init_array>:
 8014b38:	b570      	push	{r4, r5, r6, lr}
 8014b3a:	4d0d      	ldr	r5, [pc, #52]	; (8014b70 <__libc_init_array+0x38>)
 8014b3c:	4c0d      	ldr	r4, [pc, #52]	; (8014b74 <__libc_init_array+0x3c>)
 8014b3e:	1b64      	subs	r4, r4, r5
 8014b40:	10a4      	asrs	r4, r4, #2
 8014b42:	2600      	movs	r6, #0
 8014b44:	42a6      	cmp	r6, r4
 8014b46:	d109      	bne.n	8014b5c <__libc_init_array+0x24>
 8014b48:	4d0b      	ldr	r5, [pc, #44]	; (8014b78 <__libc_init_array+0x40>)
 8014b4a:	4c0c      	ldr	r4, [pc, #48]	; (8014b7c <__libc_init_array+0x44>)
 8014b4c:	f001 f87e 	bl	8015c4c <_init>
 8014b50:	1b64      	subs	r4, r4, r5
 8014b52:	10a4      	asrs	r4, r4, #2
 8014b54:	2600      	movs	r6, #0
 8014b56:	42a6      	cmp	r6, r4
 8014b58:	d105      	bne.n	8014b66 <__libc_init_array+0x2e>
 8014b5a:	bd70      	pop	{r4, r5, r6, pc}
 8014b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b60:	4798      	blx	r3
 8014b62:	3601      	adds	r6, #1
 8014b64:	e7ee      	b.n	8014b44 <__libc_init_array+0xc>
 8014b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b6a:	4798      	blx	r3
 8014b6c:	3601      	adds	r6, #1
 8014b6e:	e7f2      	b.n	8014b56 <__libc_init_array+0x1e>
 8014b70:	080160b8 	.word	0x080160b8
 8014b74:	080160b8 	.word	0x080160b8
 8014b78:	080160b8 	.word	0x080160b8
 8014b7c:	080160bc 	.word	0x080160bc

08014b80 <memcpy>:
 8014b80:	440a      	add	r2, r1
 8014b82:	4291      	cmp	r1, r2
 8014b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b88:	d100      	bne.n	8014b8c <memcpy+0xc>
 8014b8a:	4770      	bx	lr
 8014b8c:	b510      	push	{r4, lr}
 8014b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b96:	4291      	cmp	r1, r2
 8014b98:	d1f9      	bne.n	8014b8e <memcpy+0xe>
 8014b9a:	bd10      	pop	{r4, pc}

08014b9c <memset>:
 8014b9c:	4402      	add	r2, r0
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	4293      	cmp	r3, r2
 8014ba2:	d100      	bne.n	8014ba6 <memset+0xa>
 8014ba4:	4770      	bx	lr
 8014ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8014baa:	e7f9      	b.n	8014ba0 <memset+0x4>

08014bac <__sfputc_r>:
 8014bac:	6893      	ldr	r3, [r2, #8]
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	b410      	push	{r4}
 8014bb4:	6093      	str	r3, [r2, #8]
 8014bb6:	da08      	bge.n	8014bca <__sfputc_r+0x1e>
 8014bb8:	6994      	ldr	r4, [r2, #24]
 8014bba:	42a3      	cmp	r3, r4
 8014bbc:	db01      	blt.n	8014bc2 <__sfputc_r+0x16>
 8014bbe:	290a      	cmp	r1, #10
 8014bc0:	d103      	bne.n	8014bca <__sfputc_r+0x1e>
 8014bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bc6:	f000 bb6d 	b.w	80152a4 <__swbuf_r>
 8014bca:	6813      	ldr	r3, [r2, #0]
 8014bcc:	1c58      	adds	r0, r3, #1
 8014bce:	6010      	str	r0, [r2, #0]
 8014bd0:	7019      	strb	r1, [r3, #0]
 8014bd2:	4608      	mov	r0, r1
 8014bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bd8:	4770      	bx	lr

08014bda <__sfputs_r>:
 8014bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bdc:	4606      	mov	r6, r0
 8014bde:	460f      	mov	r7, r1
 8014be0:	4614      	mov	r4, r2
 8014be2:	18d5      	adds	r5, r2, r3
 8014be4:	42ac      	cmp	r4, r5
 8014be6:	d101      	bne.n	8014bec <__sfputs_r+0x12>
 8014be8:	2000      	movs	r0, #0
 8014bea:	e007      	b.n	8014bfc <__sfputs_r+0x22>
 8014bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bf0:	463a      	mov	r2, r7
 8014bf2:	4630      	mov	r0, r6
 8014bf4:	f7ff ffda 	bl	8014bac <__sfputc_r>
 8014bf8:	1c43      	adds	r3, r0, #1
 8014bfa:	d1f3      	bne.n	8014be4 <__sfputs_r+0xa>
 8014bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c00 <_vfiprintf_r>:
 8014c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c04:	460d      	mov	r5, r1
 8014c06:	b09d      	sub	sp, #116	; 0x74
 8014c08:	4614      	mov	r4, r2
 8014c0a:	4698      	mov	r8, r3
 8014c0c:	4606      	mov	r6, r0
 8014c0e:	b118      	cbz	r0, 8014c18 <_vfiprintf_r+0x18>
 8014c10:	6983      	ldr	r3, [r0, #24]
 8014c12:	b90b      	cbnz	r3, 8014c18 <_vfiprintf_r+0x18>
 8014c14:	f000 fd28 	bl	8015668 <__sinit>
 8014c18:	4b89      	ldr	r3, [pc, #548]	; (8014e40 <_vfiprintf_r+0x240>)
 8014c1a:	429d      	cmp	r5, r3
 8014c1c:	d11b      	bne.n	8014c56 <_vfiprintf_r+0x56>
 8014c1e:	6875      	ldr	r5, [r6, #4]
 8014c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c22:	07d9      	lsls	r1, r3, #31
 8014c24:	d405      	bmi.n	8014c32 <_vfiprintf_r+0x32>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	059a      	lsls	r2, r3, #22
 8014c2a:	d402      	bmi.n	8014c32 <_vfiprintf_r+0x32>
 8014c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c2e:	f000 fdb9 	bl	80157a4 <__retarget_lock_acquire_recursive>
 8014c32:	89ab      	ldrh	r3, [r5, #12]
 8014c34:	071b      	lsls	r3, r3, #28
 8014c36:	d501      	bpl.n	8014c3c <_vfiprintf_r+0x3c>
 8014c38:	692b      	ldr	r3, [r5, #16]
 8014c3a:	b9eb      	cbnz	r3, 8014c78 <_vfiprintf_r+0x78>
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	4630      	mov	r0, r6
 8014c40:	f000 fb82 	bl	8015348 <__swsetup_r>
 8014c44:	b1c0      	cbz	r0, 8014c78 <_vfiprintf_r+0x78>
 8014c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c48:	07dc      	lsls	r4, r3, #31
 8014c4a:	d50e      	bpl.n	8014c6a <_vfiprintf_r+0x6a>
 8014c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c50:	b01d      	add	sp, #116	; 0x74
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	4b7b      	ldr	r3, [pc, #492]	; (8014e44 <_vfiprintf_r+0x244>)
 8014c58:	429d      	cmp	r5, r3
 8014c5a:	d101      	bne.n	8014c60 <_vfiprintf_r+0x60>
 8014c5c:	68b5      	ldr	r5, [r6, #8]
 8014c5e:	e7df      	b.n	8014c20 <_vfiprintf_r+0x20>
 8014c60:	4b79      	ldr	r3, [pc, #484]	; (8014e48 <_vfiprintf_r+0x248>)
 8014c62:	429d      	cmp	r5, r3
 8014c64:	bf08      	it	eq
 8014c66:	68f5      	ldreq	r5, [r6, #12]
 8014c68:	e7da      	b.n	8014c20 <_vfiprintf_r+0x20>
 8014c6a:	89ab      	ldrh	r3, [r5, #12]
 8014c6c:	0598      	lsls	r0, r3, #22
 8014c6e:	d4ed      	bmi.n	8014c4c <_vfiprintf_r+0x4c>
 8014c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c72:	f000 fd98 	bl	80157a6 <__retarget_lock_release_recursive>
 8014c76:	e7e9      	b.n	8014c4c <_vfiprintf_r+0x4c>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c7c:	2320      	movs	r3, #32
 8014c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c86:	2330      	movs	r3, #48	; 0x30
 8014c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e4c <_vfiprintf_r+0x24c>
 8014c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c90:	f04f 0901 	mov.w	r9, #1
 8014c94:	4623      	mov	r3, r4
 8014c96:	469a      	mov	sl, r3
 8014c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c9c:	b10a      	cbz	r2, 8014ca2 <_vfiprintf_r+0xa2>
 8014c9e:	2a25      	cmp	r2, #37	; 0x25
 8014ca0:	d1f9      	bne.n	8014c96 <_vfiprintf_r+0x96>
 8014ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ca6:	d00b      	beq.n	8014cc0 <_vfiprintf_r+0xc0>
 8014ca8:	465b      	mov	r3, fp
 8014caa:	4622      	mov	r2, r4
 8014cac:	4629      	mov	r1, r5
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f7ff ff93 	bl	8014bda <__sfputs_r>
 8014cb4:	3001      	adds	r0, #1
 8014cb6:	f000 80aa 	beq.w	8014e0e <_vfiprintf_r+0x20e>
 8014cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cbc:	445a      	add	r2, fp
 8014cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8014cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f000 80a2 	beq.w	8014e0e <_vfiprintf_r+0x20e>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8014cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cd4:	f10a 0a01 	add.w	sl, sl, #1
 8014cd8:	9304      	str	r3, [sp, #16]
 8014cda:	9307      	str	r3, [sp, #28]
 8014cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ce2:	4654      	mov	r4, sl
 8014ce4:	2205      	movs	r2, #5
 8014ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cea:	4858      	ldr	r0, [pc, #352]	; (8014e4c <_vfiprintf_r+0x24c>)
 8014cec:	f7eb fc18 	bl	8000520 <memchr>
 8014cf0:	9a04      	ldr	r2, [sp, #16]
 8014cf2:	b9d8      	cbnz	r0, 8014d2c <_vfiprintf_r+0x12c>
 8014cf4:	06d1      	lsls	r1, r2, #27
 8014cf6:	bf44      	itt	mi
 8014cf8:	2320      	movmi	r3, #32
 8014cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cfe:	0713      	lsls	r3, r2, #28
 8014d00:	bf44      	itt	mi
 8014d02:	232b      	movmi	r3, #43	; 0x2b
 8014d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d08:	f89a 3000 	ldrb.w	r3, [sl]
 8014d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d0e:	d015      	beq.n	8014d3c <_vfiprintf_r+0x13c>
 8014d10:	9a07      	ldr	r2, [sp, #28]
 8014d12:	4654      	mov	r4, sl
 8014d14:	2000      	movs	r0, #0
 8014d16:	f04f 0c0a 	mov.w	ip, #10
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d20:	3b30      	subs	r3, #48	; 0x30
 8014d22:	2b09      	cmp	r3, #9
 8014d24:	d94e      	bls.n	8014dc4 <_vfiprintf_r+0x1c4>
 8014d26:	b1b0      	cbz	r0, 8014d56 <_vfiprintf_r+0x156>
 8014d28:	9207      	str	r2, [sp, #28]
 8014d2a:	e014      	b.n	8014d56 <_vfiprintf_r+0x156>
 8014d2c:	eba0 0308 	sub.w	r3, r0, r8
 8014d30:	fa09 f303 	lsl.w	r3, r9, r3
 8014d34:	4313      	orrs	r3, r2
 8014d36:	9304      	str	r3, [sp, #16]
 8014d38:	46a2      	mov	sl, r4
 8014d3a:	e7d2      	b.n	8014ce2 <_vfiprintf_r+0xe2>
 8014d3c:	9b03      	ldr	r3, [sp, #12]
 8014d3e:	1d19      	adds	r1, r3, #4
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	9103      	str	r1, [sp, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	bfbb      	ittet	lt
 8014d48:	425b      	neglt	r3, r3
 8014d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8014d4e:	9307      	strge	r3, [sp, #28]
 8014d50:	9307      	strlt	r3, [sp, #28]
 8014d52:	bfb8      	it	lt
 8014d54:	9204      	strlt	r2, [sp, #16]
 8014d56:	7823      	ldrb	r3, [r4, #0]
 8014d58:	2b2e      	cmp	r3, #46	; 0x2e
 8014d5a:	d10c      	bne.n	8014d76 <_vfiprintf_r+0x176>
 8014d5c:	7863      	ldrb	r3, [r4, #1]
 8014d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d60:	d135      	bne.n	8014dce <_vfiprintf_r+0x1ce>
 8014d62:	9b03      	ldr	r3, [sp, #12]
 8014d64:	1d1a      	adds	r2, r3, #4
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	9203      	str	r2, [sp, #12]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	bfb8      	it	lt
 8014d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d72:	3402      	adds	r4, #2
 8014d74:	9305      	str	r3, [sp, #20]
 8014d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e5c <_vfiprintf_r+0x25c>
 8014d7a:	7821      	ldrb	r1, [r4, #0]
 8014d7c:	2203      	movs	r2, #3
 8014d7e:	4650      	mov	r0, sl
 8014d80:	f7eb fbce 	bl	8000520 <memchr>
 8014d84:	b140      	cbz	r0, 8014d98 <_vfiprintf_r+0x198>
 8014d86:	2340      	movs	r3, #64	; 0x40
 8014d88:	eba0 000a 	sub.w	r0, r0, sl
 8014d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8014d90:	9b04      	ldr	r3, [sp, #16]
 8014d92:	4303      	orrs	r3, r0
 8014d94:	3401      	adds	r4, #1
 8014d96:	9304      	str	r3, [sp, #16]
 8014d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d9c:	482c      	ldr	r0, [pc, #176]	; (8014e50 <_vfiprintf_r+0x250>)
 8014d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014da2:	2206      	movs	r2, #6
 8014da4:	f7eb fbbc 	bl	8000520 <memchr>
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d03f      	beq.n	8014e2c <_vfiprintf_r+0x22c>
 8014dac:	4b29      	ldr	r3, [pc, #164]	; (8014e54 <_vfiprintf_r+0x254>)
 8014dae:	bb1b      	cbnz	r3, 8014df8 <_vfiprintf_r+0x1f8>
 8014db0:	9b03      	ldr	r3, [sp, #12]
 8014db2:	3307      	adds	r3, #7
 8014db4:	f023 0307 	bic.w	r3, r3, #7
 8014db8:	3308      	adds	r3, #8
 8014dba:	9303      	str	r3, [sp, #12]
 8014dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dbe:	443b      	add	r3, r7
 8014dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8014dc2:	e767      	b.n	8014c94 <_vfiprintf_r+0x94>
 8014dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dc8:	460c      	mov	r4, r1
 8014dca:	2001      	movs	r0, #1
 8014dcc:	e7a5      	b.n	8014d1a <_vfiprintf_r+0x11a>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	3401      	adds	r4, #1
 8014dd2:	9305      	str	r3, [sp, #20]
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	f04f 0c0a 	mov.w	ip, #10
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014de0:	3a30      	subs	r2, #48	; 0x30
 8014de2:	2a09      	cmp	r2, #9
 8014de4:	d903      	bls.n	8014dee <_vfiprintf_r+0x1ee>
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d0c5      	beq.n	8014d76 <_vfiprintf_r+0x176>
 8014dea:	9105      	str	r1, [sp, #20]
 8014dec:	e7c3      	b.n	8014d76 <_vfiprintf_r+0x176>
 8014dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8014df2:	4604      	mov	r4, r0
 8014df4:	2301      	movs	r3, #1
 8014df6:	e7f0      	b.n	8014dda <_vfiprintf_r+0x1da>
 8014df8:	ab03      	add	r3, sp, #12
 8014dfa:	9300      	str	r3, [sp, #0]
 8014dfc:	462a      	mov	r2, r5
 8014dfe:	4b16      	ldr	r3, [pc, #88]	; (8014e58 <_vfiprintf_r+0x258>)
 8014e00:	a904      	add	r1, sp, #16
 8014e02:	4630      	mov	r0, r6
 8014e04:	f3af 8000 	nop.w
 8014e08:	4607      	mov	r7, r0
 8014e0a:	1c78      	adds	r0, r7, #1
 8014e0c:	d1d6      	bne.n	8014dbc <_vfiprintf_r+0x1bc>
 8014e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e10:	07d9      	lsls	r1, r3, #31
 8014e12:	d405      	bmi.n	8014e20 <_vfiprintf_r+0x220>
 8014e14:	89ab      	ldrh	r3, [r5, #12]
 8014e16:	059a      	lsls	r2, r3, #22
 8014e18:	d402      	bmi.n	8014e20 <_vfiprintf_r+0x220>
 8014e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e1c:	f000 fcc3 	bl	80157a6 <__retarget_lock_release_recursive>
 8014e20:	89ab      	ldrh	r3, [r5, #12]
 8014e22:	065b      	lsls	r3, r3, #25
 8014e24:	f53f af12 	bmi.w	8014c4c <_vfiprintf_r+0x4c>
 8014e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e2a:	e711      	b.n	8014c50 <_vfiprintf_r+0x50>
 8014e2c:	ab03      	add	r3, sp, #12
 8014e2e:	9300      	str	r3, [sp, #0]
 8014e30:	462a      	mov	r2, r5
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <_vfiprintf_r+0x258>)
 8014e34:	a904      	add	r1, sp, #16
 8014e36:	4630      	mov	r0, r6
 8014e38:	f000 f880 	bl	8014f3c <_printf_i>
 8014e3c:	e7e4      	b.n	8014e08 <_vfiprintf_r+0x208>
 8014e3e:	bf00      	nop
 8014e40:	08016070 	.word	0x08016070
 8014e44:	08016090 	.word	0x08016090
 8014e48:	08016050 	.word	0x08016050
 8014e4c:	0801601c 	.word	0x0801601c
 8014e50:	08016026 	.word	0x08016026
 8014e54:	00000000 	.word	0x00000000
 8014e58:	08014bdb 	.word	0x08014bdb
 8014e5c:	08016022 	.word	0x08016022

08014e60 <_printf_common>:
 8014e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e64:	4616      	mov	r6, r2
 8014e66:	4699      	mov	r9, r3
 8014e68:	688a      	ldr	r2, [r1, #8]
 8014e6a:	690b      	ldr	r3, [r1, #16]
 8014e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e70:	4293      	cmp	r3, r2
 8014e72:	bfb8      	it	lt
 8014e74:	4613      	movlt	r3, r2
 8014e76:	6033      	str	r3, [r6, #0]
 8014e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e7c:	4607      	mov	r7, r0
 8014e7e:	460c      	mov	r4, r1
 8014e80:	b10a      	cbz	r2, 8014e86 <_printf_common+0x26>
 8014e82:	3301      	adds	r3, #1
 8014e84:	6033      	str	r3, [r6, #0]
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	0699      	lsls	r1, r3, #26
 8014e8a:	bf42      	ittt	mi
 8014e8c:	6833      	ldrmi	r3, [r6, #0]
 8014e8e:	3302      	addmi	r3, #2
 8014e90:	6033      	strmi	r3, [r6, #0]
 8014e92:	6825      	ldr	r5, [r4, #0]
 8014e94:	f015 0506 	ands.w	r5, r5, #6
 8014e98:	d106      	bne.n	8014ea8 <_printf_common+0x48>
 8014e9a:	f104 0a19 	add.w	sl, r4, #25
 8014e9e:	68e3      	ldr	r3, [r4, #12]
 8014ea0:	6832      	ldr	r2, [r6, #0]
 8014ea2:	1a9b      	subs	r3, r3, r2
 8014ea4:	42ab      	cmp	r3, r5
 8014ea6:	dc26      	bgt.n	8014ef6 <_printf_common+0x96>
 8014ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014eac:	1e13      	subs	r3, r2, #0
 8014eae:	6822      	ldr	r2, [r4, #0]
 8014eb0:	bf18      	it	ne
 8014eb2:	2301      	movne	r3, #1
 8014eb4:	0692      	lsls	r2, r2, #26
 8014eb6:	d42b      	bmi.n	8014f10 <_printf_common+0xb0>
 8014eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ebc:	4649      	mov	r1, r9
 8014ebe:	4638      	mov	r0, r7
 8014ec0:	47c0      	blx	r8
 8014ec2:	3001      	adds	r0, #1
 8014ec4:	d01e      	beq.n	8014f04 <_printf_common+0xa4>
 8014ec6:	6823      	ldr	r3, [r4, #0]
 8014ec8:	68e5      	ldr	r5, [r4, #12]
 8014eca:	6832      	ldr	r2, [r6, #0]
 8014ecc:	f003 0306 	and.w	r3, r3, #6
 8014ed0:	2b04      	cmp	r3, #4
 8014ed2:	bf08      	it	eq
 8014ed4:	1aad      	subeq	r5, r5, r2
 8014ed6:	68a3      	ldr	r3, [r4, #8]
 8014ed8:	6922      	ldr	r2, [r4, #16]
 8014eda:	bf0c      	ite	eq
 8014edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ee0:	2500      	movne	r5, #0
 8014ee2:	4293      	cmp	r3, r2
 8014ee4:	bfc4      	itt	gt
 8014ee6:	1a9b      	subgt	r3, r3, r2
 8014ee8:	18ed      	addgt	r5, r5, r3
 8014eea:	2600      	movs	r6, #0
 8014eec:	341a      	adds	r4, #26
 8014eee:	42b5      	cmp	r5, r6
 8014ef0:	d11a      	bne.n	8014f28 <_printf_common+0xc8>
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	e008      	b.n	8014f08 <_printf_common+0xa8>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	4652      	mov	r2, sl
 8014efa:	4649      	mov	r1, r9
 8014efc:	4638      	mov	r0, r7
 8014efe:	47c0      	blx	r8
 8014f00:	3001      	adds	r0, #1
 8014f02:	d103      	bne.n	8014f0c <_printf_common+0xac>
 8014f04:	f04f 30ff 	mov.w	r0, #4294967295
 8014f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f0c:	3501      	adds	r5, #1
 8014f0e:	e7c6      	b.n	8014e9e <_printf_common+0x3e>
 8014f10:	18e1      	adds	r1, r4, r3
 8014f12:	1c5a      	adds	r2, r3, #1
 8014f14:	2030      	movs	r0, #48	; 0x30
 8014f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f1a:	4422      	add	r2, r4
 8014f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f24:	3302      	adds	r3, #2
 8014f26:	e7c7      	b.n	8014eb8 <_printf_common+0x58>
 8014f28:	2301      	movs	r3, #1
 8014f2a:	4622      	mov	r2, r4
 8014f2c:	4649      	mov	r1, r9
 8014f2e:	4638      	mov	r0, r7
 8014f30:	47c0      	blx	r8
 8014f32:	3001      	adds	r0, #1
 8014f34:	d0e6      	beq.n	8014f04 <_printf_common+0xa4>
 8014f36:	3601      	adds	r6, #1
 8014f38:	e7d9      	b.n	8014eee <_printf_common+0x8e>
	...

08014f3c <_printf_i>:
 8014f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f40:	7e0f      	ldrb	r7, [r1, #24]
 8014f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f44:	2f78      	cmp	r7, #120	; 0x78
 8014f46:	4691      	mov	r9, r2
 8014f48:	4680      	mov	r8, r0
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	469a      	mov	sl, r3
 8014f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f52:	d807      	bhi.n	8014f64 <_printf_i+0x28>
 8014f54:	2f62      	cmp	r7, #98	; 0x62
 8014f56:	d80a      	bhi.n	8014f6e <_printf_i+0x32>
 8014f58:	2f00      	cmp	r7, #0
 8014f5a:	f000 80d8 	beq.w	801510e <_printf_i+0x1d2>
 8014f5e:	2f58      	cmp	r7, #88	; 0x58
 8014f60:	f000 80a3 	beq.w	80150aa <_printf_i+0x16e>
 8014f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f6c:	e03a      	b.n	8014fe4 <_printf_i+0xa8>
 8014f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f72:	2b15      	cmp	r3, #21
 8014f74:	d8f6      	bhi.n	8014f64 <_printf_i+0x28>
 8014f76:	a101      	add	r1, pc, #4	; (adr r1, 8014f7c <_printf_i+0x40>)
 8014f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f7c:	08014fd5 	.word	0x08014fd5
 8014f80:	08014fe9 	.word	0x08014fe9
 8014f84:	08014f65 	.word	0x08014f65
 8014f88:	08014f65 	.word	0x08014f65
 8014f8c:	08014f65 	.word	0x08014f65
 8014f90:	08014f65 	.word	0x08014f65
 8014f94:	08014fe9 	.word	0x08014fe9
 8014f98:	08014f65 	.word	0x08014f65
 8014f9c:	08014f65 	.word	0x08014f65
 8014fa0:	08014f65 	.word	0x08014f65
 8014fa4:	08014f65 	.word	0x08014f65
 8014fa8:	080150f5 	.word	0x080150f5
 8014fac:	08015019 	.word	0x08015019
 8014fb0:	080150d7 	.word	0x080150d7
 8014fb4:	08014f65 	.word	0x08014f65
 8014fb8:	08014f65 	.word	0x08014f65
 8014fbc:	08015117 	.word	0x08015117
 8014fc0:	08014f65 	.word	0x08014f65
 8014fc4:	08015019 	.word	0x08015019
 8014fc8:	08014f65 	.word	0x08014f65
 8014fcc:	08014f65 	.word	0x08014f65
 8014fd0:	080150df 	.word	0x080150df
 8014fd4:	682b      	ldr	r3, [r5, #0]
 8014fd6:	1d1a      	adds	r2, r3, #4
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	602a      	str	r2, [r5, #0]
 8014fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	e0a3      	b.n	8015130 <_printf_i+0x1f4>
 8014fe8:	6820      	ldr	r0, [r4, #0]
 8014fea:	6829      	ldr	r1, [r5, #0]
 8014fec:	0606      	lsls	r6, r0, #24
 8014fee:	f101 0304 	add.w	r3, r1, #4
 8014ff2:	d50a      	bpl.n	801500a <_printf_i+0xce>
 8014ff4:	680e      	ldr	r6, [r1, #0]
 8014ff6:	602b      	str	r3, [r5, #0]
 8014ff8:	2e00      	cmp	r6, #0
 8014ffa:	da03      	bge.n	8015004 <_printf_i+0xc8>
 8014ffc:	232d      	movs	r3, #45	; 0x2d
 8014ffe:	4276      	negs	r6, r6
 8015000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015004:	485e      	ldr	r0, [pc, #376]	; (8015180 <_printf_i+0x244>)
 8015006:	230a      	movs	r3, #10
 8015008:	e019      	b.n	801503e <_printf_i+0x102>
 801500a:	680e      	ldr	r6, [r1, #0]
 801500c:	602b      	str	r3, [r5, #0]
 801500e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015012:	bf18      	it	ne
 8015014:	b236      	sxthne	r6, r6
 8015016:	e7ef      	b.n	8014ff8 <_printf_i+0xbc>
 8015018:	682b      	ldr	r3, [r5, #0]
 801501a:	6820      	ldr	r0, [r4, #0]
 801501c:	1d19      	adds	r1, r3, #4
 801501e:	6029      	str	r1, [r5, #0]
 8015020:	0601      	lsls	r1, r0, #24
 8015022:	d501      	bpl.n	8015028 <_printf_i+0xec>
 8015024:	681e      	ldr	r6, [r3, #0]
 8015026:	e002      	b.n	801502e <_printf_i+0xf2>
 8015028:	0646      	lsls	r6, r0, #25
 801502a:	d5fb      	bpl.n	8015024 <_printf_i+0xe8>
 801502c:	881e      	ldrh	r6, [r3, #0]
 801502e:	4854      	ldr	r0, [pc, #336]	; (8015180 <_printf_i+0x244>)
 8015030:	2f6f      	cmp	r7, #111	; 0x6f
 8015032:	bf0c      	ite	eq
 8015034:	2308      	moveq	r3, #8
 8015036:	230a      	movne	r3, #10
 8015038:	2100      	movs	r1, #0
 801503a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801503e:	6865      	ldr	r5, [r4, #4]
 8015040:	60a5      	str	r5, [r4, #8]
 8015042:	2d00      	cmp	r5, #0
 8015044:	bfa2      	ittt	ge
 8015046:	6821      	ldrge	r1, [r4, #0]
 8015048:	f021 0104 	bicge.w	r1, r1, #4
 801504c:	6021      	strge	r1, [r4, #0]
 801504e:	b90e      	cbnz	r6, 8015054 <_printf_i+0x118>
 8015050:	2d00      	cmp	r5, #0
 8015052:	d04d      	beq.n	80150f0 <_printf_i+0x1b4>
 8015054:	4615      	mov	r5, r2
 8015056:	fbb6 f1f3 	udiv	r1, r6, r3
 801505a:	fb03 6711 	mls	r7, r3, r1, r6
 801505e:	5dc7      	ldrb	r7, [r0, r7]
 8015060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015064:	4637      	mov	r7, r6
 8015066:	42bb      	cmp	r3, r7
 8015068:	460e      	mov	r6, r1
 801506a:	d9f4      	bls.n	8015056 <_printf_i+0x11a>
 801506c:	2b08      	cmp	r3, #8
 801506e:	d10b      	bne.n	8015088 <_printf_i+0x14c>
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	07de      	lsls	r6, r3, #31
 8015074:	d508      	bpl.n	8015088 <_printf_i+0x14c>
 8015076:	6923      	ldr	r3, [r4, #16]
 8015078:	6861      	ldr	r1, [r4, #4]
 801507a:	4299      	cmp	r1, r3
 801507c:	bfde      	ittt	le
 801507e:	2330      	movle	r3, #48	; 0x30
 8015080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015088:	1b52      	subs	r2, r2, r5
 801508a:	6122      	str	r2, [r4, #16]
 801508c:	f8cd a000 	str.w	sl, [sp]
 8015090:	464b      	mov	r3, r9
 8015092:	aa03      	add	r2, sp, #12
 8015094:	4621      	mov	r1, r4
 8015096:	4640      	mov	r0, r8
 8015098:	f7ff fee2 	bl	8014e60 <_printf_common>
 801509c:	3001      	adds	r0, #1
 801509e:	d14c      	bne.n	801513a <_printf_i+0x1fe>
 80150a0:	f04f 30ff 	mov.w	r0, #4294967295
 80150a4:	b004      	add	sp, #16
 80150a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150aa:	4835      	ldr	r0, [pc, #212]	; (8015180 <_printf_i+0x244>)
 80150ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80150b0:	6829      	ldr	r1, [r5, #0]
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80150b8:	6029      	str	r1, [r5, #0]
 80150ba:	061d      	lsls	r5, r3, #24
 80150bc:	d514      	bpl.n	80150e8 <_printf_i+0x1ac>
 80150be:	07df      	lsls	r7, r3, #31
 80150c0:	bf44      	itt	mi
 80150c2:	f043 0320 	orrmi.w	r3, r3, #32
 80150c6:	6023      	strmi	r3, [r4, #0]
 80150c8:	b91e      	cbnz	r6, 80150d2 <_printf_i+0x196>
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	f023 0320 	bic.w	r3, r3, #32
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	2310      	movs	r3, #16
 80150d4:	e7b0      	b.n	8015038 <_printf_i+0xfc>
 80150d6:	6823      	ldr	r3, [r4, #0]
 80150d8:	f043 0320 	orr.w	r3, r3, #32
 80150dc:	6023      	str	r3, [r4, #0]
 80150de:	2378      	movs	r3, #120	; 0x78
 80150e0:	4828      	ldr	r0, [pc, #160]	; (8015184 <_printf_i+0x248>)
 80150e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80150e6:	e7e3      	b.n	80150b0 <_printf_i+0x174>
 80150e8:	0659      	lsls	r1, r3, #25
 80150ea:	bf48      	it	mi
 80150ec:	b2b6      	uxthmi	r6, r6
 80150ee:	e7e6      	b.n	80150be <_printf_i+0x182>
 80150f0:	4615      	mov	r5, r2
 80150f2:	e7bb      	b.n	801506c <_printf_i+0x130>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	6826      	ldr	r6, [r4, #0]
 80150f8:	6961      	ldr	r1, [r4, #20]
 80150fa:	1d18      	adds	r0, r3, #4
 80150fc:	6028      	str	r0, [r5, #0]
 80150fe:	0635      	lsls	r5, r6, #24
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	d501      	bpl.n	8015108 <_printf_i+0x1cc>
 8015104:	6019      	str	r1, [r3, #0]
 8015106:	e002      	b.n	801510e <_printf_i+0x1d2>
 8015108:	0670      	lsls	r0, r6, #25
 801510a:	d5fb      	bpl.n	8015104 <_printf_i+0x1c8>
 801510c:	8019      	strh	r1, [r3, #0]
 801510e:	2300      	movs	r3, #0
 8015110:	6123      	str	r3, [r4, #16]
 8015112:	4615      	mov	r5, r2
 8015114:	e7ba      	b.n	801508c <_printf_i+0x150>
 8015116:	682b      	ldr	r3, [r5, #0]
 8015118:	1d1a      	adds	r2, r3, #4
 801511a:	602a      	str	r2, [r5, #0]
 801511c:	681d      	ldr	r5, [r3, #0]
 801511e:	6862      	ldr	r2, [r4, #4]
 8015120:	2100      	movs	r1, #0
 8015122:	4628      	mov	r0, r5
 8015124:	f7eb f9fc 	bl	8000520 <memchr>
 8015128:	b108      	cbz	r0, 801512e <_printf_i+0x1f2>
 801512a:	1b40      	subs	r0, r0, r5
 801512c:	6060      	str	r0, [r4, #4]
 801512e:	6863      	ldr	r3, [r4, #4]
 8015130:	6123      	str	r3, [r4, #16]
 8015132:	2300      	movs	r3, #0
 8015134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015138:	e7a8      	b.n	801508c <_printf_i+0x150>
 801513a:	6923      	ldr	r3, [r4, #16]
 801513c:	462a      	mov	r2, r5
 801513e:	4649      	mov	r1, r9
 8015140:	4640      	mov	r0, r8
 8015142:	47d0      	blx	sl
 8015144:	3001      	adds	r0, #1
 8015146:	d0ab      	beq.n	80150a0 <_printf_i+0x164>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	079b      	lsls	r3, r3, #30
 801514c:	d413      	bmi.n	8015176 <_printf_i+0x23a>
 801514e:	68e0      	ldr	r0, [r4, #12]
 8015150:	9b03      	ldr	r3, [sp, #12]
 8015152:	4298      	cmp	r0, r3
 8015154:	bfb8      	it	lt
 8015156:	4618      	movlt	r0, r3
 8015158:	e7a4      	b.n	80150a4 <_printf_i+0x168>
 801515a:	2301      	movs	r3, #1
 801515c:	4632      	mov	r2, r6
 801515e:	4649      	mov	r1, r9
 8015160:	4640      	mov	r0, r8
 8015162:	47d0      	blx	sl
 8015164:	3001      	adds	r0, #1
 8015166:	d09b      	beq.n	80150a0 <_printf_i+0x164>
 8015168:	3501      	adds	r5, #1
 801516a:	68e3      	ldr	r3, [r4, #12]
 801516c:	9903      	ldr	r1, [sp, #12]
 801516e:	1a5b      	subs	r3, r3, r1
 8015170:	42ab      	cmp	r3, r5
 8015172:	dcf2      	bgt.n	801515a <_printf_i+0x21e>
 8015174:	e7eb      	b.n	801514e <_printf_i+0x212>
 8015176:	2500      	movs	r5, #0
 8015178:	f104 0619 	add.w	r6, r4, #25
 801517c:	e7f5      	b.n	801516a <_printf_i+0x22e>
 801517e:	bf00      	nop
 8015180:	0801602d 	.word	0x0801602d
 8015184:	0801603e 	.word	0x0801603e

08015188 <iprintf>:
 8015188:	b40f      	push	{r0, r1, r2, r3}
 801518a:	4b0a      	ldr	r3, [pc, #40]	; (80151b4 <iprintf+0x2c>)
 801518c:	b513      	push	{r0, r1, r4, lr}
 801518e:	681c      	ldr	r4, [r3, #0]
 8015190:	b124      	cbz	r4, 801519c <iprintf+0x14>
 8015192:	69a3      	ldr	r3, [r4, #24]
 8015194:	b913      	cbnz	r3, 801519c <iprintf+0x14>
 8015196:	4620      	mov	r0, r4
 8015198:	f000 fa66 	bl	8015668 <__sinit>
 801519c:	ab05      	add	r3, sp, #20
 801519e:	9a04      	ldr	r2, [sp, #16]
 80151a0:	68a1      	ldr	r1, [r4, #8]
 80151a2:	9301      	str	r3, [sp, #4]
 80151a4:	4620      	mov	r0, r4
 80151a6:	f7ff fd2b 	bl	8014c00 <_vfiprintf_r>
 80151aa:	b002      	add	sp, #8
 80151ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151b0:	b004      	add	sp, #16
 80151b2:	4770      	bx	lr
 80151b4:	24000074 	.word	0x24000074

080151b8 <_puts_r>:
 80151b8:	b570      	push	{r4, r5, r6, lr}
 80151ba:	460e      	mov	r6, r1
 80151bc:	4605      	mov	r5, r0
 80151be:	b118      	cbz	r0, 80151c8 <_puts_r+0x10>
 80151c0:	6983      	ldr	r3, [r0, #24]
 80151c2:	b90b      	cbnz	r3, 80151c8 <_puts_r+0x10>
 80151c4:	f000 fa50 	bl	8015668 <__sinit>
 80151c8:	69ab      	ldr	r3, [r5, #24]
 80151ca:	68ac      	ldr	r4, [r5, #8]
 80151cc:	b913      	cbnz	r3, 80151d4 <_puts_r+0x1c>
 80151ce:	4628      	mov	r0, r5
 80151d0:	f000 fa4a 	bl	8015668 <__sinit>
 80151d4:	4b2c      	ldr	r3, [pc, #176]	; (8015288 <_puts_r+0xd0>)
 80151d6:	429c      	cmp	r4, r3
 80151d8:	d120      	bne.n	801521c <_puts_r+0x64>
 80151da:	686c      	ldr	r4, [r5, #4]
 80151dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80151de:	07db      	lsls	r3, r3, #31
 80151e0:	d405      	bmi.n	80151ee <_puts_r+0x36>
 80151e2:	89a3      	ldrh	r3, [r4, #12]
 80151e4:	0598      	lsls	r0, r3, #22
 80151e6:	d402      	bmi.n	80151ee <_puts_r+0x36>
 80151e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151ea:	f000 fadb 	bl	80157a4 <__retarget_lock_acquire_recursive>
 80151ee:	89a3      	ldrh	r3, [r4, #12]
 80151f0:	0719      	lsls	r1, r3, #28
 80151f2:	d51d      	bpl.n	8015230 <_puts_r+0x78>
 80151f4:	6923      	ldr	r3, [r4, #16]
 80151f6:	b1db      	cbz	r3, 8015230 <_puts_r+0x78>
 80151f8:	3e01      	subs	r6, #1
 80151fa:	68a3      	ldr	r3, [r4, #8]
 80151fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015200:	3b01      	subs	r3, #1
 8015202:	60a3      	str	r3, [r4, #8]
 8015204:	bb39      	cbnz	r1, 8015256 <_puts_r+0x9e>
 8015206:	2b00      	cmp	r3, #0
 8015208:	da38      	bge.n	801527c <_puts_r+0xc4>
 801520a:	4622      	mov	r2, r4
 801520c:	210a      	movs	r1, #10
 801520e:	4628      	mov	r0, r5
 8015210:	f000 f848 	bl	80152a4 <__swbuf_r>
 8015214:	3001      	adds	r0, #1
 8015216:	d011      	beq.n	801523c <_puts_r+0x84>
 8015218:	250a      	movs	r5, #10
 801521a:	e011      	b.n	8015240 <_puts_r+0x88>
 801521c:	4b1b      	ldr	r3, [pc, #108]	; (801528c <_puts_r+0xd4>)
 801521e:	429c      	cmp	r4, r3
 8015220:	d101      	bne.n	8015226 <_puts_r+0x6e>
 8015222:	68ac      	ldr	r4, [r5, #8]
 8015224:	e7da      	b.n	80151dc <_puts_r+0x24>
 8015226:	4b1a      	ldr	r3, [pc, #104]	; (8015290 <_puts_r+0xd8>)
 8015228:	429c      	cmp	r4, r3
 801522a:	bf08      	it	eq
 801522c:	68ec      	ldreq	r4, [r5, #12]
 801522e:	e7d5      	b.n	80151dc <_puts_r+0x24>
 8015230:	4621      	mov	r1, r4
 8015232:	4628      	mov	r0, r5
 8015234:	f000 f888 	bl	8015348 <__swsetup_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	d0dd      	beq.n	80151f8 <_puts_r+0x40>
 801523c:	f04f 35ff 	mov.w	r5, #4294967295
 8015240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015242:	07da      	lsls	r2, r3, #31
 8015244:	d405      	bmi.n	8015252 <_puts_r+0x9a>
 8015246:	89a3      	ldrh	r3, [r4, #12]
 8015248:	059b      	lsls	r3, r3, #22
 801524a:	d402      	bmi.n	8015252 <_puts_r+0x9a>
 801524c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801524e:	f000 faaa 	bl	80157a6 <__retarget_lock_release_recursive>
 8015252:	4628      	mov	r0, r5
 8015254:	bd70      	pop	{r4, r5, r6, pc}
 8015256:	2b00      	cmp	r3, #0
 8015258:	da04      	bge.n	8015264 <_puts_r+0xac>
 801525a:	69a2      	ldr	r2, [r4, #24]
 801525c:	429a      	cmp	r2, r3
 801525e:	dc06      	bgt.n	801526e <_puts_r+0xb6>
 8015260:	290a      	cmp	r1, #10
 8015262:	d004      	beq.n	801526e <_puts_r+0xb6>
 8015264:	6823      	ldr	r3, [r4, #0]
 8015266:	1c5a      	adds	r2, r3, #1
 8015268:	6022      	str	r2, [r4, #0]
 801526a:	7019      	strb	r1, [r3, #0]
 801526c:	e7c5      	b.n	80151fa <_puts_r+0x42>
 801526e:	4622      	mov	r2, r4
 8015270:	4628      	mov	r0, r5
 8015272:	f000 f817 	bl	80152a4 <__swbuf_r>
 8015276:	3001      	adds	r0, #1
 8015278:	d1bf      	bne.n	80151fa <_puts_r+0x42>
 801527a:	e7df      	b.n	801523c <_puts_r+0x84>
 801527c:	6823      	ldr	r3, [r4, #0]
 801527e:	250a      	movs	r5, #10
 8015280:	1c5a      	adds	r2, r3, #1
 8015282:	6022      	str	r2, [r4, #0]
 8015284:	701d      	strb	r5, [r3, #0]
 8015286:	e7db      	b.n	8015240 <_puts_r+0x88>
 8015288:	08016070 	.word	0x08016070
 801528c:	08016090 	.word	0x08016090
 8015290:	08016050 	.word	0x08016050

08015294 <puts>:
 8015294:	4b02      	ldr	r3, [pc, #8]	; (80152a0 <puts+0xc>)
 8015296:	4601      	mov	r1, r0
 8015298:	6818      	ldr	r0, [r3, #0]
 801529a:	f7ff bf8d 	b.w	80151b8 <_puts_r>
 801529e:	bf00      	nop
 80152a0:	24000074 	.word	0x24000074

080152a4 <__swbuf_r>:
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a6:	460e      	mov	r6, r1
 80152a8:	4614      	mov	r4, r2
 80152aa:	4605      	mov	r5, r0
 80152ac:	b118      	cbz	r0, 80152b6 <__swbuf_r+0x12>
 80152ae:	6983      	ldr	r3, [r0, #24]
 80152b0:	b90b      	cbnz	r3, 80152b6 <__swbuf_r+0x12>
 80152b2:	f000 f9d9 	bl	8015668 <__sinit>
 80152b6:	4b21      	ldr	r3, [pc, #132]	; (801533c <__swbuf_r+0x98>)
 80152b8:	429c      	cmp	r4, r3
 80152ba:	d12b      	bne.n	8015314 <__swbuf_r+0x70>
 80152bc:	686c      	ldr	r4, [r5, #4]
 80152be:	69a3      	ldr	r3, [r4, #24]
 80152c0:	60a3      	str	r3, [r4, #8]
 80152c2:	89a3      	ldrh	r3, [r4, #12]
 80152c4:	071a      	lsls	r2, r3, #28
 80152c6:	d52f      	bpl.n	8015328 <__swbuf_r+0x84>
 80152c8:	6923      	ldr	r3, [r4, #16]
 80152ca:	b36b      	cbz	r3, 8015328 <__swbuf_r+0x84>
 80152cc:	6923      	ldr	r3, [r4, #16]
 80152ce:	6820      	ldr	r0, [r4, #0]
 80152d0:	1ac0      	subs	r0, r0, r3
 80152d2:	6963      	ldr	r3, [r4, #20]
 80152d4:	b2f6      	uxtb	r6, r6
 80152d6:	4283      	cmp	r3, r0
 80152d8:	4637      	mov	r7, r6
 80152da:	dc04      	bgt.n	80152e6 <__swbuf_r+0x42>
 80152dc:	4621      	mov	r1, r4
 80152de:	4628      	mov	r0, r5
 80152e0:	f000 f92e 	bl	8015540 <_fflush_r>
 80152e4:	bb30      	cbnz	r0, 8015334 <__swbuf_r+0x90>
 80152e6:	68a3      	ldr	r3, [r4, #8]
 80152e8:	3b01      	subs	r3, #1
 80152ea:	60a3      	str	r3, [r4, #8]
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	1c5a      	adds	r2, r3, #1
 80152f0:	6022      	str	r2, [r4, #0]
 80152f2:	701e      	strb	r6, [r3, #0]
 80152f4:	6963      	ldr	r3, [r4, #20]
 80152f6:	3001      	adds	r0, #1
 80152f8:	4283      	cmp	r3, r0
 80152fa:	d004      	beq.n	8015306 <__swbuf_r+0x62>
 80152fc:	89a3      	ldrh	r3, [r4, #12]
 80152fe:	07db      	lsls	r3, r3, #31
 8015300:	d506      	bpl.n	8015310 <__swbuf_r+0x6c>
 8015302:	2e0a      	cmp	r6, #10
 8015304:	d104      	bne.n	8015310 <__swbuf_r+0x6c>
 8015306:	4621      	mov	r1, r4
 8015308:	4628      	mov	r0, r5
 801530a:	f000 f919 	bl	8015540 <_fflush_r>
 801530e:	b988      	cbnz	r0, 8015334 <__swbuf_r+0x90>
 8015310:	4638      	mov	r0, r7
 8015312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015314:	4b0a      	ldr	r3, [pc, #40]	; (8015340 <__swbuf_r+0x9c>)
 8015316:	429c      	cmp	r4, r3
 8015318:	d101      	bne.n	801531e <__swbuf_r+0x7a>
 801531a:	68ac      	ldr	r4, [r5, #8]
 801531c:	e7cf      	b.n	80152be <__swbuf_r+0x1a>
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <__swbuf_r+0xa0>)
 8015320:	429c      	cmp	r4, r3
 8015322:	bf08      	it	eq
 8015324:	68ec      	ldreq	r4, [r5, #12]
 8015326:	e7ca      	b.n	80152be <__swbuf_r+0x1a>
 8015328:	4621      	mov	r1, r4
 801532a:	4628      	mov	r0, r5
 801532c:	f000 f80c 	bl	8015348 <__swsetup_r>
 8015330:	2800      	cmp	r0, #0
 8015332:	d0cb      	beq.n	80152cc <__swbuf_r+0x28>
 8015334:	f04f 37ff 	mov.w	r7, #4294967295
 8015338:	e7ea      	b.n	8015310 <__swbuf_r+0x6c>
 801533a:	bf00      	nop
 801533c:	08016070 	.word	0x08016070
 8015340:	08016090 	.word	0x08016090
 8015344:	08016050 	.word	0x08016050

08015348 <__swsetup_r>:
 8015348:	4b32      	ldr	r3, [pc, #200]	; (8015414 <__swsetup_r+0xcc>)
 801534a:	b570      	push	{r4, r5, r6, lr}
 801534c:	681d      	ldr	r5, [r3, #0]
 801534e:	4606      	mov	r6, r0
 8015350:	460c      	mov	r4, r1
 8015352:	b125      	cbz	r5, 801535e <__swsetup_r+0x16>
 8015354:	69ab      	ldr	r3, [r5, #24]
 8015356:	b913      	cbnz	r3, 801535e <__swsetup_r+0x16>
 8015358:	4628      	mov	r0, r5
 801535a:	f000 f985 	bl	8015668 <__sinit>
 801535e:	4b2e      	ldr	r3, [pc, #184]	; (8015418 <__swsetup_r+0xd0>)
 8015360:	429c      	cmp	r4, r3
 8015362:	d10f      	bne.n	8015384 <__swsetup_r+0x3c>
 8015364:	686c      	ldr	r4, [r5, #4]
 8015366:	89a3      	ldrh	r3, [r4, #12]
 8015368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801536c:	0719      	lsls	r1, r3, #28
 801536e:	d42c      	bmi.n	80153ca <__swsetup_r+0x82>
 8015370:	06dd      	lsls	r5, r3, #27
 8015372:	d411      	bmi.n	8015398 <__swsetup_r+0x50>
 8015374:	2309      	movs	r3, #9
 8015376:	6033      	str	r3, [r6, #0]
 8015378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801537c:	81a3      	strh	r3, [r4, #12]
 801537e:	f04f 30ff 	mov.w	r0, #4294967295
 8015382:	e03e      	b.n	8015402 <__swsetup_r+0xba>
 8015384:	4b25      	ldr	r3, [pc, #148]	; (801541c <__swsetup_r+0xd4>)
 8015386:	429c      	cmp	r4, r3
 8015388:	d101      	bne.n	801538e <__swsetup_r+0x46>
 801538a:	68ac      	ldr	r4, [r5, #8]
 801538c:	e7eb      	b.n	8015366 <__swsetup_r+0x1e>
 801538e:	4b24      	ldr	r3, [pc, #144]	; (8015420 <__swsetup_r+0xd8>)
 8015390:	429c      	cmp	r4, r3
 8015392:	bf08      	it	eq
 8015394:	68ec      	ldreq	r4, [r5, #12]
 8015396:	e7e6      	b.n	8015366 <__swsetup_r+0x1e>
 8015398:	0758      	lsls	r0, r3, #29
 801539a:	d512      	bpl.n	80153c2 <__swsetup_r+0x7a>
 801539c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801539e:	b141      	cbz	r1, 80153b2 <__swsetup_r+0x6a>
 80153a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153a4:	4299      	cmp	r1, r3
 80153a6:	d002      	beq.n	80153ae <__swsetup_r+0x66>
 80153a8:	4630      	mov	r0, r6
 80153aa:	f000 fa63 	bl	8015874 <_free_r>
 80153ae:	2300      	movs	r3, #0
 80153b0:	6363      	str	r3, [r4, #52]	; 0x34
 80153b2:	89a3      	ldrh	r3, [r4, #12]
 80153b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153b8:	81a3      	strh	r3, [r4, #12]
 80153ba:	2300      	movs	r3, #0
 80153bc:	6063      	str	r3, [r4, #4]
 80153be:	6923      	ldr	r3, [r4, #16]
 80153c0:	6023      	str	r3, [r4, #0]
 80153c2:	89a3      	ldrh	r3, [r4, #12]
 80153c4:	f043 0308 	orr.w	r3, r3, #8
 80153c8:	81a3      	strh	r3, [r4, #12]
 80153ca:	6923      	ldr	r3, [r4, #16]
 80153cc:	b94b      	cbnz	r3, 80153e2 <__swsetup_r+0x9a>
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80153d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153d8:	d003      	beq.n	80153e2 <__swsetup_r+0x9a>
 80153da:	4621      	mov	r1, r4
 80153dc:	4630      	mov	r0, r6
 80153de:	f000 fa09 	bl	80157f4 <__smakebuf_r>
 80153e2:	89a0      	ldrh	r0, [r4, #12]
 80153e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153e8:	f010 0301 	ands.w	r3, r0, #1
 80153ec:	d00a      	beq.n	8015404 <__swsetup_r+0xbc>
 80153ee:	2300      	movs	r3, #0
 80153f0:	60a3      	str	r3, [r4, #8]
 80153f2:	6963      	ldr	r3, [r4, #20]
 80153f4:	425b      	negs	r3, r3
 80153f6:	61a3      	str	r3, [r4, #24]
 80153f8:	6923      	ldr	r3, [r4, #16]
 80153fa:	b943      	cbnz	r3, 801540e <__swsetup_r+0xc6>
 80153fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015400:	d1ba      	bne.n	8015378 <__swsetup_r+0x30>
 8015402:	bd70      	pop	{r4, r5, r6, pc}
 8015404:	0781      	lsls	r1, r0, #30
 8015406:	bf58      	it	pl
 8015408:	6963      	ldrpl	r3, [r4, #20]
 801540a:	60a3      	str	r3, [r4, #8]
 801540c:	e7f4      	b.n	80153f8 <__swsetup_r+0xb0>
 801540e:	2000      	movs	r0, #0
 8015410:	e7f7      	b.n	8015402 <__swsetup_r+0xba>
 8015412:	bf00      	nop
 8015414:	24000074 	.word	0x24000074
 8015418:	08016070 	.word	0x08016070
 801541c:	08016090 	.word	0x08016090
 8015420:	08016050 	.word	0x08016050

08015424 <abort>:
 8015424:	b508      	push	{r3, lr}
 8015426:	2006      	movs	r0, #6
 8015428:	f000 fb3c 	bl	8015aa4 <raise>
 801542c:	2001      	movs	r0, #1
 801542e:	f7ec fb03 	bl	8001a38 <_exit>
	...

08015434 <__sflush_r>:
 8015434:	898a      	ldrh	r2, [r1, #12]
 8015436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801543a:	4605      	mov	r5, r0
 801543c:	0710      	lsls	r0, r2, #28
 801543e:	460c      	mov	r4, r1
 8015440:	d458      	bmi.n	80154f4 <__sflush_r+0xc0>
 8015442:	684b      	ldr	r3, [r1, #4]
 8015444:	2b00      	cmp	r3, #0
 8015446:	dc05      	bgt.n	8015454 <__sflush_r+0x20>
 8015448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801544a:	2b00      	cmp	r3, #0
 801544c:	dc02      	bgt.n	8015454 <__sflush_r+0x20>
 801544e:	2000      	movs	r0, #0
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015456:	2e00      	cmp	r6, #0
 8015458:	d0f9      	beq.n	801544e <__sflush_r+0x1a>
 801545a:	2300      	movs	r3, #0
 801545c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015460:	682f      	ldr	r7, [r5, #0]
 8015462:	602b      	str	r3, [r5, #0]
 8015464:	d032      	beq.n	80154cc <__sflush_r+0x98>
 8015466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	075a      	lsls	r2, r3, #29
 801546c:	d505      	bpl.n	801547a <__sflush_r+0x46>
 801546e:	6863      	ldr	r3, [r4, #4]
 8015470:	1ac0      	subs	r0, r0, r3
 8015472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015474:	b10b      	cbz	r3, 801547a <__sflush_r+0x46>
 8015476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015478:	1ac0      	subs	r0, r0, r3
 801547a:	2300      	movs	r3, #0
 801547c:	4602      	mov	r2, r0
 801547e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015480:	6a21      	ldr	r1, [r4, #32]
 8015482:	4628      	mov	r0, r5
 8015484:	47b0      	blx	r6
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	d106      	bne.n	801549a <__sflush_r+0x66>
 801548c:	6829      	ldr	r1, [r5, #0]
 801548e:	291d      	cmp	r1, #29
 8015490:	d82c      	bhi.n	80154ec <__sflush_r+0xb8>
 8015492:	4a2a      	ldr	r2, [pc, #168]	; (801553c <__sflush_r+0x108>)
 8015494:	40ca      	lsrs	r2, r1
 8015496:	07d6      	lsls	r6, r2, #31
 8015498:	d528      	bpl.n	80154ec <__sflush_r+0xb8>
 801549a:	2200      	movs	r2, #0
 801549c:	6062      	str	r2, [r4, #4]
 801549e:	04d9      	lsls	r1, r3, #19
 80154a0:	6922      	ldr	r2, [r4, #16]
 80154a2:	6022      	str	r2, [r4, #0]
 80154a4:	d504      	bpl.n	80154b0 <__sflush_r+0x7c>
 80154a6:	1c42      	adds	r2, r0, #1
 80154a8:	d101      	bne.n	80154ae <__sflush_r+0x7a>
 80154aa:	682b      	ldr	r3, [r5, #0]
 80154ac:	b903      	cbnz	r3, 80154b0 <__sflush_r+0x7c>
 80154ae:	6560      	str	r0, [r4, #84]	; 0x54
 80154b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154b2:	602f      	str	r7, [r5, #0]
 80154b4:	2900      	cmp	r1, #0
 80154b6:	d0ca      	beq.n	801544e <__sflush_r+0x1a>
 80154b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154bc:	4299      	cmp	r1, r3
 80154be:	d002      	beq.n	80154c6 <__sflush_r+0x92>
 80154c0:	4628      	mov	r0, r5
 80154c2:	f000 f9d7 	bl	8015874 <_free_r>
 80154c6:	2000      	movs	r0, #0
 80154c8:	6360      	str	r0, [r4, #52]	; 0x34
 80154ca:	e7c1      	b.n	8015450 <__sflush_r+0x1c>
 80154cc:	6a21      	ldr	r1, [r4, #32]
 80154ce:	2301      	movs	r3, #1
 80154d0:	4628      	mov	r0, r5
 80154d2:	47b0      	blx	r6
 80154d4:	1c41      	adds	r1, r0, #1
 80154d6:	d1c7      	bne.n	8015468 <__sflush_r+0x34>
 80154d8:	682b      	ldr	r3, [r5, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d0c4      	beq.n	8015468 <__sflush_r+0x34>
 80154de:	2b1d      	cmp	r3, #29
 80154e0:	d001      	beq.n	80154e6 <__sflush_r+0xb2>
 80154e2:	2b16      	cmp	r3, #22
 80154e4:	d101      	bne.n	80154ea <__sflush_r+0xb6>
 80154e6:	602f      	str	r7, [r5, #0]
 80154e8:	e7b1      	b.n	801544e <__sflush_r+0x1a>
 80154ea:	89a3      	ldrh	r3, [r4, #12]
 80154ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154f0:	81a3      	strh	r3, [r4, #12]
 80154f2:	e7ad      	b.n	8015450 <__sflush_r+0x1c>
 80154f4:	690f      	ldr	r7, [r1, #16]
 80154f6:	2f00      	cmp	r7, #0
 80154f8:	d0a9      	beq.n	801544e <__sflush_r+0x1a>
 80154fa:	0793      	lsls	r3, r2, #30
 80154fc:	680e      	ldr	r6, [r1, #0]
 80154fe:	bf08      	it	eq
 8015500:	694b      	ldreq	r3, [r1, #20]
 8015502:	600f      	str	r7, [r1, #0]
 8015504:	bf18      	it	ne
 8015506:	2300      	movne	r3, #0
 8015508:	eba6 0807 	sub.w	r8, r6, r7
 801550c:	608b      	str	r3, [r1, #8]
 801550e:	f1b8 0f00 	cmp.w	r8, #0
 8015512:	dd9c      	ble.n	801544e <__sflush_r+0x1a>
 8015514:	6a21      	ldr	r1, [r4, #32]
 8015516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015518:	4643      	mov	r3, r8
 801551a:	463a      	mov	r2, r7
 801551c:	4628      	mov	r0, r5
 801551e:	47b0      	blx	r6
 8015520:	2800      	cmp	r0, #0
 8015522:	dc06      	bgt.n	8015532 <__sflush_r+0xfe>
 8015524:	89a3      	ldrh	r3, [r4, #12]
 8015526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801552a:	81a3      	strh	r3, [r4, #12]
 801552c:	f04f 30ff 	mov.w	r0, #4294967295
 8015530:	e78e      	b.n	8015450 <__sflush_r+0x1c>
 8015532:	4407      	add	r7, r0
 8015534:	eba8 0800 	sub.w	r8, r8, r0
 8015538:	e7e9      	b.n	801550e <__sflush_r+0xda>
 801553a:	bf00      	nop
 801553c:	20400001 	.word	0x20400001

08015540 <_fflush_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	690b      	ldr	r3, [r1, #16]
 8015544:	4605      	mov	r5, r0
 8015546:	460c      	mov	r4, r1
 8015548:	b913      	cbnz	r3, 8015550 <_fflush_r+0x10>
 801554a:	2500      	movs	r5, #0
 801554c:	4628      	mov	r0, r5
 801554e:	bd38      	pop	{r3, r4, r5, pc}
 8015550:	b118      	cbz	r0, 801555a <_fflush_r+0x1a>
 8015552:	6983      	ldr	r3, [r0, #24]
 8015554:	b90b      	cbnz	r3, 801555a <_fflush_r+0x1a>
 8015556:	f000 f887 	bl	8015668 <__sinit>
 801555a:	4b14      	ldr	r3, [pc, #80]	; (80155ac <_fflush_r+0x6c>)
 801555c:	429c      	cmp	r4, r3
 801555e:	d11b      	bne.n	8015598 <_fflush_r+0x58>
 8015560:	686c      	ldr	r4, [r5, #4]
 8015562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d0ef      	beq.n	801554a <_fflush_r+0xa>
 801556a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801556c:	07d0      	lsls	r0, r2, #31
 801556e:	d404      	bmi.n	801557a <_fflush_r+0x3a>
 8015570:	0599      	lsls	r1, r3, #22
 8015572:	d402      	bmi.n	801557a <_fflush_r+0x3a>
 8015574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015576:	f000 f915 	bl	80157a4 <__retarget_lock_acquire_recursive>
 801557a:	4628      	mov	r0, r5
 801557c:	4621      	mov	r1, r4
 801557e:	f7ff ff59 	bl	8015434 <__sflush_r>
 8015582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015584:	07da      	lsls	r2, r3, #31
 8015586:	4605      	mov	r5, r0
 8015588:	d4e0      	bmi.n	801554c <_fflush_r+0xc>
 801558a:	89a3      	ldrh	r3, [r4, #12]
 801558c:	059b      	lsls	r3, r3, #22
 801558e:	d4dd      	bmi.n	801554c <_fflush_r+0xc>
 8015590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015592:	f000 f908 	bl	80157a6 <__retarget_lock_release_recursive>
 8015596:	e7d9      	b.n	801554c <_fflush_r+0xc>
 8015598:	4b05      	ldr	r3, [pc, #20]	; (80155b0 <_fflush_r+0x70>)
 801559a:	429c      	cmp	r4, r3
 801559c:	d101      	bne.n	80155a2 <_fflush_r+0x62>
 801559e:	68ac      	ldr	r4, [r5, #8]
 80155a0:	e7df      	b.n	8015562 <_fflush_r+0x22>
 80155a2:	4b04      	ldr	r3, [pc, #16]	; (80155b4 <_fflush_r+0x74>)
 80155a4:	429c      	cmp	r4, r3
 80155a6:	bf08      	it	eq
 80155a8:	68ec      	ldreq	r4, [r5, #12]
 80155aa:	e7da      	b.n	8015562 <_fflush_r+0x22>
 80155ac:	08016070 	.word	0x08016070
 80155b0:	08016090 	.word	0x08016090
 80155b4:	08016050 	.word	0x08016050

080155b8 <std>:
 80155b8:	2300      	movs	r3, #0
 80155ba:	b510      	push	{r4, lr}
 80155bc:	4604      	mov	r4, r0
 80155be:	e9c0 3300 	strd	r3, r3, [r0]
 80155c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155c6:	6083      	str	r3, [r0, #8]
 80155c8:	8181      	strh	r1, [r0, #12]
 80155ca:	6643      	str	r3, [r0, #100]	; 0x64
 80155cc:	81c2      	strh	r2, [r0, #14]
 80155ce:	6183      	str	r3, [r0, #24]
 80155d0:	4619      	mov	r1, r3
 80155d2:	2208      	movs	r2, #8
 80155d4:	305c      	adds	r0, #92	; 0x5c
 80155d6:	f7ff fae1 	bl	8014b9c <memset>
 80155da:	4b05      	ldr	r3, [pc, #20]	; (80155f0 <std+0x38>)
 80155dc:	6263      	str	r3, [r4, #36]	; 0x24
 80155de:	4b05      	ldr	r3, [pc, #20]	; (80155f4 <std+0x3c>)
 80155e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80155e2:	4b05      	ldr	r3, [pc, #20]	; (80155f8 <std+0x40>)
 80155e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80155e6:	4b05      	ldr	r3, [pc, #20]	; (80155fc <std+0x44>)
 80155e8:	6224      	str	r4, [r4, #32]
 80155ea:	6323      	str	r3, [r4, #48]	; 0x30
 80155ec:	bd10      	pop	{r4, pc}
 80155ee:	bf00      	nop
 80155f0:	08015add 	.word	0x08015add
 80155f4:	08015aff 	.word	0x08015aff
 80155f8:	08015b37 	.word	0x08015b37
 80155fc:	08015b5b 	.word	0x08015b5b

08015600 <_cleanup_r>:
 8015600:	4901      	ldr	r1, [pc, #4]	; (8015608 <_cleanup_r+0x8>)
 8015602:	f000 b8af 	b.w	8015764 <_fwalk_reent>
 8015606:	bf00      	nop
 8015608:	08015541 	.word	0x08015541

0801560c <__sfmoreglue>:
 801560c:	b570      	push	{r4, r5, r6, lr}
 801560e:	2268      	movs	r2, #104	; 0x68
 8015610:	1e4d      	subs	r5, r1, #1
 8015612:	4355      	muls	r5, r2
 8015614:	460e      	mov	r6, r1
 8015616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801561a:	f000 f997 	bl	801594c <_malloc_r>
 801561e:	4604      	mov	r4, r0
 8015620:	b140      	cbz	r0, 8015634 <__sfmoreglue+0x28>
 8015622:	2100      	movs	r1, #0
 8015624:	e9c0 1600 	strd	r1, r6, [r0]
 8015628:	300c      	adds	r0, #12
 801562a:	60a0      	str	r0, [r4, #8]
 801562c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015630:	f7ff fab4 	bl	8014b9c <memset>
 8015634:	4620      	mov	r0, r4
 8015636:	bd70      	pop	{r4, r5, r6, pc}

08015638 <__sfp_lock_acquire>:
 8015638:	4801      	ldr	r0, [pc, #4]	; (8015640 <__sfp_lock_acquire+0x8>)
 801563a:	f000 b8b3 	b.w	80157a4 <__retarget_lock_acquire_recursive>
 801563e:	bf00      	nop
 8015640:	24015625 	.word	0x24015625

08015644 <__sfp_lock_release>:
 8015644:	4801      	ldr	r0, [pc, #4]	; (801564c <__sfp_lock_release+0x8>)
 8015646:	f000 b8ae 	b.w	80157a6 <__retarget_lock_release_recursive>
 801564a:	bf00      	nop
 801564c:	24015625 	.word	0x24015625

08015650 <__sinit_lock_acquire>:
 8015650:	4801      	ldr	r0, [pc, #4]	; (8015658 <__sinit_lock_acquire+0x8>)
 8015652:	f000 b8a7 	b.w	80157a4 <__retarget_lock_acquire_recursive>
 8015656:	bf00      	nop
 8015658:	24015626 	.word	0x24015626

0801565c <__sinit_lock_release>:
 801565c:	4801      	ldr	r0, [pc, #4]	; (8015664 <__sinit_lock_release+0x8>)
 801565e:	f000 b8a2 	b.w	80157a6 <__retarget_lock_release_recursive>
 8015662:	bf00      	nop
 8015664:	24015626 	.word	0x24015626

08015668 <__sinit>:
 8015668:	b510      	push	{r4, lr}
 801566a:	4604      	mov	r4, r0
 801566c:	f7ff fff0 	bl	8015650 <__sinit_lock_acquire>
 8015670:	69a3      	ldr	r3, [r4, #24]
 8015672:	b11b      	cbz	r3, 801567c <__sinit+0x14>
 8015674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015678:	f7ff bff0 	b.w	801565c <__sinit_lock_release>
 801567c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015680:	6523      	str	r3, [r4, #80]	; 0x50
 8015682:	4b13      	ldr	r3, [pc, #76]	; (80156d0 <__sinit+0x68>)
 8015684:	4a13      	ldr	r2, [pc, #76]	; (80156d4 <__sinit+0x6c>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	62a2      	str	r2, [r4, #40]	; 0x28
 801568a:	42a3      	cmp	r3, r4
 801568c:	bf04      	itt	eq
 801568e:	2301      	moveq	r3, #1
 8015690:	61a3      	streq	r3, [r4, #24]
 8015692:	4620      	mov	r0, r4
 8015694:	f000 f820 	bl	80156d8 <__sfp>
 8015698:	6060      	str	r0, [r4, #4]
 801569a:	4620      	mov	r0, r4
 801569c:	f000 f81c 	bl	80156d8 <__sfp>
 80156a0:	60a0      	str	r0, [r4, #8]
 80156a2:	4620      	mov	r0, r4
 80156a4:	f000 f818 	bl	80156d8 <__sfp>
 80156a8:	2200      	movs	r2, #0
 80156aa:	60e0      	str	r0, [r4, #12]
 80156ac:	2104      	movs	r1, #4
 80156ae:	6860      	ldr	r0, [r4, #4]
 80156b0:	f7ff ff82 	bl	80155b8 <std>
 80156b4:	68a0      	ldr	r0, [r4, #8]
 80156b6:	2201      	movs	r2, #1
 80156b8:	2109      	movs	r1, #9
 80156ba:	f7ff ff7d 	bl	80155b8 <std>
 80156be:	68e0      	ldr	r0, [r4, #12]
 80156c0:	2202      	movs	r2, #2
 80156c2:	2112      	movs	r1, #18
 80156c4:	f7ff ff78 	bl	80155b8 <std>
 80156c8:	2301      	movs	r3, #1
 80156ca:	61a3      	str	r3, [r4, #24]
 80156cc:	e7d2      	b.n	8015674 <__sinit+0xc>
 80156ce:	bf00      	nop
 80156d0:	08016018 	.word	0x08016018
 80156d4:	08015601 	.word	0x08015601

080156d8 <__sfp>:
 80156d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156da:	4607      	mov	r7, r0
 80156dc:	f7ff ffac 	bl	8015638 <__sfp_lock_acquire>
 80156e0:	4b1e      	ldr	r3, [pc, #120]	; (801575c <__sfp+0x84>)
 80156e2:	681e      	ldr	r6, [r3, #0]
 80156e4:	69b3      	ldr	r3, [r6, #24]
 80156e6:	b913      	cbnz	r3, 80156ee <__sfp+0x16>
 80156e8:	4630      	mov	r0, r6
 80156ea:	f7ff ffbd 	bl	8015668 <__sinit>
 80156ee:	3648      	adds	r6, #72	; 0x48
 80156f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80156f4:	3b01      	subs	r3, #1
 80156f6:	d503      	bpl.n	8015700 <__sfp+0x28>
 80156f8:	6833      	ldr	r3, [r6, #0]
 80156fa:	b30b      	cbz	r3, 8015740 <__sfp+0x68>
 80156fc:	6836      	ldr	r6, [r6, #0]
 80156fe:	e7f7      	b.n	80156f0 <__sfp+0x18>
 8015700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015704:	b9d5      	cbnz	r5, 801573c <__sfp+0x64>
 8015706:	4b16      	ldr	r3, [pc, #88]	; (8015760 <__sfp+0x88>)
 8015708:	60e3      	str	r3, [r4, #12]
 801570a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801570e:	6665      	str	r5, [r4, #100]	; 0x64
 8015710:	f000 f847 	bl	80157a2 <__retarget_lock_init_recursive>
 8015714:	f7ff ff96 	bl	8015644 <__sfp_lock_release>
 8015718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801571c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015720:	6025      	str	r5, [r4, #0]
 8015722:	61a5      	str	r5, [r4, #24]
 8015724:	2208      	movs	r2, #8
 8015726:	4629      	mov	r1, r5
 8015728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801572c:	f7ff fa36 	bl	8014b9c <memset>
 8015730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015738:	4620      	mov	r0, r4
 801573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801573c:	3468      	adds	r4, #104	; 0x68
 801573e:	e7d9      	b.n	80156f4 <__sfp+0x1c>
 8015740:	2104      	movs	r1, #4
 8015742:	4638      	mov	r0, r7
 8015744:	f7ff ff62 	bl	801560c <__sfmoreglue>
 8015748:	4604      	mov	r4, r0
 801574a:	6030      	str	r0, [r6, #0]
 801574c:	2800      	cmp	r0, #0
 801574e:	d1d5      	bne.n	80156fc <__sfp+0x24>
 8015750:	f7ff ff78 	bl	8015644 <__sfp_lock_release>
 8015754:	230c      	movs	r3, #12
 8015756:	603b      	str	r3, [r7, #0]
 8015758:	e7ee      	b.n	8015738 <__sfp+0x60>
 801575a:	bf00      	nop
 801575c:	08016018 	.word	0x08016018
 8015760:	ffff0001 	.word	0xffff0001

08015764 <_fwalk_reent>:
 8015764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015768:	4606      	mov	r6, r0
 801576a:	4688      	mov	r8, r1
 801576c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015770:	2700      	movs	r7, #0
 8015772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015776:	f1b9 0901 	subs.w	r9, r9, #1
 801577a:	d505      	bpl.n	8015788 <_fwalk_reent+0x24>
 801577c:	6824      	ldr	r4, [r4, #0]
 801577e:	2c00      	cmp	r4, #0
 8015780:	d1f7      	bne.n	8015772 <_fwalk_reent+0xe>
 8015782:	4638      	mov	r0, r7
 8015784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015788:	89ab      	ldrh	r3, [r5, #12]
 801578a:	2b01      	cmp	r3, #1
 801578c:	d907      	bls.n	801579e <_fwalk_reent+0x3a>
 801578e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015792:	3301      	adds	r3, #1
 8015794:	d003      	beq.n	801579e <_fwalk_reent+0x3a>
 8015796:	4629      	mov	r1, r5
 8015798:	4630      	mov	r0, r6
 801579a:	47c0      	blx	r8
 801579c:	4307      	orrs	r7, r0
 801579e:	3568      	adds	r5, #104	; 0x68
 80157a0:	e7e9      	b.n	8015776 <_fwalk_reent+0x12>

080157a2 <__retarget_lock_init_recursive>:
 80157a2:	4770      	bx	lr

080157a4 <__retarget_lock_acquire_recursive>:
 80157a4:	4770      	bx	lr

080157a6 <__retarget_lock_release_recursive>:
 80157a6:	4770      	bx	lr

080157a8 <__swhatbuf_r>:
 80157a8:	b570      	push	{r4, r5, r6, lr}
 80157aa:	460e      	mov	r6, r1
 80157ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b0:	2900      	cmp	r1, #0
 80157b2:	b096      	sub	sp, #88	; 0x58
 80157b4:	4614      	mov	r4, r2
 80157b6:	461d      	mov	r5, r3
 80157b8:	da08      	bge.n	80157cc <__swhatbuf_r+0x24>
 80157ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80157be:	2200      	movs	r2, #0
 80157c0:	602a      	str	r2, [r5, #0]
 80157c2:	061a      	lsls	r2, r3, #24
 80157c4:	d410      	bmi.n	80157e8 <__swhatbuf_r+0x40>
 80157c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157ca:	e00e      	b.n	80157ea <__swhatbuf_r+0x42>
 80157cc:	466a      	mov	r2, sp
 80157ce:	f000 f9eb 	bl	8015ba8 <_fstat_r>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	dbf1      	blt.n	80157ba <__swhatbuf_r+0x12>
 80157d6:	9a01      	ldr	r2, [sp, #4]
 80157d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80157dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80157e0:	425a      	negs	r2, r3
 80157e2:	415a      	adcs	r2, r3
 80157e4:	602a      	str	r2, [r5, #0]
 80157e6:	e7ee      	b.n	80157c6 <__swhatbuf_r+0x1e>
 80157e8:	2340      	movs	r3, #64	; 0x40
 80157ea:	2000      	movs	r0, #0
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	b016      	add	sp, #88	; 0x58
 80157f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080157f4 <__smakebuf_r>:
 80157f4:	898b      	ldrh	r3, [r1, #12]
 80157f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157f8:	079d      	lsls	r5, r3, #30
 80157fa:	4606      	mov	r6, r0
 80157fc:	460c      	mov	r4, r1
 80157fe:	d507      	bpl.n	8015810 <__smakebuf_r+0x1c>
 8015800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015804:	6023      	str	r3, [r4, #0]
 8015806:	6123      	str	r3, [r4, #16]
 8015808:	2301      	movs	r3, #1
 801580a:	6163      	str	r3, [r4, #20]
 801580c:	b002      	add	sp, #8
 801580e:	bd70      	pop	{r4, r5, r6, pc}
 8015810:	ab01      	add	r3, sp, #4
 8015812:	466a      	mov	r2, sp
 8015814:	f7ff ffc8 	bl	80157a8 <__swhatbuf_r>
 8015818:	9900      	ldr	r1, [sp, #0]
 801581a:	4605      	mov	r5, r0
 801581c:	4630      	mov	r0, r6
 801581e:	f000 f895 	bl	801594c <_malloc_r>
 8015822:	b948      	cbnz	r0, 8015838 <__smakebuf_r+0x44>
 8015824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015828:	059a      	lsls	r2, r3, #22
 801582a:	d4ef      	bmi.n	801580c <__smakebuf_r+0x18>
 801582c:	f023 0303 	bic.w	r3, r3, #3
 8015830:	f043 0302 	orr.w	r3, r3, #2
 8015834:	81a3      	strh	r3, [r4, #12]
 8015836:	e7e3      	b.n	8015800 <__smakebuf_r+0xc>
 8015838:	4b0d      	ldr	r3, [pc, #52]	; (8015870 <__smakebuf_r+0x7c>)
 801583a:	62b3      	str	r3, [r6, #40]	; 0x28
 801583c:	89a3      	ldrh	r3, [r4, #12]
 801583e:	6020      	str	r0, [r4, #0]
 8015840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015844:	81a3      	strh	r3, [r4, #12]
 8015846:	9b00      	ldr	r3, [sp, #0]
 8015848:	6163      	str	r3, [r4, #20]
 801584a:	9b01      	ldr	r3, [sp, #4]
 801584c:	6120      	str	r0, [r4, #16]
 801584e:	b15b      	cbz	r3, 8015868 <__smakebuf_r+0x74>
 8015850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015854:	4630      	mov	r0, r6
 8015856:	f000 f9b9 	bl	8015bcc <_isatty_r>
 801585a:	b128      	cbz	r0, 8015868 <__smakebuf_r+0x74>
 801585c:	89a3      	ldrh	r3, [r4, #12]
 801585e:	f023 0303 	bic.w	r3, r3, #3
 8015862:	f043 0301 	orr.w	r3, r3, #1
 8015866:	81a3      	strh	r3, [r4, #12]
 8015868:	89a0      	ldrh	r0, [r4, #12]
 801586a:	4305      	orrs	r5, r0
 801586c:	81a5      	strh	r5, [r4, #12]
 801586e:	e7cd      	b.n	801580c <__smakebuf_r+0x18>
 8015870:	08015601 	.word	0x08015601

08015874 <_free_r>:
 8015874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015876:	2900      	cmp	r1, #0
 8015878:	d044      	beq.n	8015904 <_free_r+0x90>
 801587a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801587e:	9001      	str	r0, [sp, #4]
 8015880:	2b00      	cmp	r3, #0
 8015882:	f1a1 0404 	sub.w	r4, r1, #4
 8015886:	bfb8      	it	lt
 8015888:	18e4      	addlt	r4, r4, r3
 801588a:	f000 f9c1 	bl	8015c10 <__malloc_lock>
 801588e:	4a1e      	ldr	r2, [pc, #120]	; (8015908 <_free_r+0x94>)
 8015890:	9801      	ldr	r0, [sp, #4]
 8015892:	6813      	ldr	r3, [r2, #0]
 8015894:	b933      	cbnz	r3, 80158a4 <_free_r+0x30>
 8015896:	6063      	str	r3, [r4, #4]
 8015898:	6014      	str	r4, [r2, #0]
 801589a:	b003      	add	sp, #12
 801589c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158a0:	f000 b9bc 	b.w	8015c1c <__malloc_unlock>
 80158a4:	42a3      	cmp	r3, r4
 80158a6:	d908      	bls.n	80158ba <_free_r+0x46>
 80158a8:	6825      	ldr	r5, [r4, #0]
 80158aa:	1961      	adds	r1, r4, r5
 80158ac:	428b      	cmp	r3, r1
 80158ae:	bf01      	itttt	eq
 80158b0:	6819      	ldreq	r1, [r3, #0]
 80158b2:	685b      	ldreq	r3, [r3, #4]
 80158b4:	1949      	addeq	r1, r1, r5
 80158b6:	6021      	streq	r1, [r4, #0]
 80158b8:	e7ed      	b.n	8015896 <_free_r+0x22>
 80158ba:	461a      	mov	r2, r3
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	b10b      	cbz	r3, 80158c4 <_free_r+0x50>
 80158c0:	42a3      	cmp	r3, r4
 80158c2:	d9fa      	bls.n	80158ba <_free_r+0x46>
 80158c4:	6811      	ldr	r1, [r2, #0]
 80158c6:	1855      	adds	r5, r2, r1
 80158c8:	42a5      	cmp	r5, r4
 80158ca:	d10b      	bne.n	80158e4 <_free_r+0x70>
 80158cc:	6824      	ldr	r4, [r4, #0]
 80158ce:	4421      	add	r1, r4
 80158d0:	1854      	adds	r4, r2, r1
 80158d2:	42a3      	cmp	r3, r4
 80158d4:	6011      	str	r1, [r2, #0]
 80158d6:	d1e0      	bne.n	801589a <_free_r+0x26>
 80158d8:	681c      	ldr	r4, [r3, #0]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	6053      	str	r3, [r2, #4]
 80158de:	4421      	add	r1, r4
 80158e0:	6011      	str	r1, [r2, #0]
 80158e2:	e7da      	b.n	801589a <_free_r+0x26>
 80158e4:	d902      	bls.n	80158ec <_free_r+0x78>
 80158e6:	230c      	movs	r3, #12
 80158e8:	6003      	str	r3, [r0, #0]
 80158ea:	e7d6      	b.n	801589a <_free_r+0x26>
 80158ec:	6825      	ldr	r5, [r4, #0]
 80158ee:	1961      	adds	r1, r4, r5
 80158f0:	428b      	cmp	r3, r1
 80158f2:	bf04      	itt	eq
 80158f4:	6819      	ldreq	r1, [r3, #0]
 80158f6:	685b      	ldreq	r3, [r3, #4]
 80158f8:	6063      	str	r3, [r4, #4]
 80158fa:	bf04      	itt	eq
 80158fc:	1949      	addeq	r1, r1, r5
 80158fe:	6021      	streq	r1, [r4, #0]
 8015900:	6054      	str	r4, [r2, #4]
 8015902:	e7ca      	b.n	801589a <_free_r+0x26>
 8015904:	b003      	add	sp, #12
 8015906:	bd30      	pop	{r4, r5, pc}
 8015908:	24015628 	.word	0x24015628

0801590c <sbrk_aligned>:
 801590c:	b570      	push	{r4, r5, r6, lr}
 801590e:	4e0e      	ldr	r6, [pc, #56]	; (8015948 <sbrk_aligned+0x3c>)
 8015910:	460c      	mov	r4, r1
 8015912:	6831      	ldr	r1, [r6, #0]
 8015914:	4605      	mov	r5, r0
 8015916:	b911      	cbnz	r1, 801591e <sbrk_aligned+0x12>
 8015918:	f000 f88c 	bl	8015a34 <_sbrk_r>
 801591c:	6030      	str	r0, [r6, #0]
 801591e:	4621      	mov	r1, r4
 8015920:	4628      	mov	r0, r5
 8015922:	f000 f887 	bl	8015a34 <_sbrk_r>
 8015926:	1c43      	adds	r3, r0, #1
 8015928:	d00a      	beq.n	8015940 <sbrk_aligned+0x34>
 801592a:	1cc4      	adds	r4, r0, #3
 801592c:	f024 0403 	bic.w	r4, r4, #3
 8015930:	42a0      	cmp	r0, r4
 8015932:	d007      	beq.n	8015944 <sbrk_aligned+0x38>
 8015934:	1a21      	subs	r1, r4, r0
 8015936:	4628      	mov	r0, r5
 8015938:	f000 f87c 	bl	8015a34 <_sbrk_r>
 801593c:	3001      	adds	r0, #1
 801593e:	d101      	bne.n	8015944 <sbrk_aligned+0x38>
 8015940:	f04f 34ff 	mov.w	r4, #4294967295
 8015944:	4620      	mov	r0, r4
 8015946:	bd70      	pop	{r4, r5, r6, pc}
 8015948:	2401562c 	.word	0x2401562c

0801594c <_malloc_r>:
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	1ccd      	adds	r5, r1, #3
 8015952:	f025 0503 	bic.w	r5, r5, #3
 8015956:	3508      	adds	r5, #8
 8015958:	2d0c      	cmp	r5, #12
 801595a:	bf38      	it	cc
 801595c:	250c      	movcc	r5, #12
 801595e:	2d00      	cmp	r5, #0
 8015960:	4607      	mov	r7, r0
 8015962:	db01      	blt.n	8015968 <_malloc_r+0x1c>
 8015964:	42a9      	cmp	r1, r5
 8015966:	d905      	bls.n	8015974 <_malloc_r+0x28>
 8015968:	230c      	movs	r3, #12
 801596a:	603b      	str	r3, [r7, #0]
 801596c:	2600      	movs	r6, #0
 801596e:	4630      	mov	r0, r6
 8015970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015974:	4e2e      	ldr	r6, [pc, #184]	; (8015a30 <_malloc_r+0xe4>)
 8015976:	f000 f94b 	bl	8015c10 <__malloc_lock>
 801597a:	6833      	ldr	r3, [r6, #0]
 801597c:	461c      	mov	r4, r3
 801597e:	bb34      	cbnz	r4, 80159ce <_malloc_r+0x82>
 8015980:	4629      	mov	r1, r5
 8015982:	4638      	mov	r0, r7
 8015984:	f7ff ffc2 	bl	801590c <sbrk_aligned>
 8015988:	1c43      	adds	r3, r0, #1
 801598a:	4604      	mov	r4, r0
 801598c:	d14d      	bne.n	8015a2a <_malloc_r+0xde>
 801598e:	6834      	ldr	r4, [r6, #0]
 8015990:	4626      	mov	r6, r4
 8015992:	2e00      	cmp	r6, #0
 8015994:	d140      	bne.n	8015a18 <_malloc_r+0xcc>
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	4631      	mov	r1, r6
 801599a:	4638      	mov	r0, r7
 801599c:	eb04 0803 	add.w	r8, r4, r3
 80159a0:	f000 f848 	bl	8015a34 <_sbrk_r>
 80159a4:	4580      	cmp	r8, r0
 80159a6:	d13a      	bne.n	8015a1e <_malloc_r+0xd2>
 80159a8:	6821      	ldr	r1, [r4, #0]
 80159aa:	3503      	adds	r5, #3
 80159ac:	1a6d      	subs	r5, r5, r1
 80159ae:	f025 0503 	bic.w	r5, r5, #3
 80159b2:	3508      	adds	r5, #8
 80159b4:	2d0c      	cmp	r5, #12
 80159b6:	bf38      	it	cc
 80159b8:	250c      	movcc	r5, #12
 80159ba:	4629      	mov	r1, r5
 80159bc:	4638      	mov	r0, r7
 80159be:	f7ff ffa5 	bl	801590c <sbrk_aligned>
 80159c2:	3001      	adds	r0, #1
 80159c4:	d02b      	beq.n	8015a1e <_malloc_r+0xd2>
 80159c6:	6823      	ldr	r3, [r4, #0]
 80159c8:	442b      	add	r3, r5
 80159ca:	6023      	str	r3, [r4, #0]
 80159cc:	e00e      	b.n	80159ec <_malloc_r+0xa0>
 80159ce:	6822      	ldr	r2, [r4, #0]
 80159d0:	1b52      	subs	r2, r2, r5
 80159d2:	d41e      	bmi.n	8015a12 <_malloc_r+0xc6>
 80159d4:	2a0b      	cmp	r2, #11
 80159d6:	d916      	bls.n	8015a06 <_malloc_r+0xba>
 80159d8:	1961      	adds	r1, r4, r5
 80159da:	42a3      	cmp	r3, r4
 80159dc:	6025      	str	r5, [r4, #0]
 80159de:	bf18      	it	ne
 80159e0:	6059      	strne	r1, [r3, #4]
 80159e2:	6863      	ldr	r3, [r4, #4]
 80159e4:	bf08      	it	eq
 80159e6:	6031      	streq	r1, [r6, #0]
 80159e8:	5162      	str	r2, [r4, r5]
 80159ea:	604b      	str	r3, [r1, #4]
 80159ec:	4638      	mov	r0, r7
 80159ee:	f104 060b 	add.w	r6, r4, #11
 80159f2:	f000 f913 	bl	8015c1c <__malloc_unlock>
 80159f6:	f026 0607 	bic.w	r6, r6, #7
 80159fa:	1d23      	adds	r3, r4, #4
 80159fc:	1af2      	subs	r2, r6, r3
 80159fe:	d0b6      	beq.n	801596e <_malloc_r+0x22>
 8015a00:	1b9b      	subs	r3, r3, r6
 8015a02:	50a3      	str	r3, [r4, r2]
 8015a04:	e7b3      	b.n	801596e <_malloc_r+0x22>
 8015a06:	6862      	ldr	r2, [r4, #4]
 8015a08:	42a3      	cmp	r3, r4
 8015a0a:	bf0c      	ite	eq
 8015a0c:	6032      	streq	r2, [r6, #0]
 8015a0e:	605a      	strne	r2, [r3, #4]
 8015a10:	e7ec      	b.n	80159ec <_malloc_r+0xa0>
 8015a12:	4623      	mov	r3, r4
 8015a14:	6864      	ldr	r4, [r4, #4]
 8015a16:	e7b2      	b.n	801597e <_malloc_r+0x32>
 8015a18:	4634      	mov	r4, r6
 8015a1a:	6876      	ldr	r6, [r6, #4]
 8015a1c:	e7b9      	b.n	8015992 <_malloc_r+0x46>
 8015a1e:	230c      	movs	r3, #12
 8015a20:	603b      	str	r3, [r7, #0]
 8015a22:	4638      	mov	r0, r7
 8015a24:	f000 f8fa 	bl	8015c1c <__malloc_unlock>
 8015a28:	e7a1      	b.n	801596e <_malloc_r+0x22>
 8015a2a:	6025      	str	r5, [r4, #0]
 8015a2c:	e7de      	b.n	80159ec <_malloc_r+0xa0>
 8015a2e:	bf00      	nop
 8015a30:	24015628 	.word	0x24015628

08015a34 <_sbrk_r>:
 8015a34:	b538      	push	{r3, r4, r5, lr}
 8015a36:	4d06      	ldr	r5, [pc, #24]	; (8015a50 <_sbrk_r+0x1c>)
 8015a38:	2300      	movs	r3, #0
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	4608      	mov	r0, r1
 8015a3e:	602b      	str	r3, [r5, #0]
 8015a40:	f7ec f872 	bl	8001b28 <_sbrk>
 8015a44:	1c43      	adds	r3, r0, #1
 8015a46:	d102      	bne.n	8015a4e <_sbrk_r+0x1a>
 8015a48:	682b      	ldr	r3, [r5, #0]
 8015a4a:	b103      	cbz	r3, 8015a4e <_sbrk_r+0x1a>
 8015a4c:	6023      	str	r3, [r4, #0]
 8015a4e:	bd38      	pop	{r3, r4, r5, pc}
 8015a50:	24015630 	.word	0x24015630

08015a54 <_raise_r>:
 8015a54:	291f      	cmp	r1, #31
 8015a56:	b538      	push	{r3, r4, r5, lr}
 8015a58:	4604      	mov	r4, r0
 8015a5a:	460d      	mov	r5, r1
 8015a5c:	d904      	bls.n	8015a68 <_raise_r+0x14>
 8015a5e:	2316      	movs	r3, #22
 8015a60:	6003      	str	r3, [r0, #0]
 8015a62:	f04f 30ff 	mov.w	r0, #4294967295
 8015a66:	bd38      	pop	{r3, r4, r5, pc}
 8015a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015a6a:	b112      	cbz	r2, 8015a72 <_raise_r+0x1e>
 8015a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a70:	b94b      	cbnz	r3, 8015a86 <_raise_r+0x32>
 8015a72:	4620      	mov	r0, r4
 8015a74:	f000 f830 	bl	8015ad8 <_getpid_r>
 8015a78:	462a      	mov	r2, r5
 8015a7a:	4601      	mov	r1, r0
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a82:	f000 b817 	b.w	8015ab4 <_kill_r>
 8015a86:	2b01      	cmp	r3, #1
 8015a88:	d00a      	beq.n	8015aa0 <_raise_r+0x4c>
 8015a8a:	1c59      	adds	r1, r3, #1
 8015a8c:	d103      	bne.n	8015a96 <_raise_r+0x42>
 8015a8e:	2316      	movs	r3, #22
 8015a90:	6003      	str	r3, [r0, #0]
 8015a92:	2001      	movs	r0, #1
 8015a94:	e7e7      	b.n	8015a66 <_raise_r+0x12>
 8015a96:	2400      	movs	r4, #0
 8015a98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	4798      	blx	r3
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	e7e0      	b.n	8015a66 <_raise_r+0x12>

08015aa4 <raise>:
 8015aa4:	4b02      	ldr	r3, [pc, #8]	; (8015ab0 <raise+0xc>)
 8015aa6:	4601      	mov	r1, r0
 8015aa8:	6818      	ldr	r0, [r3, #0]
 8015aaa:	f7ff bfd3 	b.w	8015a54 <_raise_r>
 8015aae:	bf00      	nop
 8015ab0:	24000074 	.word	0x24000074

08015ab4 <_kill_r>:
 8015ab4:	b538      	push	{r3, r4, r5, lr}
 8015ab6:	4d07      	ldr	r5, [pc, #28]	; (8015ad4 <_kill_r+0x20>)
 8015ab8:	2300      	movs	r3, #0
 8015aba:	4604      	mov	r4, r0
 8015abc:	4608      	mov	r0, r1
 8015abe:	4611      	mov	r1, r2
 8015ac0:	602b      	str	r3, [r5, #0]
 8015ac2:	f7eb ffa9 	bl	8001a18 <_kill>
 8015ac6:	1c43      	adds	r3, r0, #1
 8015ac8:	d102      	bne.n	8015ad0 <_kill_r+0x1c>
 8015aca:	682b      	ldr	r3, [r5, #0]
 8015acc:	b103      	cbz	r3, 8015ad0 <_kill_r+0x1c>
 8015ace:	6023      	str	r3, [r4, #0]
 8015ad0:	bd38      	pop	{r3, r4, r5, pc}
 8015ad2:	bf00      	nop
 8015ad4:	24015630 	.word	0x24015630

08015ad8 <_getpid_r>:
 8015ad8:	f7eb bf96 	b.w	8001a08 <_getpid>

08015adc <__sread>:
 8015adc:	b510      	push	{r4, lr}
 8015ade:	460c      	mov	r4, r1
 8015ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ae4:	f000 f8a0 	bl	8015c28 <_read_r>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	bfab      	itete	ge
 8015aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015aee:	89a3      	ldrhlt	r3, [r4, #12]
 8015af0:	181b      	addge	r3, r3, r0
 8015af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015af6:	bfac      	ite	ge
 8015af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015afa:	81a3      	strhlt	r3, [r4, #12]
 8015afc:	bd10      	pop	{r4, pc}

08015afe <__swrite>:
 8015afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b02:	461f      	mov	r7, r3
 8015b04:	898b      	ldrh	r3, [r1, #12]
 8015b06:	05db      	lsls	r3, r3, #23
 8015b08:	4605      	mov	r5, r0
 8015b0a:	460c      	mov	r4, r1
 8015b0c:	4616      	mov	r6, r2
 8015b0e:	d505      	bpl.n	8015b1c <__swrite+0x1e>
 8015b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b14:	2302      	movs	r3, #2
 8015b16:	2200      	movs	r2, #0
 8015b18:	f000 f868 	bl	8015bec <_lseek_r>
 8015b1c:	89a3      	ldrh	r3, [r4, #12]
 8015b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015b26:	81a3      	strh	r3, [r4, #12]
 8015b28:	4632      	mov	r2, r6
 8015b2a:	463b      	mov	r3, r7
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	f000 b817 	b.w	8015b64 <_write_r>

08015b36 <__sseek>:
 8015b36:	b510      	push	{r4, lr}
 8015b38:	460c      	mov	r4, r1
 8015b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b3e:	f000 f855 	bl	8015bec <_lseek_r>
 8015b42:	1c43      	adds	r3, r0, #1
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	bf15      	itete	ne
 8015b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8015b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015b52:	81a3      	strheq	r3, [r4, #12]
 8015b54:	bf18      	it	ne
 8015b56:	81a3      	strhne	r3, [r4, #12]
 8015b58:	bd10      	pop	{r4, pc}

08015b5a <__sclose>:
 8015b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b5e:	f000 b813 	b.w	8015b88 <_close_r>
	...

08015b64 <_write_r>:
 8015b64:	b538      	push	{r3, r4, r5, lr}
 8015b66:	4d07      	ldr	r5, [pc, #28]	; (8015b84 <_write_r+0x20>)
 8015b68:	4604      	mov	r4, r0
 8015b6a:	4608      	mov	r0, r1
 8015b6c:	4611      	mov	r1, r2
 8015b6e:	2200      	movs	r2, #0
 8015b70:	602a      	str	r2, [r5, #0]
 8015b72:	461a      	mov	r2, r3
 8015b74:	f7eb ff87 	bl	8001a86 <_write>
 8015b78:	1c43      	adds	r3, r0, #1
 8015b7a:	d102      	bne.n	8015b82 <_write_r+0x1e>
 8015b7c:	682b      	ldr	r3, [r5, #0]
 8015b7e:	b103      	cbz	r3, 8015b82 <_write_r+0x1e>
 8015b80:	6023      	str	r3, [r4, #0]
 8015b82:	bd38      	pop	{r3, r4, r5, pc}
 8015b84:	24015630 	.word	0x24015630

08015b88 <_close_r>:
 8015b88:	b538      	push	{r3, r4, r5, lr}
 8015b8a:	4d06      	ldr	r5, [pc, #24]	; (8015ba4 <_close_r+0x1c>)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	4604      	mov	r4, r0
 8015b90:	4608      	mov	r0, r1
 8015b92:	602b      	str	r3, [r5, #0]
 8015b94:	f7eb ff93 	bl	8001abe <_close>
 8015b98:	1c43      	adds	r3, r0, #1
 8015b9a:	d102      	bne.n	8015ba2 <_close_r+0x1a>
 8015b9c:	682b      	ldr	r3, [r5, #0]
 8015b9e:	b103      	cbz	r3, 8015ba2 <_close_r+0x1a>
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	bd38      	pop	{r3, r4, r5, pc}
 8015ba4:	24015630 	.word	0x24015630

08015ba8 <_fstat_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	; (8015bc8 <_fstat_r+0x20>)
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	f7eb ff8e 	bl	8001ad6 <_fstat>
 8015bba:	1c43      	adds	r3, r0, #1
 8015bbc:	d102      	bne.n	8015bc4 <_fstat_r+0x1c>
 8015bbe:	682b      	ldr	r3, [r5, #0]
 8015bc0:	b103      	cbz	r3, 8015bc4 <_fstat_r+0x1c>
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	bf00      	nop
 8015bc8:	24015630 	.word	0x24015630

08015bcc <_isatty_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d06      	ldr	r5, [pc, #24]	; (8015be8 <_isatty_r+0x1c>)
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	602b      	str	r3, [r5, #0]
 8015bd8:	f7eb ff8d 	bl	8001af6 <_isatty>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_isatty_r+0x1a>
 8015be0:	682b      	ldr	r3, [r5, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_isatty_r+0x1a>
 8015be4:	6023      	str	r3, [r4, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	24015630 	.word	0x24015630

08015bec <_lseek_r>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	4d07      	ldr	r5, [pc, #28]	; (8015c0c <_lseek_r+0x20>)
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	4608      	mov	r0, r1
 8015bf4:	4611      	mov	r1, r2
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	602a      	str	r2, [r5, #0]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	f7eb ff86 	bl	8001b0c <_lseek>
 8015c00:	1c43      	adds	r3, r0, #1
 8015c02:	d102      	bne.n	8015c0a <_lseek_r+0x1e>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	b103      	cbz	r3, 8015c0a <_lseek_r+0x1e>
 8015c08:	6023      	str	r3, [r4, #0]
 8015c0a:	bd38      	pop	{r3, r4, r5, pc}
 8015c0c:	24015630 	.word	0x24015630

08015c10 <__malloc_lock>:
 8015c10:	4801      	ldr	r0, [pc, #4]	; (8015c18 <__malloc_lock+0x8>)
 8015c12:	f7ff bdc7 	b.w	80157a4 <__retarget_lock_acquire_recursive>
 8015c16:	bf00      	nop
 8015c18:	24015624 	.word	0x24015624

08015c1c <__malloc_unlock>:
 8015c1c:	4801      	ldr	r0, [pc, #4]	; (8015c24 <__malloc_unlock+0x8>)
 8015c1e:	f7ff bdc2 	b.w	80157a6 <__retarget_lock_release_recursive>
 8015c22:	bf00      	nop
 8015c24:	24015624 	.word	0x24015624

08015c28 <_read_r>:
 8015c28:	b538      	push	{r3, r4, r5, lr}
 8015c2a:	4d07      	ldr	r5, [pc, #28]	; (8015c48 <_read_r+0x20>)
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	4608      	mov	r0, r1
 8015c30:	4611      	mov	r1, r2
 8015c32:	2200      	movs	r2, #0
 8015c34:	602a      	str	r2, [r5, #0]
 8015c36:	461a      	mov	r2, r3
 8015c38:	f7eb ff08 	bl	8001a4c <_read>
 8015c3c:	1c43      	adds	r3, r0, #1
 8015c3e:	d102      	bne.n	8015c46 <_read_r+0x1e>
 8015c40:	682b      	ldr	r3, [r5, #0]
 8015c42:	b103      	cbz	r3, 8015c46 <_read_r+0x1e>
 8015c44:	6023      	str	r3, [r4, #0]
 8015c46:	bd38      	pop	{r3, r4, r5, pc}
 8015c48:	24015630 	.word	0x24015630

08015c4c <_init>:
 8015c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c4e:	bf00      	nop
 8015c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c52:	bc08      	pop	{r3}
 8015c54:	469e      	mov	lr, r3
 8015c56:	4770      	bx	lr

08015c58 <_fini>:
 8015c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c5a:	bf00      	nop
 8015c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c5e:	bc08      	pop	{r3}
 8015c60:	469e      	mov	lr, r3
 8015c62:	4770      	bx	lr
