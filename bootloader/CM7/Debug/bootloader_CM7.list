
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017364  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08017604  08017604  00027604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801780c  0801780c  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801780c  0801780c  0002780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017814  08017814  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017814  08017814  00027814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017818  08017818  00027818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  24000000  0801781c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015454  240000e0  080178f0  000300e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24015534  080178f0  00035534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ab24  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ba54  00000000  00000000  0008ac26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00096680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00098830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004d19b  00000000  00000000  0009a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047e43  00000000  00000000  000e73eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b7619  00000000  00000000  0012f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002e6847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007714  00000000  00000000  002e6898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080175ec 	.word	0x080175ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	080175ec 	.word	0x080175ec

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24014f18 	.word	0x24014f18
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24014f20 	.word	0x24014f20
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24015520 	.word	0x24015520

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f015 f99f 	bl	80157fc <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f015 f88a 	bl	80155dc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24014fc0 	.word	0x24014fc0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24015520 	.word	0x24015520
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24014fc4 	.word	0x24014fc4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24015050 	.word	0x24015050
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24015054 	.word	0x24015054
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2401504c 	.word	0x2401504c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24015048 	.word	0x24015048
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24014f20 	.word	0x24014f20
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f015 fa37 	bl	8015d50 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f015 fa21 	bl	8015d50 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f008 fd8d 	bl	8009438 <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000fc 	.word	0x240000fc
 8000934:	08017604 	.word	0x08017604
 8000938:	240080fc 	.word	0x240080fc
 800093c:	24008130 	.word	0x24008130
 8000940:	08017618 	.word	0x08017618
 8000944:	24012130 	.word	0x24012130

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f012 fc01 	bl	8013298 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aa8:	bf00      	nop
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <main+0xac>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <main+0x24>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dcf4      	bgt.n	8000aaa <main+0xe>
  if ( timeout < 0 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da01      	bge.n	8000aca <main+0x2e>
  {
  Error_Handler();
 8000ac6:	f000 fa11 	bl	8000eec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fc9b 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f83f 	bl	8000b50 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <main+0xac>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <main+0xac>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <main+0xac>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f809 	bl	8001b08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f81f 	bl	8001b3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b02:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b04:	bf00      	nop
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <main+0xac>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d104      	bne.n	8000b1c <main+0x80>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dcf4      	bgt.n	8000b06 <main+0x6a>
if ( timeout < 0 )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da01      	bge.n	8000b26 <main+0x8a>
{
Error_Handler();
 8000b22:	f000 f9e3 	bl	8000eec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 f905 	bl	8000d34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 f8b7 	bl	8000c9c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b2e:	f000 f893 	bl	8000c58 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\r\n",bootloader_ver[0], bootloader_ver[1]);
 8000b32:	2300      	movs	r3, #0
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <main+0xb0>)
 8000b3a:	f015 fd53 	bl	80165e4 <iprintf>

  /* Jump to applicationdirectly for now */
  goto_application();
 8000b3e:	f000 f9a7 	bl	8000e90 <goto_application>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b42:	f7ff ffa4 	bl	8000a8e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <main+0xaa>
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	0801762c 	.word	0x0801762c

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09c      	sub	sp, #112	; 0x70
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	224c      	movs	r2, #76	; 0x4c
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f015 fd38 	bl	80165d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f015 fd32 	bl	80165d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b70:	2004      	movs	r0, #4
 8000b72:	f000 fff7 	bl	8001b64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <SystemClock_Config+0x100>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <SystemClock_Config+0x100>)
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <SystemClock_Config+0x100>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <SystemClock_Config+0x104>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <SystemClock_Config+0x104>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <SystemClock_Config+0x104>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	bf00      	nop
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <SystemClock_Config+0x104>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb6:	d1f8      	bne.n	8000baa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bde:	2305      	movs	r3, #5
 8000be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000be6:	2308      	movs	r3, #8
 8000be8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f80e 	bl	8001c18 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c02:	f000 f973 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	233f      	movs	r3, #63	; 0x3f
 8000c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fc4e 	bl	80024cc <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c36:	f000 f959 	bl	8000eec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2000      	movs	r0, #0
 8000c42:	f001 fdf9 	bl	8002838 <HAL_RCC_MCOConfig>
}
 8000c46:	bf00      	nop
 8000c48:	3770      	adds	r7, #112	; 0x70
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	58000400 	.word	0x58000400
 8000c54:	58024800 	.word	0x58024800

08000c58 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <MX_SDMMC1_SD_Init+0x40>)
 8000c60:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c82:	f004 fd99 	bl	80057b8 <HAL_SD_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c8c:	f000 f92e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24012164 	.word	0x24012164
 8000c98:	52007000 	.word	0x52007000

08000c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_USART1_UART_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ce6:	f006 fc79 	bl	80075dc <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f8fc 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cf8:	f007 fd09 	bl	800870e <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 f8f3 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000d0a:	f007 fd3e 	bl	800878a <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f8ea 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000d1a:	f007 fcbf 	bl	800869c <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f8e2 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	240121e0 	.word	0x240121e0
 8000d30:	40011000 	.word	0x40011000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000de8:	f000 fe40 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000df2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000e04:	f000 fc6a 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x134>)
 8000e26:	f000 fc59 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000e2a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000e44:	f000 fc4a 	bl	80016dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	2017      	movs	r0, #23
 8000e4e:	f000 fc1d 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e52:	2017      	movs	r0, #23
 8000e54:	f000 fc34 	bl	80016c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58022000 	.word	0x58022000
 8000e68:	58020000 	.word	0x58020000

08000e6c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <__io_putchar+0x20>)
 8000e7e:	f006 fbfd 	bl	800767c <HAL_UART_Transmit>

  return ch;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	240121e0 	.word	0x240121e0

08000e90 <goto_application>:

static void goto_application()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	printf("Jumping to application\r\n");
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <goto_application+0x2c>)
 8000e98:	f015 fc2a 	bl	80166f0 <puts>
	void (*app_reset_hanlder) (void) = (void*) (*(volatile uint32_t *) (APP_FLASH_ADDR + 4U));
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <goto_application+0x30>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	607b      	str	r3, [r7, #4]

	/* Set main stack pointer of application (also done in linkerscript by CubeMX) */
	__set_MSP((*(volatile uint32_t *) APP_FLASH_ADDR));
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <goto_application+0x34>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f383 8808 	msr	MSP, r3
}
 8000eae:	bf00      	nop

	/* Call app reset handler */
	app_reset_hanlder();
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08017650 	.word	0x08017650
 8000ec0:	08040004 	.word	0x08040004
 8000ec4:	08040000 	.word	0x08040000

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 facf 	bl	800147c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40001000 	.word	0x40001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x30>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	58024400 	.word	0x58024400

08000f2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0be      	sub	sp, #248	; 0xf8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	22c8      	movs	r2, #200	; 0xc8
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f015 fb41 	bl	80165d4 <memset>
  if(hsd->Instance==SDMMC1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <HAL_SD_MspInit+0x11c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d171      	bne.n	8001040 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fee3 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000f7c:	f7ff ffb6 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_SD_MspInit+0x120>)
 8000f82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_SD_MspInit+0x120>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_SD_MspInit+0x120>)
 8000f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_SD_MspInit+0x120>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000fda:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <HAL_SD_MspInit+0x124>)
 8001002:	f000 fb6b 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800101e:	230c      	movs	r3, #12
 8001020:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001028:	4619      	mov	r1, r3
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_SD_MspInit+0x128>)
 800102c:	f000 fb56 	bl	80016dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2031      	movs	r0, #49	; 0x31
 8001036:	f000 fb29 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800103a:	2031      	movs	r0, #49	; 0x31
 800103c:	f000 fb40 	bl	80016c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	37f8      	adds	r7, #248	; 0xf8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	52007000 	.word	0x52007000
 800104c:	58024400 	.word	0x58024400
 8001050:	58020800 	.word	0x58020800
 8001054:	58020c00 	.word	0x58020c00

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0bc      	sub	sp, #240	; 0xf0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	22c8      	movs	r2, #200	; 0xc8
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f015 faab 	bl	80165d4 <memset>
  if(huart->Instance==USART1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_UART_MspInit+0xc8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d146      	bne.n	8001116 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001088:	f04f 0201 	mov.w	r2, #1
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fe4c 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010aa:	f7ff ff1f 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0xcc>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80010ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0xd0>)
 8001112:	f000 fae3 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	37f0      	adds	r7, #240	; 0xf0
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40011000 	.word	0x40011000
 8001124:	58024400 	.word	0x58024400
 8001128:	58020000 	.word	0x58020000

0800112c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b090      	sub	sp, #64	; 0x40
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d827      	bhi.n	800118a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800113a:	2200      	movs	r2, #0
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f000 faa4 	bl	800168c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 fabb 	bl	80016c0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800114a:	4a29      	ldr	r2, [pc, #164]	; (80011f0 <HAL_InitTick+0xc4>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_InitTick+0xc8>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_InitTick+0xc8>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_InitTick+0xc8>)
 8001162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116e:	f107 0210 	add.w	r2, r7, #16
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fd9d 	bl	8002cb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <HAL_InitTick+0x6a>
 8001188:	e001      	b.n	800118e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e02b      	b.n	80011e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800118e:	f001 fd67 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8001192:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001194:	e004      	b.n	80011a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001196:	f001 fd63 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <HAL_InitTick+0xcc>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	3b01      	subs	r3, #1
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_InitTick+0xd0>)
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_InitTick+0xd4>)
 80011b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_InitTick+0xd0>)
 80011b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_InitTick+0xd0>)
 80011be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_InitTick+0xd0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_InitTick+0xd0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <HAL_InitTick+0xd0>)
 80011d0:	f005 ff2a 	bl	8007028 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <HAL_InitTick+0xd0>)
 80011dc:	f005 ff86 	bl	80070ec <HAL_TIM_Base_Start_IT>
 80011e0:	4603      	mov	r3, r0
 80011e2:	e000      	b.n	80011e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3740      	adds	r7, #64	; 0x40
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	24000008 	.word	0x24000008
 80011f4:	58024400 	.word	0x58024400
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	24012274 	.word	0x24012274
 8001200:	40001000 	.word	0x40001000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 8001234:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001238:	f000 fc4b 	bl	8001ad2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <SDMMC1_IRQHandler+0x10>)
 8001246:	f004 fd27 	bl	8005c98 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	24012164 	.word	0x24012164

08001254 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM6_DAC_IRQHandler+0x10>)
 800125a:	f005 ffbf 	bl	80071dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24012274 	.word	0x24012274

08001268 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e00a      	b.n	8001290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127a:	f3af 8000 	nop.w
 800127e:	4601      	mov	r1, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	b2ca      	uxtb	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf0      	blt.n	800127a <_read+0x12>
  }

  return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e009      	b.n	80012c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fdd5 	bl	8000e6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf1      	blt.n	80012b4 <_write+0x12>
  }
  return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_close>:

int _close(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001302:	605a      	str	r2, [r3, #4]
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_isatty>:

int _isatty(int file)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f015 f8f6 	bl	8016564 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24080000 	.word	0x24080000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	240122c0 	.word	0x240122c0
 80013ac:	24015538 	.word	0x24015538

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b4:	f7ff fac8 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f015 f8c7 	bl	8016570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fb5b 	bl	8000a9c <main>
  bx  lr
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f0:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 80013f4:	0801781c 	.word	0x0801781c
  ldr r2, =_sbss
 80013f8:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80013fc:	24015534 	.word	0x24015534

08001400 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC3_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140a:	2003      	movs	r0, #3
 800140c:	f000 f933 	bl	8001676 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001410:	f001 fa7c 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8001414:	4602      	mov	r2, r0
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	4913      	ldr	r1, [pc, #76]	; (8001470 <HAL_Init+0x6c>)
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_Init+0x68>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_Init+0x6c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_Init+0x70>)
 8001446:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_Init+0x74>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144e:	200f      	movs	r0, #15
 8001450:	f7ff fe6c 	bl	800112c <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e002      	b.n	8001464 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800145e:	f7ff fd4b 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58024400 	.word	0x58024400
 8001470:	0801773c 	.word	0x0801773c
 8001474:	24000004 	.word	0x24000004
 8001478:	24000000 	.word	0x24000000

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2400000c 	.word	0x2400000c
 80014a0:	240122c4 	.word	0x240122c4

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	240122c4 	.word	0x240122c4

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2400000c 	.word	0x2400000c

08001504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetREVID+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	5c001000 	.word	0x5c001000

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff4c 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169a:	f7ff ff63 	bl	8001564 <__NVIC_GetPriorityGrouping>
 800169e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f7ff ffb3 	bl	8001610 <NVIC_EncodePriority>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff82 	bl	80015bc <__NVIC_SetPriority>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff56 	bl	8001580 <__NVIC_EnableIRQ>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_GPIO_Init+0x234>)
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ee:	e194      	b.n	8001a1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8186 	beq.w	8001a14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x44>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	69b9      	ldr	r1, [r7, #24]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80e0 	beq.w	8001a14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x238>)
 8001856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185a:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_GPIO_Init+0x238>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_GPIO_Init+0x238>)
 8001866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_GPIO_Init+0x23c>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_GPIO_Init+0x240>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d052      	beq.n	8001944 <HAL_GPIO_Init+0x268>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_GPIO_Init+0x244>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d031      	beq.n	800190a <HAL_GPIO_Init+0x22e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x248>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d02b      	beq.n	8001906 <HAL_GPIO_Init+0x22a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_GPIO_Init+0x24c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d025      	beq.n	8001902 <HAL_GPIO_Init+0x226>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1c      	ldr	r2, [pc, #112]	; (800192c <HAL_GPIO_Init+0x250>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <HAL_GPIO_Init+0x222>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_GPIO_Init+0x254>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x21e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_GPIO_Init+0x258>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x21a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x25c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x216>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_GPIO_Init+0x260>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x212>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_GPIO_Init+0x264>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x20e>
 80018e6:	2309      	movs	r3, #9
 80018e8:	e02d      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018ea:	230a      	movs	r3, #10
 80018ec:	e02b      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018ee:	2308      	movs	r3, #8
 80018f0:	e029      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e027      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018f6:	2306      	movs	r3, #6
 80018f8:	e025      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e023      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 80018fe:	2304      	movs	r3, #4
 8001900:	e021      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 8001902:	2303      	movs	r3, #3
 8001904:	e01f      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 8001906:	2302      	movs	r3, #2
 8001908:	e01d      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 800190a:	2301      	movs	r3, #1
 800190c:	e01b      	b.n	8001946 <HAL_GPIO_Init+0x26a>
 800190e:	bf00      	nop
 8001910:	58000080 	.word	0x58000080
 8001914:	58024400 	.word	0x58024400
 8001918:	58000400 	.word	0x58000400
 800191c:	58020000 	.word	0x58020000
 8001920:	58020400 	.word	0x58020400
 8001924:	58020800 	.word	0x58020800
 8001928:	58020c00 	.word	0x58020c00
 800192c:	58021000 	.word	0x58021000
 8001930:	58021400 	.word	0x58021400
 8001934:	58021800 	.word	0x58021800
 8001938:	58021c00 	.word	0x58021c00
 800193c:	58022000 	.word	0x58022000
 8001940:	58022400 	.word	0x58022400
 8001944:	2300      	movs	r3, #0
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f002 0203 	and.w	r2, r2, #3
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001956:	4938      	ldr	r1, [pc, #224]	; (8001a38 <HAL_GPIO_Init+0x35c>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800198a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3301      	adds	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f ae63 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3724      	adds	r7, #36	; 0x24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	58000400 	.word	0x58000400

08001a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b085      	sub	sp, #20
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	400b      	ands	r3, r1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f007 fe15 	bl	8009728 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_HSEM_FastTake+0x2c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3320      	adds	r3, #32
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_HSEM_FastTake+0x30>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	58026400 	.word	0x58026400
 8001b38:	80000300 	.word	0x80000300

08001b3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001b46:	4906      	ldr	r1, [pc, #24]	; (8001b60 <HAL_HSEM_Release+0x24>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	58026400 	.word	0x58026400

08001b64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d00a      	beq.n	8001b8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e040      	b.n	8001c0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e03e      	b.n	8001c0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b96:	491f      	ldr	r1, [pc, #124]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b9e:	f7ff fc81 	bl	80014a4 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ba6:	f7ff fc7d 	bl	80014a4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb4:	d901      	bls.n	8001bba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e028      	b.n	8001c0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b1e      	cmp	r3, #30
 8001bcc:	d008      	beq.n	8001be0 <HAL_PWREx_ConfigSupply+0x7c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8001bd2:	d005      	beq.n	8001be0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b1d      	cmp	r3, #29
 8001bd8:	d002      	beq.n	8001be0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b2d      	cmp	r3, #45	; 0x2d
 8001bde:	d114      	bne.n	8001c0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001be0:	f7ff fc60 	bl	80014a4 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001be6:	e009      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001be8:	f7ff fc5c 	bl	80014a4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf6:	d901      	bls.n	8001bfc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e007      	b.n	8001c0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c08:	d1ee      	bne.n	8001be8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58024800 	.word	0x58024800

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f000 bc48 	b.w	80024bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8088 	beq.w	8001d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c44:	4b96      	ldr	r3, [pc, #600]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d007      	beq.n	8001c60 <HAL_RCC_OscConfig+0x48>
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	2b18      	cmp	r3, #24
 8001c54:	d111      	bne.n	8001c7a <HAL_RCC_OscConfig+0x62>
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b8f      	ldr	r3, [pc, #572]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d06d      	beq.n	8001d48 <HAL_RCC_OscConfig+0x130>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d169      	bne.n	8001d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f000 bc21 	b.w	80024bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x7a>
 8001c84:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a85      	ldr	r2, [pc, #532]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x9c>
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a74      	ldr	r2, [pc, #464]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001cd8:	4b71      	ldr	r3, [pc, #452]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a70      	ldr	r2, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b6e      	ldr	r3, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6d      	ldr	r2, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fbd4 	bl	80014a4 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fbd0 	bl	80014a4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e3d4      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xe8>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbc0 	bl	80014a4 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fbbc 	bl	80014a4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e3c0      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3a:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x110>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80ca 	beq.w	8001eec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d62:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_RCC_OscConfig+0x166>
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	2b18      	cmp	r3, #24
 8001d72:	d156      	bne.n	8001e22 <HAL_RCC_OscConfig+0x20a>
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d151      	bne.n	8001e22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7e:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x17e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e392      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0219 	bic.w	r2, r3, #25
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	493f      	ldr	r1, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb7c 	bl	80014a4 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb78 	bl	80014a4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e37c      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	f7ff fb99 	bl	8001504 <HAL_GetREVID>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d817      	bhi.n	8001e0c <HAL_RCC_OscConfig+0x1f4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x1de>
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dec:	4a2c      	ldr	r2, [pc, #176]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	e07a      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	031b      	lsls	r3, r3, #12
 8001e04:	4926      	ldr	r1, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e0a:	e06f      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4921      	ldr	r1, [pc, #132]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	e064      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d047      	beq.n	8001eba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0219 	bic.w	r2, r3, #25
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	491a      	ldr	r1, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fb32 	bl	80014a4 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fb2e 	bl	80014a4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e332      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	f7ff fb4f 	bl	8001504 <HAL_GetREVID>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d819      	bhi.n	8001ea4 <HAL_RCC_OscConfig+0x28c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d108      	bne.n	8001e8a <HAL_RCC_OscConfig+0x272>
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	6053      	str	r3, [r2, #4]
 8001e88:	e030      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	031b      	lsls	r3, r3, #12
 8001e98:	4901      	ldr	r1, [pc, #4]	; (8001ea0 <HAL_RCC_OscConfig+0x288>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
 8001e9e:	e025      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	4b9a      	ldr	r3, [pc, #616]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	4997      	ldr	r1, [pc, #604]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e018      	b.n	8001eec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b95      	ldr	r3, [pc, #596]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff faed 	bl	80014a4 <HAL_GetTick>
 8001eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fae9 	bl	80014a4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e2ed      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee0:	4b8b      	ldr	r3, [pc, #556]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a9 	beq.w	800204c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efa:	4b85      	ldr	r3, [pc, #532]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d007      	beq.n	8001f20 <HAL_RCC_OscConfig+0x308>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b18      	cmp	r3, #24
 8001f14:	d13a      	bne.n	8001f8c <HAL_RCC_OscConfig+0x374>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d135      	bne.n	8001f8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f20:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x320>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b80      	cmp	r3, #128	; 0x80
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2c1      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f38:	f7ff fae4 	bl	8001504 <HAL_GetREVID>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d817      	bhi.n	8001f76 <HAL_RCC_OscConfig+0x35e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x348>
 8001f4e:	4b70      	ldr	r3, [pc, #448]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f56:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f5e:	e075      	b.n	800204c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f60:	4b6b      	ldr	r3, [pc, #428]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	069b      	lsls	r3, r3, #26
 8001f6e:	4968      	ldr	r1, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f74:	e06a      	b.n	800204c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f76:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	4962      	ldr	r1, [pc, #392]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f8a:	e05f      	b.n	800204c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d042      	beq.n	800201a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f94:	4b5e      	ldr	r3, [pc, #376]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5d      	ldr	r2, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fa80 	bl	80014a4 <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fa7c 	bl	80014a4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e280      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fba:	4b55      	ldr	r3, [pc, #340]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fc6:	f7ff fa9d 	bl	8001504 <HAL_GetREVID>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d817      	bhi.n	8002004 <HAL_RCC_OscConfig+0x3ec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d108      	bne.n	8001fee <HAL_RCC_OscConfig+0x3d6>
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	6053      	str	r3, [r2, #4]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0x434>
 8001fee:	4b48      	ldr	r3, [pc, #288]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	4944      	ldr	r1, [pc, #272]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e023      	b.n	800204c <HAL_RCC_OscConfig+0x434>
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	493f      	ldr	r1, [pc, #252]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fa3d 	bl	80014a4 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800202e:	f7ff fa39 	bl	80014a4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e23d      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d036      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d019      	beq.n	8002094 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fa1a 	bl	80014a4 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fa16 	bl	80014a4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e21a      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x45c>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fa00 	bl	80014a4 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f9fc 	bl	80014a4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e200      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d039      	beq.n	8002146 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01c      	beq.n	8002114 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f9dd 	bl	80014a4 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ee:	f7ff f9d9 	bl	80014a4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1dd      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x4d6>
 800210c:	e01b      	b.n	8002146 <HAL_RCC_OscConfig+0x52e>
 800210e:	bf00      	nop
 8002110:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002114:	4b9b      	ldr	r3, [pc, #620]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a9a      	ldr	r2, [pc, #616]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800211a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800211e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002120:	f7ff f9c0 	bl	80014a4 <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002128:	f7ff f9bc 	bl	80014a4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1c0      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800213a:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8081 	beq.w	8002256 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x770>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a8b      	ldr	r2, [pc, #556]	; (8002388 <HAL_RCC_OscConfig+0x770>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002160:	f7ff f9a0 	bl	80014a4 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff f99c 	bl	80014a4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1a0      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <HAL_RCC_OscConfig+0x770>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x584>
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	e02d      	b.n	80021f8 <HAL_RCC_OscConfig+0x5e0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x5a6>
 80021a4:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a76      	ldr	r2, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b74      	ldr	r3, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a73      	ldr	r2, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x5e0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c8>
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a6b      	ldr	r2, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x5e0>
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a64      	ldr	r2, [pc, #400]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f950 	bl	80014a4 <HAL_GetTick>
 8002204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f94c 	bl	80014a4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e14e      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x5f0>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff f93a 	bl	80014a4 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff f936 	bl	80014a4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e138      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 812d 	beq.w	80024ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002268:	2b18      	cmp	r3, #24
 800226a:	f000 80bd 	beq.w	80023e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b02      	cmp	r3, #2
 8002274:	f040 809e 	bne.w	80023b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a41      	ldr	r2, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff f90e 	bl	80014a4 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff f90a 	bl	80014a4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e10e      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_RCC_OscConfig+0x774>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	430a      	orrs	r2, r1
 80022be:	4931      	ldr	r1, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	628b      	str	r3, [r1, #40]	; 0x28
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	3b01      	subs	r3, #1
 80022ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	3b01      	subs	r3, #1
 80022d4:	025b      	lsls	r3, r3, #9
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	3b01      	subs	r3, #1
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	3b01      	subs	r3, #1
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022f4:	4923      	ldr	r1, [pc, #140]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	4a21      	ldr	r2, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x778>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002312:	00d2      	lsls	r2, r2, #3
 8002314:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f023 020c 	bic.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4917      	ldr	r1, [pc, #92]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f023 0202 	bic.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_RCC_OscConfig+0x76c>)
 8002374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff f893 	bl	80014a4 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002380:	e011      	b.n	80023a6 <HAL_RCC_OscConfig+0x78e>
 8002382:	bf00      	nop
 8002384:	58024400 	.word	0x58024400
 8002388:	58024800 	.word	0x58024800
 800238c:	fffffc0c 	.word	0xfffffc0c
 8002390:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f886 	bl	80014a4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e08a      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x77c>
 80023b2:	e082      	b.n	80024ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a42      	ldr	r2, [pc, #264]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f870 	bl	80014a4 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff f86c 	bl	80014a4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e070      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x7b0>
 80023e6:	e068      	b.n	80024ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d031      	beq.n	8002460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d12a      	bne.n	8002460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d122      	bne.n	8002460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d11a      	bne.n	8002460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	0a5b      	lsrs	r3, r3, #9
 800242e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d111      	bne.n	8002460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0e1b      	lsrs	r3, r3, #24
 8002452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e02b      	b.n	80024bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800246e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	429a      	cmp	r2, r3
 8002478:	d01f      	beq.n	80024ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002486:	f7ff f80d 	bl	80014a4 <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800248c:	bf00      	nop
 800248e:	f7ff f809 	bl	80014a4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	4293      	cmp	r3, r2
 8002498:	d0f9      	beq.n	800248e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_OscConfig+0x8b0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024a6:	00d2      	lsls	r2, r2, #3
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_RCC_OscConfig+0x8ac>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	58024400 	.word	0x58024400
 80024c8:	ffff0007 	.word	0xffff0007

080024cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e19c      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b87      	ldr	r3, [pc, #540]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4985      	ldr	r1, [pc, #532]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e184      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002528:	429a      	cmp	r2, r3
 800252a:	d908      	bls.n	800253e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800252c:	4b78      	ldr	r3, [pc, #480]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4975      	ldr	r1, [pc, #468]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800253a:	4313      	orrs	r3, r2
 800253c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b70      	ldr	r3, [pc, #448]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002556:	429a      	cmp	r2, r3
 8002558:	d908      	bls.n	800256c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	496a      	ldr	r1, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002568:	4313      	orrs	r3, r2
 800256a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002584:	429a      	cmp	r2, r3
 8002586:	d908      	bls.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	495e      	ldr	r1, [pc, #376]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002596:	4313      	orrs	r3, r2
 8002598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	4b59      	ldr	r3, [pc, #356]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025b6:	4b56      	ldr	r3, [pc, #344]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4953      	ldr	r1, [pc, #332]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d908      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f023 020f 	bic.w	r2, r3, #15
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4947      	ldr	r1, [pc, #284]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d055      	beq.n	80026ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002602:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4940      	ldr	r1, [pc, #256]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002610:	4313      	orrs	r3, r2
 8002612:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d121      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0f6      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d115      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0ea      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0de      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0d6      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f023 0207 	bic.w	r2, r3, #7
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4925      	ldr	r1, [pc, #148]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267e:	f7fe ff11 	bl	80014a4 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	e00a      	b.n	800269c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7fe ff0d 	bl	80014a4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0be      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d1eb      	bne.n	8002686 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d208      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f023 020f 	bic.w	r2, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d214      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 020f 	bic.w	r2, r3, #15
 80026f2:	4906      	ldr	r1, [pc, #24]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e086      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
 800270c:	52002000 	.word	0x52002000
 8002710:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4939      	ldr	r1, [pc, #228]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800273e:	4313      	orrs	r3, r2
 8002740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800275a:	429a      	cmp	r2, r3
 800275c:	d208      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800275e:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	492e      	ldr	r1, [pc, #184]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800276c:	4313      	orrs	r3, r2
 800276e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002788:	429a      	cmp	r2, r3
 800278a:	d208      	bcs.n	800279e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4922      	ldr	r1, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800279a:	4313      	orrs	r3, r2
 800279c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d208      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4917      	ldr	r1, [pc, #92]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027cc:	f000 f89e 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	4912      	ldr	r1, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x35c>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_RCC_ClockConfig+0x35c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x360>)
 8002802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x364>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x368>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fc8c 	bl	800112c <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
 8002828:	0801773c 	.word	0x0801773c
 800282c:	24000004 	.word	0x24000004
 8002830:	24000000 	.word	0x24000000
 8002834:	24000008 	.word	0x24000008

08002838 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12a      	bne.n	80028a0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	481f      	ldr	r0, [pc, #124]	; (8002904 <HAL_RCC_MCOConfig+0xcc>)
 8002886:	f7fe ff29 	bl	80016dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	430b      	orrs	r3, r1
 8002898:	4919      	ldr	r1, [pc, #100]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800289e:	e02a      	b.n	80028f6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <HAL_RCC_MCOConfig+0xd0>)
 80028dc:	f7fe fefe 	bl	80016dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	01d9      	lsls	r1, r3, #7
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	610b      	str	r3, [r1, #16]
}
 80028f6:	bf00      	nop
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
 8002904:	58020000 	.word	0x58020000
 8002908:	58020800 	.word	0x58020800

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002912:	4bb3      	ldr	r3, [pc, #716]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291a:	2b18      	cmp	r3, #24
 800291c:	f200 8155 	bhi.w	8002bca <HAL_RCC_GetSysClockFreq+0x2be>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800298d 	.word	0x0800298d
 800292c:	08002bcb 	.word	0x08002bcb
 8002930:	08002bcb 	.word	0x08002bcb
 8002934:	08002bcb 	.word	0x08002bcb
 8002938:	08002bcb 	.word	0x08002bcb
 800293c:	08002bcb 	.word	0x08002bcb
 8002940:	08002bcb 	.word	0x08002bcb
 8002944:	08002bcb 	.word	0x08002bcb
 8002948:	080029b3 	.word	0x080029b3
 800294c:	08002bcb 	.word	0x08002bcb
 8002950:	08002bcb 	.word	0x08002bcb
 8002954:	08002bcb 	.word	0x08002bcb
 8002958:	08002bcb 	.word	0x08002bcb
 800295c:	08002bcb 	.word	0x08002bcb
 8002960:	08002bcb 	.word	0x08002bcb
 8002964:	08002bcb 	.word	0x08002bcb
 8002968:	080029b9 	.word	0x080029b9
 800296c:	08002bcb 	.word	0x08002bcb
 8002970:	08002bcb 	.word	0x08002bcb
 8002974:	08002bcb 	.word	0x08002bcb
 8002978:	08002bcb 	.word	0x08002bcb
 800297c:	08002bcb 	.word	0x08002bcb
 8002980:	08002bcb 	.word	0x08002bcb
 8002984:	08002bcb 	.word	0x08002bcb
 8002988:	080029bf 	.word	0x080029bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b94      	ldr	r3, [pc, #592]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002998:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	4a90      	ldr	r2, [pc, #576]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029aa:	e111      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029ac:	4b8d      	ldr	r3, [pc, #564]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029ae:	61bb      	str	r3, [r7, #24]
      break;
 80029b0:	e10e      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029b2:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029b4:	61bb      	str	r3, [r7, #24]
      break;
 80029b6:	e10b      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029b8:	4b8c      	ldr	r3, [pc, #560]	; (8002bec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029ba:	61bb      	str	r3, [r7, #24]
      break;
 80029bc:	e108      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029be:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029c8:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029d4:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029de:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80e1 	beq.w	8002bc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f000 8083 	beq.w	8002b10 <HAL_RCC_GetSysClockFreq+0x204>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	f200 80a1 	bhi.w	8002b54 <HAL_RCC_GetSysClockFreq+0x248>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x114>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d056      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a1e:	e099      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	4a6b      	ldr	r2, [pc, #428]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a86:	e087      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aca:	e065      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b0e:	e043      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bfc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b52:	e021      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbc:	ee17 3a90 	vmov	r3, s15
 8002bc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
      break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bcc:	61bb      	str	r3, [r7, #24]
      break;
 8002bce:	bf00      	nop
  }

  return sysclockfreq;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400
 8002be4:	03d09000 	.word	0x03d09000
 8002be8:	003d0900 	.word	0x003d0900
 8002bec:	017d7840 	.word	0x017d7840
 8002bf0:	46000000 	.word	0x46000000
 8002bf4:	4c742400 	.word	0x4c742400
 8002bf8:	4a742400 	.word	0x4a742400
 8002bfc:	4bbebc20 	.word	0x4bbebc20

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c06:	f7ff fe81 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490f      	ldr	r1, [pc, #60]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c3e:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58024400 	.word	0x58024400
 8002c54:	0801773c 	.word	0x0801773c
 8002c58:	24000004 	.word	0x24000004
 8002c5c:	24000000 	.word	0x24000000

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c64:	f7ff ffcc 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58024400 	.word	0x58024400
 8002c88:	0801773c 	.word	0x0801773c

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c90:	f7ff ffb6 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	0801773c 	.word	0x0801773c

08002cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0207 	and.w	r2, r3, #7
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_RCC_GetClockConfig+0x7c>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_GetClockConfig+0x80>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	601a      	str	r2, [r3, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	58024400 	.word	0x58024400
 8002d38:	52002000 	.word	0x52002000

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b0cc      	sub	sp, #304	; 0x130
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d60:	2500      	movs	r5, #0
 8002d62:	ea54 0305 	orrs.w	r3, r4, r5
 8002d66:	d049      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d72:	d02f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d78:	d828      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d7e:	d01a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d84:	d822      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d90:	e01c      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4bb8      	ldr	r3, [pc, #736]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	4ab7      	ldr	r2, [pc, #732]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d9e:	e01a      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002da4:	3308      	adds	r3, #8
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fba1 	bl	80054f0 <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dba:	3328      	adds	r3, #40	; 0x28
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fc48 	bl	8005654 <RCCEx_PLL3_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dca:	e004      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dde:	4ba5      	ldr	r3, [pc, #660]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dec:	4aa1      	ldr	r2, [pc, #644]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6513      	str	r3, [r2, #80]	; 0x50
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002df8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002e08:	f04f 0900 	mov.w	r9, #0
 8002e0c:	ea58 0309 	orrs.w	r3, r8, r9
 8002e10:	d047      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d82a      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e39 	.word	0x08002e39
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e7b 	.word	0x08002e7b
 8002e34:	08002e7b 	.word	0x08002e7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e38:	4b8e      	ldr	r3, [pc, #568]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4a8d      	ldr	r2, [pc, #564]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e44:	e01a      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fb4e 	bl	80054f0 <RCCEx_PLL2_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e5a:	e00f      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e60:	3328      	adds	r3, #40	; 0x28
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fbf5 	bl	8005654 <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e70:	e004      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e84:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	f023 0107 	bic.w	r1, r3, #7
 8002e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	4a78      	ldr	r2, [pc, #480]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6513      	str	r3, [r2, #80]	; 0x50
 8002e98:	e003      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002eae:	f04f 0b00 	mov.w	fp, #0
 8002eb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002eb6:	d04c      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec2:	d030      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d829      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002eca:	2bc0      	cmp	r3, #192	; 0xc0
 8002ecc:	d02d      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d825      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d018      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d821      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d007      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4a62      	ldr	r2, [pc, #392]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 faf8 	bl	80054f0 <RCCEx_PLL2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f06:	e011      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f0c:	3328      	adds	r3, #40	; 0x28
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 fb9f 	bl	8005654 <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f1c:	e006      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f24:	e002      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f34:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6513      	str	r3, [r2, #80]	; 0x50
 8002f48:	e003      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002f5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f68:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	d053      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f7e:	d035      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f84:	d82e      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f8a:	d031      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f90:	d828      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f96:	d01a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9c:	d822      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fa95 	bl	80054f0 <RCCEx_PLL2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fcc:	e011      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd2:	3328      	adds	r3, #40	; 0x28
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fb3c 	bl	8005654 <RCCEx_PLL3_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fe2:	e006      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003002:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800300c:	430b      	orrs	r3, r1
 800300e:	6593      	str	r3, [r2, #88]	; 0x58
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003016:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003026:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003030:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003034:	460b      	mov	r3, r1
 8003036:	4313      	orrs	r3, r2
 8003038:	d056      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800303a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800303e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003046:	d038      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304c:	d831      	bhi.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800304e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003052:	d034      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003054:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003058:	d82b      	bhi.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d01d      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003064:	d825      	bhi.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800306a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003070:	e01f      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003078:	4ba2      	ldr	r3, [pc, #648]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	4aa1      	ldr	r2, [pc, #644]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003084:	e01c      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003086:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800308a:	3308      	adds	r3, #8
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f002 fa2e 	bl	80054f0 <RCCEx_PLL2_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800309a:	e011      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800309c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a0:	3328      	adds	r3, #40	; 0x28
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fad5 	bl	8005654 <RCCEx_PLL3_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030b0:	e006      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030b8:	e002      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030c8:	4b8e      	ldr	r3, [pc, #568]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80030d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d8:	4a8a      	ldr	r2, [pc, #552]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030da:	430b      	orrs	r3, r1
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
 80030de:	e003      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030e4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80030f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d03a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	2b30      	cmp	r3, #48	; 0x30
 8003110:	d01f      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003112:	2b30      	cmp	r3, #48	; 0x30
 8003114:	d819      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003116:	2b20      	cmp	r3, #32
 8003118:	d00c      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800311a:	2b20      	cmp	r3, #32
 800311c:	d815      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003122:	2b10      	cmp	r3, #16
 8003124:	d111      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003126:	4b77      	ldr	r3, [pc, #476]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a76      	ldr	r2, [pc, #472]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003132:	e011      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003134:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003138:	3308      	adds	r3, #8
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f002 f9d7 	bl	80054f0 <RCCEx_PLL2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003150:	e002      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003158:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003170:	430b      	orrs	r3, r1
 8003172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800317a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800317e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800318a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003194:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d051      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800319e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a8:	d035      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80031aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ae:	d82e      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b4:	d031      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80031b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031ba:	d828      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c0:	d01a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c6:	d822      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d007      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80031d2:	e01c      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031e0:	e01c      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031e6:	3308      	adds	r3, #8
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 f980 	bl	80054f0 <RCCEx_PLL2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031f6:	e011      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031fc:	3328      	adds	r3, #40	; 0x28
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fa27 	bl	8005654 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800320c:	e006      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003214:	e002      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800321a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003224:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800322c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003232:	4a34      	ldr	r2, [pc, #208]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003234:	430b      	orrs	r3, r1
 8003236:	6513      	str	r3, [r2, #80]	; 0x50
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800323e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800324e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003258:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800325c:	460b      	mov	r3, r1
 800325e:	4313      	orrs	r3, r2
 8003260:	d056      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003262:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d033      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800326e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003272:	d82c      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003278:	d02f      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800327a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800327e:	d826      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003284:	d02b      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800328a:	d820      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800328c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003290:	d012      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003296:	d81a      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d115      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032a6:	3308      	adds	r3, #8
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 f920 	bl	80054f0 <RCCEx_PLL2_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032b6:	e015      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032bc:	3328      	adds	r3, #40	; 0x28
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 f9c7 	bl	8005654 <RCCEx_PLL3_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032cc:	e00a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80032d4:	e006      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032d6:	bf00      	nop
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80032f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fa:	4a02      	ldr	r2, [pc, #8]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003300:	e006      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800330c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800331c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003326:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800332a:	460b      	mov	r3, r1
 800332c:	4313      	orrs	r3, r2
 800332e:	d055      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003334:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333c:	d033      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800333e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003342:	d82c      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d02f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d826      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003350:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003354:	d02b      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800335a:	d820      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800335c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003360:	d012      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003366:	d81a      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800336c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003370:	d115      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003376:	3308      	adds	r3, #8
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f002 f8b8 	bl	80054f0 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003386:	e015      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f002 f95f 	bl	8005654 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800339c:	e00a      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033a6:	bf00      	nop
 80033a8:	e004      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033aa:	bf00      	nop
 80033ac:	e002      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033ae:	bf00      	nop
 80033b0:	e000      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033bc:	4bb6      	ldr	r3, [pc, #728]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80033c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033cc:	4ab2      	ldr	r2, [pc, #712]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80033dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80033e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d02a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80033fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340a:	d10a      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003410:	3308      	adds	r3, #8
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f002 f86b 	bl	80054f0 <RCCEx_PLL2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003434:	4b98      	ldr	r3, [pc, #608]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800343c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	4a95      	ldr	r2, [pc, #596]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003444:	430b      	orrs	r3, r1
 8003446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800344e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800345e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003468:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800346c:	460b      	mov	r3, r1
 800346e:	4313      	orrs	r3, r2
 8003470:	d037      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003472:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347c:	d00e      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800347e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003482:	d816      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800348c:	d111      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348e:	4b82      	ldr	r3, [pc, #520]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	4a81      	ldr	r2, [pc, #516]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800349a:	e00f      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800349c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034a0:	3308      	adds	r3, #8
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 f823 	bl	80054f0 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034b0:	e004      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80034ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034c4:	4b74      	ldr	r3, [pc, #464]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6513      	str	r3, [r2, #80]	; 0x50
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034f8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4313      	orrs	r3, r2
 8003500:	d03a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	2b03      	cmp	r3, #3
 800350a:	d81d      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003551 	.word	0x08003551
 8003518:	08003525 	.word	0x08003525
 800351c:	08003533 	.word	0x08003533
 8003520:	08003551 	.word	0x08003551
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003530:	e00f      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003536:	3308      	adds	r3, #8
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f001 ffd8 	bl	80054f0 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003552:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	f023 0103 	bic.w	r1, r3, #3
 8003562:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800356a:	430b      	orrs	r3, r1
 800356c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800356e:	e003      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003574:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800358e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	f000 80a0 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3f      	ldr	r2, [pc, #252]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a6:	f7fd ff7d 	bl	80014a4 <HAL_GetTick>
 80035aa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ae:	e00b      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fd ff78 	bl	80014a4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d903      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ed      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80035d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d17a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035e8:	4053      	eors	r3, r2
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003618:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800361e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003622:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362a:	d118      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd ff3a 	bl	80014a4 <HAL_GetTick>
 8003630:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003634:	e00d      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd ff35 	bl	80014a4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	f241 3388 	movw	r3, #5000	; 0x1388
 8003646:	429a      	cmp	r2, r3
 8003648:	d903      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003650:	e005      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0eb      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800365e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003662:	2b00      	cmp	r3, #0
 8003664:	d130      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800366a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003676:	d115      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003684:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003688:	091a      	lsrs	r2, r3, #4
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800368c:	4013      	ands	r3, r2
 800368e:	4a02      	ldr	r2, [pc, #8]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6113      	str	r3, [r2, #16]
 8003694:	e00c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003696:	bf00      	nop
 8003698:	58024400 	.word	0x58024400
 800369c:	58024800 	.word	0x58024800
 80036a0:	00ffffcf 	.word	0x00ffffcf
 80036a4:	4bd4      	ldr	r3, [pc, #848]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4ad3      	ldr	r2, [pc, #844]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036ae:	6113      	str	r3, [r2, #16]
 80036b0:	4bd1      	ldr	r3, [pc, #836]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80036b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	4acd      	ldr	r2, [pc, #820]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e008      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036cc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f002 0301 	and.w	r3, r2, #1
 80036e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f000 808b 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003704:	2b28      	cmp	r3, #40	; 0x28
 8003706:	d86b      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	080037e9 	.word	0x080037e9
 8003714:	080037e1 	.word	0x080037e1
 8003718:	080037e1 	.word	0x080037e1
 800371c:	080037e1 	.word	0x080037e1
 8003720:	080037e1 	.word	0x080037e1
 8003724:	080037e1 	.word	0x080037e1
 8003728:	080037e1 	.word	0x080037e1
 800372c:	080037e1 	.word	0x080037e1
 8003730:	080037b5 	.word	0x080037b5
 8003734:	080037e1 	.word	0x080037e1
 8003738:	080037e1 	.word	0x080037e1
 800373c:	080037e1 	.word	0x080037e1
 8003740:	080037e1 	.word	0x080037e1
 8003744:	080037e1 	.word	0x080037e1
 8003748:	080037e1 	.word	0x080037e1
 800374c:	080037e1 	.word	0x080037e1
 8003750:	080037cb 	.word	0x080037cb
 8003754:	080037e1 	.word	0x080037e1
 8003758:	080037e1 	.word	0x080037e1
 800375c:	080037e1 	.word	0x080037e1
 8003760:	080037e1 	.word	0x080037e1
 8003764:	080037e1 	.word	0x080037e1
 8003768:	080037e1 	.word	0x080037e1
 800376c:	080037e1 	.word	0x080037e1
 8003770:	080037e9 	.word	0x080037e9
 8003774:	080037e1 	.word	0x080037e1
 8003778:	080037e1 	.word	0x080037e1
 800377c:	080037e1 	.word	0x080037e1
 8003780:	080037e1 	.word	0x080037e1
 8003784:	080037e1 	.word	0x080037e1
 8003788:	080037e1 	.word	0x080037e1
 800378c:	080037e1 	.word	0x080037e1
 8003790:	080037e9 	.word	0x080037e9
 8003794:	080037e1 	.word	0x080037e1
 8003798:	080037e1 	.word	0x080037e1
 800379c:	080037e1 	.word	0x080037e1
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	080037e1 	.word	0x080037e1
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080037e9 	.word	0x080037e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b8:	3308      	adds	r3, #8
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fe97 	bl	80054f0 <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037c8:	e00f      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ce:	3328      	adds	r3, #40	; 0x28
 80037d0:	2101      	movs	r1, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 ff3e 	bl	8005654 <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037de:	e004      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80037e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10b      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037f2:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80037fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003802:	4a7d      	ldr	r2, [pc, #500]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6553      	str	r3, [r2, #84]	; 0x54
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800380e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f002 0302 	and.w	r3, r2, #2
 800381e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003828:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d042      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003832:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003838:	2b05      	cmp	r3, #5
 800383a:	d825      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003891 	.word	0x08003891
 8003848:	0800385d 	.word	0x0800385d
 800384c:	08003873 	.word	0x08003873
 8003850:	08003891 	.word	0x08003891
 8003854:	08003891 	.word	0x08003891
 8003858:	08003891 	.word	0x08003891
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003860:	3308      	adds	r3, #8
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fe43 	bl	80054f0 <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003870:	e00f      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003876:	3328      	adds	r3, #40	; 0x28
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f001 feea 	bl	8005654 <RCCEx_PLL3_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003886:	e004      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003892:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f023 0107 	bic.w	r1, r3, #7
 80038a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6553      	str	r3, [r2, #84]	; 0x54
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f002 0304 	and.w	r3, r2, #4
 80038c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	d044      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d825      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	08003939 	.word	0x08003939
 80038f0:	08003905 	.word	0x08003905
 80038f4:	0800391b 	.word	0x0800391b
 80038f8:	08003939 	.word	0x08003939
 80038fc:	08003939 	.word	0x08003939
 8003900:	08003939 	.word	0x08003939
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003904:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003908:	3308      	adds	r3, #8
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fdef 	bl	80054f0 <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003918:	e00f      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800391e:	3328      	adds	r3, #40	; 0x28
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fe96 	bl	8005654 <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f023 0107 	bic.w	r1, r3, #7
 800394a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003952:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003954:	430b      	orrs	r3, r1
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800395e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f002 0320 	and.w	r3, r2, #32
 800396e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800397c:	460b      	mov	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	d057      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003982:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398e:	d035      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003994:	d82c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d031      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d826      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80039a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039a6:	d02d      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80039a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ac:	d820      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b2:	d012      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d81a      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d024      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d115      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039c8:	3308      	adds	r3, #8
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fd8f 	bl	80054f0 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039d8:	e017      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039de:	3328      	adds	r3, #40	; 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fe36 	bl	8005654 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039f6:	e008      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80039f8:	58024400 	.word	0x58024400
        break;
 80039fc:	bf00      	nop
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003a00:	bf00      	nop
 8003a02:	e002      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a12:	4bc2      	ldr	r3, [pc, #776]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	4abe      	ldr	r2, [pc, #760]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6553      	str	r3, [r2, #84]	; 0x54
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a2e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d055      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a5e:	d033      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003a60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a64:	d82c      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d02f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a70:	d826      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a76:	d02b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a7c:	d820      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a82:	d012      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a88:	d81a      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d022      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d115      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a98:	3308      	adds	r3, #8
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fd27 	bl	80054f0 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aae:	3328      	adds	r3, #40	; 0x28
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fdce 	bl	8005654 <RCCEx_PLL3_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003ac6:	e006      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003ac8:	bf00      	nop
 8003aca:	e004      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003acc:	bf00      	nop
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ade:	4b8f      	ldr	r3, [pc, #572]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aee:	4a8b      	ldr	r2, [pc, #556]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6593      	str	r3, [r2, #88]	; 0x58
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003afa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d055      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b2a:	d033      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003b2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b30:	d82c      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	d02f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d826      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b42:	d02b      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003b44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b48:	d820      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4e:	d012      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b54:	d81a      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5e:	d115      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b64:	3308      	adds	r3, #8
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fcc1 	bl	80054f0 <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b74:	e015      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b7a:	3328      	adds	r3, #40	; 0x28
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fd68 	bl	8005654 <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b92:	e006      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b94:	bf00      	nop
 8003b96:	e004      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bba:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc0:	e003      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bc6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	f002 0308 	and.w	r3, r2, #8
 8003bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d01e      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bfc:	3328      	adds	r3, #40	; 0x28
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fd27 	bl	8005654 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c12:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 0310 	and.w	r3, r2, #16
 8003c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d01e      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c5a:	3328      	adds	r3, #40	; 0x28
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fcf8 	bl	8005654 <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c80:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c9c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb2:	d022      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb8:	d81b      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fc0e 	bl	80054f0 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cda:	e00f      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce0:	3328      	adds	r3, #40	; 0x28
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fcb5 	bl	8005654 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cf0:	e004      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10d      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d14:	4a01      	ldr	r2, [pc, #4]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1a:	e005      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d24:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d36:	2300      	movs	r3, #0
 8003d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d3a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4313      	orrs	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d50:	d01f      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d56:	d818      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d62:	d007      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003d64:	e011      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d66:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a63      	ldr	r2, [pc, #396]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d72:	e00f      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d78:	3328      	adds	r3, #40	; 0x28
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fc69 	bl	8005654 <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d88:	e004      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003dae:	430b      	orrs	r3, r1
 8003db0:	6553      	str	r3, [r2, #84]	; 0x54
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003db8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dca:	2300      	movs	r3, #0
 8003dcc:	677b      	str	r3, [r7, #116]	; 0x74
 8003dce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d007      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a42      	ldr	r2, [pc, #264]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003df6:	e00e      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fb75 	bl	80054f0 <RCCEx_PLL2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e0c:	e003      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	4a32      	ldr	r2, [pc, #200]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d00c      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e5c:	3328      	adds	r3, #40	; 0x28
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fbf7 	bl	8005654 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e80:	2300      	movs	r3, #0
 8003e82:	667b      	str	r3, [r7, #100]	; 0x64
 8003e84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	d03a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9a:	d018      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea0:	d811      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea6:	d014      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d80b      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d011      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef0:	4a01      	ldr	r2, [pc, #4]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f00:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f12:	2300      	movs	r3, #0
 8003f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f20:	4baa      	ldr	r3, [pc, #680]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2e:	4aa7      	ldr	r2, [pc, #668]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 8003f42:	2300      	movs	r3, #0
 8003f44:	657b      	str	r3, [r7, #84]	; 0x54
 8003f46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f50:	4b9e      	ldr	r3, [pc, #632]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f60:	4a9a      	ldr	r2, [pc, #616]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f74:	2300      	movs	r3, #0
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f82:	4b92      	ldr	r3, [pc, #584]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a8e      	ldr	r2, [pc, #568]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fb2:	4b86      	ldr	r3, [pc, #536]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4a85      	ldr	r2, [pc, #532]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fbc:	6113      	str	r3, [r2, #16]
 8003fbe:	4b83      	ldr	r3, [pc, #524]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fc0:	6919      	ldr	r1, [r3, #16]
 8003fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fca:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fde:	2300      	movs	r3, #0
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fec:	4b77      	ldr	r3, [pc, #476]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a74      	ldr	r2, [pc, #464]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
 800400e:	2300      	movs	r3, #0
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
 8004012:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800401c:	4b6b      	ldr	r3, [pc, #428]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a67      	ldr	r2, [pc, #412]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800402e:	430b      	orrs	r3, r1
 8004030:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004032:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	2100      	movs	r1, #0
 800403c:	62b9      	str	r1, [r7, #40]	; 0x28
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004044:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d011      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800404e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004052:	3308      	adds	r3, #8
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fa4a 	bl	80054f0 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004062:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800406e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	2100      	movs	r1, #0
 800407c:	6239      	str	r1, [r7, #32]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004088:	460b      	mov	r3, r1
 800408a:	4313      	orrs	r3, r2
 800408c:	d011      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800408e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004092:	3308      	adds	r3, #8
 8004094:	2101      	movs	r1, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f001 fa2a 	bl	80054f0 <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80040a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	2100      	movs	r1, #0
 80040bc:	61b9      	str	r1, [r7, #24]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d011      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040d2:	3308      	adds	r3, #8
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fa0a 	bl	80054f0 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80040e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	2100      	movs	r1, #0
 80040fc:	6139      	str	r1, [r7, #16]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d011      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800410e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004112:	3328      	adds	r3, #40	; 0x28
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fa9c 	bl	8005654 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8004122:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800412e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	2100      	movs	r1, #0
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004148:	460b      	mov	r3, r1
 800414a:	4313      	orrs	r3, r2
 800414c:	d011      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004152:	3328      	adds	r3, #40	; 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa7c 	bl	8005654 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004162:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800416e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004172:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	2100      	movs	r1, #0
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004188:	460b      	mov	r3, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	d011      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004192:	3328      	adds	r3, #40	; 0x28
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fa5c 	bl	8005654 <RCCEx_PLL3_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80041a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80041ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80041b2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041cc:	58024400 	.word	0x58024400

080041d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b090      	sub	sp, #64	; 0x40
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80041da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041de:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80041e2:	430b      	orrs	r3, r1
 80041e4:	f040 8094 	bne.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80041e8:	4b9e      	ldr	r3, [pc, #632]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	f200 8087 	bhi.w	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004215 	.word	0x08004215
 8004204:	0800423d 	.word	0x0800423d
 8004208:	08004265 	.word	0x08004265
 800420c:	08004301 	.word	0x08004301
 8004210:	0800428d 	.word	0x0800428d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004214:	4b93      	ldr	r3, [pc, #588]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004220:	d108      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f810 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004230:	f000 bd45 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004238:	f000 bd41 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800423c:	4b89      	ldr	r3, [pc, #548]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004248:	d108      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800424a:	f107 0318 	add.w	r3, r7, #24
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fd54 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004258:	f000 bd31 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004260:	f000 bd2d 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004264:	4b7f      	ldr	r3, [pc, #508]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800426c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004270:	d108      	bne.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fe94 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004280:	f000 bd1d 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004288:	f000 bd19 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800428c:	4b75      	ldr	r3, [pc, #468]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004294:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004296:	4b73      	ldr	r3, [pc, #460]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042a8:	4b6e      	ldr	r3, [pc, #440]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a6d      	ldr	r2, [pc, #436]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ba:	e01f      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80042bc:	4b69      	ldr	r3, [pc, #420]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d106      	bne.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d0:	d102      	bne.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80042d2:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80042d8:	4b62      	ldr	r3, [pc, #392]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d102      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80042ee:	4b60      	ldr	r3, [pc, #384]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80042f8:	f000 bce1 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80042fc:	f000 bcdf 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004300:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004304:	f000 bcdb 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800430c:	f000 bcd7 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004314:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004318:	430b      	orrs	r3, r1
 800431a:	f040 80ad 	bne.w	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800431e:	4b51      	ldr	r3, [pc, #324]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004326:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d056      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	f200 8090 	bhi.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2bc0      	cmp	r3, #192	; 0xc0
 800433e:	f000 8088 	beq.w	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2bc0      	cmp	r3, #192	; 0xc0
 8004346:	f200 8088 	bhi.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d032      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2b80      	cmp	r3, #128	; 0x80
 8004354:	f200 8081 	bhi.w	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d014      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004364:	e079      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004366:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004372:	d108      	bne.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4618      	mov	r0, r3
 800437a:	f000 ff67 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004382:	f000 bc9c 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800438a:	f000 bc98 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439a:	d108      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fcab 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043aa:	f000 bc88 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043b2:	f000 bc84 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c2:	d108      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fdeb 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043d2:	f000 bc74 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043da:	f000 bc70 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d10c      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440c:	e01f      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d106      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d102      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	e011      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004436:	d106      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443e:	d102      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	e003      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800444a:	f000 bc38 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800444e:	f000 bc36 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004456:	f000 bc32 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800445e:	f000 bc2e 	b.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
 8004468:	03d09000 	.word	0x03d09000
 800446c:	003d0900 	.word	0x003d0900
 8004470:	017d7840 	.word	0x017d7840
 8004474:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004480:	430b      	orrs	r3, r1
 8004482:	f040 809c 	bne.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004486:	4b9e      	ldr	r3, [pc, #632]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800448e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004496:	d054      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800449e:	f200 808b 	bhi.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044a8:	f000 8083 	beq.w	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044b2:	f200 8081 	bhi.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044bc:	d02f      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c4:	d878      	bhi.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d2:	d012      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80044d4:	e070      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044d6:	4b8a      	ldr	r3, [pc, #552]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044e2:	d107      	bne.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 feaf 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044f2:	e3e4      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044f8:	e3e1      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044fa:	4b81      	ldr	r3, [pc, #516]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004506:	d107      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004508:	f107 0318 	add.w	r3, r7, #24
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fbf5 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004516:	e3d2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451c:	e3cf      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800451e:	4b78      	ldr	r3, [pc, #480]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452a:	d107      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800452c:	f107 030c 	add.w	r3, r7, #12
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd37 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800453a:	e3c0      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004540:	e3bd      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800454a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800454c:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d10c      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800455e:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	08db      	lsrs	r3, r3, #3
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	4a66      	ldr	r2, [pc, #408]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	e01e      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004586:	d102      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	e010      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800458e:	4b5c      	ldr	r3, [pc, #368]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459a:	d106      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a2:	d102      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80045a4:	4b59      	ldr	r3, [pc, #356]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	e002      	b.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80045ae:	e386      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80045b0:	e385      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80045b2:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045b6:	e382      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045bc:	e37f      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80045be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80045c6:	430b      	orrs	r3, r1
 80045c8:	f040 80a7 	bne.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80045cc:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045dc:	d055      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e4:	f200 8096 	bhi.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ee:	f000 8084 	beq.w	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045f8:	f200 808c 	bhi.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004602:	d030      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800460a:	f200 8083 	bhi.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461a:	d012      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800461c:	e07a      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800462a:	d107      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800462c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fe0b 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800463a:	e340      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004640:	e33d      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464e:	d107      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fb51 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800465e:	e32e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004664:	e32b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004672:	d107      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fc93 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004682:	e31c      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004688:	e319      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004692:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004694:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d10c      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80046b2:	fa22 f303 	lsr.w	r3, r2, r3
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b8:	e01e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c6:	d106      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ce:	d102      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d4:	e010      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ea:	d102      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80046f6:	e2e2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046f8:	e2e1      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046fe:	e2de      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004700:	58024400 	.word	0x58024400
 8004704:	03d09000 	.word	0x03d09000
 8004708:	003d0900 	.word	0x003d0900
 800470c:	017d7840 	.word	0x017d7840
 8004710:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004718:	e2d1      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800471a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800471e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004722:	430b      	orrs	r3, r1
 8004724:	f040 809c 	bne.w	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004728:	4b93      	ldr	r3, [pc, #588]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004738:	d054      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	f200 808b 	bhi.w	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800474a:	f000 8083 	beq.w	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004754:	f200 8081 	bhi.w	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d02f      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004766:	d878      	bhi.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d012      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004776:	e070      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004778:	4b7f      	ldr	r3, [pc, #508]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d107      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fd5e 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004794:	e293      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800479a:	e290      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800479c:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d107      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 faa4 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047b8:	e281      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047be:	e27e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047c0:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047cc:	d107      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fbe6 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047dc:	e26f      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047e2:	e26c      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047e4:	4b64      	ldr	r3, [pc, #400]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047ee:	4b62      	ldr	r3, [pc, #392]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a5c      	ldr	r2, [pc, #368]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004812:	e01e      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004814:	4b58      	ldr	r3, [pc, #352]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004828:	d102      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800482a:	4b55      	ldr	r3, [pc, #340]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482e:	e010      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004830:	4b51      	ldr	r3, [pc, #324]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483c:	d106      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d102      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484a:	e002      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004850:	e235      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004852:	e234      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004858:	e231      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800485e:	e22e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004864:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004868:	430b      	orrs	r3, r1
 800486a:	f040 808f 	bne.w	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004876:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800487e:	d06b      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004886:	d874      	bhi.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800488e:	d056      	beq.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004896:	d86c      	bhi.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800489e:	d03b      	beq.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a6:	d864      	bhi.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ae:	d021      	beq.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b6:	d85c      	bhi.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d004      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80048c6:	e054      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe f9ca 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 80048cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048ce:	e1f6      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048dc:	d107      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048de:	f107 0318 	add.w	r3, r7, #24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa0a 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048ec:	e1e7      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f2:	e1e4      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048f4:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d107      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb4c 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004910:	e1d5      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004916:	e1d2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d109      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004936:	e1c2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800493c:	e1bf      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494a:	d102      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004950:	e1b5      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004956:	e1b2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004964:	d102      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800496a:	e1a8      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004970:	e1a5      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004976:	e1a2      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004978:	58024400 	.word	0x58024400
 800497c:	03d09000 	.word	0x03d09000
 8004980:	003d0900 	.word	0x003d0900
 8004984:	017d7840 	.word	0x017d7840
 8004988:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004994:	430b      	orrs	r3, r1
 8004996:	d173      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004998:	4b9c      	ldr	r3, [pc, #624]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a8:	d02f      	beq.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b0:	d863      	bhi.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049be:	d012      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80049c0:	e05b      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049c2:	4b92      	ldr	r3, [pc, #584]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ce:	d107      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049d0:	f107 0318 	add.w	r3, r7, #24
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f991 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049de:	e16e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049e4:	e16b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049e6:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f2:	d107      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049f4:	f107 030c 	add.w	r3, r7, #12
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fad3 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a02:	e15c      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a08:	e159      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a0a:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a14:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d10c      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a26:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	4a77      	ldr	r2, [pc, #476]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	e01e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a3a:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d106      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a50:	4b70      	ldr	r3, [pc, #448]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a54:	e010      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a56:	4b6d      	ldr	r3, [pc, #436]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a6c:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a76:	e122      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004a78:	e121      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a7e:	e11e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	d133      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004a8c:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa2:	d012      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004aa4:	e023      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aa6:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fbc7 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ac2:	e0fc      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ac8:	e0f9      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aca:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad8:	f107 0318 	add.w	r3, r7, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f90d 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ae6:	e0ea      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aec:	e0e7      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af2:	e0e4      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004afc:	430b      	orrs	r3, r1
 8004afe:	f040 808d 	bne.w	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004b02:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b12:	d06b      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b1a:	d874      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b22:	d056      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d86c      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b32:	d03b      	beq.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b3a:	d864      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b42:	d021      	beq.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4a:	d85c      	bhi.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b58:	d004      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004b5a:	e054      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004b5c:	f000 f8b8 	bl	8004cd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b60:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b62:	e0ac      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b64:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b70:	d107      	bne.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b72:	f107 0318 	add.w	r3, r7, #24
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f8c0 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b80:	e09d      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b86:	e09a      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fa02 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ba4:	e08b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004baa:	e088      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bca:	e078      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bd0:	e075      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bde:	d102      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004be4:	e06b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bea:	e068      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bfe:	e05e      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c04:	e05b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c0a:	e058      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	03d09000 	.word	0x03d09000
 8004c14:	003d0900 	.word	0x003d0900
 8004c18:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c20:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004c24:	430b      	orrs	r3, r1
 8004c26:	d148      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c38:	d02a      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c40:	d838      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004c50:	e030      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c64:	e02b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6a:	e028      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c78:	d107      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fae4 	bl	800524c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c88:	e019      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c8e:	e016      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d107      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c9e:	f107 0318 	add.w	r3, r7, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f82a 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cac:	e007      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb2:	e004      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb8:	e001      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3740      	adds	r7, #64	; 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	017d7840 	.word	0x017d7840

08004cd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cd4:	f7fd ff94 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4904      	ldr	r1, [pc, #16]	; (8004cf8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	0801773c 	.word	0x0801773c

08004cfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d04:	4ba1      	ldr	r3, [pc, #644]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d0e:	4b9f      	ldr	r3, [pc, #636]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	0b1b      	lsrs	r3, r3, #12
 8004d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d1a:	4b9c      	ldr	r3, [pc, #624]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d26:	4b99      	ldr	r3, [pc, #612]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	08db      	lsrs	r3, r3, #3
 8004d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8111 	beq.w	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f000 8083 	beq.w	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f200 80a1 	bhi.w	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d056      	beq.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d66:	e099      	b.n	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d68:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d02d      	beq.n	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d74:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	4a84      	ldr	r2, [pc, #528]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dce:	e087      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	e065      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e56:	e043      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b48      	ldr	r3, [pc, #288]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9a:	e021      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ede:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	0a5b      	lsrs	r3, r3, #9
 8004ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f06:	ee17 2a90 	vmov	r2, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f34:	ee17 2a90 	vmov	r2, s15
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f62:	ee17 2a90 	vmov	r2, s15
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f6a:	e008      	b.n	8004f7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	03d09000 	.word	0x03d09000
 8004f94:	46000000 	.word	0x46000000
 8004f98:	4c742400 	.word	0x4c742400
 8004f9c:	4a742400 	.word	0x4a742400
 8004fa0:	4bbebc20 	.word	0x4bbebc20

08004fa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fac:	4ba1      	ldr	r3, [pc, #644]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fb6:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	0d1b      	lsrs	r3, r3, #20
 8004fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fc2:	4b9c      	ldr	r3, [pc, #624]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fce:	4b99      	ldr	r3, [pc, #612]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8111 	beq.w	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	f000 8083 	beq.w	8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f200 80a1 	bhi.w	8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d056      	beq.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800500e:	e099      	b.n	8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02d      	beq.n	8005078 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800501c:	4b85      	ldr	r3, [pc, #532]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a84      	ldr	r2, [pc, #528]	; (8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005046:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005056:	ed97 6a03 	vldr	s12, [r7, #12]
 800505a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800506a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005076:	e087      	b.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508a:	4b6a      	ldr	r3, [pc, #424]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509a:	ed97 6a03 	vldr	s12, [r7, #12]
 800509e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ba:	e065      	b.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b59      	ldr	r3, [pc, #356]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050fe:	e043      	b.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b48      	ldr	r3, [pc, #288]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a45 	vldr	s11, [pc, #276]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005142:	e021      	b.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005186:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	0a5b      	lsrs	r3, r3, #9
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ae:	ee17 2a90 	vmov	r2, s15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c0:	ee07 3a90 	vmov	s15, r3
 80051c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051dc:	ee17 2a90 	vmov	r2, s15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520a:	ee17 2a90 	vmov	r2, s15
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
}
 8005226:	bf00      	nop
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	03d09000 	.word	0x03d09000
 800523c:	46000000 	.word	0x46000000
 8005240:	4c742400 	.word	0x4c742400
 8005244:	4a742400 	.word	0x4a742400
 8005248:	4bbebc20 	.word	0x4bbebc20

0800524c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005254:	4ba0      	ldr	r3, [pc, #640]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800525e:	4b9e      	ldr	r3, [pc, #632]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005268:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800526a:	4b9b      	ldr	r3, [pc, #620]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005274:	4b98      	ldr	r3, [pc, #608]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	08db      	lsrs	r3, r3, #3
 800527a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	fb02 f303 	mul.w	r3, r2, r3
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8111 	beq.w	80054ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b02      	cmp	r3, #2
 800529c:	f000 8083 	beq.w	80053a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	f200 80a1 	bhi.w	80053ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d056      	beq.n	8005362 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80052b4:	e099      	b.n	80053ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b6:	4b88      	ldr	r3, [pc, #544]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02d      	beq.n	800531e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	4a83      	ldr	r2, [pc, #524]	; (80054dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ec:	4b7a      	ldr	r3, [pc, #488]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005300:	eddf 5a77 	vldr	s11, [pc, #476]	; 80054e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005318:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800531c:	e087      	b.n	800542e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005328:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80054e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800532c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005330:	4b69      	ldr	r3, [pc, #420]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005340:	ed97 6a03 	vldr	s12, [r7, #12]
 8005344:	eddf 5a66 	vldr	s11, [pc, #408]	; 80054e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005360:	e065      	b.n	800542e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80054e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005374:	4b58      	ldr	r3, [pc, #352]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	ed97 6a03 	vldr	s12, [r7, #12]
 8005388:	eddf 5a55 	vldr	s11, [pc, #340]	; 80054e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800538c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053a4:	e043      	b.n	800542e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80054ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80053b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b8:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80053cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80054e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e8:	e021      	b.n	800542e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80054e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80053f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fc:	4b36      	ldr	r3, [pc, #216]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005410:	eddf 5a33 	vldr	s11, [pc, #204]	; 80054e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800542e:	4b2a      	ldr	r3, [pc, #168]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	0a5b      	lsrs	r3, r3, #9
 8005434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005448:	edd7 6a07 	vldr	s13, [r7, #28]
 800544c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005454:	ee17 2a90 	vmov	r2, s15
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800545c:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005476:	edd7 6a07 	vldr	s13, [r7, #28]
 800547a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800547e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005482:	ee17 2a90 	vmov	r2, s15
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	0e1b      	lsrs	r3, r3, #24
 8005490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b0:	ee17 2a90 	vmov	r2, s15
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054b8:	e008      	b.n	80054cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3724      	adds	r7, #36	; 0x24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	58024400 	.word	0x58024400
 80054dc:	03d09000 	.word	0x03d09000
 80054e0:	46000000 	.word	0x46000000
 80054e4:	4c742400 	.word	0x4c742400
 80054e8:	4a742400 	.word	0x4a742400
 80054ec:	4bbebc20 	.word	0x4bbebc20

080054f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054fe:	4b53      	ldr	r3, [pc, #332]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d101      	bne.n	800550e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e099      	b.n	8005642 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800550e:	4b4f      	ldr	r3, [pc, #316]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4e      	ldr	r2, [pc, #312]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551a:	f7fb ffc3 	bl	80014a4 <HAL_GetTick>
 800551e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005520:	e008      	b.n	8005534 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005522:	f7fb ffbf 	bl	80014a4 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e086      	b.n	8005642 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005534:	4b45      	ldr	r3, [pc, #276]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005540:	4b42      	ldr	r3, [pc, #264]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	493f      	ldr	r1, [pc, #252]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	628b      	str	r3, [r1, #40]	; 0x28
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	3b01      	subs	r3, #1
 8005564:	025b      	lsls	r3, r3, #9
 8005566:	b29b      	uxth	r3, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	3b01      	subs	r3, #1
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005584:	4931      	ldr	r1, [pc, #196]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	492d      	ldr	r1, [pc, #180]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f023 0220 	bic.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4928      	ldr	r1, [pc, #160]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ae:	4b27      	ldr	r3, [pc, #156]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <RCCEx_PLL2_Config+0x160>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	69d2      	ldr	r2, [r2, #28]
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	4920      	ldr	r1, [pc, #128]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055d4:	f043 0310 	orr.w	r3, r3, #16
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055ec:	e00f      	b.n	800560e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d106      	bne.n	8005602 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a14      	ldr	r2, [pc, #80]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005600:	e005      	b.n	800560e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	4a11      	ldr	r2, [pc, #68]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800560c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561a:	f7fb ff43 	bl	80014a4 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005620:	e008      	b.n	8005634 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005622:	f7fb ff3f 	bl	80014a4 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	58024400 	.word	0x58024400
 8005650:	ffff0007 	.word	0xffff0007

08005654 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005662:	4b53      	ldr	r3, [pc, #332]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b03      	cmp	r3, #3
 800566c:	d101      	bne.n	8005672 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e099      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4e      	ldr	r2, [pc, #312]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fb ff11 	bl	80014a4 <HAL_GetTick>
 8005682:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005684:	e008      	b.n	8005698 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005686:	f7fb ff0d 	bl	80014a4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e086      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056a4:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	051b      	lsls	r3, r3, #20
 80056b2:	493f      	ldr	r1, [pc, #252]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	628b      	str	r3, [r1, #40]	; 0x28
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	025b      	lsls	r3, r3, #9
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056e8:	4931      	ldr	r1, [pc, #196]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	492d      	ldr	r1, [pc, #180]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	4928      	ldr	r1, [pc, #160]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005712:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <RCCEx_PLL3_Config+0x160>)
 8005724:	4013      	ands	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	69d2      	ldr	r2, [r2, #28]
 800572a:	00d2      	lsls	r2, r2, #3
 800572c:	4920      	ldr	r1, [pc, #128]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005732:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005744:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800574a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800574e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005750:	e00f      	b.n	8005772 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800575e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005764:	e005      	b.n	8005772 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800576c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577e:	f7fb fe91 	bl	80014a4 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005784:	e008      	b.n	8005798 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005786:	f7fb fe8d 	bl	80014a4 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	ffff0007 	.word	0xffff0007

080057b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e075      	b.n	80058b6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fb fba5 	bl	8000f2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2204      	movs	r2, #4
 80057e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f868 	bl	80058c0 <HAL_SD_InitCard>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e05d      	b.n	80058b6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fdaf 	bl	8006364 <HAL_SD_GetCardStatus>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e052      	b.n	80058b6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005810:	7e3b      	ldrb	r3, [r7, #24]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005816:	7e7b      	ldrb	r3, [r7, #25]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10a      	bne.n	800583a <HAL_SD_Init+0x82>
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_SD_Init+0x78>
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	659a      	str	r2, [r3, #88]	; 0x58
 8005838:	e00b      	b.n	8005852 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	2b01      	cmp	r3, #1
 8005840:	d104      	bne.n	800584c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005848:	659a      	str	r2, [r3, #88]	; 0x58
 800584a:	e002      	b.n	8005852 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fe41 	bl	80064e0 <HAL_SD_ConfigWideBusOperation>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e026      	b.n	80058b6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005868:	f7fb fe1c 	bl	80014a4 <HAL_GetTick>
 800586c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800586e:	e011      	b.n	8005894 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005870:	f7fb fe18 	bl	80014a4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d109      	bne.n	8005894 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005886:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e010      	b.n	80058b6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 ff35 	bl	8006704 <HAL_SD_GetCardState>
 800589a:	4603      	mov	r3, r0
 800589c:	2b04      	cmp	r3, #4
 800589e:	d1e7      	bne.n	8005870 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b08d      	sub	sp, #52	; 0x34
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80058d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	f7fe fc76 	bl	80041d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e070      	b.n	80059e2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	4a39      	ldr	r2, [pc, #228]	; (80059ec <HAL_SD_InitCard+0x12c>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681c      	ldr	r4, [r3, #0]
 8005912:	466a      	mov	r2, sp
 8005914:	f107 0318 	add.w	r3, r7, #24
 8005918:	e893 0003 	ldmia.w	r3, {r0, r1}
 800591c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005920:	f107 030c 	add.w	r3, r7, #12
 8005924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005926:	4620      	mov	r0, r4
 8005928:	f002 ffbc 	bl	80088a4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f002 ffff 	bl	8008934 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_SD_InitCard+0x130>)
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	3301      	adds	r3, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb fdaf 	bl	80014bc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 ffbe 	bl	80068e0 <SD_PowerON>
 8005964:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e02e      	b.n	80059e2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fedd 	bl	8006744 <SD_InitCard>
 800598a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e01b      	b.n	80059e2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059b2:	4618      	mov	r0, r3
 80059b4:	f003 f854 	bl	8008a60 <SDMMC_CmdBlockLength>
 80059b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00f      	beq.n	80059e0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0b      	ldr	r2, [pc, #44]	; (80059f4 <HAL_SD_InitCard+0x134>)
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	372c      	adds	r7, #44	; 0x2c
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd90      	pop	{r4, r7, pc}
 80059ea:	bf00      	nop
 80059ec:	014f8b59 	.word	0x014f8b59
 80059f0:	00012110 	.word	0x00012110
 80059f4:	1fe00fff 	.word	0x1fe00fff

080059f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e08d      	b.n	8005b3c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	f040 8086 	bne.w	8005b3a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	441a      	add	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d907      	bls.n	8005a52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e074      	b.n	8005b3c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	025a      	lsls	r2, r3, #9
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d002      	beq.n	8005a7e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	025b      	lsls	r3, r3, #9
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	025b      	lsls	r3, r3, #9
 8005a88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a8a:	2390      	movs	r3, #144	; 0x90
 8005a8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f107 0210 	add.w	r2, r7, #16
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f002 ffaf 	bl	8008a08 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d90a      	bls.n	8005ae6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2282      	movs	r2, #130	; 0x82
 8005ad4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005adc:	4618      	mov	r0, r3
 8005ade:	f003 f805 	bl	8008aec <SDMMC_CmdReadMultiBlock>
 8005ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ae4:	e009      	b.n	8005afa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2281      	movs	r2, #129	; 0x81
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af2:	4618      	mov	r0, r3
 8005af4:	f002 ffd7 	bl	8008aa6 <SDMMC_CmdReadSingleBlock>
 8005af8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e00a      	b.n	8005b3c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	; 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	1fe00fff 	.word	0x1fe00fff

08005b48 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	; 0x30
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d107      	bne.n	8005b70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e08d      	b.n	8005c8c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	f040 8086 	bne.w	8005c8a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	441a      	add	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d907      	bls.n	8005ba2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e074      	b.n	8005c8c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	025a      	lsls	r2, r3, #9
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d002      	beq.n	8005bce <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	025b      	lsls	r3, r3, #9
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	025b      	lsls	r3, r3, #9
 8005bd8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bda:	2390      	movs	r3, #144	; 0x90
 8005bdc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f107 0210 	add.w	r2, r7, #16
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 ff07 	bl	8008a08 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c08:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2201      	movs	r2, #1
 8005c18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d90a      	bls.n	8005c36 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	22a0      	movs	r2, #160	; 0xa0
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f002 ffa3 	bl	8008b78 <SDMMC_CmdWriteMultiBlock>
 8005c32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005c34:	e009      	b.n	8005c4a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2290      	movs	r2, #144	; 0x90
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c42:	4618      	mov	r0, r3
 8005c44:	f002 ff75 	bl	8008b32 <SDMMC_CmdWriteSingleBlock>
 8005c48:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a0f      	ldr	r2, [pc, #60]	; (8005c94 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e00a      	b.n	8005c8c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3730      	adds	r7, #48	; 0x30
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	1fe00fff 	.word	0x1fe00fff

08005c98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_SD_IRQHandler+0x2e>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 f8fa 	bl	8006eb8 <SD_Read_IT>
 8005cc4:	e19a      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80ac 	beq.w	8005e2e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b59      	ldr	r3, [pc, #356]	; (8005e50 <HAL_SD_IRQHandler+0x1b8>)
 8005cec:	400b      	ands	r3, r1
 8005cee:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d038      	beq.n	8005d8c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_SD_IRQHandler+0x96>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f002 ff44 	bl	8008bc0 <SDMMC_CmdStopTransfer>
 8005d38:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f95b 	bl	8006008 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <HAL_SD_IRQHandler+0x1bc>)
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <HAL_SD_IRQHandler+0xe4>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f003 fd47 	bl	8009810 <HAL_SD_RxCpltCallback>
 8005d82:	e13b      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f003 fd35 	bl	80097f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d8a:	e137      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8132 	beq.w	8005ffc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_SD_IRQHandler+0x12c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f002 fef9 	bl	8008bc0 <SDMMC_CmdStopTransfer>
 8005dce:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f910 	bl	8006008 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <HAL_SD_IRQHandler+0x172>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f003 fcf2 	bl	80097f4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_SD_IRQHandler+0x18e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80eb 	beq.w	8005ffc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f003 fcf2 	bl	8009810 <HAL_SD_RxCpltCallback>
}
 8005e2c:	e0e6      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <HAL_SD_IRQHandler+0x1c0>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 f87c 	bl	8006f44 <SD_Write_IT>
 8005e4c:	e0d6      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
 8005e4e:	bf00      	nop
 8005e50:	ffff3ec5 	.word	0xffff3ec5
 8005e54:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 809d 	beq.w	8005fa2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	f043 0202 	orr.w	r2, r3, #2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	f043 0208 	orr.w	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	f043 0210 	orr.w	r2, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4b      	ldr	r2, [pc, #300]	; (8006004 <HAL_SD_IRQHandler+0x36c>)
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f16:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f002 fe4f 	bl	8008bc0 <SDMMC_CmdStopTransfer>
 8005f22:	4602      	mov	r2, r0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f3c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f851 	bl	8006008 <HAL_SD_ErrorCallback>
}
 8005f66:	e049      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d044      	beq.n	8005ffc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d040      	beq.n	8005ffc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f834 	bl	8006008 <HAL_SD_ErrorCallback>
}
 8005fa0:	e02c      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d025      	beq.n	8005ffc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f81e 	bl	8007014 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005fd8:	e010      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 f806 	bl	8006fec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005fe0:	e00c      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f807 	bl	8007000 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005ff2:	e003      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 ffef 	bl	8006fd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005ffa:	e7ff      	b.n	8005ffc <HAL_SD_IRQHandler+0x364>
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	18000f3a 	.word	0x18000f3a

08006008 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	0f9b      	lsrs	r3, r3, #30
 800602c:	b2da      	uxtb	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	0e9b      	lsrs	r3, r3, #26
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	b2da      	uxtb	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	0e1b      	lsrs	r3, r3, #24
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	b2da      	uxtb	r2, r3
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	b2da      	uxtb	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	b2da      	uxtb	r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	0d1b      	lsrs	r3, r3, #20
 800607e:	b29a      	uxth	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	b2da      	uxtb	r2, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609a:	0bdb      	lsrs	r3, r3, #15
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ac:	0b9b      	lsrs	r3, r3, #14
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	0b5b      	lsrs	r3, r3, #13
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	0b1b      	lsrs	r3, r3, #12
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d163      	bne.n	80061b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	009a      	lsls	r2, r3, #2
 80060f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060f6:	4013      	ands	r3, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80060fc:	0f92      	lsrs	r2, r2, #30
 80060fe:	431a      	orrs	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006108:	0edb      	lsrs	r3, r3, #27
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	b2da      	uxtb	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	0e1b      	lsrs	r3, r3, #24
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	b2da      	uxtb	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	0d5b      	lsrs	r3, r3, #21
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	b2da      	uxtb	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613e:	0c9b      	lsrs	r3, r3, #18
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	b2da      	uxtb	r2, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006150:	0bdb      	lsrs	r3, r3, #15
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	b2da      	uxtb	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	7e1b      	ldrb	r3, [r3, #24]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	3302      	adds	r3, #2
 8006174:	2201      	movs	r2, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800617e:	fb03 f202 	mul.w	r2, r3, r2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	7a1b      	ldrb	r3, [r3, #8]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	2201      	movs	r2, #1
 8006192:	409a      	lsls	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061a0:	0a52      	lsrs	r2, r2, #9
 80061a2:	fb03 f202 	mul.w	r2, r3, r2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
 80061b2:	e031      	b.n	8006218 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d11d      	bne.n	80061f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	431a      	orrs	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	3301      	adds	r3, #1
 80061d8:	029a      	lsls	r2, r3, #10
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
 80061f6:	e00f      	b.n	8006218 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a58      	ldr	r2, [pc, #352]	; (8006360 <HAL_SD_GetCardCSD+0x344>)
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e09d      	b.n	8006354 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621c:	0b9b      	lsrs	r3, r3, #14
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	b2da      	uxtb	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006246:	b2da      	uxtb	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006250:	0fdb      	lsrs	r3, r3, #31
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	0f5b      	lsrs	r3, r3, #29
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	b2da      	uxtb	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626e:	0e9b      	lsrs	r3, r3, #26
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	b2da      	uxtb	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006280:	0d9b      	lsrs	r3, r3, #22
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	b2da      	uxtb	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006292:	0d5b      	lsrs	r3, r3, #21
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c2:	0bdb      	lsrs	r3, r3, #15
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d6:	0b9b      	lsrs	r3, r3, #14
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ea:	0b5b      	lsrs	r3, r3, #13
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fe:	0b1b      	lsrs	r3, r3, #12
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006312:	0a9b      	lsrs	r3, r3, #10
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	b2da      	uxtb	r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006342:	b2da      	uxtb	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	1fe00fff 	.word	0x1fe00fff

08006364 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b094      	sub	sp, #80	; 0x50
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d101      	bne.n	8006384 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0a7      	b.n	80064d4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fb36 	bl	80069fc <SD_SendSDStatus>
 8006390:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006394:	2b00      	cmp	r3, #0
 8006396:	d011      	beq.n	80063bc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a4f      	ldr	r2, [pc, #316]	; (80064dc <HAL_SD_GetCardStatus+0x178>)
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063ba:	e070      	b.n	800649e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	099b      	lsrs	r3, r3, #6
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	0e1b      	lsrs	r3, r3, #24
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4313      	orrs	r3, r2
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	061a      	lsls	r2, r3, #24
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006402:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800640c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	b2da      	uxtb	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	b2da      	uxtb	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	0c1b      	lsrs	r3, r3, #16
 800643e:	b29b      	uxth	r3, r3
 8006440:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006444:	b29a      	uxth	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	b29b      	uxth	r3, r3
 800644a:	b2db      	uxtb	r3, r3
 800644c:	b29b      	uxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	0a9b      	lsrs	r3, r3, #10
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006460:	b2da      	uxtb	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	b2da      	uxtb	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	b2da      	uxtb	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	b2da      	uxtb	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	0e1b      	lsrs	r3, r3, #24
 8006498:	b2da      	uxtb	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064a6:	4618      	mov	r0, r3
 80064a8:	f002 fada 	bl	8008a60 <SDMMC_CmdBlockLength>
 80064ac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80064ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a08      	ldr	r2, [pc, #32]	; (80064dc <HAL_SD_GetCardStatus+0x178>)
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80064d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3750      	adds	r7, #80	; 0x50
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	1fe00fff 	.word	0x1fe00fff

080064e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b08d      	sub	sp, #52	; 0x34
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2203      	movs	r2, #3
 80064f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d02e      	beq.n	800655e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d106      	bne.n	8006516 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	635a      	str	r2, [r3, #52]	; 0x34
 8006514:	e029      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651c:	d10a      	bne.n	8006534 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fb64 	bl	8006bec <SD_WideBus_Enable>
 8006524:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	635a      	str	r2, [r3, #52]	; 0x34
 8006532:	e01a      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fba1 	bl	8006c82 <SD_WideBus_Disable>
 8006540:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	635a      	str	r2, [r3, #52]	; 0x34
 800654e:	e00c      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	635a      	str	r2, [r3, #52]	; 0x34
 800655c:	e005      	b.n	800656a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a5f      	ldr	r2, [pc, #380]	; (80066f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006580:	e096      	b.n	80066b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006582:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	f7fd fe21 	bl	80041d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800658e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8083 	beq.w	800669e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4950      	ldr	r1, [pc, #320]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80065b6:	fba1 1303 	umull	r1, r3, r1, r3
 80065ba:	0e1b      	lsrs	r3, r3, #24
 80065bc:	429a      	cmp	r2, r3
 80065be:	d303      	bcc.n	80065c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e05a      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d103      	bne.n	80065da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e051      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d126      	bne.n	8006632 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10e      	bne.n	800660a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4a43      	ldr	r2, [pc, #268]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d906      	bls.n	8006602 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4a40      	ldr	r2, [pc, #256]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	0e5b      	lsrs	r3, r3, #25
 80065fe:	61bb      	str	r3, [r7, #24]
 8006600:	e03d      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	e039      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	4a39      	ldr	r2, [pc, #228]	; (80066fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d906      	bls.n	800662a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4a36      	ldr	r2, [pc, #216]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	0e5b      	lsrs	r3, r3, #25
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	e029      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e025      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10e      	bne.n	8006658 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4a30      	ldr	r2, [pc, #192]	; (8006700 <HAL_SD_ConfigWideBusOperation+0x220>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d906      	bls.n	8006650 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	0e1b      	lsrs	r3, r3, #24
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e016      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e012      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d906      	bls.n	8006678 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e002      	b.n	800667e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681c      	ldr	r4, [r3, #0]
 8006682:	466a      	mov	r2, sp
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	e893 0003 	ldmia.w	r3, {r0, r1}
 800668c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006690:	f107 0308 	add.w	r3, r7, #8
 8006694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006696:	4620      	mov	r0, r4
 8006698:	f002 f904 	bl	80088a4 <SDMMC_Init>
 800669c:	e008      	b.n	80066b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066b8:	4618      	mov	r0, r3
 80066ba:	f002 f9d1 	bl	8008a60 <SDMMC_CmdBlockLength>
 80066be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	372c      	adds	r7, #44	; 0x2c
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd90      	pop	{r4, r7, pc}
 80066f4:	1fe00fff 	.word	0x1fe00fff
 80066f8:	55e63b89 	.word	0x55e63b89
 80066fc:	02faf080 	.word	0x02faf080
 8006700:	017d7840 	.word	0x017d7840

08006704 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006710:	f107 030c 	add.w	r3, r7, #12
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa40 	bl	8006b9c <SD_SendStatus>
 800671c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	0a5b      	lsrs	r3, r3, #9
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800673a:	693b      	ldr	r3, [r7, #16]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b090      	sub	sp, #64	; 0x40
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006750:	f7fa fea8 	bl	80014a4 <HAL_GetTick>
 8006754:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f002 f8fb 	bl	8008956 <SDMMC_GetPowerState>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006766:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800676a:	e0b5      	b.n	80068d8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	2b03      	cmp	r3, #3
 8006772:	d02e      	beq.n	80067d2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f002 fb46 	bl	8008e0a <SDMMC_CmdSendCID>
 800677e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <SD_InitCard+0x46>
    {
      return errorstate;
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	e0a6      	b.n	80068d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2100      	movs	r1, #0
 8006790:	4618      	mov	r0, r3
 8006792:	f002 f926 	bl	80089e2 <SDMMC_GetResponse>
 8006796:	4602      	mov	r2, r0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2104      	movs	r1, #4
 80067a2:	4618      	mov	r0, r3
 80067a4:	f002 f91d 	bl	80089e2 <SDMMC_GetResponse>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2108      	movs	r1, #8
 80067b4:	4618      	mov	r0, r3
 80067b6:	f002 f914 	bl	80089e2 <SDMMC_GetResponse>
 80067ba:	4602      	mov	r2, r0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	210c      	movs	r1, #12
 80067c6:	4618      	mov	r0, r3
 80067c8:	f002 f90b 	bl	80089e2 <SDMMC_GetResponse>
 80067cc:	4602      	mov	r2, r0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d01d      	beq.n	8006816 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80067da:	e019      	b.n	8006810 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f107 020a 	add.w	r2, r7, #10
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 fb4e 	bl	8008e88 <SDMMC_CmdSetRelAdd>
 80067ec:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	e06f      	b.n	80068d8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80067f8:	f7fa fe54 	bl	80014a4 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f241 3287 	movw	r2, #4999	; 0x1387
 8006806:	4293      	cmp	r3, r2
 8006808:	d902      	bls.n	8006810 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800680a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800680e:	e063      	b.n	80068d8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006810:	897b      	ldrh	r3, [r7, #10]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0e2      	beq.n	80067dc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	2b03      	cmp	r3, #3
 800681c:	d036      	beq.n	800688c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800681e:	897b      	ldrh	r3, [r7, #10]
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f002 fb08 	bl	8008e48 <SDMMC_CmdSendCSD>
 8006838:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <SD_InitCard+0x100>
    {
      return errorstate;
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	e049      	b.n	80068d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f002 f8c9 	bl	80089e2 <SDMMC_GetResponse>
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2104      	movs	r1, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f002 f8c0 	bl	80089e2 <SDMMC_GetResponse>
 8006862:	4602      	mov	r2, r0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2108      	movs	r1, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f002 f8b7 	bl	80089e2 <SDMMC_GetResponse>
 8006874:	4602      	mov	r2, r0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	210c      	movs	r1, #12
 8006880:	4618      	mov	r0, r3
 8006882:	f002 f8ae 	bl	80089e2 <SDMMC_GetResponse>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2104      	movs	r1, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f002 f8a5 	bl	80089e2 <SDMMC_GetResponse>
 8006898:	4603      	mov	r3, r0
 800689a:	0d1a      	lsrs	r2, r3, #20
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fbb8 	bl	800601c <HAL_SD_GetCardCSD>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068b6:	e00f      	b.n	80068d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f002 f9b7 	bl	8008c38 <SDMMC_CmdSelDesel>
 80068ca:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <SD_InitCard+0x192>
  {
    return errorstate;
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	e000      	b.n	80068d8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3740      	adds	r7, #64	; 0x40
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f002 f9c0 	bl	8008c7e <SDMMC_CmdGoIdleState>
 80068fe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	e072      	b.n	80069f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f002 f9d3 	bl	8008cba <SDMMC_CmdOperCond>
 8006914:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800691c:	d10d      	bne.n	800693a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f002 f9a8 	bl	8008c7e <SDMMC_CmdGoIdleState>
 800692e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <SD_PowerON+0x60>
    {
      return errorstate;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	e05a      	b.n	80069f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	2b01      	cmp	r3, #1
 8006946:	d137      	bne.n	80069b8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f9d3 	bl	8008cfa <SDMMC_CmdAppCommand>
 8006954:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02d      	beq.n	80069b8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800695c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006960:	e046      	b.n	80069f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f002 f9c6 	bl	8008cfa <SDMMC_CmdAppCommand>
 800696e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	e03a      	b.n	80069f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	491e      	ldr	r1, [pc, #120]	; (80069f8 <SD_PowerON+0x118>)
 8006980:	4618      	mov	r0, r3
 8006982:	f002 f9dd 	bl	8008d40 <SDMMC_CmdAppOperCommand>
 8006986:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800698e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006992:	e02d      	b.n	80069f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f002 f821 	bl	80089e2 <SDMMC_GetResponse>
 80069a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	0fdb      	lsrs	r3, r3, #31
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <SD_PowerON+0xce>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <SD_PowerON+0xd0>
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]

    count++;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069be:	4293      	cmp	r3, r2
 80069c0:	d802      	bhi.n	80069c8 <SD_PowerON+0xe8>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0cc      	beq.n	8006962 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d902      	bls.n	80069d8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d6:	e00b      	b.n	80069f0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	c1100000 	.word	0xc1100000

080069fc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	; 0x30
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a06:	f7fa fd4d 	bl	80014a4 <HAL_GetTick>
 8006a0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 ffe3 	bl	80089e2 <SDMMC_GetResponse>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	d102      	bne.n	8006a2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a2c:	e0b0      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2140      	movs	r1, #64	; 0x40
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 f813 	bl	8008a60 <SDMMC_CmdBlockLength>
 8006a3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	e0a0      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f002 f94d 	bl	8008cfa <SDMMC_CmdAppCommand>
 8006a60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	e08d      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006a7e:	2360      	movs	r3, #96	; 0x60
 8006a80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a82:	2302      	movs	r3, #2
 8006a84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f107 0208 	add.w	r2, r7, #8
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 ffb5 	bl	8008a08 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 fa35 	bl	8008f12 <SDMMC_CmdStatusRegister>
 8006aa8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02b      	beq.n	8006b08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e069      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d013      	beq.n	8006af2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006aca:	2300      	movs	r3, #0
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ace:	e00d      	b.n	8006aec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 ff0f 	bl	80088f8 <SDMMC_ReadFIFO>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	601a      	str	r2, [r3, #0]
        pData++;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	3301      	adds	r3, #1
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	2b07      	cmp	r3, #7
 8006af0:	d9ee      	bls.n	8006ad0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006af2:	f7fa fcd7 	bl	80014a4 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d102      	bne.n	8006b08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b06:	e043      	b.n	8006b90 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0d2      	beq.n	8006abc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006b24:	2308      	movs	r3, #8
 8006b26:	e033      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b36:	2302      	movs	r3, #2
 8006b38:	e02a      	b.n	8006b90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006b48:	2320      	movs	r3, #32
 8006b4a:	e021      	b.n	8006b90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fed1 	bl	80088f8 <SDMMC_ReadFIFO>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	601a      	str	r2, [r3, #0]
    pData++;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	3304      	adds	r3, #4
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b62:	f7fa fc9f 	bl	80014a4 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d102      	bne.n	8006b78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b76:	e00b      	b.n	8006b90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e2      	bne.n	8006b4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <SD_SendSDStatus+0x19c>)
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3730      	adds	r7, #48	; 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	18000f3a 	.word	0x18000f3a

08006b9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bb0:	e018      	b.n	8006be4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f002 f984 	bl	8008ecc <SDMMC_CmdSendStatus>
 8006bc4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	e009      	b.n	8006be4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 ff03 	bl	80089e2 <SDMMC_GetResponse>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 feed 	bl	80089e2 <SDMMC_GetResponse>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c12:	d102      	bne.n	8006c1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c18:	e02f      	b.n	8006c7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f879 	bl	8006d18 <SD_FindSCR>
 8006c26:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	e023      	b.n	8006c7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01c      	beq.n	8006c76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f002 f856 	bl	8008cfa <SDMMC_CmdAppCommand>
 8006c4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	e00f      	b.n	8006c7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2102      	movs	r1, #2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 f88d 	bl	8008d80 <SDMMC_CmdBusWidth>
 8006c66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	e003      	b.n	8006c7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e001      	b.n	8006c7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2100      	movs	r1, #0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 fea2 	bl	80089e2 <SDMMC_GetResponse>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca8:	d102      	bne.n	8006cb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cae:	e02f      	b.n	8006d10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f82e 	bl	8006d18 <SD_FindSCR>
 8006cbc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	e023      	b.n	8006d10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01c      	beq.n	8006d0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f002 f80b 	bl	8008cfa <SDMMC_CmdAppCommand>
 8006ce4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e00f      	b.n	8006d10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 f842 	bl	8008d80 <SDMMC_CmdBusWidth>
 8006cfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	e003      	b.n	8006d10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e001      	b.n	8006d10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d22:	f7fa fbbf 	bl	80014a4 <HAL_GetTick>
 8006d26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2108      	movs	r1, #8
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fe8e 	bl	8008a60 <SDMMC_CmdBlockLength>
 8006d44:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	e0ad      	b.n	8006eac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d58:	041b      	lsls	r3, r3, #16
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f001 ffcc 	bl	8008cfa <SDMMC_CmdAppCommand>
 8006d62:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	e09e      	b.n	8006eac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d74:	2308      	movs	r3, #8
 8006d76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006d78:	2330      	movs	r3, #48	; 0x30
 8006d7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f107 0210 	add.w	r2, r7, #16
 8006d90:	4611      	mov	r1, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 fe38 	bl	8008a08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f002 f812 	bl	8008dc6 <SDMMC_CmdSendSCR>
 8006da2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d027      	beq.n	8006dfa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	e07e      	b.n	8006eac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d113      	bne.n	8006de4 <SD_FindSCR+0xcc>
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d110      	bne.n	8006de4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fd96 	bl	80088f8 <SDMMC_ReadFIFO>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fd8f 	bl	80088f8 <SDMMC_ReadFIFO>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	60fb      	str	r3, [r7, #12]
      index++;
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	3301      	adds	r3, #1
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006de4:	f7fa fb5e 	bl	80014a4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006df4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006df8:	e058      	b.n	8006eac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e00:	f240 532a 	movw	r3, #1322	; 0x52a
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0d1      	beq.n	8006dae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e20:	2308      	movs	r3, #8
 8006e22:	e043      	b.n	8006eac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2202      	movs	r2, #2
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e036      	b.n	8006eac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2220      	movs	r2, #32
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e54:	2320      	movs	r3, #32
 8006e56:	e029      	b.n	8006eac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <SD_FindSCR+0x19c>)
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	061a      	lsls	r2, r3, #24
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	601a      	str	r2, [r3, #0]
    scr++;
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	3304      	adds	r3, #4
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	061a      	lsls	r2, r3, #24
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	0e1b      	lsrs	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3738      	adds	r7, #56	; 0x38
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	18000f3a 	.word	0x18000f3a

08006eb8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	2b1f      	cmp	r3, #31
 8006ecc:	d936      	bls.n	8006f3c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e027      	b.n	8006f24 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fd0d 	bl	80088f8 <SDMMC_ReadFIFO>
 8006ede:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3301      	adds	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	3301      	adds	r3, #1
 8006efc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	0e1b      	lsrs	r3, r3, #24
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	d9d4      	bls.n	8006ed4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f1a3 0220 	sub.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	2b1f      	cmp	r3, #31
 8006f58:	d93a      	bls.n	8006fd0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e02b      	b.n	8006fb8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	021a      	lsls	r2, r3, #8
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	041a      	lsls	r2, r3, #16
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	061a      	lsls	r2, r3, #24
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f107 020c 	add.w	r2, r7, #12
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fcb0 	bl	8008912 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b07      	cmp	r3, #7
 8006fbc:	d9d0      	bls.n	8006f60 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f1a3 0220 	sub.w	r2, r3, #32
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	621a      	str	r2, [r3, #32]
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e049      	b.n	80070ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f841 	bl	80070d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 fa00 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
	...

080070ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d001      	beq.n	8007104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e054      	b.n	80071ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a26      	ldr	r2, [pc, #152]	; (80071bc <HAL_TIM_Base_Start_IT+0xd0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d022      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712e:	d01d      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_TIM_Base_Start_IT+0xe0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x80>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d115      	bne.n	8007198 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <HAL_TIM_Base_Start_IT+0xec>)
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b06      	cmp	r3, #6
 800717c:	d015      	beq.n	80071aa <HAL_TIM_Base_Start_IT+0xbe>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d011      	beq.n	80071aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007196:	e008      	b.n	80071aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e000      	b.n	80071ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40010400 	.word	0x40010400
 80071d0:	40001800 	.word	0x40001800
 80071d4:	40014000 	.word	0x40014000
 80071d8:	00010007 	.word	0x00010007

080071dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d122      	bne.n	8007238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0202 	mvn.w	r2, #2
 8007208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f905 	bl	800742e <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8f7 	bl	800741a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f908 	bl	8007442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d122      	bne.n	800728c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0204 	mvn.w	r2, #4
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8db 	bl	800742e <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8cd 	bl	800741a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8de 	bl	8007442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b08      	cmp	r3, #8
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0208 	mvn.w	r2, #8
 80072b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2204      	movs	r2, #4
 80072b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8b1 	bl	800742e <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8a3 	bl	800741a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8b4 	bl	8007442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0210 	mvn.w	r2, #16
 8007304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2208      	movs	r2, #8
 800730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f887 	bl	800742e <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f879 	bl	800741a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f88a 	bl	8007442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10e      	bne.n	8007360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d107      	bne.n	8007360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0201 	mvn.w	r2, #1
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7f9 fdb4 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	2b80      	cmp	r3, #128	; 0x80
 800736c:	d10e      	bne.n	800738c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d107      	bne.n	800738c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f914 	bl	80075b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	d10e      	bne.n	80073ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d107      	bne.n	80073ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f907 	bl	80075c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d10e      	bne.n	80073e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d107      	bne.n	80073e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f838 	bl	8007456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d10e      	bne.n	8007412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d107      	bne.n	8007412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f06f 0220 	mvn.w	r2, #32
 800740a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f8c7 	bl	80075a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a40      	ldr	r2, [pc, #256]	; (8007580 <TIM_Base_SetConfig+0x114>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748a:	d00f      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a3d      	ldr	r2, [pc, #244]	; (8007584 <TIM_Base_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3c      	ldr	r2, [pc, #240]	; (8007588 <TIM_Base_SetConfig+0x11c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a3b      	ldr	r2, [pc, #236]	; (800758c <TIM_Base_SetConfig+0x120>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a3a      	ldr	r2, [pc, #232]	; (8007590 <TIM_Base_SetConfig+0x124>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d108      	bne.n	80074be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2f      	ldr	r2, [pc, #188]	; (8007580 <TIM_Base_SetConfig+0x114>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01f      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d01b      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2c      	ldr	r2, [pc, #176]	; (8007584 <TIM_Base_SetConfig+0x118>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d017      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2b      	ldr	r2, [pc, #172]	; (8007588 <TIM_Base_SetConfig+0x11c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2a      	ldr	r2, [pc, #168]	; (800758c <TIM_Base_SetConfig+0x120>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00f      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a29      	ldr	r2, [pc, #164]	; (8007590 <TIM_Base_SetConfig+0x124>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00b      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a28      	ldr	r2, [pc, #160]	; (8007594 <TIM_Base_SetConfig+0x128>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a27      	ldr	r2, [pc, #156]	; (8007598 <TIM_Base_SetConfig+0x12c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_Base_SetConfig+0x9a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a26      	ldr	r2, [pc, #152]	; (800759c <TIM_Base_SetConfig+0x130>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d108      	bne.n	8007518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a10      	ldr	r2, [pc, #64]	; (8007580 <TIM_Base_SetConfig+0x114>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00f      	beq.n	8007564 <TIM_Base_SetConfig+0xf8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <TIM_Base_SetConfig+0x124>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00b      	beq.n	8007564 <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a11      	ldr	r2, [pc, #68]	; (8007594 <TIM_Base_SetConfig+0x128>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_Base_SetConfig+0xf8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a10      	ldr	r2, [pc, #64]	; (8007598 <TIM_Base_SetConfig+0x12c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_Base_SetConfig+0xf8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a0f      	ldr	r2, [pc, #60]	; (800759c <TIM_Base_SetConfig+0x130>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d103      	bne.n	800756c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	615a      	str	r2, [r3, #20]
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40010400 	.word	0x40010400
 8007594:	40014000 	.word	0x40014000
 8007598:	40014400 	.word	0x40014400
 800759c:	40014800 	.word	0x40014800

080075a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e042      	b.n	8007674 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7f9 fd29 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2224      	movs	r2, #36	; 0x24
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8ba 	bl	8007798 <UART_SetConfig>
 8007624:	4603      	mov	r3, r0
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e022      	b.n	8007674 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fe16 	bl	8008268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800764a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800765a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fe9d 	bl	80083ac <UART_CheckIdleState>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	2b20      	cmp	r3, #32
 8007694:	d17b      	bne.n	800778e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_UART_Transmit+0x26>
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e074      	b.n	8007790 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2221      	movs	r2, #33	; 0x21
 80076b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076b6:	f7f9 fef5 	bl	80014a4 <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d4:	d108      	bne.n	80076e8 <HAL_UART_Transmit+0x6c>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	e003      	b.n	80076f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076f0:	e030      	b.n	8007754 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 feff 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e03d      	b.n	8007790 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007728:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	3302      	adds	r3, #2
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	e007      	b.n	8007742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1c8      	bne.n	80076f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	2140      	movs	r1, #64	; 0x40
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fec8 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e006      	b.n	8007790 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800778e:	2302      	movs	r3, #2
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3720      	adds	r7, #32
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800779c:	b092      	sub	sp, #72	; 0x48
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	4313      	orrs	r3, r2
 80077be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4bbe      	ldr	r3, [pc, #760]	; (8007ac0 <UART_SetConfig+0x328>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4ab3      	ldr	r2, [pc, #716]	; (8007ac4 <UART_SetConfig+0x32c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007800:	4313      	orrs	r3, r2
 8007802:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	4baf      	ldr	r3, [pc, #700]	; (8007ac8 <UART_SetConfig+0x330>)
 800780c:	4013      	ands	r3, r2
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	6812      	ldr	r2, [r2, #0]
 8007812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007814:	430b      	orrs	r3, r1
 8007816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	f023 010f 	bic.w	r1, r3, #15
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4aa6      	ldr	r2, [pc, #664]	; (8007acc <UART_SetConfig+0x334>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d177      	bne.n	8007928 <UART_SetConfig+0x190>
 8007838:	4ba5      	ldr	r3, [pc, #660]	; (8007ad0 <UART_SetConfig+0x338>)
 800783a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007840:	2b28      	cmp	r3, #40	; 0x28
 8007842:	d86d      	bhi.n	8007920 <UART_SetConfig+0x188>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0xb4>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	080078f1 	.word	0x080078f1
 8007850:	08007921 	.word	0x08007921
 8007854:	08007921 	.word	0x08007921
 8007858:	08007921 	.word	0x08007921
 800785c:	08007921 	.word	0x08007921
 8007860:	08007921 	.word	0x08007921
 8007864:	08007921 	.word	0x08007921
 8007868:	08007921 	.word	0x08007921
 800786c:	080078f9 	.word	0x080078f9
 8007870:	08007921 	.word	0x08007921
 8007874:	08007921 	.word	0x08007921
 8007878:	08007921 	.word	0x08007921
 800787c:	08007921 	.word	0x08007921
 8007880:	08007921 	.word	0x08007921
 8007884:	08007921 	.word	0x08007921
 8007888:	08007921 	.word	0x08007921
 800788c:	08007901 	.word	0x08007901
 8007890:	08007921 	.word	0x08007921
 8007894:	08007921 	.word	0x08007921
 8007898:	08007921 	.word	0x08007921
 800789c:	08007921 	.word	0x08007921
 80078a0:	08007921 	.word	0x08007921
 80078a4:	08007921 	.word	0x08007921
 80078a8:	08007921 	.word	0x08007921
 80078ac:	08007909 	.word	0x08007909
 80078b0:	08007921 	.word	0x08007921
 80078b4:	08007921 	.word	0x08007921
 80078b8:	08007921 	.word	0x08007921
 80078bc:	08007921 	.word	0x08007921
 80078c0:	08007921 	.word	0x08007921
 80078c4:	08007921 	.word	0x08007921
 80078c8:	08007921 	.word	0x08007921
 80078cc:	08007911 	.word	0x08007911
 80078d0:	08007921 	.word	0x08007921
 80078d4:	08007921 	.word	0x08007921
 80078d8:	08007921 	.word	0x08007921
 80078dc:	08007921 	.word	0x08007921
 80078e0:	08007921 	.word	0x08007921
 80078e4:	08007921 	.word	0x08007921
 80078e8:	08007921 	.word	0x08007921
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e222      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e21e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e21a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790e:	e216      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e212      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e20e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e20a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a69      	ldr	r2, [pc, #420]	; (8007ad4 <UART_SetConfig+0x33c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x1fc>
 8007932:	4b67      	ldr	r3, [pc, #412]	; (8007ad0 <UART_SetConfig+0x338>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x1f4>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x1ac>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e1ec      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e1e8      	b.n	8007d3e <UART_SetConfig+0x5a6>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e1e4      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e1e0      	b.n	8007d3e <UART_SetConfig+0x5a6>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e1dc      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007984:	2340      	movs	r3, #64	; 0x40
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e1d8      	b.n	8007d3e <UART_SetConfig+0x5a6>
 800798c:	2380      	movs	r3, #128	; 0x80
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e1d4      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a4f      	ldr	r2, [pc, #316]	; (8007ad8 <UART_SetConfig+0x340>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d130      	bne.n	8007a00 <UART_SetConfig+0x268>
 800799e:	4b4c      	ldr	r3, [pc, #304]	; (8007ad0 <UART_SetConfig+0x338>)
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d826      	bhi.n	80079f8 <UART_SetConfig+0x260>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x218>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ce:	e1b6      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d6:	e1b2      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079de:	e1ae      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e1aa      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079e8:	2320      	movs	r3, #32
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e1a6      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079f0:	2340      	movs	r3, #64	; 0x40
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e1a2      	b.n	8007d3e <UART_SetConfig+0x5a6>
 80079f8:	2380      	movs	r3, #128	; 0x80
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e19e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a35      	ldr	r2, [pc, #212]	; (8007adc <UART_SetConfig+0x344>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d130      	bne.n	8007a6c <UART_SetConfig+0x2d4>
 8007a0a:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <UART_SetConfig+0x338>)
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d826      	bhi.n	8007a64 <UART_SetConfig+0x2cc>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <UART_SetConfig+0x284>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a45 	.word	0x08007a45
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a55 	.word	0x08007a55
 8007a30:	08007a5d 	.word	0x08007a5d
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e180      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e17c      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a44:	2308      	movs	r3, #8
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e178      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e174      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a54:	2320      	movs	r3, #32
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e170      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e16c      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a64:	2380      	movs	r3, #128	; 0x80
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e168      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <UART_SetConfig+0x348>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d142      	bne.n	8007afc <UART_SetConfig+0x364>
 8007a76:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <UART_SetConfig+0x338>)
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d838      	bhi.n	8007af4 <UART_SetConfig+0x35c>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <UART_SetConfig+0x2f0>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ab1 	.word	0x08007ab1
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007aed 	.word	0x08007aed
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e14a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e146      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e142      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e13e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007ac0:	cfff69f3 	.word	0xcfff69f3
 8007ac4:	58000c00 	.word	0x58000c00
 8007ac8:	11fff4ff 	.word	0x11fff4ff
 8007acc:	40011000 	.word	0x40011000
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	40004400 	.word	0x40004400
 8007ad8:	40004800 	.word	0x40004800
 8007adc:	40004c00 	.word	0x40004c00
 8007ae0:	40005000 	.word	0x40005000
 8007ae4:	2320      	movs	r3, #32
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aea:	e128      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af2:	e124      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afa:	e120      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4acb      	ldr	r2, [pc, #812]	; (8007e30 <UART_SetConfig+0x698>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d176      	bne.n	8007bf4 <UART_SetConfig+0x45c>
 8007b06:	4bcb      	ldr	r3, [pc, #812]	; (8007e34 <UART_SetConfig+0x69c>)
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b0e:	2b28      	cmp	r3, #40	; 0x28
 8007b10:	d86c      	bhi.n	8007bec <UART_SetConfig+0x454>
 8007b12:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <UART_SetConfig+0x380>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007bed 	.word	0x08007bed
 8007b20:	08007bed 	.word	0x08007bed
 8007b24:	08007bed 	.word	0x08007bed
 8007b28:	08007bed 	.word	0x08007bed
 8007b2c:	08007bed 	.word	0x08007bed
 8007b30:	08007bed 	.word	0x08007bed
 8007b34:	08007bed 	.word	0x08007bed
 8007b38:	08007bc5 	.word	0x08007bc5
 8007b3c:	08007bed 	.word	0x08007bed
 8007b40:	08007bed 	.word	0x08007bed
 8007b44:	08007bed 	.word	0x08007bed
 8007b48:	08007bed 	.word	0x08007bed
 8007b4c:	08007bed 	.word	0x08007bed
 8007b50:	08007bed 	.word	0x08007bed
 8007b54:	08007bed 	.word	0x08007bed
 8007b58:	08007bcd 	.word	0x08007bcd
 8007b5c:	08007bed 	.word	0x08007bed
 8007b60:	08007bed 	.word	0x08007bed
 8007b64:	08007bed 	.word	0x08007bed
 8007b68:	08007bed 	.word	0x08007bed
 8007b6c:	08007bed 	.word	0x08007bed
 8007b70:	08007bed 	.word	0x08007bed
 8007b74:	08007bed 	.word	0x08007bed
 8007b78:	08007bd5 	.word	0x08007bd5
 8007b7c:	08007bed 	.word	0x08007bed
 8007b80:	08007bed 	.word	0x08007bed
 8007b84:	08007bed 	.word	0x08007bed
 8007b88:	08007bed 	.word	0x08007bed
 8007b8c:	08007bed 	.word	0x08007bed
 8007b90:	08007bed 	.word	0x08007bed
 8007b94:	08007bed 	.word	0x08007bed
 8007b98:	08007bdd 	.word	0x08007bdd
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bed 	.word	0x08007bed
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc2:	e0bc      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bca:	e0b8      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd2:	e0b4      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e0b0      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e0ac      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e0a8      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e0a4      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a8f      	ldr	r2, [pc, #572]	; (8007e38 <UART_SetConfig+0x6a0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d130      	bne.n	8007c60 <UART_SetConfig+0x4c8>
 8007bfe:	4b8d      	ldr	r3, [pc, #564]	; (8007e34 <UART_SetConfig+0x69c>)
 8007c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d826      	bhi.n	8007c58 <UART_SetConfig+0x4c0>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0x478>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c29 	.word	0x08007c29
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2e:	e086      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e082      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3e:	e07e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e07a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e076      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c50:	2340      	movs	r3, #64	; 0x40
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e072      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c58:	2380      	movs	r3, #128	; 0x80
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e06e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a75      	ldr	r2, [pc, #468]	; (8007e3c <UART_SetConfig+0x6a4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d130      	bne.n	8007ccc <UART_SetConfig+0x534>
 8007c6a:	4b72      	ldr	r3, [pc, #456]	; (8007e34 <UART_SetConfig+0x69c>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d826      	bhi.n	8007cc4 <UART_SetConfig+0x52c>
 8007c76:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <UART_SetConfig+0x4e4>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007ca5 	.word	0x08007ca5
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cbd 	.word	0x08007cbd
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9a:	e050      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca2:	e04c      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007caa:	e048      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007cac:	2310      	movs	r3, #16
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e044      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007cb4:	2320      	movs	r3, #32
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e040      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007cbc:	2340      	movs	r3, #64	; 0x40
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e03c      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e038      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a5b      	ldr	r2, [pc, #364]	; (8007e40 <UART_SetConfig+0x6a8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d130      	bne.n	8007d38 <UART_SetConfig+0x5a0>
 8007cd6:	4b57      	ldr	r3, [pc, #348]	; (8007e34 <UART_SetConfig+0x69c>)
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	d826      	bhi.n	8007d30 <UART_SetConfig+0x598>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <UART_SetConfig+0x550>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d01 	.word	0x08007d01
 8007cec:	08007d09 	.word	0x08007d09
 8007cf0:	08007d11 	.word	0x08007d11
 8007cf4:	08007d19 	.word	0x08007d19
 8007cf8:	08007d21 	.word	0x08007d21
 8007cfc:	08007d29 	.word	0x08007d29
 8007d00:	2302      	movs	r3, #2
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d06:	e01a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0e:	e016      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d10:	2308      	movs	r3, #8
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d16:	e012      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e00e      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d20:	2320      	movs	r3, #32
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e00a      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e006      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d30:	2380      	movs	r3, #128	; 0x80
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e002      	b.n	8007d3e <UART_SetConfig+0x5a6>
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3f      	ldr	r2, [pc, #252]	; (8007e40 <UART_SetConfig+0x6a8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	f040 80f8 	bne.w	8007f3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	dc46      	bgt.n	8007de0 <UART_SetConfig+0x648>
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	f2c0 8082 	blt.w	8007e5c <UART_SetConfig+0x6c4>
 8007d58:	3b02      	subs	r3, #2
 8007d5a:	2b1e      	cmp	r3, #30
 8007d5c:	d87e      	bhi.n	8007e5c <UART_SetConfig+0x6c4>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0x5cc>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007de7 	.word	0x08007de7
 8007d68:	08007e5d 	.word	0x08007e5d
 8007d6c:	08007def 	.word	0x08007def
 8007d70:	08007e5d 	.word	0x08007e5d
 8007d74:	08007e5d 	.word	0x08007e5d
 8007d78:	08007e5d 	.word	0x08007e5d
 8007d7c:	08007dff 	.word	0x08007dff
 8007d80:	08007e5d 	.word	0x08007e5d
 8007d84:	08007e5d 	.word	0x08007e5d
 8007d88:	08007e5d 	.word	0x08007e5d
 8007d8c:	08007e5d 	.word	0x08007e5d
 8007d90:	08007e5d 	.word	0x08007e5d
 8007d94:	08007e5d 	.word	0x08007e5d
 8007d98:	08007e5d 	.word	0x08007e5d
 8007d9c:	08007e0f 	.word	0x08007e0f
 8007da0:	08007e5d 	.word	0x08007e5d
 8007da4:	08007e5d 	.word	0x08007e5d
 8007da8:	08007e5d 	.word	0x08007e5d
 8007dac:	08007e5d 	.word	0x08007e5d
 8007db0:	08007e5d 	.word	0x08007e5d
 8007db4:	08007e5d 	.word	0x08007e5d
 8007db8:	08007e5d 	.word	0x08007e5d
 8007dbc:	08007e5d 	.word	0x08007e5d
 8007dc0:	08007e5d 	.word	0x08007e5d
 8007dc4:	08007e5d 	.word	0x08007e5d
 8007dc8:	08007e5d 	.word	0x08007e5d
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e5d 	.word	0x08007e5d
 8007dd4:	08007e5d 	.word	0x08007e5d
 8007dd8:	08007e5d 	.word	0x08007e5d
 8007ddc:	08007e4f 	.word	0x08007e4f
 8007de0:	2b40      	cmp	r3, #64	; 0x40
 8007de2:	d037      	beq.n	8007e54 <UART_SetConfig+0x6bc>
 8007de4:	e03a      	b.n	8007e5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007de6:	f7fc ff73 	bl	8004cd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007dea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007dec:	e03c      	b.n	8007e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fc ff82 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dfc:	e034      	b.n	8007e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfe:	f107 0318 	add.w	r3, r7, #24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fd f8ce 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0c:	e02c      	b.n	8007e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <UART_SetConfig+0x69c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d016      	beq.n	8007e48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <UART_SetConfig+0x69c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	08db      	lsrs	r3, r3, #3
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	4a07      	ldr	r2, [pc, #28]	; (8007e44 <UART_SetConfig+0x6ac>)
 8007e26:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e2c:	e01c      	b.n	8007e68 <UART_SetConfig+0x6d0>
 8007e2e:	bf00      	nop
 8007e30:	40011400 	.word	0x40011400
 8007e34:	58024400 	.word	0x58024400
 8007e38:	40007800 	.word	0x40007800
 8007e3c:	40007c00 	.word	0x40007c00
 8007e40:	58000c00 	.word	0x58000c00
 8007e44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e48:	4b9d      	ldr	r3, [pc, #628]	; (80080c0 <UART_SetConfig+0x928>)
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4c:	e00c      	b.n	8007e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e4e:	4b9d      	ldr	r3, [pc, #628]	; (80080c4 <UART_SetConfig+0x92c>)
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e52:	e009      	b.n	8007e68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5a:	e005      	b.n	8007e68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 81de 	beq.w	800822c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	4a94      	ldr	r2, [pc, #592]	; (80080c8 <UART_SetConfig+0x930>)
 8007e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e82:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d305      	bcc.n	8007ea0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d903      	bls.n	8007ea8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ea6:	e1c1      	b.n	800822c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2200      	movs	r2, #0
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	60fa      	str	r2, [r7, #12]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	4a84      	ldr	r2, [pc, #528]	; (80080c8 <UART_SetConfig+0x930>)
 8007eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eca:	f7f8 fb79 	bl	80005c0 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	020b      	lsls	r3, r1, #8
 8007ee0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee4:	0202      	lsls	r2, r0, #8
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	6849      	ldr	r1, [r1, #4]
 8007eea:	0849      	lsrs	r1, r1, #1
 8007eec:	2000      	movs	r0, #0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	eb12 0804 	adds.w	r8, r2, r4
 8007ef6:	eb43 0905 	adc.w	r9, r3, r5
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	469a      	mov	sl, r3
 8007f02:	4693      	mov	fp, r2
 8007f04:	4652      	mov	r2, sl
 8007f06:	465b      	mov	r3, fp
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 fb58 	bl	80005c0 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4613      	mov	r3, r2
 8007f16:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1e:	d308      	bcc.n	8007f32 <UART_SetConfig+0x79a>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f26:	d204      	bcs.n	8007f32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2e:	60da      	str	r2, [r3, #12]
 8007f30:	e17c      	b.n	800822c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f38:	e178      	b.n	800822c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	f040 80c5 	bne.w	80080d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	dc48      	bgt.n	8007fe0 <UART_SetConfig+0x848>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	db7b      	blt.n	800804a <UART_SetConfig+0x8b2>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d879      	bhi.n	800804a <UART_SetConfig+0x8b2>
 8007f56:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <UART_SetConfig+0x7c4>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007fe7 	.word	0x08007fe7
 8007f60:	08007fef 	.word	0x08007fef
 8007f64:	0800804b 	.word	0x0800804b
 8007f68:	0800804b 	.word	0x0800804b
 8007f6c:	08007ff7 	.word	0x08007ff7
 8007f70:	0800804b 	.word	0x0800804b
 8007f74:	0800804b 	.word	0x0800804b
 8007f78:	0800804b 	.word	0x0800804b
 8007f7c:	08008007 	.word	0x08008007
 8007f80:	0800804b 	.word	0x0800804b
 8007f84:	0800804b 	.word	0x0800804b
 8007f88:	0800804b 	.word	0x0800804b
 8007f8c:	0800804b 	.word	0x0800804b
 8007f90:	0800804b 	.word	0x0800804b
 8007f94:	0800804b 	.word	0x0800804b
 8007f98:	0800804b 	.word	0x0800804b
 8007f9c:	08008017 	.word	0x08008017
 8007fa0:	0800804b 	.word	0x0800804b
 8007fa4:	0800804b 	.word	0x0800804b
 8007fa8:	0800804b 	.word	0x0800804b
 8007fac:	0800804b 	.word	0x0800804b
 8007fb0:	0800804b 	.word	0x0800804b
 8007fb4:	0800804b 	.word	0x0800804b
 8007fb8:	0800804b 	.word	0x0800804b
 8007fbc:	0800804b 	.word	0x0800804b
 8007fc0:	0800804b 	.word	0x0800804b
 8007fc4:	0800804b 	.word	0x0800804b
 8007fc8:	0800804b 	.word	0x0800804b
 8007fcc:	0800804b 	.word	0x0800804b
 8007fd0:	0800804b 	.word	0x0800804b
 8007fd4:	0800804b 	.word	0x0800804b
 8007fd8:	0800804b 	.word	0x0800804b
 8007fdc:	0800803d 	.word	0x0800803d
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d02e      	beq.n	8008042 <UART_SetConfig+0x8aa>
 8007fe4:	e031      	b.n	800804a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fa fe3b 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8007fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fec:	e033      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fee:	f7fa fe4d 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8007ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ff4:	e02f      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fc fe7e 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008004:	e027      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	4618      	mov	r0, r3
 800800c:	f7fc ffca 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008014:	e01f      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008016:	4b2d      	ldr	r3, [pc, #180]	; (80080cc <UART_SetConfig+0x934>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008022:	4b2a      	ldr	r3, [pc, #168]	; (80080cc <UART_SetConfig+0x934>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	08db      	lsrs	r3, r3, #3
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	4a24      	ldr	r2, [pc, #144]	; (80080c0 <UART_SetConfig+0x928>)
 800802e:	fa22 f303 	lsr.w	r3, r2, r3
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008034:	e00f      	b.n	8008056 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <UART_SetConfig+0x928>)
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800803a:	e00c      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800803c:	4b21      	ldr	r3, [pc, #132]	; (80080c4 <UART_SetConfig+0x92c>)
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008048:	e005      	b.n	8008056 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80e7 	beq.w	800822c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <UART_SetConfig+0x930>)
 8008064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008068:	461a      	mov	r2, r3
 800806a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008070:	005a      	lsls	r2, r3, #1
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	441a      	add	r2, r3
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d916      	bls.n	80080b8 <UART_SetConfig+0x920>
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d212      	bcs.n	80080b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	b29b      	uxth	r3, r3
 8008096:	f023 030f 	bic.w	r3, r3, #15
 800809a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80080aa:	4313      	orrs	r3, r2
 80080ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80080b4:	60da      	str	r2, [r3, #12]
 80080b6:	e0b9      	b.n	800822c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080be:	e0b5      	b.n	800822c <UART_SetConfig+0xa94>
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	0801774c 	.word	0x0801774c
 80080cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	dc49      	bgt.n	800816c <UART_SetConfig+0x9d4>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	db7c      	blt.n	80081d6 <UART_SetConfig+0xa3e>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d87a      	bhi.n	80081d6 <UART_SetConfig+0xa3e>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <UART_SetConfig+0x950>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	08008173 	.word	0x08008173
 80080ec:	0800817b 	.word	0x0800817b
 80080f0:	080081d7 	.word	0x080081d7
 80080f4:	080081d7 	.word	0x080081d7
 80080f8:	08008183 	.word	0x08008183
 80080fc:	080081d7 	.word	0x080081d7
 8008100:	080081d7 	.word	0x080081d7
 8008104:	080081d7 	.word	0x080081d7
 8008108:	08008193 	.word	0x08008193
 800810c:	080081d7 	.word	0x080081d7
 8008110:	080081d7 	.word	0x080081d7
 8008114:	080081d7 	.word	0x080081d7
 8008118:	080081d7 	.word	0x080081d7
 800811c:	080081d7 	.word	0x080081d7
 8008120:	080081d7 	.word	0x080081d7
 8008124:	080081d7 	.word	0x080081d7
 8008128:	080081a3 	.word	0x080081a3
 800812c:	080081d7 	.word	0x080081d7
 8008130:	080081d7 	.word	0x080081d7
 8008134:	080081d7 	.word	0x080081d7
 8008138:	080081d7 	.word	0x080081d7
 800813c:	080081d7 	.word	0x080081d7
 8008140:	080081d7 	.word	0x080081d7
 8008144:	080081d7 	.word	0x080081d7
 8008148:	080081d7 	.word	0x080081d7
 800814c:	080081d7 	.word	0x080081d7
 8008150:	080081d7 	.word	0x080081d7
 8008154:	080081d7 	.word	0x080081d7
 8008158:	080081d7 	.word	0x080081d7
 800815c:	080081d7 	.word	0x080081d7
 8008160:	080081d7 	.word	0x080081d7
 8008164:	080081d7 	.word	0x080081d7
 8008168:	080081c9 	.word	0x080081c9
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d02e      	beq.n	80081ce <UART_SetConfig+0xa36>
 8008170:	e031      	b.n	80081d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fa fd75 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8008176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008178:	e033      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817a:	f7fa fd87 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 800817e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008180:	e02f      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f7fc fdb8 	bl	8004cfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e027      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008192:	f107 0318 	add.w	r3, r7, #24
 8008196:	4618      	mov	r0, r3
 8008198:	f7fc ff04 	bl	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a0:	e01f      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a2:	4b2d      	ldr	r3, [pc, #180]	; (8008258 <UART_SetConfig+0xac0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ae:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <UART_SetConfig+0xac0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a28      	ldr	r2, [pc, #160]	; (800825c <UART_SetConfig+0xac4>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c0:	e00f      	b.n	80081e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80081c2:	4b26      	ldr	r3, [pc, #152]	; (800825c <UART_SetConfig+0xac4>)
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c6:	e00c      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <UART_SetConfig+0xac8>)
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081cc:	e009      	b.n	80081e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d4:	e005      	b.n	80081e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081e0:	bf00      	nop
    }

    if (pclk != 0U)
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d021      	beq.n	800822c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <UART_SetConfig+0xacc>)
 80081ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f2:	461a      	mov	r2, r3
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	441a      	add	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b0f      	cmp	r3, #15
 8008210:	d909      	bls.n	8008226 <UART_SetConfig+0xa8e>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008218:	d205      	bcs.n	8008226 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	b29a      	uxth	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	e002      	b.n	800822c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2201      	movs	r2, #1
 8008238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008248:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800824c:	4618      	mov	r0, r3
 800824e:	3748      	adds	r7, #72	; 0x48
 8008250:	46bd      	mov	sp, r7
 8008252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008256:	bf00      	nop
 8008258:	58024400 	.word	0x58024400
 800825c:	03d09000 	.word	0x03d09000
 8008260:	003d0900 	.word	0x003d0900
 8008264:	0801774c 	.word	0x0801774c

08008268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01a      	beq.n	800837e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008366:	d10a      	bne.n	800837e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b098      	sub	sp, #96	; 0x60
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083bc:	f7f9 f872 	bl	80014a4 <HAL_GetTick>
 80083c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d12f      	bne.n	8008430 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d8:	2200      	movs	r2, #0
 80083da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f88e 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d022      	beq.n	8008430 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008408:	647b      	str	r3, [r7, #68]	; 0x44
 800840a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800840e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e063      	b.n	80084f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b04      	cmp	r3, #4
 800843c:	d149      	bne.n	80084d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800843e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008446:	2200      	movs	r2, #0
 8008448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f857 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03c      	beq.n	80084d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	623b      	str	r3, [r7, #32]
   return(result);
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800847c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	60fb      	str	r3, [r7, #12]
   return(result);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084aa:	61fa      	str	r2, [r7, #28]
 80084ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	69b9      	ldr	r1, [r7, #24]
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	617b      	str	r3, [r7, #20]
   return(result);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e012      	b.n	80084f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3758      	adds	r7, #88	; 0x58
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008510:	e049      	b.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d045      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851a:	f7f8 ffc3 	bl	80014a4 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <UART_WaitOnFlagUntilTimeout+0x30>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e048      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d031      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b08      	cmp	r3, #8
 800854e:	d110      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2208      	movs	r2, #8
 8008556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f839 	bl	80085d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2208      	movs	r2, #8
 8008562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e029      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008580:	d111      	bne.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800858a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f81f 	bl	80085d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e00f      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	bf0c      	ite	eq
 80085b6:	2301      	moveq	r3, #1
 80085b8:	2300      	movne	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d0a6      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b095      	sub	sp, #84	; 0x54
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f6:	643b      	str	r3, [r7, #64]	; 0x40
 80085f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	61fb      	str	r3, [r7, #28]
   return(result);
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	4b1e      	ldr	r3, [pc, #120]	; (8008698 <UART_EndRxTransfer+0xc8>)
 800861e:	4013      	ands	r3, r2
 8008620:	64bb      	str	r3, [r7, #72]	; 0x48
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d118      	bne.n	8008678 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	60bb      	str	r3, [r7, #8]
   return(result);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f023 0310 	bic.w	r3, r3, #16
 800865a:	647b      	str	r3, [r7, #68]	; 0x44
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008664:	61bb      	str	r3, [r7, #24]
 8008666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6979      	ldr	r1, [r7, #20]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	613b      	str	r3, [r7, #16]
   return(result);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800868c:	bf00      	nop
 800868e:	3754      	adds	r7, #84	; 0x54
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	effffffe 	.word	0xeffffffe

0800869c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e027      	b.n	8008702 <HAL_UARTEx_DisableFifoMode+0x66>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2224      	movs	r2, #36	; 0x24
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0201 	bic.w	r2, r2, #1
 80086d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008722:	2302      	movs	r3, #2
 8008724:	e02d      	b.n	8008782 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2224      	movs	r2, #36	; 0x24
 8008732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f850 	bl	8008808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800879e:	2302      	movs	r3, #2
 80087a0:	e02d      	b.n	80087fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2224      	movs	r2, #36	; 0x24
 80087ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0201 	bic.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f812 	bl	8008808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008814:	2b00      	cmp	r3, #0
 8008816:	d108      	bne.n	800882a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008828:	e031      	b.n	800888e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800882a:	2310      	movs	r3, #16
 800882c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800882e:	2310      	movs	r3, #16
 8008830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	0e5b      	lsrs	r3, r3, #25
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	0f5b      	lsrs	r3, r3, #29
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	7b3a      	ldrb	r2, [r7, #12]
 8008856:	4911      	ldr	r1, [pc, #68]	; (800889c <UARTEx_SetNbDataToProcess+0x94>)
 8008858:	5c8a      	ldrb	r2, [r1, r2]
 800885a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800885e:	7b3a      	ldrb	r2, [r7, #12]
 8008860:	490f      	ldr	r1, [pc, #60]	; (80088a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008864:	fb93 f3f2 	sdiv	r3, r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	7b7a      	ldrb	r2, [r7, #13]
 8008874:	4909      	ldr	r1, [pc, #36]	; (800889c <UARTEx_SetNbDataToProcess+0x94>)
 8008876:	5c8a      	ldrb	r2, [r1, r2]
 8008878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800887c:	7b7a      	ldrb	r2, [r7, #13]
 800887e:	4908      	ldr	r1, [pc, #32]	; (80088a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008882:	fb93 f3f2 	sdiv	r3, r3, r2
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	08017764 	.word	0x08017764
 80088a0:	0801776c 	.word	0x0801776c

080088a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80088a4:	b084      	sub	sp, #16
 80088a6:	b480      	push	{r7}
 80088a8:	b085      	sub	sp, #20
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	f107 001c 	add.w	r0, r7, #28
 80088b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80088ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80088bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80088be:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80088c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80088c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80088ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <SDMMC_Init+0x50>)
 80088d8:	4013      	ands	r3, r2
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	b004      	add	sp, #16
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	ffc02c00 	.word	0xffc02c00

080088f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f043 0203 	orr.w	r2, r3, #3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0303 	and.w	r3, r3, #3
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008992:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008998:	431a      	orrs	r2, r3
                       Command->CPSM);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800899e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <SDMMC_SendCommand+0x50>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	fffee0c0 	.word	0xfffee0c0

080089c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	b2db      	uxtb	r3, r3
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3314      	adds	r3, #20
 80089f0:	461a      	mov	r2, r3
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a2e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008a34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008a3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0

}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a6e:	2310      	movs	r3, #16
 8008a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a82:	f107 0308 	add.w	r3, r7, #8
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff ff73 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a92:	2110      	movs	r1, #16
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa5f 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b088      	sub	sp, #32
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ab4:	2311      	movs	r3, #17
 8008ab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff ff50 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad8:	2111      	movs	r1, #17
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa3c 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008afa:	2312      	movs	r3, #18
 8008afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b0e:	f107 0308 	add.w	r3, r7, #8
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff2d 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1e:	2112      	movs	r1, #18
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa19 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008b26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b28:	69fb      	ldr	r3, [r7, #28]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b088      	sub	sp, #32
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b40:	2318      	movs	r3, #24
 8008b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff ff0a 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b64:	2118      	movs	r1, #24
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f9f6 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b86:	2319      	movs	r3, #25
 8008b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fee7 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	2119      	movs	r1, #25
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f9d3 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008bcc:	230c      	movs	r3, #12
 8008bce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bde:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff feb8 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008c04:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <SDMMC_CmdStopTransfer+0x74>)
 8008c06:	210c      	movs	r1, #12
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f9a5 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008c0e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c22:	d101      	bne.n	8008c28 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008c28:	69fb      	ldr	r3, [r7, #28]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3720      	adds	r7, #32
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	05f5e100 	.word	0x05f5e100

08008c38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c46:	2307      	movs	r3, #7
 8008c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c5a:	f107 0308 	add.w	r3, r7, #8
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fe87 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6a:	2107      	movs	r1, #7
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f973 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c74:	69fb      	ldr	r3, [r7, #28]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c9c:	f107 0308 	add.w	r3, r7, #8
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff fe66 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fb97 	bl	80093dc <SDMMC_GetCmdError>
 8008cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008cc2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cc8:	2308      	movs	r3, #8
 8008cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fe46 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb29 	bl	8009340 <SDMMC_GetCmdResp7>
 8008cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d08:	2337      	movs	r3, #55	; 0x37
 8008d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d12:	2300      	movs	r3, #0
 8008d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d1c:	f107 0308 	add.w	r3, r7, #8
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff fe26 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2c:	2137      	movs	r1, #55	; 0x37
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f912 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d36:	69fb      	ldr	r3, [r7, #28]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d4e:	2329      	movs	r3, #41	; 0x29
 8008d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff fe03 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa2e 	bl	80091d0 <SDMMC_GetCmdResp3>
 8008d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d76:	69fb      	ldr	r3, [r7, #28]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d8e:	2306      	movs	r3, #6
 8008d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fde3 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db2:	2106      	movs	r1, #6
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8cf 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b088      	sub	sp, #32
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008dd2:	2333      	movs	r3, #51	; 0x33
 8008dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de6:	f107 0308 	add.w	r3, r7, #8
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff fdc1 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df6:	2133      	movs	r1, #51	; 0x33
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f8ad 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e00:	69fb      	ldr	r3, [r7, #28]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b088      	sub	sp, #32
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e16:	2302      	movs	r3, #2
 8008e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff fd9f 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f980 	bl	800913c <SDMMC_GetCmdResp2>
 8008e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e56:	2309      	movs	r3, #9
 8008e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e6a:	f107 0308 	add.w	r3, r7, #8
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff fd7f 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f960 	bl	800913c <SDMMC_GetCmdResp2>
 8008e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e96:	2303      	movs	r3, #3
 8008e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fd5f 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	2103      	movs	r1, #3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9c8 	bl	8009250 <SDMMC_GetCmdResp6>
 8008ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008eda:	230d      	movs	r3, #13
 8008edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eee:	f107 0308 	add.w	r3, r7, #8
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fd3d 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efe:	210d      	movs	r1, #13
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f829 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008f06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f08:	69fb      	ldr	r3, [r7, #28]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f1e:	230d      	movs	r3, #13
 8008f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fd1b 	bl	8008974 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f42:	210d      	movs	r1, #13
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f807 	bl	8008f58 <SDMMC_GetCmdResp1>
 8008f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	460b      	mov	r3, r1
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008f66:	4b70      	ldr	r3, [pc, #448]	; (8009128 <SDMMC_GetCmdResp1+0x1d0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a70      	ldr	r2, [pc, #448]	; (800912c <SDMMC_GetCmdResp1+0x1d4>)
 8008f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f70:	0a5a      	lsrs	r2, r3, #9
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	fb02 f303 	mul.w	r3, r2, r3
 8008f78:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	61fa      	str	r2, [r7, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f88:	e0c9      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	4b67      	ldr	r3, [pc, #412]	; (8009130 <SDMMC_GetCmdResp1+0x1d8>)
 8008f94:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0ef      	beq.n	8008f7a <SDMMC_GetCmdResp1+0x22>
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1ea      	bne.n	8008f7a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fb6:	2304      	movs	r3, #4
 8008fb8:	e0b1      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e0a6      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a58      	ldr	r2, [pc, #352]	; (8009134 <SDMMC_GetCmdResp1+0x1dc>)
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff fcf6 	bl	80089c8 <SDMMC_GetCommandResponse>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	7afb      	ldrb	r3, [r7, #11]
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d001      	beq.n	8008fea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e099      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008fea:	2100      	movs	r1, #0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7ff fcf8 	bl	80089e2 <SDMMC_GetResponse>
 8008ff2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4b50      	ldr	r3, [pc, #320]	; (8009138 <SDMMC_GetCmdResp1+0x1e0>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	e08d      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	da02      	bge.n	800900e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800900c:	e087      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	e080      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009026:	2380      	movs	r3, #128	; 0x80
 8009028:	e079      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009038:	e071      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009048:	e069      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009058:	e061      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009068:	e059      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009078:	e051      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009088:	e049      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009098:	e041      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80090a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a8:	e039      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b8:	e031      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090c8:	e029      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090d8:	e021      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090e8:	e019      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80090f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80090f8:	e011      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009108:	e009      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009114:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009118:	e001      	b.n	800911e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800911a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	24000000 	.word	0x24000000
 800912c:	10624dd3 	.word	0x10624dd3
 8009130:	00200045 	.word	0x00200045
 8009134:	002000c5 	.word	0x002000c5
 8009138:	fdffe008 	.word	0xfdffe008

0800913c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009144:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <SDMMC_GetCmdResp2+0x88>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <SDMMC_GetCmdResp2+0x8c>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	0a5b      	lsrs	r3, r3, #9
 8009150:	f241 3288 	movw	r2, #5000	; 0x1388
 8009154:	fb02 f303 	mul.w	r3, r2, r3
 8009158:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1e5a      	subs	r2, r3, #1
 800915e:	60fa      	str	r2, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009168:	e026      	b.n	80091b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0ef      	beq.n	800915a <SDMMC_GetCmdResp2+0x1e>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1ea      	bne.n	800915a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2204      	movs	r2, #4
 8009194:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009196:	2304      	movs	r3, #4
 8009198:	e00e      	b.n	80091b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e003      	b.n	80091b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a06      	ldr	r2, [pc, #24]	; (80091cc <SDMMC_GetCmdResp2+0x90>)
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	24000000 	.word	0x24000000
 80091c8:	10624dd3 	.word	0x10624dd3
 80091cc:	002000c5 	.word	0x002000c5

080091d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80091d8:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <SDMMC_GetCmdResp3+0x74>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <SDMMC_GetCmdResp3+0x78>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	0a5b      	lsrs	r3, r3, #9
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	fb02 f303 	mul.w	r3, r2, r3
 80091ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	60fa      	str	r2, [r7, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091fc:	e01b      	b.n	8009236 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0ef      	beq.n	80091ee <SDMMC_GetCmdResp3+0x1e>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1ea      	bne.n	80091ee <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2204      	movs	r2, #4
 8009228:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800922a:	2304      	movs	r3, #4
 800922c:	e003      	b.n	8009236 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a06      	ldr	r2, [pc, #24]	; (800924c <SDMMC_GetCmdResp3+0x7c>)
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	24000000 	.word	0x24000000
 8009248:	10624dd3 	.word	0x10624dd3
 800924c:	002000c5 	.word	0x002000c5

08009250 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	460b      	mov	r3, r1
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800925e:	4b35      	ldr	r3, [pc, #212]	; (8009334 <SDMMC_GetCmdResp6+0xe4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a35      	ldr	r2, [pc, #212]	; (8009338 <SDMMC_GetCmdResp6+0xe8>)
 8009264:	fba2 2303 	umull	r2, r3, r2, r3
 8009268:	0a5b      	lsrs	r3, r3, #9
 800926a:	f241 3288 	movw	r2, #5000	; 0x1388
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	1e5a      	subs	r2, r3, #1
 8009278:	61fa      	str	r2, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800927e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009282:	e052      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0ef      	beq.n	8009274 <SDMMC_GetCmdResp6+0x24>
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1ea      	bne.n	8009274 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2204      	movs	r2, #4
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092b0:	2304      	movs	r3, #4
 80092b2:	e03a      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e02f      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff fb7c 	bl	80089c8 <SDMMC_GetCommandResponse>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d001      	beq.n	80092de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092da:	2301      	movs	r3, #1
 80092dc:	e025      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4a16      	ldr	r2, [pc, #88]	; (800933c <SDMMC_GetCmdResp6+0xec>)
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092e4:	2100      	movs	r1, #0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fb7b 	bl	80089e2 <SDMMC_GetResponse>
 80092ec:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	0c1b      	lsrs	r3, r3, #16
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009302:	2300      	movs	r3, #0
 8009304:	e011      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009314:	e009      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009324:	e001      	b.n	800932a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	24000000 	.word	0x24000000
 8009338:	10624dd3 	.word	0x10624dd3
 800933c:	002000c5 	.word	0x002000c5

08009340 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009348:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <SDMMC_GetCmdResp7+0x94>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a22      	ldr	r2, [pc, #136]	; (80093d8 <SDMMC_GetCmdResp7+0x98>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	0a5b      	lsrs	r3, r3, #9
 8009354:	f241 3288 	movw	r2, #5000	; 0x1388
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	60fa      	str	r2, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d102      	bne.n	800936e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800936c:	e02c      	b.n	80093c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009372:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0ef      	beq.n	800935e <SDMMC_GetCmdResp7+0x1e>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1ea      	bne.n	800935e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2204      	movs	r2, #4
 8009398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800939a:	2304      	movs	r3, #4
 800939c:	e014      	b.n	80093c8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e009      	b.n	80093c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2240      	movs	r2, #64	; 0x40
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093c6:	2300      	movs	r3, #0

}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	24000000 	.word	0x24000000
 80093d8:	10624dd3 	.word	0x10624dd3

080093dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <SDMMC_GetCmdError+0x50>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a11      	ldr	r2, [pc, #68]	; (8009430 <SDMMC_GetCmdError+0x54>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	0a5b      	lsrs	r3, r3, #9
 80093f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1e5a      	subs	r2, r3, #1
 80093fe:	60fa      	str	r2, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009408:	e009      	b.n	800941e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f1      	beq.n	80093fa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a06      	ldr	r2, [pc, #24]	; (8009434 <SDMMC_GetCmdError+0x58>)
 800941a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	24000000 	.word	0x24000000
 8009430:	10624dd3 	.word	0x10624dd3
 8009434:	002000c5 	.word	0x002000c5

08009438 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08e      	sub	sp, #56	; 0x38
 800943c:	af08      	add	r7, sp, #32
 800943e:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8009448:	f107 010c 	add.w	r1, r7, #12
 800944c:	2300      	movs	r3, #0
 800944e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009452:	6938      	ldr	r0, [r7, #16]
 8009454:	f00c fc08 	bl	8015c68 <_txe_byte_allocate>
 8009458:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8009460:	2302      	movs	r3, #2
 8009462:	e027      	b.n	80094b4 <MX_FileX_Init+0x7c>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	22b0      	movs	r2, #176	; 0xb0
 8009468:	9206      	str	r2, [sp, #24]
 800946a:	2201      	movs	r2, #1
 800946c:	9205      	str	r2, [sp, #20]
 800946e:	2200      	movs	r2, #0
 8009470:	9204      	str	r2, [sp, #16]
 8009472:	220a      	movs	r2, #10
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	220a      	movs	r2, #10
 8009478:	9202      	str	r2, [sp, #8]
 800947a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800947e:	9201      	str	r2, [sp, #4]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <MX_FileX_Init+0x84>)
 8009486:	490e      	ldr	r1, [pc, #56]	; (80094c0 <MX_FileX_Init+0x88>)
 8009488:	480e      	ldr	r0, [pc, #56]	; (80094c4 <MX_FileX_Init+0x8c>)
 800948a:	f00c ff79 	bl	8016380 <_txe_thread_create>
 800948e:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 8009496:	230e      	movs	r3, #14
 8009498:	e00c      	b.n	80094b4 <MX_FileX_Init+0x7c>
  }
  /* USER CODE BEGIN MX_FileX_Init */
  /* Create the message queue */
    tx_queue_create(&tx_msg_queue, "sd_event_queue", 1, pointer, DEFAULT_QUEUE_LENGTH * sizeof(ULONG));
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2238      	movs	r2, #56	; 0x38
 800949e:	9201      	str	r2, [sp, #4]
 80094a0:	2240      	movs	r2, #64	; 0x40
 80094a2:	9200      	str	r2, [sp, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	4908      	ldr	r1, [pc, #32]	; (80094c8 <MX_FileX_Init+0x90>)
 80094a8:	4808      	ldr	r0, [pc, #32]	; (80094cc <MX_FileX_Init+0x94>)
 80094aa:	f00c fcf1 	bl	8015e90 <_txe_queue_create>

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 80094ae:	f006 fc85 	bl	800fdbc <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 80094b2:	697b      	ldr	r3, [r7, #20]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	08017668 	.word	0x08017668
 80094c4:	240122c8 	.word	0x240122c8
 80094c8:	0801767c 	.word	0x0801767c
 80094cc:	24014c18 	.word	0x24014c18

080094d0 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 80094d0:	b5b0      	push	{r4, r5, r7, lr}
 80094d2:	b09c      	sub	sp, #112	; 0x70
 80094d4:	af04      	add	r7, sp, #16
 80094d6:	6078      	str	r0, [r7, #4]
  UINT sd_status = FX_SUCCESS;
 80094d8:	2300      	movs	r3, #0
 80094da:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN fx_app_thread_entry 0 */
  ULONG r_msg;
  ULONG s_msg = CARD_STATUS_CHANGED;
 80094dc:	2363      	movs	r3, #99	; 0x63
 80094de:	653b      	str	r3, [r7, #80]	; 0x50
  ULONG last_status = CARD_STATUS_DISCONNECTED;
 80094e0:	2358      	movs	r3, #88	; 0x58
 80094e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 80094e4:	4b78      	ldr	r3, [pc, #480]	; (80096c8 <fx_app_thread_entry+0x1f8>)
 80094e6:	f107 040c 	add.w	r4, r7, #12
 80094ea:	461d      	mov	r5, r3
 80094ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094f4:	c407      	stmia	r4!, {r0, r1, r2}
 80094f6:	8023      	strh	r3, [r4, #0]
 80094f8:	3402      	adds	r4, #2
 80094fa:	0c1b      	lsrs	r3, r3, #16
 80094fc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END fx_app_thread_entry 0 */

  /* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 80094fe:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	4b70      	ldr	r3, [pc, #448]	; (80096cc <fx_app_thread_entry+0x1fc>)
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	2300      	movs	r3, #0
 8009510:	4a6f      	ldr	r2, [pc, #444]	; (80096d0 <fx_app_thread_entry+0x200>)
 8009512:	4970      	ldr	r1, [pc, #448]	; (80096d4 <fx_app_thread_entry+0x204>)
 8009514:	4870      	ldr	r0, [pc, #448]	; (80096d8 <fx_app_thread_entry+0x208>)
 8009516:	f009 f853 	bl	80125c0 <_fxe_media_open>
 800951a:	65b8      	str	r0, [r7, #88]	; 0x58

  /* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 800951c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800951e:	2b00      	cmp	r3, #0
 8009520:	d000      	beq.n	8009524 <fx_app_thread_entry+0x54>
  {
    /* USER CODE BEGIN SD open error */
    while(1);
 8009522:	e7fe      	b.n	8009522 <fx_app_thread_entry+0x52>
    /* USER CODE END SD open error */
  }

  /* USER CODE BEGIN fx_app_thread_entry 1 */
  if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 8009524:	2000      	movs	r0, #0
 8009526:	f000 f8e1 	bl	80096ec <SD_IsDetected>
 800952a:	4603      	mov	r3, r0
 800952c:	2b01      	cmp	r3, #1
 800952e:	d107      	bne.n	8009540 <fx_app_thread_entry+0x70>
  {
    /* SD card is already inserted, place the info into the queue */
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 8009530:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009534:	2200      	movs	r2, #0
 8009536:	4619      	mov	r1, r3
 8009538:	4868      	ldr	r0, [pc, #416]	; (80096dc <fx_app_thread_entry+0x20c>)
 800953a:	f00c fda3 	bl	8016084 <_txe_queue_send>
 800953e:	e00e      	b.n	800955e <fx_app_thread_entry+0x8e>
  }
  else
  {
    /* Indicate that SD card is not inserted from start */
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009546:	4866      	ldr	r0, [pc, #408]	; (80096e0 <fx_app_thread_entry+0x210>)
 8009548:	f7f8 fa90 	bl	8001a6c <HAL_GPIO_WritePin>

    /* We wait here for a valid SD card insertion event, if it is not inserted already */
    while(1)
    {

      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 800954c:	e007      	b.n	800955e <fx_app_thread_entry+0x8e>
      {
        /* Toggle GREEN LED to indicate idle state after a successful operation */
        if(last_status == CARD_STATUS_CONNECTED)
 800954e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009550:	2b4d      	cmp	r3, #77	; 0x4d
 8009552:	d104      	bne.n	800955e <fx_app_thread_entry+0x8e>
        {
          HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009558:	4861      	ldr	r0, [pc, #388]	; (80096e0 <fx_app_thread_entry+0x210>)
 800955a:	f7f8 faa0 	bl	8001a9e <HAL_GPIO_TogglePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 800955e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009562:	2232      	movs	r2, #50	; 0x32
 8009564:	4619      	mov	r1, r3
 8009566:	485d      	ldr	r0, [pc, #372]	; (80096dc <fx_app_thread_entry+0x20c>)
 8009568:	f00c fd42 	bl	8015ff0 <_txe_queue_receive>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1ed      	bne.n	800954e <fx_app_thread_entry+0x7e>
        }
      }

      /* check if we received the correct event message */
      if(r_msg == CARD_STATUS_CHANGED)
 8009572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009574:	2b63      	cmp	r3, #99	; 0x63
 8009576:	d1f2      	bne.n	800955e <fx_app_thread_entry+0x8e>
      {
        /* reset the status */
        r_msg = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	657b      	str	r3, [r7, #84]	; 0x54

        /* for debouncing purpose we wait a bit till it settles down */
        tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 800957c:	2032      	movs	r0, #50	; 0x32
 800957e:	f00b fd5b 	bl	8015038 <_tx_thread_sleep>

        if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 8009582:	2000      	movs	r0, #0
 8009584:	f000 f8b2 	bl	80096ec <SD_IsDetected>
 8009588:	4603      	mov	r3, r0
 800958a:	2b01      	cmp	r3, #1
 800958c:	d111      	bne.n	80095b2 <fx_app_thread_entry+0xe2>
        {
          /* We have a valid SD insertion event, start processing.. */
          /* Update last known status */
          last_status = CARD_STATUS_CONNECTED;
 800958e:	234d      	movs	r3, #77	; 0x4d
 8009590:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /*LED_RED Off*/
 8009592:	2201      	movs	r2, #1
 8009594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009598:	4851      	ldr	r0, [pc, #324]	; (80096e0 <fx_app_thread_entry+0x210>)
 800959a:	f7f8 fa67 	bl	8001a6c <HAL_GPIO_WritePin>
          break;
 800959e:	bf00      	nop
        }
      }
    }

    /* Create a file called STM32.TXT in the root directory.  */
    sd_status =  fx_file_create(&sdio_disk, "STM32.TXT");
 80095a0:	4950      	ldr	r1, [pc, #320]	; (80096e4 <fx_app_thread_entry+0x214>)
 80095a2:	484d      	ldr	r0, [pc, #308]	; (80096d8 <fx_app_thread_entry+0x208>)
 80095a4:	f008 fe6a 	bl	801227c <_fxe_file_create>
 80095a8:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the create status.  */
    if (sd_status != FX_SUCCESS)
 80095aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d014      	beq.n	80095da <fx_app_thread_entry+0x10a>
 80095b0:	e00e      	b.n	80095d0 <fx_app_thread_entry+0x100>
          last_status = CARD_STATUS_DISCONNECTED;
 80095b2:	2358      	movs	r3, #88	; 0x58
 80095b4:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);  /*LED_GREEN Off*/
 80095b6:	2201      	movs	r2, #1
 80095b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80095bc:	4848      	ldr	r0, [pc, #288]	; (80096e0 <fx_app_thread_entry+0x210>)
 80095be:	f7f8 fa55 	bl	8001a6c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /*LED_GREEN On*/
 80095c2:	2200      	movs	r2, #0
 80095c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80095c8:	4845      	ldr	r0, [pc, #276]	; (80096e0 <fx_app_thread_entry+0x210>)
 80095ca:	f7f8 fa4f 	bl	8001a6c <HAL_GPIO_WritePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 80095ce:	e7c6      	b.n	800955e <fx_app_thread_entry+0x8e>
    {
      /* Check for an already created status. This is expected on the
      second pass of this loop!  */
      if (sd_status != FX_ALREADY_CREATED)
 80095d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095d2:	2b0b      	cmp	r3, #11
 80095d4:	d001      	beq.n	80095da <fx_app_thread_entry+0x10a>
      {
        /* Create error, call error handler.  */
        Error_Handler();
 80095d6:	f7f7 fc89 	bl	8000eec <Error_Handler>
      }
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 80095da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	2301      	movs	r3, #1
 80095e2:	4a40      	ldr	r2, [pc, #256]	; (80096e4 <fx_app_thread_entry+0x214>)
 80095e4:	4940      	ldr	r1, [pc, #256]	; (80096e8 <fx_app_thread_entry+0x218>)
 80095e6:	483c      	ldr	r0, [pc, #240]	; (80096d8 <fx_app_thread_entry+0x208>)
 80095e8:	f008 fe76 	bl	80122d8 <_fxe_file_open>
 80095ec:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 80095ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <fx_app_thread_entry+0x128>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 80095f4:	f7f7 fc7a 	bl	8000eec <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 80095f8:	2100      	movs	r1, #0
 80095fa:	483b      	ldr	r0, [pc, #236]	; (80096e8 <fx_app_thread_entry+0x218>)
 80095fc:	f008 ff26 	bl	801244c <_fxe_file_seek>
 8009600:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 8009602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <fx_app_thread_entry+0x13c>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 8009608:	f7f7 fc70 	bl	8000eec <Error_Handler>
    }

    /* Write a string to the test file.  */
    sd_status =  fx_file_write(&fx_file, data, sizeof(data));
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	221f      	movs	r2, #31
 8009612:	4619      	mov	r1, r3
 8009614:	4834      	ldr	r0, [pc, #208]	; (80096e8 <fx_app_thread_entry+0x218>)
 8009616:	f008 ff47 	bl	80124a8 <_fxe_file_write>
 800961a:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file write status.  */
    if (sd_status != FX_SUCCESS)
 800961c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <fx_app_thread_entry+0x156>
    {
      /* Error writing to a file, call error handler.  */
      Error_Handler();
 8009622:	f7f7 fc63 	bl	8000eec <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 8009626:	4830      	ldr	r0, [pc, #192]	; (80096e8 <fx_app_thread_entry+0x218>)
 8009628:	f008 fdfc 	bl	8012224 <_fxe_file_close>
 800962c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 800962e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <fx_app_thread_entry+0x168>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009634:	f7f7 fc5a 	bl	8000eec <Error_Handler>
    }

    sd_status = fx_media_flush(&sdio_disk);
 8009638:	4827      	ldr	r0, [pc, #156]	; (80096d8 <fx_app_thread_entry+0x208>)
 800963a:	f008 ff95 	bl	8012568 <_fxe_media_flush>
 800963e:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media flush  status.  */
    if (sd_status != FX_SUCCESS)
 8009640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <fx_app_thread_entry+0x17a>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009646:	f7f7 fc51 	bl	8000eec <Error_Handler>
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 800964a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2300      	movs	r3, #0
 8009652:	4a24      	ldr	r2, [pc, #144]	; (80096e4 <fx_app_thread_entry+0x214>)
 8009654:	4924      	ldr	r1, [pc, #144]	; (80096e8 <fx_app_thread_entry+0x218>)
 8009656:	4820      	ldr	r0, [pc, #128]	; (80096d8 <fx_app_thread_entry+0x208>)
 8009658:	f008 fe3e 	bl	80122d8 <_fxe_file_open>
 800965c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 800965e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <fx_app_thread_entry+0x198>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8009664:	f7f7 fc42 	bl	8000eec <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 8009668:	2100      	movs	r1, #0
 800966a:	481f      	ldr	r0, [pc, #124]	; (80096e8 <fx_app_thread_entry+0x218>)
 800966c:	f008 feee 	bl	801244c <_fxe_file_seek>
 8009670:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 8009672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <fx_app_thread_entry+0x1ac>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 8009678:	f7f7 fc38 	bl	8000eec <Error_Handler>
    }

    /* Read the first 28 bytes of the test file.  */
    sd_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 800967c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009680:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009684:	221f      	movs	r2, #31
 8009686:	4818      	ldr	r0, [pc, #96]	; (80096e8 <fx_app_thread_entry+0x218>)
 8009688:	f008 fea8 	bl	80123dc <_fxe_file_read>
 800968c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file read status.  */
    if ((sd_status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 800968e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <fx_app_thread_entry+0x1ca>
 8009694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009696:	2b1f      	cmp	r3, #31
 8009698:	d001      	beq.n	800969e <fx_app_thread_entry+0x1ce>
    {
      /* Error reading file, call error handler.  */
      Error_Handler();
 800969a:	f7f7 fc27 	bl	8000eec <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 800969e:	4812      	ldr	r0, [pc, #72]	; (80096e8 <fx_app_thread_entry+0x218>)
 80096a0:	f008 fdc0 	bl	8012224 <_fxe_file_close>
 80096a4:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 80096a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <fx_app_thread_entry+0x1e0>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 80096ac:	f7f7 fc1e 	bl	8000eec <Error_Handler>
    }

    /* Close the media.  */
    sd_status =  fx_media_close(&sdio_disk);
 80096b0:	4809      	ldr	r0, [pc, #36]	; (80096d8 <fx_app_thread_entry+0x208>)
 80096b2:	f008 ff2d 	bl	8012510 <_fxe_media_close>
 80096b6:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media close status.  */
    if (sd_status != FX_SUCCESS)
 80096b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f43f af46 	beq.w	800954c <fx_app_thread_entry+0x7c>
    {
      /* Error closing the media, call error handler.  */
      Error_Handler();
 80096c0:	f7f7 fc14 	bl	8000eec <Error_Handler>
  for( ;; )
 80096c4:	e742      	b.n	800954c <fx_app_thread_entry+0x7c>
 80096c6:	bf00      	nop
 80096c8:	080176a8 	.word	0x080176a8
 80096cc:	24012380 	.word	0x24012380
 80096d0:	08012735 	.word	0x08012735
 80096d4:	0801768c 	.word	0x0801768c
 80096d8:	24012580 	.word	0x24012580
 80096dc:	24014c18 	.word	0x24014c18
 80096e0:	58022000 	.word	0x58022000
 80096e4:	0801769c 	.word	0x0801769c
 80096e8:	24014a38 	.word	0x24014a38

080096ec <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <SD_IsDetected+0x14>
  {
    ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	e00c      	b.n	800971a <SD_IsDetected+0x2e>
  }
  else
  {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET)
 8009700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009704:	4807      	ldr	r0, [pc, #28]	; (8009724 <SD_IsDetected+0x38>)
 8009706:	f7f8 f999 	bl	8001a3c <HAL_GPIO_ReadPin>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d102      	bne.n	8009716 <SD_IsDetected+0x2a>
    {
      ret = SD_NOT_PRESENT;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	e001      	b.n	800971a <SD_IsDetected+0x2e>
    }
    else
    {
      ret = SD_PRESENT;
 8009716:	2301      	movs	r3, #1
 8009718:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 800971a:	68fb      	ldr	r3, [r7, #12]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	58022000 	.word	0x58022000

08009728 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	80fb      	strh	r3, [r7, #6]
  ULONG s_msg = CARD_STATUS_CHANGED;
 8009732:	2363      	movs	r3, #99	; 0x63
 8009734:	60fb      	str	r3, [r7, #12]

  if(GPIO_Pin == SD_DETECT_Pin)
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973c:	d106      	bne.n	800974c <HAL_GPIO_EXTI_Callback+0x24>
  {
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 800973e:	f107 030c 	add.w	r3, r7, #12
 8009742:	2200      	movs	r2, #0
 8009744:	4619      	mov	r1, r3
 8009746:	4803      	ldr	r0, [pc, #12]	; (8009754 <HAL_GPIO_EXTI_Callback+0x2c>)
 8009748:	f00c fc9c 	bl	8016084 <_txe_queue_send>
  }
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	24014c18 	.word	0x24014c18

08009758 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8009764:	4806      	ldr	r0, [pc, #24]	; (8009780 <fx_stm32_sd_get_status+0x28>)
 8009766:	f7fc ffcd 	bl	8006704 <HAL_SD_GetCardState>
 800976a:	4603      	mov	r3, r0
 800976c:	2b04      	cmp	r3, #4
 800976e:	d001      	beq.n	8009774 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8009770:	2301      	movs	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8009774:	68fb      	ldr	r3, [r7, #12]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	24012164 	.word	0x24012164

08009784 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	4806      	ldr	r0, [pc, #24]	; (80097b8 <fx_stm32_sd_read_blocks+0x34>)
 800979e:	f7fc f92b 	bl	80059f8 <HAL_SD_ReadBlocks_DMA>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 80097a8:	2301      	movs	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 80097ac:	697b      	ldr	r3, [r7, #20]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	24012164 	.word	0x24012164

080097bc <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4806      	ldr	r0, [pc, #24]	; (80097f0 <fx_stm32_sd_write_blocks+0x34>)
 80097d6:	f7fc f9b7 	bl	8005b48 <HAL_SD_WriteBlocks_DMA>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 80097e4:	697b      	ldr	r3, [r7, #20]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	24012164 	.word	0x24012164

080097f4 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 80097fc:	4803      	ldr	r0, [pc, #12]	; (800980c <HAL_SD_TxCpltCallback+0x18>)
 80097fe:	f00c fda1 	bl	8016344 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	24014c50 	.word	0x24014c50

08009810 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <HAL_SD_RxCpltCallback+0x18>)
 800981a:	f00c fd93 	bl	8016344 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	24014c6c 	.word	0x24014c6c

0800982c <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800982c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009830:	b09e      	sub	sp, #120	; 0x78
 8009832:	af04      	add	r7, sp, #16
 8009834:	61f8      	str	r0, [r7, #28]
 8009836:	61b9      	str	r1, [r7, #24]
 8009838:	617a      	str	r2, [r7, #20]
 800983a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	015b      	lsls	r3, r3, #5
 8009858:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <_fx_directory_entry_read+0x3e>
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80a1 	beq.w	80099ac <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009872:	fb02 f303 	mul.w	r3, r2, r3
 8009876:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800987e:	2302      	movs	r3, #2
 8009880:	e355      	b.n	8009f2e <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8009882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800988c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009890:	fbb3 f2f2 	udiv	r2, r3, r2
 8009894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009896:	fb01 f202 	mul.w	r2, r1, r2
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d028      	beq.n	8009902 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01e      	beq.n	80098f6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 80098bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098be:	429a      	cmp	r2, r3
 80098c0:	d319      	bcc.n	80098f6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 80098ce:	4299      	cmp	r1, r3
 80098d0:	bf08      	it	eq
 80098d2:	4290      	cmpeq	r0, r2
 80098d4:	d10f      	bne.n	80098f6 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80098de:	429a      	cmp	r2, r3
 80098e0:	d109      	bne.n	80098f6 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ec:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2200      	movs	r2, #0
 80098f2:	651a      	str	r2, [r3, #80]	; 0x50
 80098f4:	e00a      	b.n	800990c <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	667b      	str	r3, [r7, #100]	; 0x64
 8009900:	e024      	b.n	800994c <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009906:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 8009908:	2300      	movs	r3, #0
 800990a:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800990c:	e01e      	b.n	800994c <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800990e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009910:	2b01      	cmp	r3, #1
 8009912:	d907      	bls.n	8009924 <_fx_directory_entry_read+0xf8>
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800991a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800991e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009920:	429a      	cmp	r2, r3
 8009922:	d301      	bcc.n	8009928 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 8009924:	2308      	movs	r3, #8
 8009926:	e302      	b.n	8009f2e <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800992c:	461a      	mov	r2, r3
 800992e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009930:	69f8      	ldr	r0, [r7, #28]
 8009932:	f006 fc5d 	bl	80101f0 <_fx_utility_FAT_entry_read>
 8009936:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	e2f5      	b.n	8009f2e <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 8009946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009948:	3301      	adds	r3, #1
 800994a:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800994c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800994e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009950:	429a      	cmp	r2, r3
 8009952:	d3dc      	bcc.n	800990e <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800995a:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800995c:	69f9      	ldr	r1, [r7, #28]
 800995e:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009960:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009964:	4413      	add	r3, r2
 8009966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009968:	4413      	add	r3, r2
 800996a:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800996c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996e:	2200      	movs	r2, #0
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009978:	2203      	movs	r2, #3
 800997a:	9202      	str	r2, [sp, #8]
 800997c:	2201      	movs	r2, #1
 800997e:	9201      	str	r2, [sp, #4]
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009986:	69f8      	ldr	r0, [r7, #28]
 8009988:	f008 f840 	bl	8011a0c <_fx_utility_logical_sector_read>
 800998c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 8009994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009996:	e2ca      	b.n	8009f2e <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800999c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800999e:	fbb3 f1f2 	udiv	r1, r3, r2
 80099a2:	fb01 f202 	mul.w	r2, r1, r2
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	647b      	str	r3, [r7, #68]	; 0x44
 80099aa:	e02f      	b.n	8009a0c <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099b2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80099ba:	4413      	add	r3, r2
 80099bc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80099be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c0:	2200      	movs	r2, #0
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 80099ca:	2203      	movs	r2, #3
 80099cc:	9202      	str	r2, [sp, #8]
 80099ce:	2201      	movs	r2, #1
 80099d0:	9201      	str	r2, [sp, #4]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d8:	69f8      	ldr	r0, [r7, #28]
 80099da:	f008 f817 	bl	8011a0c <_fx_utility_logical_sector_read>
 80099de:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e8:	e2a1      	b.n	8009f2e <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	657b      	str	r3, [r7, #84]	; 0x54
 80099ee:	2300      	movs	r3, #0
 80099f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f4:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099fc:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 8009a02:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8009a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a12:	4413      	add	r3, r2
 8009a14:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 8009a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4698      	mov	r8, r3
 8009a1c:	4691      	mov	r9, r2
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a28:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2200      	movs	r2, #0
 8009a34:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8009a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a42:	330b      	adds	r3, #11
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	f040 8129 	bne.w	8009c9e <_fx_directory_entry_read+0x472>
 8009a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2be5      	cmp	r3, #229	; 0xe5
 8009a52:	f000 8124 	beq.w	8009c9e <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8009a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	f003 021f 	and.w	r2, r3, #31
 8009a5e:	4613      	mov	r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	3b0d      	subs	r3, #13
 8009a6a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8009a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a78:	2bfe      	cmp	r3, #254	; 0xfe
 8009a7a:	d908      	bls.n	8009a8e <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 021f 	and.w	r2, r3, #31
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	619a      	str	r2, [r3, #24]
 8009a8c:	e015      	b.n	8009aba <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3304      	adds	r3, #4
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8009a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a96:	330e      	adds	r3, #14
 8009a98:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa0:	4413      	add	r3, r2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8009aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8009aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d202      	bcs.n	8009aba <_fx_directory_entry_read+0x28e>
 8009ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab6:	2bff      	cmp	r3, #255	; 0xff
 8009ab8:	d9ef      	bls.n	8009a9a <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8009aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8009ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d168      	bne.n	8009b9e <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009acc:	2301      	movs	r3, #1
 8009ace:	667b      	str	r3, [r7, #100]	; 0x64
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad4:	e060      	b.n	8009b98 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 8009ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ad8:	2b0b      	cmp	r3, #11
 8009ada:	d057      	beq.n	8009b8c <_fx_directory_entry_read+0x360>
 8009adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ade:	2b1a      	cmp	r3, #26
 8009ae0:	d054      	beq.n	8009b8c <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8009ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae4:	2b0d      	cmp	r3, #13
 8009ae6:	d102      	bne.n	8009aee <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 8009ae8:	230c      	movs	r3, #12
 8009aea:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 8009aec:	e051      	b.n	8009b92 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 8009aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af0:	3301      	adds	r3, #1
 8009af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af4:	4413      	add	r3, r2
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d014      	beq.n	8009b26 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8009afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afe:	3301      	adds	r3, #1
 8009b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b02:	4413      	add	r3, r2
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	2bff      	cmp	r3, #255	; 0xff
 8009b08:	d105      	bne.n	8009b16 <_fx_directory_entry_read+0x2ea>
 8009b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2bff      	cmp	r3, #255	; 0xff
 8009b14:	d007      	beq.n	8009b26 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 8009b16:	2301      	movs	r3, #1
 8009b18:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b1e:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8009b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b2a:	4413      	add	r3, r2
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d02e      	beq.n	8009b90 <_fx_directory_entry_read+0x364>
 8009b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b36:	4413      	add	r3, r2
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2bff      	cmp	r3, #255	; 0xff
 8009b3c:	d028      	beq.n	8009b90 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8009b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b40:	4613      	mov	r3, r2
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	441a      	add	r2, r3
 8009b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4c:	4413      	add	r3, r2
 8009b4e:	2bfe      	cmp	r3, #254	; 0xfe
 8009b50:	d908      	bls.n	8009b64 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 8009b52:	2301      	movs	r3, #1
 8009b54:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b5a:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 8009b62:	e01c      	b.n	8009b9e <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8009b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b68:	18d1      	adds	r1, r2, r3
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b70:	4613      	mov	r3, r2
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	441a      	add	r2, r3
 8009b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b7c:	4413      	add	r3, r2
 8009b7e:	4403      	add	r3, r0
 8009b80:	780a      	ldrb	r2, [r1, #0]
 8009b82:	701a      	strb	r2, [r3, #0]

                    j++;
 8009b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b86:	3301      	adds	r3, #1
 8009b88:	663b      	str	r3, [r7, #96]	; 0x60
 8009b8a:	e002      	b.n	8009b92 <_fx_directory_entry_read+0x366>
                        continue;
 8009b8c:	bf00      	nop
 8009b8e:	e000      	b.n	8009b92 <_fx_directory_entry_read+0x366>
                        continue;
 8009b90:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b94:	3302      	adds	r3, #2
 8009b96:	667b      	str	r3, [r7, #100]	; 0x64
 8009b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9a:	2b1f      	cmp	r3, #31
 8009b9c:	d99b      	bls.n	8009ad6 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8009b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba0:	f103 0220 	add.w	r2, r3, #32
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d365      	bcc.n	8009c78 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <_fx_directory_entry_read+0x38e>
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d038      	beq.n	8009c2c <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d206      	bcs.n	8009bd4 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc8:	3301      	adds	r3, #1
 8009bca:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8009bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bce:	3301      	adds	r3, #1
 8009bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009bd2:	e038      	b.n	8009c46 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bdc:	69f8      	ldr	r0, [r7, #28]
 8009bde:	f006 fb07 	bl	80101f0 <_fx_utility_FAT_entry_read>
 8009be2:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	e19f      	b.n	8009f2e <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8009bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d907      	bls.n	8009c08 <_fx_directory_entry_read+0x3dc>
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009bfe:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009c02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d301      	bcc.n	8009c0c <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8009c08:	2308      	movs	r3, #8
 8009c0a:	e190      	b.n	8009f2e <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8009c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c0e:	3301      	adds	r3, #1
 8009c10:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1c:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009c1e:	69f9      	ldr	r1, [r7, #28]
 8009c20:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009c22:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009c26:	4413      	add	r3, r2
 8009c28:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009c2a:	e00c      	b.n	8009c46 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8009c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c2e:	3301      	adds	r3, #1
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c3a:	4413      	add	r3, r2
 8009c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d301      	bcc.n	8009c46 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8009c42:	2308      	movs	r3, #8
 8009c44:	e173      	b.n	8009f2e <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c48:	2200      	movs	r2, #0
 8009c4a:	469a      	mov	sl, r3
 8009c4c:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c52:	2203      	movs	r2, #3
 8009c54:	9202      	str	r2, [sp, #8]
 8009c56:	2201      	movs	r2, #1
 8009c58:	9201      	str	r2, [sp, #4]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4652      	mov	r2, sl
 8009c5e:	465b      	mov	r3, fp
 8009c60:	69f8      	ldr	r0, [r7, #28]
 8009c62:	f007 fed3 	bl	8011a0c <_fx_utility_logical_sector_read>
 8009c66:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c70:	e15d      	b.n	8009f2e <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	647b      	str	r3, [r7, #68]	; 0x44
 8009c76:	e002      	b.n	8009c7e <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8009c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7a:	3320      	adds	r3, #32
 8009c7c:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c84:	4413      	add	r3, r2
 8009c86:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f47f af12 	bne.w	8009aba <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	615a      	str	r2, [r3, #20]
 8009c9c:	e001      	b.n	8009ca2 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d102      	bne.n	8009cae <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	2200      	movs	r2, #0
 8009cac:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	667b      	str	r3, [r7, #100]	; 0x64
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8009cc0:	e03d      	b.n	8009d3e <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8009cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc6:	4413      	add	r3, r2
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d03b      	beq.n	8009d46 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 8009cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd2:	4413      	add	r3, r2
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd8:	d101      	bne.n	8009cde <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 8009cda:	2302      	movs	r3, #2
 8009cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 8009cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce2:	4413      	add	r3, r2
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d105      	bne.n	8009cf6 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 8009cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d122      	bne.n	8009d36 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8009cf4:	e01f      	b.n	8009d36 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8009cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d104      	bne.n	8009d06 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8009cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 8009d02:	2301      	movs	r3, #1
 8009d04:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8009d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d108      	bne.n	8009d1e <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8009d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	663a      	str	r2, [r7, #96]	; 0x60
 8009d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d14:	4413      	add	r3, r2
 8009d16:	222e      	movs	r2, #46	; 0x2e
 8009d18:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8009d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d22:	441a      	add	r2, r3
 8009d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d28:	440b      	add	r3, r1
 8009d2a:	7812      	ldrb	r2, [r2, #0]
 8009d2c:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8009d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d30:	3301      	adds	r3, #1
 8009d32:	663b      	str	r3, [r7, #96]	; 0x60
 8009d34:	e000      	b.n	8009d38 <_fx_directory_entry_read+0x50c>
            continue;
 8009d36:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d40:	2b0a      	cmp	r3, #10
 8009d42:	d9be      	bls.n	8009cc2 <_fx_directory_entry_read+0x496>
 8009d44:	e000      	b.n	8009d48 <_fx_directory_entry_read+0x51c>
            break;
 8009d46:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00a      	beq.n	8009d66 <_fx_directory_entry_read+0x53a>
 8009d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2be5      	cmp	r3, #229	; 0xe5
 8009d56:	d106      	bne.n	8009d66 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	22e5      	movs	r2, #229	; 0xe5
 8009d5e:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8009d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8009d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d114      	bne.n	8009d98 <_fx_directory_entry_read+0x56c>
 8009d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d110      	bne.n	8009d98 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	663b      	str	r3, [r7, #96]	; 0x60
 8009d7a:	e00a      	b.n	8009d92 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8009d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d80:	441a      	add	r2, r3
 8009d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d86:	440b      	add	r3, r1
 8009d88:	7812      	ldrb	r2, [r2, #0]
 8009d8a:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d8e:	3301      	adds	r3, #1
 8009d90:	663b      	str	r3, [r7, #96]	; 0x60
 8009d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d94:	2b0a      	cmp	r3, #10
 8009d96:	d9f1      	bls.n	8009d7c <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8009d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d9c:	4413      	add	r3, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8009da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009da4:	330b      	adds	r3, #11
 8009da6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8009da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	643a      	str	r2, [r7, #64]	; 0x40
 8009dae:	781a      	ldrb	r2, [r3, #0]
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8009db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	643a      	str	r2, [r7, #64]	; 0x40
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8009dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d02a      	beq.n	8009e1c <_fx_directory_entry_read+0x5f0>
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	7f5b      	ldrb	r3, [r3, #29]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d024      	beq.n	8009e1c <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8009dd6:	e018      	b.n	8009e0a <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8009dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ddc:	4413      	add	r3, r2
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b40      	cmp	r3, #64	; 0x40
 8009de2:	d90f      	bls.n	8009e04 <_fx_directory_entry_read+0x5d8>
 8009de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de8:	4413      	add	r3, r2
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b5a      	cmp	r3, #90	; 0x5a
 8009dee:	d809      	bhi.n	8009e04 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8009df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009df4:	4413      	add	r3, r2
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dfc:	440b      	add	r3, r1
 8009dfe:	3220      	adds	r2, #32
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e06:	3301      	adds	r3, #1
 8009e08:	663b      	str	r3, [r7, #96]	; 0x60
 8009e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e0c:	2b0b      	cmp	r3, #11
 8009e0e:	d805      	bhi.n	8009e1c <_fx_directory_entry_read+0x5f0>
 8009e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e14:	4413      	add	r3, r2
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1dd      	bne.n	8009dd8 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8009e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	643a      	str	r2, [r7, #64]	; 0x40
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009e28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e2a:	f006 f97b 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e36:	3302      	adds	r3, #2
 8009e38:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e3c:	f006 f972 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009e40:	4602      	mov	r2, r0
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e48:	3302      	adds	r3, #2
 8009e4a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e4e:	f006 f969 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009e52:	4602      	mov	r2, r0
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5a:	3302      	adds	r3, #2
 8009e5c:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8009e66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e68:	f006 f95c 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	041a      	lsls	r2, r3, #16
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8009e7c:	e002      	b.n	8009e84 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2200      	movs	r2, #0
 8009e82:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e86:	3302      	adds	r3, #2
 8009e88:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009e8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e8c:	f006 f94a 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e98:	3302      	adds	r3, #2
 8009e9a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e9e:	f006 f941 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eaa:	3302      	adds	r3, #2
 8009eac:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8009eae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009eb0:	f006 f938 	bl	8010124 <_fx_utility_16_unsigned_read>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	441a      	add	r2, r3
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8009ec6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ec8:	f006 f954 	bl	8010174 <_fx_utility_32_unsigned_read>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2200      	movs	r2, #0
 8009ed0:	461c      	mov	r4, r3
 8009ed2:	4615      	mov	r5, r2
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2200      	movs	r2, #0
 8009ede:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8009ee6:	6939      	ldr	r1, [r7, #16]
 8009ee8:	f04f 0200 	mov.w	r2, #0
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009efe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f04:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00f      	beq.n	8009f2c <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f10:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009f1e:	69b9      	ldr	r1, [r7, #24]
 8009f20:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3768      	adds	r7, #104	; 0x68
 8009f32:	46bd      	mov	sp, r7
 8009f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f38 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8009f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f3c:	b0a2      	sub	sp, #136	; 0x88
 8009f3e:	af04      	add	r7, sp, #16
 8009f40:	6178      	str	r0, [r7, #20]
 8009f42:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2be5      	cmp	r3, #229	; 0xe5
 8009f5a:	d109      	bne.n	8009f70 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f60:	2be5      	cmp	r3, #229	; 0xe5
 8009f62:	d105      	bne.n	8009f70 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	711a      	strb	r2, [r3, #4]
 8009f6e:	e001      	b.n	8009f74 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f78:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009f80:	4613      	mov	r3, r2
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d316      	bcc.n	8009fbc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f94:	1ad2      	subs	r2, r2, r3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8009faa:	6979      	ldr	r1, [r7, #20]
 8009fac:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009fb2:	4413      	add	r3, r2
 8009fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fba:	e003      	b.n	8009fc4 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009fce:	2303      	movs	r3, #3
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	9200      	str	r2, [sp, #0]
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	6978      	ldr	r0, [r7, #20]
 8009fde:	f007 fd15 	bl	8011a0c <_fx_utility_logical_sector_read>
 8009fe2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	f000 bdda 	b.w	800aba4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ffa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ffc:	4413      	add	r3, r2
 8009ffe:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 83cc 	beq.w	800a7a2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	653b      	str	r3, [r7, #80]	; 0x50
 800a00e:	2300      	movs	r3, #0
 800a010:	667b      	str	r3, [r7, #100]	; 0x64
 800a012:	2300      	movs	r3, #0
 800a014:	64bb      	str	r3, [r7, #72]	; 0x48
 800a016:	2300      	movs	r3, #0
 800a018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a01a:	e02c      	b.n	800a076 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a022:	4413      	add	r3, r2
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d108      	bne.n	800a03c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800a02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01e      	beq.n	800a06e <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800a030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a032:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800a034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a036:	3301      	adds	r3, #1
 800a038:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800a03a:	e019      	b.n	800a070 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a042:	4413      	add	r3, r2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b20      	cmp	r3, #32
 800a048:	d012      	beq.n	800a070 <_fx_directory_entry_write+0x138>
 800a04a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a04c:	2b07      	cmp	r3, #7
 800a04e:	d80f      	bhi.n	800a070 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a056:	4413      	add	r3, r2
 800a058:	7819      	ldrb	r1, [r3, #0]
 800a05a:	f107 021c 	add.w	r2, r7, #28
 800a05e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a060:	4413      	add	r3, r2
 800a062:	460a      	mov	r2, r1
 800a064:	701a      	strb	r2, [r3, #0]
                i++;
 800a066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a068:	3301      	adds	r3, #1
 800a06a:	667b      	str	r3, [r7, #100]	; 0x64
 800a06c:	e000      	b.n	800a070 <_fx_directory_entry_write+0x138>
                    continue;
 800a06e:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a072:	3301      	adds	r3, #1
 800a074:	653b      	str	r3, [r7, #80]	; 0x50
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a07c:	4413      	add	r3, r2
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1cb      	bne.n	800a01c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a086:	663b      	str	r3, [r7, #96]	; 0x60
 800a088:	e008      	b.n	800a09c <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a08a:	f107 021c 	add.w	r2, r7, #28
 800a08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a090:	4413      	add	r3, r2
 800a092:	2220      	movs	r2, #32
 800a094:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a098:	3301      	adds	r3, #1
 800a09a:	663b      	str	r3, [r7, #96]	; 0x60
 800a09c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a09e:	2b0a      	cmp	r3, #10
 800a0a0:	d9f3      	bls.n	800a08a <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d03e      	beq.n	800a126 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d008      	beq.n	800a0c8 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0bc:	1c59      	adds	r1, r3, #1
 800a0be:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0c0:	4413      	add	r3, r2
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ce:	4413      	add	r3, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0dc:	1c59      	adds	r1, r3, #1
 800a0de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0e0:	4413      	add	r3, r2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ee:	4413      	add	r3, r2
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d008      	beq.n	800a108 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0fc:	1c59      	adds	r1, r3, #1
 800a0fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800a100:	4413      	add	r3, r2
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a10c:	e008      	b.n	800a120 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a10e:	f107 021c 	add.w	r2, r7, #28
 800a112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a114:	4413      	add	r3, r2
 800a116:	2220      	movs	r2, #32
 800a118:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11c:	3301      	adds	r3, #1
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a122:	2b07      	cmp	r3, #7
 800a124:	d9f3      	bls.n	800a10e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a128:	4b8e      	ldr	r3, [pc, #568]	; (800a364 <_fx_directory_entry_write+0x42c>)
 800a12a:	fba3 2301 	umull	r2, r3, r3, r1
 800a12e:	089a      	lsrs	r2, r3, #2
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	1aca      	subs	r2, r1, r3
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d106      	bne.n	800a14e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a142:	4a88      	ldr	r2, [pc, #544]	; (800a364 <_fx_directory_entry_write+0x42c>)
 800a144:	fba2 2303 	umull	r2, r3, r2, r3
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	657b      	str	r3, [r7, #84]	; 0x54
 800a14c:	e006      	b.n	800a15c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a150:	4a84      	ldr	r2, [pc, #528]	; (800a364 <_fx_directory_entry_write+0x42c>)
 800a152:	fba2 2303 	umull	r2, r3, r2, r3
 800a156:	089b      	lsrs	r3, r3, #2
 800a158:	3301      	adds	r3, #1
 800a15a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a160:	2300      	movs	r3, #0
 800a162:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a164:	2300      	movs	r3, #0
 800a166:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a168:	e03f      	b.n	800a1ea <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a16a:	f107 021c 	add.w	r2, r7, #28
 800a16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a170:	4413      	add	r3, r2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b20      	cmp	r3, #32
 800a176:	d116      	bne.n	800a1a6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a17e:	4413      	add	r3, r2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d035      	beq.n	800a1f2 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a18c:	4413      	add	r3, r2
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b2e      	cmp	r3, #46	; 0x2e
 800a192:	d002      	beq.n	800a19a <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a194:	2300      	movs	r3, #0
 800a196:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a198:	e02c      	b.n	800a1f4 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a19a:	2308      	movs	r3, #8
 800a19c:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a1a4:	e021      	b.n	800a1ea <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a1a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a8:	2b08      	cmp	r3, #8
 800a1aa:	d109      	bne.n	800a1c0 <_fx_directory_entry_write+0x288>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1b2:	4413      	add	r3, r2
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b8:	d102      	bne.n	800a1c0 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a1ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1bc:	3301      	adds	r3, #1
 800a1be:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800a1c0:	f107 021c 	add.w	r2, r7, #28
 800a1c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c6:	4413      	add	r3, r2
 800a1c8:	781a      	ldrb	r2, [r3, #0]
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6819      	ldr	r1, [r3, #0]
 800a1ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1d0:	440b      	add	r3, r1
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d002      	beq.n	800a1de <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800a1dc:	e00a      	b.n	800a1f4 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800a1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800a1e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ec:	2b0a      	cmp	r3, #10
 800a1ee:	d9bc      	bls.n	800a16a <_fx_directory_entry_write+0x232>
 800a1f0:	e000      	b.n	800a1f4 <_fx_directory_entry_write+0x2bc>
                    break;
 800a1f2:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800a1f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <_fx_directory_entry_write+0x2ce>
 800a1fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d101      	bne.n	800a206 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a20c:	4413      	add	r3, r2
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800a218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d15a      	bne.n	800a2d4 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	b29b      	uxth	r3, r3
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800a22a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d901      	bls.n	800a234 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800a230:	2303      	movs	r3, #3
 800a232:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800a234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	667a      	str	r2, [r7, #100]	; 0x64
 800a23a:	3368      	adds	r3, #104	; 0x68
 800a23c:	f107 0210 	add.w	r2, r7, #16
 800a240:	4413      	add	r3, r2
 800a242:	227e      	movs	r2, #126	; 0x7e
 800a244:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800a248:	2300      	movs	r3, #0
 800a24a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a24c:	e03f      	b.n	800a2ce <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800a24e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a250:	2b00      	cmp	r3, #0
 800a252:	d105      	bne.n	800a260 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	0b1b      	lsrs	r3, r3, #12
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a25e:	e015      	b.n	800a28c <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800a260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a262:	2b01      	cmp	r3, #1
 800a264:	d105      	bne.n	800a272 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	0a1b      	lsrs	r3, r3, #8
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a270:	e00c      	b.n	800a28c <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800a272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a274:	2b02      	cmp	r3, #2
 800a276:	d105      	bne.n	800a284 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a282:	e003      	b.n	800a28c <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800a28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d90d      	bls.n	800a2ae <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800a292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a294:	b2da      	uxtb	r2, r3
 800a296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	6679      	str	r1, [r7, #100]	; 0x64
 800a29c:	3237      	adds	r2, #55	; 0x37
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	3368      	adds	r3, #104	; 0x68
 800a2a2:	f107 0110 	add.w	r1, r7, #16
 800a2a6:	440b      	add	r3, r1
 800a2a8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800a2ac:	e00c      	b.n	800a2c8 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800a2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b4:	1c59      	adds	r1, r3, #1
 800a2b6:	6679      	str	r1, [r7, #100]	; 0x64
 800a2b8:	3230      	adds	r2, #48	; 0x30
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	3368      	adds	r3, #104	; 0x68
 800a2be:	f107 0110 	add.w	r1, r7, #16
 800a2c2:	440b      	add	r3, r1
 800a2c4:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800a2c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d9bc      	bls.n	800a24e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800a2da:	7f3b      	ldrb	r3, [r7, #28]
 800a2dc:	2be5      	cmp	r3, #229	; 0xe5
 800a2de:	d104      	bne.n	800a2ea <_fx_directory_entry_write+0x3b2>
 800a2e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800a2e6:	238f      	movs	r3, #143	; 0x8f
 800a2e8:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	667b      	str	r3, [r7, #100]	; 0x64
 800a2ee:	e01d      	b.n	800a32c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800a2f0:	f107 021c 	add.w	r2, r7, #28
 800a2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f6:	4413      	add	r3, r2
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800a2fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a302:	2b60      	cmp	r3, #96	; 0x60
 800a304:	d908      	bls.n	800a318 <_fx_directory_entry_write+0x3e0>
 800a306:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a30a:	2b7a      	cmp	r3, #122	; 0x7a
 800a30c:	d804      	bhi.n	800a318 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a30e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a312:	3b20      	subs	r3, #32
 800a314:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800a318:	f107 021c 	add.w	r2, r7, #28
 800a31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a31e:	4413      	add	r3, r2
 800a320:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a324:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a328:	3301      	adds	r3, #1
 800a32a:	667b      	str	r3, [r7, #100]	; 0x64
 800a32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a32e:	2b0a      	cmp	r3, #10
 800a330:	d9de      	bls.n	800a2f0 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	791b      	ldrb	r3, [r3, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8095 	beq.w	800a466 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a33c:	2300      	movs	r3, #0
 800a33e:	667b      	str	r3, [r7, #100]	; 0x64
 800a340:	e008      	b.n	800a354 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800a342:	f107 021c 	add.w	r2, r7, #28
 800a346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a348:	4413      	add	r3, r2
 800a34a:	2220      	movs	r2, #32
 800a34c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a34e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a350:	3301      	adds	r3, #1
 800a352:	667b      	str	r3, [r7, #100]	; 0x64
 800a354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a356:	2b0a      	cmp	r3, #10
 800a358:	d9f3      	bls.n	800a342 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a35a:	2300      	movs	r3, #0
 800a35c:	667b      	str	r3, [r7, #100]	; 0x64
 800a35e:	2300      	movs	r3, #0
 800a360:	663b      	str	r3, [r7, #96]	; 0x60
 800a362:	e023      	b.n	800a3ac <_fx_directory_entry_write+0x474>
 800a364:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a36c:	4413      	add	r3, r2
 800a36e:	3304      	adds	r3, #4
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b2e      	cmp	r3, #46	; 0x2e
 800a374:	d01e      	beq.n	800a3b4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a37a:	4413      	add	r3, r2
 800a37c:	3304      	adds	r3, #4
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d019      	beq.n	800a3b8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a388:	4413      	add	r3, r2
 800a38a:	3304      	adds	r3, #4
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a392:	f107 021c 	add.w	r2, r7, #28
 800a396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a398:	4413      	add	r3, r2
 800a39a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a39e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a3a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	d9da      	bls.n	800a368 <_fx_directory_entry_write+0x430>
 800a3b2:	e002      	b.n	800a3ba <_fx_directory_entry_write+0x482>
                    break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <_fx_directory_entry_write+0x482>
                    break;
 800a3b8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3be:	4413      	add	r3, r2
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d025      	beq.n	800a414 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3ce:	2308      	movs	r3, #8
 800a3d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a3d2:	e01a      	b.n	800a40a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d8:	4413      	add	r3, r2
 800a3da:	3304      	adds	r3, #4
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d017      	beq.n	800a412 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800a3f0:	f107 021c 	add.w	r2, r7, #28
 800a3f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a3fc:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a3fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a400:	3301      	adds	r3, #1
 800a402:	667b      	str	r3, [r7, #100]	; 0x64
 800a404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a406:	3301      	adds	r3, #1
 800a408:	663b      	str	r3, [r7, #96]	; 0x60
 800a40a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	d9e1      	bls.n	800a3d4 <_fx_directory_entry_write+0x49c>
 800a410:	e000      	b.n	800a414 <_fx_directory_entry_write+0x4dc>
                        break;
 800a412:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a414:	2300      	movs	r3, #0
 800a416:	663b      	str	r3, [r7, #96]	; 0x60
 800a418:	e01d      	b.n	800a456 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800a41a:	f107 021c 	add.w	r2, r7, #28
 800a41e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a420:	4413      	add	r3, r2
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a428:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a42c:	2b60      	cmp	r3, #96	; 0x60
 800a42e:	d908      	bls.n	800a442 <_fx_directory_entry_write+0x50a>
 800a430:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a434:	2b7a      	cmp	r3, #122	; 0x7a
 800a436:	d804      	bhi.n	800a442 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a438:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a43c:	3b20      	subs	r3, #32
 800a43e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a442:	f107 021c 	add.w	r2, r7, #28
 800a446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a448:	4413      	add	r3, r2
 800a44a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a44e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a452:	3301      	adds	r3, #1
 800a454:	663b      	str	r3, [r7, #96]	; 0x60
 800a456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a458:	2b0a      	cmp	r3, #10
 800a45a:	d9de      	bls.n	800a41a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800a45c:	7f3b      	ldrb	r3, [r7, #28]
 800a45e:	2be5      	cmp	r3, #229	; 0xe5
 800a460:	d101      	bne.n	800a466 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800a462:	238f      	movs	r3, #143	; 0x8f
 800a464:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a466:	2300      	movs	r3, #0
 800a468:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46c:	2300      	movs	r3, #0
 800a46e:	667b      	str	r3, [r7, #100]	; 0x64
 800a470:	e016      	b.n	800a4a0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800a472:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a476:	01db      	lsls	r3, r3, #7
 800a478:	b25a      	sxtb	r2, r3
 800a47a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a47e:	085b      	lsrs	r3, r3, #1
 800a480:	b2db      	uxtb	r3, r3
 800a482:	b25b      	sxtb	r3, r3
 800a484:	4313      	orrs	r3, r2
 800a486:	b25b      	sxtb	r3, r3
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	f107 011c 	add.w	r1, r7, #28
 800a48e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a490:	440b      	add	r3, r1
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4413      	add	r3, r2
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a49a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a49c:	3301      	adds	r3, #1
 800a49e:	667b      	str	r3, [r7, #100]	; 0x64
 800a4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a2:	2b0a      	cmp	r3, #10
 800a4a4:	d9e5      	bls.n	800a472 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800a4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800a4b4:	e0f3      	b.n	800a69e <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a4bc:	7f3b      	ldrb	r3, [r7, #28]
 800a4be:	2be5      	cmp	r3, #229	; 0xe5
 800a4c0:	d102      	bne.n	800a4c8 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a4c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c4:	22e5      	movs	r2, #229	; 0xe5
 800a4c6:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800a4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ca:	330b      	adds	r3, #11
 800a4cc:	220f      	movs	r2, #15
 800a4ce:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800a4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4d2:	330c      	adds	r3, #12
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800a4d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4da:	330d      	adds	r3, #13
 800a4dc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a4e0:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800a4e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4e4:	331a      	adds	r3, #26
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800a4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ec:	331b      	adds	r3, #27
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a4f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	3b0d      	subs	r3, #13
 800a504:	663b      	str	r3, [r7, #96]	; 0x60
 800a506:	e03e      	b.n	800a586 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800a508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a50a:	2b0b      	cmp	r3, #11
 800a50c:	d037      	beq.n	800a57e <_fx_directory_entry_write+0x646>
 800a50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a510:	2b1a      	cmp	r3, #26
 800a512:	d034      	beq.n	800a57e <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800a514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a516:	2b0d      	cmp	r3, #13
 800a518:	d102      	bne.n	800a520 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800a51a:	230c      	movs	r3, #12
 800a51c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800a51e:	e02f      	b.n	800a580 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800a520:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00d      	beq.n	800a544 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800a528:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a52c:	4413      	add	r3, r2
 800a52e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a532:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800a534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a536:	3301      	adds	r3, #1
 800a538:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a53a:	4413      	add	r3, r2
 800a53c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	e00e      	b.n	800a562 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a54a:	441a      	add	r2, r3
 800a54c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a54e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a550:	440b      	add	r3, r1
 800a552:	7812      	ldrb	r2, [r2, #0]
 800a554:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800a556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a558:	3301      	adds	r3, #1
 800a55a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a55c:	4413      	add	r3, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a568:	4413      	add	r3, r2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d102      	bne.n	800a576 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800a570:	23ff      	movs	r3, #255	; 0xff
 800a572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800a576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a578:	3301      	adds	r3, #1
 800a57a:	663b      	str	r3, [r7, #96]	; 0x60
 800a57c:	e000      	b.n	800a580 <_fx_directory_entry_write+0x648>
                    continue;
 800a57e:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a582:	3302      	adds	r3, #2
 800a584:	667b      	str	r3, [r7, #100]	; 0x64
 800a586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a588:	2b1f      	cmp	r3, #31
 800a58a:	d9bd      	bls.n	800a508 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800a58c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a58e:	3320      	adds	r3, #32
 800a590:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	3320      	adds	r3, #32
 800a596:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d376      	bcc.n	800a690 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	60bb      	str	r3, [r7, #8]
 800a5a8:	60fa      	str	r2, [r7, #12]
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	9302      	str	r3, [sp, #8]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5ba:	6978      	ldr	r0, [r7, #20]
 800a5bc:	f007 fcba 	bl	8011f34 <_fx_utility_logical_sector_write>
 800a5c0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	e2eb      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d335      	bcc.n	800a642 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d206      	bcs.n	800a5f0 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ee:	e032      	b.n	800a656 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a5f0:	f107 0318 	add.w	r3, r7, #24
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	f005 fdf9 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800a5fe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	e2cc      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2b01      	cmp	r3, #1
 800a612:	d907      	bls.n	800a624 <_fx_directory_entry_write+0x6ec>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a61a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a61e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a620:	429a      	cmp	r2, r3
 800a622:	d301      	bcc.n	800a628 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a624:	2308      	movs	r3, #8
 800a626:	e2bd      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a638:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a63c:	4413      	add	r3, r2
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a640:	e009      	b.n	800a656 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800a642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a644:	3301      	adds	r3, #1
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a64c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d301      	bcc.n	800a656 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a652:	2308      	movs	r3, #8
 800a654:	e2a6      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a658:	2200      	movs	r2, #0
 800a65a:	603b      	str	r3, [r7, #0]
 800a65c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a662:	2203      	movs	r2, #3
 800a664:	9202      	str	r2, [sp, #8]
 800a666:	2201      	movs	r2, #1
 800a668:	9201      	str	r2, [sp, #4]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a670:	6978      	ldr	r0, [r7, #20]
 800a672:	f007 f9cb 	bl	8011a0c <_fx_utility_logical_sector_read>
 800a676:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	e290      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800a68c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a68e:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800a690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a692:	3b01      	subs	r3, #1
 800a694:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800a696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a69c:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800a69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f47f af08 	bne.w	800a4b6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	791b      	ldrb	r3, [r3, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d116      	bne.n	800a6dc <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6b2:	e00f      	b.n	800a6d4 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800a6b4:	f107 021c 	add.w	r2, r7, #28
 800a6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ba:	4413      	add	r3, r2
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800a6c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	677a      	str	r2, [r7, #116]	; 0x74
 800a6c8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a6cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	667b      	str	r3, [r7, #100]	; 0x64
 800a6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d6:	2b0a      	cmp	r3, #10
 800a6d8:	d9ec      	bls.n	800a6b4 <_fx_directory_entry_write+0x77c>
 800a6da:	e1a5      	b.n	800aa28 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	667b      	str	r3, [r7, #100]	; 0x64
 800a6e0:	e007      	b.n	800a6f2 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800a6e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e6:	4413      	add	r3, r2
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f4:	2b0a      	cmp	r3, #10
 800a6f6:	d9f4      	bls.n	800a6e2 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	663b      	str	r3, [r7, #96]	; 0x60
 800a700:	e01c      	b.n	800a73c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a706:	4413      	add	r3, r2
 800a708:	3304      	adds	r3, #4
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	2b2e      	cmp	r3, #46	; 0x2e
 800a70e:	d019      	beq.n	800a744 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a714:	4413      	add	r3, r2
 800a716:	3304      	adds	r3, #4
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d014      	beq.n	800a748 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a71e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a722:	4413      	add	r3, r2
 800a724:	6939      	ldr	r1, [r7, #16]
 800a726:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a728:	440a      	add	r2, r1
 800a72a:	3204      	adds	r2, #4
 800a72c:	7812      	ldrb	r2, [r2, #0]
 800a72e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a732:	3301      	adds	r3, #1
 800a734:	667b      	str	r3, [r7, #100]	; 0x64
 800a736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a738:	3301      	adds	r3, #1
 800a73a:	663b      	str	r3, [r7, #96]	; 0x60
 800a73c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a73e:	2b07      	cmp	r3, #7
 800a740:	d9df      	bls.n	800a702 <_fx_directory_entry_write+0x7ca>
 800a742:	e002      	b.n	800a74a <_fx_directory_entry_write+0x812>
                    break;
 800a744:	bf00      	nop
 800a746:	e000      	b.n	800a74a <_fx_directory_entry_write+0x812>
                    break;
 800a748:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74e:	4413      	add	r3, r2
 800a750:	3304      	adds	r3, #4
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d020      	beq.n	800a79a <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a75a:	3301      	adds	r3, #1
 800a75c:	667b      	str	r3, [r7, #100]	; 0x64
 800a75e:	2308      	movs	r3, #8
 800a760:	663b      	str	r3, [r7, #96]	; 0x60
 800a762:	e015      	b.n	800a790 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a768:	4413      	add	r3, r2
 800a76a:	3304      	adds	r3, #4
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d012      	beq.n	800a798 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a772:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a776:	4413      	add	r3, r2
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a77c:	440a      	add	r2, r1
 800a77e:	3204      	adds	r2, #4
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a786:	3301      	adds	r3, #1
 800a788:	667b      	str	r3, [r7, #100]	; 0x64
 800a78a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a78c:	3301      	adds	r3, #1
 800a78e:	663b      	str	r3, [r7, #96]	; 0x60
 800a790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a792:	2b0a      	cmp	r3, #10
 800a794:	d9e6      	bls.n	800a764 <_fx_directory_entry_write+0x82c>
 800a796:	e000      	b.n	800a79a <_fx_directory_entry_write+0x862>
                        break;
 800a798:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a79a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a79c:	330b      	adds	r3, #11
 800a79e:	677b      	str	r3, [r7, #116]	; 0x74
 800a7a0:	e142      	b.n	800aa28 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 80a1 	beq.w	800a8ee <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	f040 8096 	bne.w	800a8ee <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a7c6:	e08c      	b.n	800a8e2 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2be5      	cmp	r3, #229	; 0xe5
 800a7d0:	d102      	bne.n	800a7d8 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a7d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7d4:	22e5      	movs	r2, #229	; 0xe5
 800a7d6:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a7d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7da:	3320      	adds	r3, #32
 800a7dc:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	3320      	adds	r3, #32
 800a7e2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d376      	bcc.n	800a8dc <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4698      	mov	r8, r3
 800a7f4:	4691      	mov	r9, r2
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	9302      	str	r3, [sp, #8]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4642      	mov	r2, r8
 800a804:	464b      	mov	r3, r9
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f007 fb94 	bl	8011f34 <_fx_utility_logical_sector_write>
 800a80c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	e1c5      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a81e:	429a      	cmp	r2, r3
 800a820:	d335      	bcc.n	800a88e <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a826:	3b01      	subs	r3, #1
 800a828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d206      	bcs.n	800a83c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a830:	3301      	adds	r3, #1
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	3301      	adds	r3, #1
 800a838:	63bb      	str	r3, [r7, #56]	; 0x38
 800a83a:	e032      	b.n	800a8a2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a83c:	f107 0318 	add.w	r3, r7, #24
 800a840:	461a      	mov	r2, r3
 800a842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a844:	6978      	ldr	r0, [r7, #20]
 800a846:	f005 fcd3 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800a84a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	e1a6      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d907      	bls.n	800a870 <_fx_directory_entry_write+0x938>
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a866:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d301      	bcc.n	800a874 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a870:	2308      	movs	r3, #8
 800a872:	e197      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a874:	2300      	movs	r3, #0
 800a876:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a880:	6979      	ldr	r1, [r7, #20]
 800a882:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a884:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a888:	4413      	add	r3, r2
 800a88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88c:	e009      	b.n	800a8a2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a890:	3301      	adds	r3, #1
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d301      	bcc.n	800a8a2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a89e:	2308      	movs	r3, #8
 800a8a0:	e180      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	469a      	mov	sl, r3
 800a8a8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	9202      	str	r2, [sp, #8]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	9201      	str	r2, [sp, #4]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	465b      	mov	r3, fp
 800a8bc:	6978      	ldr	r0, [r7, #20]
 800a8be:	f007 f8a5 	bl	8011a0c <_fx_utility_logical_sector_read>
 800a8c2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	e16a      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a8d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8da:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a8dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8de:	3301      	adds	r3, #1
 800a8e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	f4ff af6d 	bcc.w	800a7c8 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	663b      	str	r3, [r7, #96]	; 0x60
 800a8f2:	e007      	b.n	800a904 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a8f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8f8:	4413      	add	r3, r2
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a900:	3301      	adds	r3, #1
 800a902:	663b      	str	r3, [r7, #96]	; 0x60
 800a904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a906:	2b0a      	cmp	r3, #10
 800a908:	d9f4      	bls.n	800a8f4 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	667b      	str	r3, [r7, #100]	; 0x64
 800a90e:	e007      	b.n	800a920 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a910:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a914:	4413      	add	r3, r2
 800a916:	222e      	movs	r2, #46	; 0x2e
 800a918:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a91a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a91c:	3301      	adds	r3, #1
 800a91e:	667b      	str	r3, [r7, #100]	; 0x64
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a926:	4413      	add	r3, r2
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b2e      	cmp	r3, #46	; 0x2e
 800a92c:	d0f0      	beq.n	800a910 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a934:	4413      	add	r3, r2
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d039      	beq.n	800a9b0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a93c:	2300      	movs	r3, #0
 800a93e:	667b      	str	r3, [r7, #100]	; 0x64
 800a940:	2300      	movs	r3, #0
 800a942:	663b      	str	r3, [r7, #96]	; 0x60
 800a944:	e02d      	b.n	800a9a2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a94c:	4413      	add	r3, r2
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b2e      	cmp	r3, #46	; 0x2e
 800a952:	d02a      	beq.n	800a9aa <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a95a:	4413      	add	r3, r2
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d025      	beq.n	800a9ae <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a968:	4413      	add	r3, r2
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a970:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a974:	2b60      	cmp	r3, #96	; 0x60
 800a976:	d908      	bls.n	800a98a <_fx_directory_entry_write+0xa52>
 800a978:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a97c:	2b7a      	cmp	r3, #122	; 0x7a
 800a97e:	d804      	bhi.n	800a98a <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a980:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a984:	3b20      	subs	r3, #32
 800a986:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a98a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a98c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a98e:	4413      	add	r3, r2
 800a990:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a994:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a998:	3301      	adds	r3, #1
 800a99a:	667b      	str	r3, [r7, #100]	; 0x64
 800a99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a99e:	3301      	adds	r3, #1
 800a9a0:	663b      	str	r3, [r7, #96]	; 0x60
 800a9a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9a4:	2b07      	cmp	r3, #7
 800a9a6:	d9ce      	bls.n	800a946 <_fx_directory_entry_write+0xa0e>
 800a9a8:	e002      	b.n	800a9b0 <_fx_directory_entry_write+0xa78>
                    break;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <_fx_directory_entry_write+0xa78>
                    break;
 800a9ae:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9b6:	4413      	add	r3, r2
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d031      	beq.n	800aa22 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a9be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	667b      	str	r3, [r7, #100]	; 0x64
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a9c8:	e026      	b.n	800aa18 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d0:	4413      	add	r3, r2
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d023      	beq.n	800aa20 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9de:	4413      	add	r3, r2
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a9e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9ea:	2b60      	cmp	r3, #96	; 0x60
 800a9ec:	d908      	bls.n	800aa00 <_fx_directory_entry_write+0xac8>
 800a9ee:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9f2:	2b7a      	cmp	r3, #122	; 0x7a
 800a9f4:	d804      	bhi.n	800aa00 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a9f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9fa:	3b20      	subs	r3, #32
 800a9fc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800aa00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aa02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa04:	4413      	add	r3, r2
 800aa06:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aa0a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aa0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa0e:	3301      	adds	r3, #1
 800aa10:	667b      	str	r3, [r7, #100]	; 0x64
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	3301      	adds	r3, #1
 800aa16:	663b      	str	r3, [r7, #96]	; 0x60
 800aa18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa1a:	2b0a      	cmp	r3, #10
 800aa1c:	d9d5      	bls.n	800a9ca <_fx_directory_entry_write+0xa92>
 800aa1e:	e000      	b.n	800aa22 <_fx_directory_entry_write+0xaea>
                    break;
 800aa20:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800aa22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa24:	330b      	adds	r3, #11
 800aa26:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800aa28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	677a      	str	r2, [r7, #116]	; 0x74
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	7f12      	ldrb	r2, [r2, #28]
 800aa32:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800aa34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	677a      	str	r2, [r7, #116]	; 0x74
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	7f52      	ldrb	r2, [r2, #29]
 800aa3e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800aa40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	677a      	str	r2, [r7, #116]	; 0x74
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	7f92      	ldrb	r2, [r2, #30]
 800aa4a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	4619      	mov	r1, r3
 800aa52:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa54:	f005 fb79 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa62:	4619      	mov	r1, r3
 800aa64:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa66:	f005 fb70 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa74:	4619      	mov	r1, r3
 800aa76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa78:	f005 fb67 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa7e:	3302      	adds	r3, #2
 800aa80:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8e:	0c1b      	lsrs	r3, r3, #16
 800aa90:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800aa92:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa94:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa96:	f005 fb58 	bl	801014a <_fx_utility_16_unsigned_write>
 800aa9a:	e003      	b.n	800aaa4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aaa0:	f005 fb53 	bl	801014a <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aaa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa6:	3302      	adds	r3, #2
 800aaa8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaae:	4619      	mov	r1, r3
 800aab0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aab2:	f005 fb4a 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab8:	3302      	adds	r3, #2
 800aaba:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac0:	4619      	mov	r1, r3
 800aac2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aac4:	f005 fb41 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaca:	3302      	adds	r3, #2
 800aacc:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	4619      	mov	r1, r3
 800aad4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aad6:	f005 fb38 	bl	801014a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aadc:	3302      	adds	r3, #2
 800aade:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800aae6:	4613      	mov	r3, r2
 800aae8:	4619      	mov	r1, r3
 800aaea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aaec:	f005 fb5f 	bl	80101ae <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	461c      	mov	r4, r3
 800aaf6:	4615      	mov	r5, r2
 800aaf8:	2303      	movs	r3, #3
 800aafa:	9302      	str	r3, [sp, #8]
 800aafc:	2301      	movs	r3, #1
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4622      	mov	r2, r4
 800ab06:	462b      	mov	r3, r5
 800ab08:	6978      	ldr	r0, [r7, #20]
 800ab0a:	f007 fa13 	bl	8011f34 <_fx_utility_logical_sector_write>
 800ab0e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	e044      	b.n	800aba4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d03e      	beq.n	800aba2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800ab30:	4299      	cmp	r1, r3
 800ab32:	bf08      	it	eq
 800ab34:	4290      	cmpeq	r0, r2
 800ab36:	d134      	bne.n	800aba2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d12d      	bne.n	800aba2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ab56:	6979      	ldr	r1, [r7, #20]
 800ab58:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	7f1a      	ldrb	r2, [r3, #28]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	7f5a      	ldrb	r2, [r3, #29]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	7f9a      	ldrb	r2, [r3, #30]
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3778      	adds	r7, #120	; 0x78
 800aba8:	46bd      	mov	sp, r7
 800abaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abae:	bf00      	nop

0800abb0 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800abb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abb4:	b0a8      	sub	sp, #160	; 0xa0
 800abb6:	af04      	add	r7, sp, #16
 800abb8:	6278      	str	r0, [r7, #36]	; 0x24
 800abba:	6239      	str	r1, [r7, #32]
 800abbc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	67bb      	str	r3, [r7, #120]	; 0x78
 800abd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abd2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	2200      	movs	r2, #0
 800abd8:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b2e      	cmp	r3, #46	; 0x2e
 800abe2:	d108      	bne.n	800abf6 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b2e      	cmp	r3, #46	; 0x2e
 800abee:	d102      	bne.n	800abf6 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800abf0:	230c      	movs	r3, #12
 800abf2:	f000 bc17 	b.w	800b424 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800abf6:	2300      	movs	r3, #0
 800abf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abfc:	2300      	movs	r3, #0
 800abfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac02:	e13d      	b.n	800ae80 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac0c:	4413      	add	r3, r2
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b40      	cmp	r3, #64	; 0x40
 800ac12:	d908      	bls.n	800ac26 <_fx_directory_free_search+0x76>
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac1c:	4413      	add	r3, r2
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b5a      	cmp	r3, #90	; 0x5a
 800ac22:	f240 8121 	bls.w	800ae68 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac2e:	4413      	add	r3, r2
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b2f      	cmp	r3, #47	; 0x2f
 800ac34:	d908      	bls.n	800ac48 <_fx_directory_free_search+0x98>
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac3e:	4413      	add	r3, r2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b39      	cmp	r3, #57	; 0x39
 800ac44:	f240 8112 	bls.w	800ae6c <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac50:	4413      	add	r3, r2
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b60      	cmp	r3, #96	; 0x60
 800ac56:	d90b      	bls.n	800ac70 <_fx_directory_free_search+0xc0>
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b7a      	cmp	r3, #122	; 0x7a
 800ac66:	d803      	bhi.n	800ac70 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	615a      	str	r2, [r3, #20]
 800ac6e:	e102      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac78:	4413      	add	r3, r2
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b20      	cmp	r3, #32
 800ac7e:	d103      	bne.n	800ac88 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	2201      	movs	r2, #1
 800ac84:	615a      	str	r2, [r3, #20]
 800ac86:	e0f6      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac90:	4413      	add	r3, r2
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	2b2e      	cmp	r3, #46	; 0x2e
 800ac96:	d114      	bne.n	800acc2 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800ac98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10c      	bne.n	800acba <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800aca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800aca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acac:	2b00      	cmp	r3, #0
 800acae:	f040 80e2 	bne.w	800ae76 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	2201      	movs	r2, #1
 800acb6:	615a      	str	r2, [r3, #20]
 800acb8:	e0dd      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	2201      	movs	r2, #1
 800acbe:	615a      	str	r2, [r3, #20]
 800acc0:	e0d9      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acca:	4413      	add	r3, r2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2be5      	cmp	r3, #229	; 0xe5
 800acd0:	d103      	bne.n	800acda <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	2201      	movs	r2, #1
 800acd6:	615a      	str	r2, [r3, #20]
 800acd8:	e0cd      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ace2:	4413      	add	r3, r2
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	b25b      	sxtb	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f2c0 80c1 	blt.w	800ae70 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acf6:	4413      	add	r3, r2
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b7e      	cmp	r3, #126	; 0x7e
 800acfc:	f000 80ba 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad08:	4413      	add	r3, r2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800ad0c:	2b2d      	cmp	r3, #45	; 0x2d
 800ad0e:	f000 80b1 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad1a:	4413      	add	r3, r2
 800ad1c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800ad1e:	2b5f      	cmp	r3, #95	; 0x5f
 800ad20:	f000 80a8 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad2c:	4413      	add	r3, r2
 800ad2e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800ad30:	2b7d      	cmp	r3, #125	; 0x7d
 800ad32:	f000 809f 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad3e:	4413      	add	r3, r2
 800ad40:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ad42:	2b7b      	cmp	r3, #123	; 0x7b
 800ad44:	f000 8096 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad50:	4413      	add	r3, r2
 800ad52:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800ad54:	2b28      	cmp	r3, #40	; 0x28
 800ad56:	f000 808d 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad62:	4413      	add	r3, r2
 800ad64:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad66:	2b29      	cmp	r3, #41	; 0x29
 800ad68:	f000 8084 	beq.w	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad74:	4413      	add	r3, r2
 800ad76:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad78:	2b60      	cmp	r3, #96	; 0x60
 800ad7a:	d07b      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad88:	2b27      	cmp	r3, #39	; 0x27
 800ad8a:	d073      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad94:	4413      	add	r3, r2
 800ad96:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ad98:	2b21      	cmp	r3, #33	; 0x21
 800ad9a:	d06b      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ada4:	4413      	add	r3, r2
 800ada6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800ada8:	2b23      	cmp	r3, #35	; 0x23
 800adaa:	d063      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb4:	4413      	add	r3, r2
 800adb6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800adb8:	2b24      	cmp	r3, #36	; 0x24
 800adba:	d05b      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800adc8:	2b26      	cmp	r3, #38	; 0x26
 800adca:	d053      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800add4:	4413      	add	r3, r2
 800add6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800add8:	2b40      	cmp	r3, #64	; 0x40
 800adda:	d04b      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ade4:	4413      	add	r3, r2
 800ade6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800ade8:	2b5e      	cmp	r3, #94	; 0x5e
 800adea:	d043      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf4:	4413      	add	r3, r2
 800adf6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800adf8:	2b25      	cmp	r3, #37	; 0x25
 800adfa:	d03b      	beq.n	800ae74 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae04:	4413      	add	r3, r2
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b2b      	cmp	r3, #43	; 0x2b
 800ae0a:	d027      	beq.n	800ae5c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae14:	4413      	add	r3, r2
 800ae16:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800ae18:	2b2c      	cmp	r3, #44	; 0x2c
 800ae1a:	d01f      	beq.n	800ae5c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae24:	4413      	add	r3, r2
 800ae26:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800ae28:	2b3b      	cmp	r3, #59	; 0x3b
 800ae2a:	d017      	beq.n	800ae5c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ae38:	2b3d      	cmp	r3, #61	; 0x3d
 800ae3a:	d00f      	beq.n	800ae5c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae44:	4413      	add	r3, r2
 800ae46:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ae48:	2b5b      	cmp	r3, #91	; 0x5b
 800ae4a:	d007      	beq.n	800ae5c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae54:	4413      	add	r3, r2
 800ae56:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae58:	2b5d      	cmp	r3, #93	; 0x5d
 800ae5a:	d103      	bne.n	800ae64 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	615a      	str	r2, [r3, #20]
 800ae62:	e008      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800ae64:	230c      	movs	r3, #12
 800ae66:	e2dd      	b.n	800b424 <_fx_directory_free_search+0x874>
            continue;
 800ae68:	bf00      	nop
 800ae6a:	e004      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
            continue;
 800ae6c:	bf00      	nop
 800ae6e:	e002      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
            continue;
 800ae70:	bf00      	nop
 800ae72:	e000      	b.n	800ae76 <_fx_directory_free_search+0x2c6>
            continue;
 800ae74:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ae76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae88:	4413      	add	r3, r2
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f47f aeb9 	bne.w	800ac04 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800ae92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800ae9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ae9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d902      	bls.n	800aeae <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800aeae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeb2:	2b0c      	cmp	r3, #12
 800aeb4:	d818      	bhi.n	800aee8 <_fx_directory_free_search+0x338>
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d114      	bne.n	800aee8 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800aec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d806      	bhi.n	800aeda <_fx_directory_free_search+0x32a>
 800aecc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d928      	bls.n	800af2c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	2201      	movs	r2, #1
 800aede:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800aee0:	2302      	movs	r3, #2
 800aee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800aee6:	e021      	b.n	800af2c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800aee8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800aeec:	4b95      	ldr	r3, [pc, #596]	; (800b144 <_fx_directory_free_search+0x594>)
 800aeee:	fba3 2301 	umull	r2, r3, r3, r1
 800aef2:	089a      	lsrs	r2, r3, #2
 800aef4:	4613      	mov	r3, r2
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	1aca      	subs	r2, r1, r3
 800af00:	2a00      	cmp	r2, #0
 800af02:	d109      	bne.n	800af18 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800af04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af08:	4a8e      	ldr	r2, [pc, #568]	; (800b144 <_fx_directory_free_search+0x594>)
 800af0a:	fba2 2303 	umull	r2, r3, r2, r3
 800af0e:	089b      	lsrs	r3, r3, #2
 800af10:	3301      	adds	r3, #1
 800af12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af16:	e00a      	b.n	800af2e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800af18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af1c:	4a89      	ldr	r2, [pc, #548]	; (800b144 <_fx_directory_free_search+0x594>)
 800af1e:	fba2 2303 	umull	r2, r3, r2, r3
 800af22:	089b      	lsrs	r3, r3, #2
 800af24:	3302      	adds	r3, #2
 800af26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af2a:	e000      	b.n	800af2e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800af2c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00c      	beq.n	800af52 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800af3e:	4613      	mov	r3, r2
 800af40:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800af46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af48:	2200      	movs	r2, #0
 800af4a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800af4c:	2302      	movs	r3, #2
 800af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af50:	e006      	b.n	800af60 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af56:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800af60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af62:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800af64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af6e:	f7fe fc5d 	bl	800982c <_fx_directory_entry_read>
 800af72:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800af74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800af7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af7c:	e252      	b.n	800b424 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2be5      	cmp	r3, #229	; 0xe5
 800af86:	d103      	bne.n	800af90 <_fx_directory_free_search+0x3e0>
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	791b      	ldrb	r3, [r3, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800af96:	2b00      	cmp	r3, #0
 800af98:	d16b      	bne.n	800b072 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800af9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d91a      	bls.n	800afd8 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d115      	bne.n	800afd8 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	2200      	movs	r2, #0
 800afb0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	23e5      	movs	r3, #229	; 0xe5
 800afb8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	2300      	movs	r3, #0
 800afc2:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800afc4:	69f9      	ldr	r1, [r7, #28]
 800afc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afc8:	f7fe ffb6 	bl	8009f38 <_fx_directory_entry_write>
 800afcc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800afce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800afd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd6:	e225      	b.n	800b424 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800afd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d109      	bne.n	800aff4 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800afea:	4613      	mov	r3, r2
 800afec:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff2:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800aff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	3301      	adds	r3, #1
 800affc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b000:	429a      	cmp	r2, r3
 800b002:	d838      	bhi.n	800b076 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800b004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b006:	2200      	movs	r2, #0
 800b008:	461c      	mov	r4, r3
 800b00a:	4615      	mov	r5, r2
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b016:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	2200      	movs	r2, #0
 800b01c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	2200      	movs	r2, #0
 800b022:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b024:	f3ef 8310 	mrs	r3, PRIMASK
 800b028:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b02c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b02e:	b672      	cpsid	i
#endif
    return(int_posture);
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800b032:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800b034:	4b44      	ldr	r3, [pc, #272]	; (800b148 <_fx_directory_free_search+0x598>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800b03c:	4b43      	ldr	r3, [pc, #268]	; (800b14c <_fx_directory_free_search+0x59c>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b044:	4b41      	ldr	r3, [pc, #260]	; (800b14c <_fx_directory_free_search+0x59c>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	629a      	str	r2, [r3, #40]	; 0x28
 800b04c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b052:	f383 8810 	msr	PRIMASK, r3
}
 800b056:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800b058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d103      	bne.n	800b068 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2200      	movs	r2, #0
 800b064:	615a      	str	r2, [r3, #20]
 800b066:	e002      	b.n	800b06e <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2201      	movs	r2, #1
 800b06c:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800b06e:	2300      	movs	r3, #0
 800b070:	e1d8      	b.n	800b424 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800b072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b074:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b078:	3301      	adds	r3, #1
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b080:	429a      	cmp	r2, r3
 800b082:	f200 81c9 	bhi.w	800b418 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b090:	4413      	add	r3, r2
 800b092:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b098:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09c:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a4:	4413      	add	r3, r2
 800b0a6:	1e5a      	subs	r2, r3, #1
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800b0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <_fx_directory_free_search+0x512>
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 81ab 	beq.w	800b418 <_fx_directory_free_search+0x868>
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	f200 81a5 	bhi.w	800b418 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d6:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0e2:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800b0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800b0e8:	e10b      	b.n	800b302 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800b0ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800b0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	e194      	b.n	800b424 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800b0fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b0fe:	461a      	mov	r2, r3
 800b100:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b104:	f005 f874 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800b108:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b112:	e187      	b.n	800b424 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800b114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b116:	3b01      	subs	r3, #1
 800b118:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d117      	bne.n	800b150 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800b120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b134:	3302      	adds	r3, #2
 800b136:	429a      	cmp	r2, r3
 800b138:	d316      	bcc.n	800b168 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	2202      	movs	r2, #2
 800b13e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800b142:	e011      	b.n	800b168 <_fx_directory_free_search+0x5b8>
 800b144:	4ec4ec4f 	.word	0x4ec4ec4f
 800b148:	24014c94 	.word	0x24014c94
 800b14c:	24014c90 	.word	0x24014c90
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800b150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b152:	3301      	adds	r3, #1
 800b154:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	3302      	adds	r3, #2
 800b15c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b15e:	429a      	cmp	r2, r3
 800b160:	d3c6      	bcc.n	800b0f0 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800b162:	2302      	movs	r3, #2
 800b164:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800b166:	e7c3      	b.n	800b0f0 <_fx_directory_free_search+0x540>
                            break;
 800b168:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b16e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b170:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b176:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b17a:	440b      	add	r3, r1
 800b17c:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b182:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b186:	2200      	movs	r2, #0
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b190:	2303      	movs	r3, #3
 800b192:	9302      	str	r3, [sp, #8]
 800b194:	2301      	movs	r3, #1
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	9200      	str	r2, [sp, #0]
 800b19a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b19e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1a0:	f006 fc34 	bl	8011a0c <_fx_utility_logical_sector_read>
 800b1a4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800b1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ae:	e139      	b.n	800b424 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b1be:	e00d      	b.n	800b1dc <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800b1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800b1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800b1d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d3eb      	bcc.n	800b1c0 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	60bb      	str	r3, [r7, #8]
 800b1ee:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	9302      	str	r3, [sp, #8]
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	9200      	str	r2, [sp, #0]
 800b1fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b204:	f006 fe96 	bl	8011f34 <_fx_utility_logical_sector_write>
 800b208:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800b20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800b210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b212:	e107      	b.n	800b424 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800b214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b216:	2b01      	cmp	r3, #1
 800b218:	d95a      	bls.n	800b2d0 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800b21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21c:	3301      	adds	r3, #1
 800b21e:	2200      	movs	r2, #0
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b226:	3b01      	subs	r3, #1
 800b228:	2200      	movs	r2, #0
 800b22a:	4698      	mov	r8, r3
 800b22c:	4691      	mov	r9, r2
 800b22e:	2301      	movs	r3, #1
 800b230:	9302      	str	r3, [sp, #8]
 800b232:	e9cd 8900 	strd	r8, r9, [sp]
 800b236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b23c:	f006 f9d0 	bl	80115e0 <_fx_utility_logical_sector_flush>
 800b240:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800b242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800b248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24a:	e0eb      	b.n	800b424 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800b24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b24e:	3b01      	subs	r3, #1
 800b250:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b252:	e03a      	b.n	800b2ca <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	2201      	movs	r2, #1
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	2290      	movs	r2, #144	; 0x90
 800b26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800b27c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b280:	441a      	add	r2, r3
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	2201      	movs	r2, #1
 800b28c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	2203      	movs	r2, #3
 800b294:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	2201      	movs	r2, #1
 800b29c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2a8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2c2:	e0af      	b.n	800b424 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800b2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1c1      	bne.n	800b254 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800b2d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800b2d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2d8:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800b2da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00a      	beq.n	800b2f6 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800b2e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b2e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2e6:	f005 f9ac 	bl	8010642 <_fx_utility_FAT_entry_write>
 800b2ea:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800b2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f4:	e096      	b.n	800b424 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800b2f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2f8:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b300:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800b302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b304:	2b00      	cmp	r3, #0
 800b306:	f47f aef0 	bne.w	800b0ea <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b310:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800b314:	461a      	mov	r2, r3
 800b316:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b31a:	f005 f992 	bl	8010642 <_fx_utility_FAT_entry_write>
 800b31e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800b320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b328:	e07c      	b.n	800b424 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800b32a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800b330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b334:	673b      	str	r3, [r7, #112]	; 0x70
 800b336:	e002      	b.n	800b33e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b33c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800b33e:	2300      	movs	r3, #0
 800b340:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800b342:	2300      	movs	r3, #0
 800b344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b348:	e024      	b.n	800b394 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800b34a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b34e:	461a      	mov	r2, r3
 800b350:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b354:	f004 ff4c 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800b358:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800b35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b35e:	3301      	adds	r3, #1
 800b360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800b36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36c:	e05a      	b.n	800b424 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800b36e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b370:	2b01      	cmp	r3, #1
 800b372:	d909      	bls.n	800b388 <_fx_directory_free_search+0x7d8>
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b378:	429a      	cmp	r2, r3
 800b37a:	d005      	beq.n	800b388 <_fx_directory_free_search+0x7d8>
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b384:	429a      	cmp	r2, r3
 800b386:	d901      	bls.n	800b38c <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b388:	2303      	movs	r3, #3
 800b38a:	e04b      	b.n	800b424 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800b38c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b38e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b39a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b39e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d3d2      	bcc.n	800b34a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3aa:	1ad2      	subs	r2, r2, r3
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3b6:	fb03 f202 	mul.w	r2, r3, r2
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	fb02 f303 	mul.w	r3, r2, r3
 800b3c2:	095b      	lsrs	r3, r3, #5
 800b3c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3c6:	4413      	add	r3, r2
 800b3c8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2be5      	cmp	r3, #229	; 0xe5
 800b3d2:	d103      	bne.n	800b3dc <_fx_directory_free_search+0x82c>
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	791b      	ldrb	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800b3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3de:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800b3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	469a      	mov	sl, r3
 800b3e6:	4693      	mov	fp, r2
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d005      	beq.n	800b402 <_fx_directory_free_search+0x852>
 800b3f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b400:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800b402:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b404:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b408:	f005 f91b 	bl	8010642 <_fx_utility_FAT_entry_write>
 800b40c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800b40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800b414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b416:	e005      	b.n	800b424 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b41c:	429a      	cmp	r2, r3
 800b41e:	f63f ada1 	bhi.w	800af64 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800b422:	230a      	movs	r3, #10
}
 800b424:	4618      	mov	r0, r3
 800b426:	3790      	adds	r7, #144	; 0x90
 800b428:	46bd      	mov	sp, r7
 800b42a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b42e:	bf00      	nop

0800b430 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b5c      	cmp	r3, #92	; 0x5c
 800b446:	d003      	beq.n	800b450 <_fx_directory_name_extract+0x20>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b2f      	cmp	r3, #47	; 0x2f
 800b44e:	d106      	bne.n	800b45e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3301      	adds	r3, #1
 800b454:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800b456:	e002      	b.n	800b45e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3301      	adds	r3, #1
 800b45c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b20      	cmp	r3, #32
 800b464:	d0f8      	beq.n	800b458 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b46a:	e015      	b.n	800b498 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b5c      	cmp	r3, #92	; 0x5c
 800b472:	d017      	beq.n	800b4a4 <_fx_directory_name_extract+0x74>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b2f      	cmp	r3, #47	; 0x2f
 800b47a:	d013      	beq.n	800b4a4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2bff      	cmp	r3, #255	; 0xff
 800b480:	d00f      	beq.n	800b4a2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	440a      	add	r2, r1
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3301      	adds	r3, #1
 800b496:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e5      	bne.n	800b46c <_fx_directory_name_extract+0x3c>
 800b4a0:	e000      	b.n	800b4a4 <_fx_directory_name_extract+0x74>
            break;
 800b4a2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800b4ba:	e007      	b.n	800b4cc <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d0f1      	beq.n	800b4bc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800b4e4:	687b      	ldr	r3, [r7, #4]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800b4f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4f8:	b0c0      	sub	sp, #256	; 0x100
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4fe:	62b9      	str	r1, [r7, #40]	; 0x28
 800b500:	627a      	str	r2, [r7, #36]	; 0x24
 800b502:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800b52a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	2300      	movs	r3, #0
 800b53a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b5c      	cmp	r3, #92	; 0x5c
 800b542:	d003      	beq.n	800b54c <_fx_directory_search+0x58>
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b2f      	cmp	r3, #47	; 0x2f
 800b54a:	d103      	bne.n	800b554 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b552:	e044      	b.n	800b5de <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800b554:	4bab      	ldr	r3, [pc, #684]	; (800b804 <_fx_directory_search+0x310>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d022      	beq.n	800b5a6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800b560:	4ba8      	ldr	r3, [pc, #672]	; (800b804 <_fx_directory_search+0x310>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d016      	beq.n	800b59e <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800b570:	4ba4      	ldr	r3, [pc, #656]	; (800b804 <_fx_directory_search+0x310>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b578:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b57c:	4619      	mov	r1, r3
 800b57e:	2370      	movs	r3, #112	; 0x70
 800b580:	461a      	mov	r2, r3
 800b582:	f00b f819 	bl	80165b8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800b586:	4b9f      	ldr	r3, [pc, #636]	; (800b804 <_fx_directory_search+0x310>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58e:	3370      	adds	r3, #112	; 0x70
 800b590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800b594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b59c:	e01f      	b.n	800b5de <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5a4:	e01b      	b.n	800b5de <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d012      	beq.n	800b5d8 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b5b8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800b5bc:	2370      	movs	r3, #112	; 0x70
 800b5be:	461a      	mov	r2, r3
 800b5c0:	f00a fffa 	bl	80165b8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800b5ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800b5ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5d6:	e002      	b.n	800b5de <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e0:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 81b9 	beq.w	800b95c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b5f6:	d02d      	beq.n	800b654 <_fx_directory_search+0x160>
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b2f      	cmp	r3, #47	; 0x2f
 800b5fe:	d14c      	bne.n	800b69a <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b600:	e028      	b.n	800b654 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800b602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800b610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b616:	4413      	add	r3, r2
 800b618:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800b622:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b626:	2b5c      	cmp	r3, #92	; 0x5c
 800b628:	d102      	bne.n	800b630 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800b62a:	232f      	movs	r3, #47	; 0x2f
 800b62c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800b630:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b634:	2b5c      	cmp	r3, #92	; 0x5c
 800b636:	d102      	bne.n	800b63e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800b638:	232f      	movs	r3, #47	; 0x2f
 800b63a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800b63e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b642:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b646:	429a      	cmp	r2, r3
 800b648:	d110      	bne.n	800b66c <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800b64a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64e:	3301      	adds	r3, #1
 800b650:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b658:	2bfe      	cmp	r3, #254	; 0xfe
 800b65a:	d808      	bhi.n	800b66e <_fx_directory_search+0x17a>
 800b65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b662:	4413      	add	r3, r2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1cb      	bne.n	800b602 <_fx_directory_search+0x10e>
 800b66a:	e000      	b.n	800b66e <_fx_directory_search+0x17a>
                    break;
 800b66c:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	4413      	add	r3, r2
 800b676:	7819      	ldrb	r1, [r3, #0]
 800b678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67e:	4413      	add	r3, r2
 800b680:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	4299      	cmp	r1, r3
 800b688:	d003      	beq.n	800b692 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800b68a:	2300      	movs	r3, #0
 800b68c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b690:	e0cf      	b.n	800b832 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800b692:	2301      	movs	r3, #1
 800b694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b698:	e0cb      	b.n	800b832 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800b6a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d043      	beq.n	800b730 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b6a8:	e029      	b.n	800b6fe <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800b6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800b6bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c4:	4413      	add	r3, r2
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b6cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b6d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6d2:	d102      	bne.n	800b6da <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800b6d4:	232f      	movs	r3, #47	; 0x2f
 800b6d6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b6da:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b6de:	2b5c      	cmp	r3, #92	; 0x5c
 800b6e0:	d102      	bne.n	800b6e8 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800b6e2:	232f      	movs	r3, #47	; 0x2f
 800b6e4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b6e8:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b6ec:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d111      	bne.n	800b718 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b702:	2bfe      	cmp	r3, #254	; 0xfe
 800b704:	d809      	bhi.n	800b71a <_fx_directory_search+0x226>
 800b706:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70e:	4413      	add	r3, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1c9      	bne.n	800b6aa <_fx_directory_search+0x1b6>
 800b716:	e000      	b.n	800b71a <_fx_directory_search+0x226>
                        break;
 800b718:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800b71a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b722:	4413      	add	r3, r2
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800b730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d07c      	beq.n	800b832 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73e:	4413      	add	r3, r2
 800b740:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b5c      	cmp	r3, #92	; 0x5c
 800b748:	d00c      	beq.n	800b764 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800b74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b750:	4413      	add	r3, r2
 800b752:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b756:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b758:	2b2f      	cmp	r3, #47	; 0x2f
 800b75a:	d003      	beq.n	800b764 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b762:	e004      	b.n	800b76e <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800b764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b768:	3301      	adds	r3, #1
 800b76a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800b76e:	2300      	movs	r3, #0
 800b770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b774:	e02d      	b.n	800b7d2 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800b776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b778:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b77c:	4413      	add	r3, r2
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800b784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b796:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b79a:	2b5c      	cmp	r3, #92	; 0x5c
 800b79c:	d102      	bne.n	800b7a4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800b79e:	232f      	movs	r3, #47	; 0x2f
 800b7a0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b7a4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7aa:	d102      	bne.n	800b7b2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800b7ac:	232f      	movs	r3, #47	; 0x2f
 800b7ae:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b7b2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b7b6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d119      	bne.n	800b7f2 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800b7c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b7d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d6:	2bfe      	cmp	r3, #254	; 0xfe
 800b7d8:	d80c      	bhi.n	800b7f4 <_fx_directory_search+0x300>
 800b7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7e0:	4413      	add	r3, r2
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <_fx_directory_search+0x300>
 800b7e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1c2      	bne.n	800b776 <_fx_directory_search+0x282>
 800b7f0:	e000      	b.n	800b7f4 <_fx_directory_search+0x300>
                        break;
 800b7f2:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f8:	2bff      	cmp	r3, #255	; 0xff
 800b7fa:	d905      	bls.n	800b808 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b802:	e016      	b.n	800b832 <_fx_directory_search+0x33e>
 800b804:	24014f1c 	.word	0x24014f1c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800b808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d010      	beq.n	800b832 <_fx_directory_search+0x33e>
 800b810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b812:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b816:	4413      	add	r3, r2
 800b818:	7819      	ldrb	r1, [r3, #0]
 800b81a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b820:	4413      	add	r3, r2
 800b822:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	4299      	cmp	r1, r3
 800b82a:	d002      	beq.n	800b832 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800b832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b836:	2b00      	cmp	r3, #0
 800b838:	f000 8090 	beq.w	800b95c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800b844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	4610      	mov	r0, r2
 800b84a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b84e:	2270      	movs	r2, #112	; 0x70
 800b850:	4619      	mov	r1, r3
 800b852:	f00a feb1 	bl	80165b8 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b85c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b85e:	2300      	movs	r3, #0
 800b860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b864:	e01d      	b.n	800b8a2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800b866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b86a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b86e:	4413      	add	r3, r2
 800b870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b872:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b876:	440a      	add	r2, r1
 800b878:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800b880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b888:	4413      	add	r3, r2
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b894:	2bfe      	cmp	r3, #254	; 0xfe
 800b896:	d909      	bls.n	800b8ac <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b89c:	3301      	adds	r3, #1
 800b89e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8a6:	2bff      	cmp	r3, #255	; 0xff
 800b8a8:	d9dd      	bls.n	800b866 <_fx_directory_search+0x372>
 800b8aa:	e000      	b.n	800b8ae <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800b8ac:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d041      	beq.n	800b938 <_fx_directory_search+0x444>
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d03c      	beq.n	800b938 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800b8c6:	6a3a      	ldr	r2, [r7, #32]
 800b8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b8d0:	2270      	movs	r2, #112	; 0x70
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f00a fe70 	bl	80165b8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8de:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8f0:	e01c      	b.n	800b92c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b8f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8fa:	441a      	add	r2, r3
 800b8fc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b904:	440b      	add	r3, r1
 800b906:	7812      	ldrb	r2, [r2, #0]
 800b908:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800b90a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b90e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b912:	4413      	add	r3, r2
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d103      	bne.n	800b922 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b91e:	2bfe      	cmp	r3, #254	; 0xfe
 800b920:	d909      	bls.n	800b936 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b926:	3301      	adds	r3, #1
 800b928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b92c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b930:	2bff      	cmp	r3, #255	; 0xff
 800b932:	d9de      	bls.n	800b8f2 <_fx_directory_search+0x3fe>
 800b934:	e000      	b.n	800b938 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800b936:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800b938:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800b940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b948:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800b958:	2300      	movs	r3, #0
 800b95a:	e2ff      	b.n	800bf5c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b95c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b95e:	2300      	movs	r3, #0
 800b960:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800b964:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d003      	beq.n	800b974 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800b96c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800b974:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b97a:	f7ff fd59 	bl	800b430 <_fx_directory_name_extract>
 800b97e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800b980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 80be 	beq.w	800bb06 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b98a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b98e:	2300      	movs	r3, #0
 800b990:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800b992:	2300      	movs	r3, #0
 800b994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800b998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b99e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b9a2:	e02b      	b.n	800b9fc <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800b9a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b9ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b9b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ba:	f004 fc19 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800b9be:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800b9c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800b9ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9ce:	e2c5      	b.n	800bf5c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800b9d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d90b      	bls.n	800b9f0 <_fx_directory_search+0x4fc>
 800b9d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b9dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d005      	beq.n	800b9f0 <_fx_directory_search+0x4fc>
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d201      	bcs.n	800b9f4 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e2b3      	b.n	800bf5c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800b9f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ba02:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ba06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d3ca      	bcc.n	800b9a4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	2200      	movs	r2, #0
 800ba14:	469a      	mov	sl, r3
 800ba16:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ba26:	4603      	mov	r3, r0
 800ba28:	fb03 f20b 	mul.w	r2, r3, fp
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	fb0a f303 	mul.w	r3, sl, r3
 800ba32:	4413      	add	r3, r2
 800ba34:	4602      	mov	r2, r0
 800ba36:	fbaa 4502 	umull	r4, r5, sl, r2
 800ba3a:	442b      	add	r3, r5
 800ba3c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800ba3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba42:	2200      	movs	r2, #0
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	60fa      	str	r2, [r7, #12]
 800ba48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	fb03 f205 	mul.w	r2, r3, r5
 800ba52:	460b      	mov	r3, r1
 800ba54:	fb04 f303 	mul.w	r3, r4, r3
 800ba58:	4413      	add	r3, r2
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	fba4 8902 	umull	r8, r9, r4, r2
 800ba60:	444b      	add	r3, r9
 800ba62:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba64:	f04f 0200 	mov.w	r2, #0
 800ba68:	f04f 0300 	mov.w	r3, #0
 800ba6c:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800ba70:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800ba74:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800ba78:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800ba7c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800ba80:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ba84:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d046      	beq.n	800bb1c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800ba96:	6a3a      	ldr	r2, [r7, #32]
 800ba98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	2370      	movs	r3, #112	; 0x70
 800baa2:	461a      	mov	r2, r3
 800baa4:	f00a fd88 	bl	80165b8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800baa8:	6a3a      	ldr	r2, [r7, #32]
 800baaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800baae:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800bab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800baba:	2300      	movs	r3, #0
 800babc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bac0:	e01c      	b.n	800bafc <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800bac2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baca:	18d1      	adds	r1, r2, r3
 800bacc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bad4:	441a      	add	r2, r3
 800bad6:	780b      	ldrb	r3, [r1, #0]
 800bad8:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800bada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bae2:	4413      	add	r3, r2
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d103      	bne.n	800baf2 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800baea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baee:	2bfe      	cmp	r3, #254	; 0xfe
 800baf0:	d913      	bls.n	800bb1a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800baf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baf6:	3301      	adds	r3, #1
 800baf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bafc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb00:	2bff      	cmp	r3, #255	; 0xff
 800bb02:	d9de      	bls.n	800bac2 <_fx_directory_search+0x5ce>
 800bb04:	e00a      	b.n	800bb1c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800bb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	603b      	str	r3, [r7, #0]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb14:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800bb18:	e000      	b.n	800bb1c <_fx_directory_search+0x628>
                            break;
 800bb1a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800bb28:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800bb32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb34:	f7fd fe7a 	bl	800982c <_fx_directory_entry_read>
 800bb38:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800bb3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb40:	3301      	adds	r3, #1
 800bb42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800bb46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <_fx_directory_search+0x660>
            {
                return(status);
 800bb4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb52:	e203      	b.n	800bf5c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80c6 	beq.w	800bcec <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	7f1b      	ldrb	r3, [r3, #28]
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f040 80a9 	bne.w	800bcc0 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2be5      	cmp	r3, #229	; 0xe5
 800bb76:	d104      	bne.n	800bb82 <_fx_directory_search+0x68e>
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	791b      	ldrb	r3, [r3, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 80a1 	beq.w	800bcc4 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800bb82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800bb92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800bb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800bba6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbaa:	2b60      	cmp	r3, #96	; 0x60
 800bbac:	d908      	bls.n	800bbc0 <_fx_directory_search+0x6cc>
 800bbae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbb2:	2b7a      	cmp	r3, #122	; 0x7a
 800bbb4:	d804      	bhi.n	800bbc0 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800bbb6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bbba:	3b20      	subs	r3, #32
 800bbbc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bbc0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d908      	bls.n	800bbda <_fx_directory_search+0x6e6>
 800bbc8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbcc:	2b7a      	cmp	r3, #122	; 0x7a
 800bbce:	d804      	bhi.n	800bbda <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bbd0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbd4:	3b20      	subs	r3, #32
 800bbd6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800bbda:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bbde:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d10f      	bne.n	800bc06 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800bbe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbea:	3301      	adds	r3, #1
 800bbec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800bbf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800bbfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1c6      	bne.n	800bb92 <_fx_directory_search+0x69e>
 800bc04:	e000      	b.n	800bc08 <_fx_directory_search+0x714>
                    break;
 800bc06:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bc08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10b      	bne.n	800bc2a <_fx_directory_search+0x736>
 800bc12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc16:	781a      	ldrb	r2, [r3, #0]
 800bc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d103      	bne.n	800bc2a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800bc22:	2301      	movs	r3, #1
 800bc24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc28:	e04d      	b.n	800bcc6 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	791b      	ldrb	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d049      	beq.n	800bcc6 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800bc32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800bc42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800bc4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bc56:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc5a:	2b60      	cmp	r3, #96	; 0x60
 800bc5c:	d908      	bls.n	800bc70 <_fx_directory_search+0x77c>
 800bc5e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc62:	2b7a      	cmp	r3, #122	; 0x7a
 800bc64:	d804      	bhi.n	800bc70 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bc66:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc6a:	3b20      	subs	r3, #32
 800bc6c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800bc70:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bc74:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d10f      	bne.n	800bc9c <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800bc7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc80:	3301      	adds	r3, #1
 800bc82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800bc86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800bc90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1d3      	bne.n	800bc42 <_fx_directory_search+0x74e>
 800bc9a:	e000      	b.n	800bc9e <_fx_directory_search+0x7aa>
                        break;
 800bc9c:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bc9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10e      	bne.n	800bcc6 <_fx_directory_search+0x7d2>
 800bca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcac:	781a      	ldrb	r2, [r3, #0]
 800bcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d106      	bne.n	800bcc6 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bcbe:	e002      	b.n	800bcc6 <_fx_directory_search+0x7d2>
                continue;
 800bcc0:	bf00      	nop
 800bcc2:	e000      	b.n	800bcc6 <_fx_directory_search+0x7d2>
                continue;
 800bcc4:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800bcc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bcca:	2200      	movs	r2, #0
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	61fa      	str	r2, [r7, #28]
 800bcd0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800bcd4:	69b9      	ldr	r1, [r7, #24]
 800bcd6:	4291      	cmp	r1, r2
 800bcd8:	69f9      	ldr	r1, [r7, #28]
 800bcda:	eb71 0303 	sbcs.w	r3, r1, r3
 800bcde:	d206      	bcs.n	800bcee <_fx_directory_search+0x7fa>
 800bce0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f43f af1f 	beq.w	800bb28 <_fx_directory_search+0x634>
 800bcea:	e000      	b.n	800bcee <_fx_directory_search+0x7fa>
                break;
 800bcec:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800bcee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800bcf6:	2304      	movs	r3, #4
 800bcf8:	e130      	b.n	800bf5c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	7f1b      	ldrb	r3, [r3, #28]
 800bcfe:	f003 0310 	and.w	r3, r3, #16
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d04f      	beq.n	800bda6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	2370      	movs	r3, #112	; 0x70
 800bd10:	461a      	mov	r2, r3
 800bd12:	f00a fc51 	bl	80165b8 <memcpy>
            search_dir_ptr =  &search_dir;
 800bd16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800bd1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bd22:	2300      	movs	r3, #0
 800bd24:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800bd26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d13f      	bne.n	800bdb0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bd30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d02e      	beq.n	800bd9e <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800bd48:	6a3a      	ldr	r2, [r7, #32]
 800bd4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd4e:	4610      	mov	r0, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	2370      	movs	r3, #112	; 0x70
 800bd54:	461a      	mov	r2, r3
 800bd56:	f00a fc2f 	bl	80165b8 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800bd5a:	6a3a      	ldr	r2, [r7, #32]
 800bd5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd60:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800bd62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd72:	e010      	b.n	800bd96 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800bd74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd7c:	18d1      	adds	r1, r2, r3
 800bd7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd86:	441a      	add	r2, r3
 800bd88:	780b      	ldrb	r3, [r1, #0]
 800bd8a:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd90:	3301      	adds	r3, #1
 800bd92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd9a:	2bff      	cmp	r3, #255	; 0xff
 800bd9c:	d9ea      	bls.n	800bd74 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bda4:	e004      	b.n	800bdb0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800bdac:	2304      	movs	r3, #4
 800bdae:	e0d5      	b.n	800bf5c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f47f add6 	bne.w	800b964 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800bdbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b5c      	cmp	r3, #92	; 0x5c
 800bdc6:	d028      	beq.n	800be1a <_fx_directory_search+0x926>
 800bdc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b2f      	cmp	r3, #47	; 0x2f
 800bdd0:	d023      	beq.n	800be1a <_fx_directory_search+0x926>
 800bdd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d01f      	beq.n	800be1a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bdda:	e012      	b.n	800be02 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800bddc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bde0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bde4:	4413      	add	r3, r2
 800bde6:	7819      	ldrb	r1, [r3, #0]
 800bde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bdf4:	460a      	mov	r2, r1
 800bdf6:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800bdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800be02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be06:	2bfe      	cmp	r3, #254	; 0xfe
 800be08:	d807      	bhi.n	800be1a <_fx_directory_search+0x926>
 800be0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be12:	4413      	add	r3, r2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e0      	bne.n	800bddc <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800be1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b5c      	cmp	r3, #92	; 0x5c
 800be22:	d012      	beq.n	800be4a <_fx_directory_search+0x956>
 800be24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b2f      	cmp	r3, #47	; 0x2f
 800be2c:	d00d      	beq.n	800be4a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800be2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be32:	2bfe      	cmp	r3, #254	; 0xfe
 800be34:	d809      	bhi.n	800be4a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800be36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800be40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be42:	4413      	add	r3, r2
 800be44:	222f      	movs	r2, #47	; 0x2f
 800be46:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be50:	e017      	b.n	800be82 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800be52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be5a:	4413      	add	r3, r2
 800be5c:	7819      	ldrb	r1, [r3, #0]
 800be5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be64:	4413      	add	r3, r2
 800be66:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be6a:	460a      	mov	r2, r1
 800be6c:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800be6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be72:	3301      	adds	r3, #1
 800be74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800be78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be7c:	3301      	adds	r3, #1
 800be7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be86:	2bff      	cmp	r3, #255	; 0xff
 800be88:	d807      	bhi.n	800be9a <_fx_directory_search+0x9a6>
 800be8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be92:	4413      	add	r3, r2
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1db      	bne.n	800be52 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800be9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9e:	2bff      	cmp	r3, #255	; 0xff
 800bea0:	d808      	bhi.n	800beb4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800bea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea8:	4413      	add	r3, r2
 800beaa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e003      	b.n	800bebc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800bebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800beca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bece:	4611      	mov	r1, r2
 800bed0:	2270      	movs	r2, #112	; 0x70
 800bed2:	4618      	mov	r0, r3
 800bed4:	f00a fb70 	bl	80165b8 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beda:	2201      	movs	r2, #1
 800bedc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800bee0:	e003      	b.n	800beea <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	2200      	movs	r2, #0
 800bee6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beee:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800bef2:	4611      	mov	r1, r2
 800bef4:	2270      	movs	r2, #112	; 0x70
 800bef6:	4618      	mov	r0, r3
 800bef8:	f00a fb5e 	bl	80165b8 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf0e:	e01e      	b.n	800bf4e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf18:	4413      	add	r3, r2
 800bf1a:	7819      	ldrb	r1, [r3, #0]
 800bf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf22:	4413      	add	r3, r2
 800bf24:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800bf28:	460a      	mov	r2, r1
 800bf2a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf34:	4413      	add	r3, r2
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800bf3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf40:	2bfe      	cmp	r3, #254	; 0xfe
 800bf42:	d909      	bls.n	800bf58 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf48:	3301      	adds	r3, #1
 800bf4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf52:	2bff      	cmp	r3, #255	; 0xff
 800bf54:	d9dc      	bls.n	800bf10 <_fx_directory_search+0xa1c>
 800bf56:	e000      	b.n	800bf5a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800bf58:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf62:	46bd      	mov	sp, r7
 800bf64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf68 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a49      	ldr	r2, [pc, #292]	; (800c09c <_fx_file_close+0x134>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d001      	beq.n	800bf7e <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800bf7a:	2307      	movs	r3, #7
 800bf7c:	e08a      	b.n	800c094 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf82:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a42      	ldr	r2, [pc, #264]	; (800c0a0 <_fx_file_close+0x138>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d001      	beq.n	800bfa0 <_fx_file_close+0x38>
 800bf9c:	2311      	movs	r3, #17
 800bf9e:	e079      	b.n	800c094 <_fx_file_close+0x12c>
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bfa6:	f04f 31ff 	mov.w	r1, #4294967295
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f007 fb62 	bl	8013674 <_tx_mutex_get>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <_fx_file_close+0x52>
 800bfb6:	2311      	movs	r3, #17
 800bfb8:	e06c      	b.n	800c094 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d104      	bne.n	800bfce <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800bfcc:	e014      	b.n	800bff8 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bfd6:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bfe0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d104      	bne.n	800bff8 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bffe:	1e5a      	subs	r2, r3, #1
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a26      	ldr	r2, [pc, #152]	; (800c0a4 <_fx_file_close+0x13c>)
 800c00a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d138      	bne.n	800c086 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d034      	beq.n	800c086 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c01c:	f3ef 8310 	mrs	r3, PRIMASK
 800c020:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c022:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c024:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c026:	b672      	cpsid	i
    return(int_posture);
 800c028:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800c02a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c02c:	4b1e      	ldr	r3, [pc, #120]	; (800c0a8 <_fx_file_close+0x140>)
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c036:	4b1d      	ldr	r3, [pc, #116]	; (800c0ac <_fx_file_close+0x144>)
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800c040:	4b1a      	ldr	r3, [pc, #104]	; (800c0ac <_fx_file_close+0x144>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f383 8810 	msr	PRIMASK, r3
}
 800c054:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3368      	adds	r3, #104	; 0x68
 800c066:	4619      	mov	r1, r3
 800c068:	69f8      	ldr	r0, [r7, #28]
 800c06a:	f7fd ff65 	bl	8009f38 <_fx_directory_entry_write>
 800c06e:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d007      	beq.n	800c086 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c07c:	4618      	mov	r0, r3
 800c07e:	f007 fd71 	bl	8013b64 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	e006      	b.n	800c094 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c08c:	4618      	mov	r0, r3
 800c08e:	f007 fd69 	bl	8013b64 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	46494c45 	.word	0x46494c45
 800c0a0:	4d454449 	.word	0x4d454449
 800c0a4:	46494c43 	.word	0x46494c43
 800c0a8:	24014c94 	.word	0x24014c94
 800c0ac:	24014c90 	.word	0x24014c90

0800c0b0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800c0b0:	b590      	push	{r4, r7, lr}
 800c0b2:	b0c5      	sub	sp, #276	; 0x114
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0be:	6018      	str	r0, [r3, #0]
 800c0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c8:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800c0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800c0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c0fc:	e020      	b.n	800c140 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800c0fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b5c      	cmp	r3, #92	; 0x5c
 800c106:	d004      	beq.n	800c112 <_fx_file_create+0x62>
 800c108:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	2b2f      	cmp	r3, #47	; 0x2f
 800c110:	d103      	bne.n	800c11a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800c112:	2300      	movs	r3, #0
 800c114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c118:	e00d      	b.n	800c136 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800c11a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b20      	cmp	r3, #32
 800c122:	d103      	bne.n	800c12c <_fx_file_create+0x7c>
 800c124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800c12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c130:	3301      	adds	r3, #1
 800c132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800c136:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c13a:	3301      	adds	r3, #1
 800c13c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c140:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1d9      	bne.n	800c0fe <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <_fx_file_create+0xaa>
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c156:	2bff      	cmp	r3, #255	; 0xff
 800c158:	d901      	bls.n	800c15e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800c15a:	230c      	movs	r3, #12
 800c15c:	e10a      	b.n	800c374 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800c15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c16c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c170:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800c172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c180:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800c184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c188:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c18c:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800c18e:	2300      	movs	r3, #0
 800c190:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800c194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c19c:	2200      	movs	r2, #0
 800c19e:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a74      	ldr	r2, [pc, #464]	; (800c380 <_fx_file_create+0x2d0>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d001      	beq.n	800c1b6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c1b2:	2311      	movs	r3, #17
 800c1b4:	e0de      	b.n	800c374 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a6f      	ldr	r2, [pc, #444]	; (800c380 <_fx_file_create+0x2d0>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d001      	beq.n	800c1cc <_fx_file_create+0x11c>
 800c1c8:	2311      	movs	r3, #17
 800c1ca:	e0d3      	b.n	800c374 <_fx_file_create+0x2c4>
 800c1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c1da:	f04f 31ff 	mov.w	r1, #4294967295
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f007 fa48 	bl	8013674 <_tx_mutex_get>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <_fx_file_create+0x13e>
 800c1ea:	2311      	movs	r3, #17
 800c1ec:	e0c2      	b.n	800c374 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800c1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c20e:	4618      	mov	r0, r3
 800c210:	f007 fca8 	bl	8013b64 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800c214:	2323      	movs	r3, #35	; 0x23
 800c216:	e0ad      	b.n	800c374 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800c218:	f107 0408 	add.w	r4, r7, #8
 800c21c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c224:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800c228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800c230:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4623      	mov	r3, r4
 800c238:	6809      	ldr	r1, [r1, #0]
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	f7ff f95a 	bl	800b4f4 <_fx_directory_search>
 800c240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800c244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c25a:	4618      	mov	r0, r3
 800c25c:	f007 fc82 	bl	8013b64 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800c260:	230b      	movs	r3, #11
 800c262:	e087      	b.n	800c374 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800c264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c268:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff f8df 	bl	800b430 <_fx_directory_name_extract>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c286:	4618      	mov	r0, r3
 800c288:	f007 fc6c 	bl	8013b64 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800c28c:	230d      	movs	r3, #13
 800c28e:	e071      	b.n	800c374 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800c290:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c294:	f107 0108 	add.w	r1, r7, #8
 800c298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f7fe fc85 	bl	800abb0 <_fx_directory_free_search>
 800c2a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00c      	beq.n	800c2cc <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f007 fc4f 	bl	8013b64 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2ca:	e053      	b.n	800c374 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800c2cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff f8ab 	bl	800b430 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2da:	f3ef 8310 	mrs	r3, PRIMASK
 800c2de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800c2e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800c2e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2ea:	b672      	cpsid	i
    return(int_posture);
 800c2ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800c2f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c2f4:	4b23      	ldr	r3, [pc, #140]	; (800c384 <_fx_file_create+0x2d4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c2fc:	4b22      	ldr	r3, [pc, #136]	; (800c388 <_fx_file_create+0x2d8>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c308:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c310:	f383 8810 	msr	PRIMASK, r3
}
 800c314:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800c316:	2320      	movs	r3, #32
 800c318:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800c32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b2e      	cmp	r3, #46	; 0x2e
 800c334:	d106      	bne.n	800c344 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800c336:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800c33a:	f043 0302 	orr.w	r3, r3, #2
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800c344:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c350:	4611      	mov	r1, r2
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	f7fd fdf0 	bl	8009f38 <_fx_directory_entry_write>
 800c358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800c35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f007 fbfa 	bl	8013b64 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800c370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800c374:	4618      	mov	r0, r3
 800c376:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}
 800c37e:	bf00      	nop
 800c380:	4d454449 	.word	0x4d454449
 800c384:	24014c94 	.word	0x24014c94
 800c388:	24014c90 	.word	0x24014c90

0800c38c <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800c38c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c390:	b0c2      	sub	sp, #264	; 0x108
 800c392:	af00      	add	r7, sp, #0
 800c394:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c398:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	4bcf      	ldr	r3, [pc, #828]	; (800c6e8 <_fx_file_extended_seek+0x35c>)
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d001      	beq.n	800c3b2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c3ae:	2307      	movs	r3, #7
 800c3b0:	e2b5      	b.n	800c91e <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c3b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800c3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	4bc3      	ldr	r3, [pc, #780]	; (800c6ec <_fx_file_extended_seek+0x360>)
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d001      	beq.n	800c3e8 <_fx_file_extended_seek+0x5c>
 800c3e4:	2311      	movs	r3, #17
 800c3e6:	e29a      	b.n	800c91e <_fx_file_extended_seek+0x592>
 800c3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ec:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c3f0:	f04f 31ff 	mov.w	r1, #4294967295
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f007 f93d 	bl	8013674 <_tx_mutex_get>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <_fx_file_extended_seek+0x78>
 800c400:	2311      	movs	r3, #17
 800c402:	e28c      	b.n	800c91e <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800c404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c408:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c40c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c410:	428b      	cmp	r3, r1
 800c412:	bf08      	it	eq
 800c414:	4282      	cmpeq	r2, r0
 800c416:	d108      	bne.n	800c42a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c41c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c420:	4618      	mov	r0, r3
 800c422:	f007 fb9f 	bl	8013b64 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800c426:	2300      	movs	r3, #0
 800c428:	e279      	b.n	800c91e <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c42e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c436:	fb02 f303 	mul.w	r3, r2, r3
 800c43a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c43e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d108      	bne.n	800c458 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c44a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c44e:	4618      	mov	r0, r3
 800c450:	f007 fb88 	bl	8013b64 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c454:	2302      	movs	r3, #2
 800c456:	e262      	b.n	800c91e <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800c458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c45c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c460:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c464:	4290      	cmp	r0, r2
 800c466:	eb71 0303 	sbcs.w	r3, r1, r3
 800c46a:	d205      	bcs.n	800c478 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800c46c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c470:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c474:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800c478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	2200      	movs	r2, #0
 800c480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c488:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c48c:	2200      	movs	r2, #0
 800c48e:	469a      	mov	sl, r3
 800c490:	4693      	mov	fp, r2
 800c492:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c496:	460b      	mov	r3, r1
 800c498:	fb0a f203 	mul.w	r2, sl, r3
 800c49c:	4603      	mov	r3, r0
 800c49e:	fb03 f30b 	mul.w	r3, r3, fp
 800c4a2:	4413      	add	r3, r2
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	fba2 450a 	umull	r4, r5, r2, sl
 800c4aa:	442b      	add	r3, r5
 800c4ac:	461d      	mov	r5, r3
 800c4ae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c4b2:	42a2      	cmp	r2, r4
 800c4b4:	41ab      	sbcs	r3, r5
 800c4b6:	f0c0 8156 	bcc.w	800c766 <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800c4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4c6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c4ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c4d8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c4dc:	462b      	mov	r3, r5
 800c4de:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800c4e2:	4652      	mov	r2, sl
 800c4e4:	fb02 f203 	mul.w	r2, r2, r3
 800c4e8:	465b      	mov	r3, fp
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	fb01 f303 	mul.w	r3, r1, r3
 800c4f0:	4413      	add	r3, r2
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	4651      	mov	r1, sl
 800c4f6:	fba2 8901 	umull	r8, r9, r2, r1
 800c4fa:	444b      	add	r3, r9
 800c4fc:	4699      	mov	r9, r3
 800c4fe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c502:	4590      	cmp	r8, r2
 800c504:	eb79 0303 	sbcs.w	r3, r9, r3
 800c508:	d225      	bcs.n	800c556 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800c50a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800c514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c51a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c51e:	fb02 f303 	mul.w	r3, r2, r3
 800c522:	2200      	movs	r2, #0
 800c524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800c52c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c530:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c534:	4621      	mov	r1, r4
 800c536:	1a51      	subs	r1, r2, r1
 800c538:	6139      	str	r1, [r7, #16]
 800c53a:	4629      	mov	r1, r5
 800c53c:	eb63 0301 	sbc.w	r3, r3, r1
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c546:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800c54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c550:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c554:	e0b7      	b.n	800c6c6 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c55a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800c55c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c560:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c562:	4413      	add	r3, r2
 800c564:	3b01      	subs	r3, #1
 800c566:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800c56a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c576:	fb02 f303 	mul.w	r3, r2, r3
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c580:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800c584:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c588:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c58c:	4621      	mov	r1, r4
 800c58e:	1a51      	subs	r1, r2, r1
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4629      	mov	r1, r5
 800c594:	eb63 0301 	sbc.w	r3, r3, r1
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c59e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800c5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c5ae:	e08a      	b.n	800c6c6 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c5b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c5ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c5c4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c5c8:	f003 fe12 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800c5cc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c5d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f007 fabf 	bl	8013b64 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c5e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5ea:	e198      	b.n	800c91e <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800c5fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c600:	2200      	movs	r2, #0
 800c602:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c606:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c60a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c60e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c612:	4621      	mov	r1, r4
 800c614:	4291      	cmp	r1, r2
 800c616:	4629      	mov	r1, r5
 800c618:	eb71 0303 	sbcs.w	r3, r1, r3
 800c61c:	d216      	bcs.n	800c64c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c61e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c622:	2200      	movs	r2, #0
 800c624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c628:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c62c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c630:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c634:	4621      	mov	r1, r4
 800c636:	1a51      	subs	r1, r2, r1
 800c638:	6039      	str	r1, [r7, #0]
 800c63a:	4629      	mov	r1, r5
 800c63c:	eb63 0301 	sbc.w	r3, r3, r1
 800c640:	607b      	str	r3, [r7, #4]
 800c642:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c646:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800c64a:	e03c      	b.n	800c6c6 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c64c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c654:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800c656:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c65a:	1e5a      	subs	r2, r3, #1
 800c65c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c660:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800c662:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c666:	2200      	movs	r2, #0
 800c668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c66c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c670:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c674:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c678:	4621      	mov	r1, r4
 800c67a:	4628      	mov	r0, r5
 800c67c:	4283      	cmp	r3, r0
 800c67e:	bf08      	it	eq
 800c680:	428a      	cmpeq	r2, r1
 800c682:	d135      	bne.n	800c6f0 <_fx_file_extended_seek+0x364>
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d931      	bls.n	800c6f0 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c690:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c694:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d227      	bcs.n	800c6f0 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800c6a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800c6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6b6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800c6b8:	f04f 0200 	mov.w	r2, #0
 800c6bc:	f04f 0300 	mov.w	r3, #0
 800c6c0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800c6c4:	e014      	b.n	800c6f0 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d911      	bls.n	800c6f2 <_fx_file_extended_seek+0x366>
 800c6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c6d6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	f4ff af66 	bcc.w	800c5b0 <_fx_file_extended_seek+0x224>
 800c6e4:	e005      	b.n	800c6f2 <_fx_file_extended_seek+0x366>
 800c6e6:	bf00      	nop
 800c6e8:	46494c45 	.word	0x46494c45
 800c6ec:	4d454449 	.word	0x4d454449
                    break;
 800c6f0:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800c6f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c700:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c704:	2200      	movs	r2, #0
 800c706:	67bb      	str	r3, [r7, #120]	; 0x78
 800c708:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c70a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c70e:	462b      	mov	r3, r5
 800c710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c714:	4642      	mov	r2, r8
 800c716:	fb02 f203 	mul.w	r2, r2, r3
 800c71a:	464b      	mov	r3, r9
 800c71c:	4621      	mov	r1, r4
 800c71e:	fb01 f303 	mul.w	r3, r1, r3
 800c722:	4413      	add	r3, r2
 800c724:	4622      	mov	r2, r4
 800c726:	4641      	mov	r1, r8
 800c728:	fba2 1201 	umull	r1, r2, r2, r1
 800c72c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c730:	460a      	mov	r2, r1
 800c732:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c736:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c73a:	4413      	add	r3, r2
 800c73c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c740:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c744:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800c748:	4621      	mov	r1, r4
 800c74a:	4291      	cmp	r1, r2
 800c74c:	4629      	mov	r1, r5
 800c74e:	eb71 0303 	sbcs.w	r3, r1, r3
 800c752:	d22f      	bcs.n	800c7b4 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800c754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c758:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c75c:	4618      	mov	r0, r3
 800c75e:	f007 fa01 	bl	8013b64 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800c762:	2308      	movs	r3, #8
 800c764:	e0db      	b.n	800c91e <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800c766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c76a:	2200      	movs	r2, #0
 800c76c:	673b      	str	r3, [r7, #112]	; 0x70
 800c76e:	677a      	str	r2, [r7, #116]	; 0x74
 800c770:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c774:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c778:	f7f3 ff22 	bl	80005c0 <__aeabi_uldivmod>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c784:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800c786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c78a:	695a      	ldr	r2, [r3, #20]
 800c78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c792:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800c794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c798:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800c79a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c79e:	2200      	movs	r2, #0
 800c7a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c7a4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c7a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c7ac:	f7f3 ff08 	bl	80005c0 <__aeabi_uldivmod>
 800c7b0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800c7b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	663b      	str	r3, [r7, #96]	; 0x60
 800c7bc:	667a      	str	r2, [r7, #100]	; 0x64
 800c7be:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	bf08      	it	eq
 800c7ce:	428a      	cmpeq	r2, r1
 800c7d0:	d151      	bne.n	800c876 <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c7d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7de:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c7e0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c7e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7e6:	fb01 f303 	mul.w	r3, r1, r3
 800c7ea:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c7ec:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7f0:	1e51      	subs	r1, r2, #1
 800c7f2:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7f4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c7f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c800:	2200      	movs	r2, #0
 800c802:	653b      	str	r3, [r7, #80]	; 0x50
 800c804:	657a      	str	r2, [r7, #84]	; 0x54
 800c806:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c80a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c80e:	f7f3 fed7 	bl	80005c0 <__aeabi_uldivmod>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c816:	4613      	mov	r3, r2
 800c818:	4423      	add	r3, r4
 800c81a:	2200      	movs	r2, #0
 800c81c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c81e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c824:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c828:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c82c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c830:	1e51      	subs	r1, r2, #1
 800c832:	6439      	str	r1, [r7, #64]	; 0x40
 800c834:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c838:	647b      	str	r3, [r7, #68]	; 0x44
 800c83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c840:	2200      	movs	r2, #0
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
 800c844:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c846:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c84a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c84e:	f7f3 feb7 	bl	80005c0 <__aeabi_uldivmod>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c85a:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c85c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c860:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c864:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c86e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c872:	631a      	str	r2, [r3, #48]	; 0x30
 800c874:	e04b      	b.n	800c90e <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c87a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c880:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c882:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c884:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c888:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c88a:	fb01 f303 	mul.w	r3, r1, r3
 800c88e:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c896:	2200      	movs	r2, #0
 800c898:	633b      	str	r3, [r7, #48]	; 0x30
 800c89a:	637a      	str	r2, [r7, #52]	; 0x34
 800c89c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c8a0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c8a4:	f7f3 fe8c 	bl	80005c0 <__aeabi_uldivmod>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	4423      	add	r3, r4
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c8be:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	623b      	str	r3, [r7, #32]
 800c8cc:	627a      	str	r2, [r7, #36]	; 0x24
 800c8ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8d2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c8d6:	f7f3 fe73 	bl	80005c0 <__aeabi_uldivmod>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c8e4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c8e8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c8ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	61bb      	str	r3, [r7, #24]
 800c8fa:	61fa      	str	r2, [r7, #28]
 800c8fc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c904:	f7f3 fe5c 	bl	80005c0 <__aeabi_uldivmod>
 800c908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c90c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c912:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c916:	4618      	mov	r0, r3
 800c918:	f007 f924 	bl	8013b64 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c924:	46bd      	mov	sp, r7
 800c926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c92a:	bf00      	nop

0800c92c <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800c92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c930:	b0e8      	sub	sp, #416	; 0x1a0
 800c932:	af02      	add	r7, sp, #8
 800c934:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800c938:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800c93c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c940:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c94a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	4bd9      	ldr	r3, [pc, #868]	; (800ccb8 <_fx_file_open+0x38c>)
 800c952:	429a      	cmp	r2, r3
 800c954:	d002      	beq.n	800c95c <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c956:	2311      	movs	r3, #17
 800c958:	f000 bcc4 	b.w	800d2e4 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800c95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c960:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c96a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800c96e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c972:	2300      	movs	r3, #0
 800c974:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800c978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c97c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d006      	beq.n	800c990 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800c982:	4bce      	ldr	r3, [pc, #824]	; (800ccbc <_fx_file_open+0x390>)
 800c984:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c988:	2318      	movs	r3, #24
 800c98a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800c98e:	e006      	b.n	800c99e <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800c990:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c994:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c998:	2318      	movs	r3, #24
 800c99a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800c99e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d106      	bne.n	800c9b4 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800c9b2:	e002      	b.n	800c9ba <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c9ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	4bbd      	ldr	r3, [pc, #756]	; (800ccb8 <_fx_file_open+0x38c>)
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d002      	beq.n	800c9cc <_fx_file_open+0xa0>
 800c9c6:	2311      	movs	r3, #17
 800c9c8:	f000 bc8c 	b.w	800d2e4 <_fx_file_open+0x9b8>
 800c9cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9d0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c9d4:	f04f 31ff 	mov.w	r1, #4294967295
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f006 fe4b 	bl	8013674 <_tx_mutex_get>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <_fx_file_open+0xbe>
 800c9e4:	2311      	movs	r3, #17
 800c9e6:	f000 bc7d 	b.w	800d2e4 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800c9ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9ee:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c9f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9f6:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800c9f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800ca02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800ca14:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800ca18:	f7fe fd6c 	bl	800b4f4 <_fx_directory_search>
 800ca1c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800ca20:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ca28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca2c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca30:	4618      	mov	r0, r3
 800ca32:	f007 f897 	bl	8013b64 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800ca36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ca3a:	f000 bc53 	b.w	800d2e4 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800ca3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca42:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800ca46:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d009      	beq.n	800ca66 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ca52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca56:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f007 f882 	bl	8013b64 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800ca60:	2305      	movs	r3, #5
 800ca62:	f000 bc3f 	b.w	800d2e4 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800ca66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d160      	bne.n	800cb30 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800ca6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ca7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca7e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca82:	4618      	mov	r0, r3
 800ca84:	f007 f86e 	bl	8013b64 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800ca88:	2323      	movs	r3, #35	; 0x23
 800ca8a:	f000 bc2b 	b.w	800d2e4 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800ca8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d009      	beq.n	800cab2 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ca9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caa2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800caa6:	4618      	mov	r0, r3
 800caa8:	f007 f85c 	bl	8013b64 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800caac:	2306      	movs	r3, #6
 800caae:	f000 bc19 	b.w	800d2e4 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800cab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cab6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800caba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800cabe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cac2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cac6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800caca:	e02d      	b.n	800cb28 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800cacc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cad0:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800cad4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cad8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800cadc:	4299      	cmp	r1, r3
 800cade:	bf08      	it	eq
 800cae0:	4290      	cmpeq	r0, r2
 800cae2:	d117      	bne.n	800cb14 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800cae4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cae8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800caec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800caf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d10d      	bne.n	800cb14 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800caf8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cafc:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d108      	bne.n	800cb14 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800cb02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb06:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f007 f82a 	bl	8013b64 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800cb10:	2306      	movs	r3, #6
 800cb12:	e3e7      	b.n	800d2e4 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800cb14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cb18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800cb1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cb22:	3b01      	subs	r3, #1
 800cb24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800cb28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1cd      	bne.n	800cacc <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800cb30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cb3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb40:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800cb44:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cb4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb54:	fb02 f303 	mul.w	r3, r2, r3
 800cb58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800cb5c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb60:	2300      	movs	r3, #0
 800cb62:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cb64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d108      	bne.n	800cb7e <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cb6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb70:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb74:	4618      	mov	r0, r3
 800cb76:	f006 fff5 	bl	8013b64 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e3b2      	b.n	800d2e4 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800cb90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb94:	2301      	movs	r3, #1
 800cb96:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800cb98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8103 	beq.w	800cda8 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800cba2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cba6:	2200      	movs	r2, #0
 800cba8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800cbac:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800cbb0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cbb4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cbb8:	4621      	mov	r1, r4
 800cbba:	eb11 0a02 	adds.w	sl, r1, r2
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	eb41 0b03 	adc.w	fp, r1, r3
 800cbc4:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800cbc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800cbcc:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800cbd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cbd4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cbde:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800cbe2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800cbe6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800cbea:	f7f3 fce9 	bl	80005c0 <__aeabi_uldivmod>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc00:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800cc04:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800cc08:	4623      	mov	r3, r4
 800cc0a:	fb03 f201 	mul.w	r2, r3, r1
 800cc0e:	462b      	mov	r3, r5
 800cc10:	fb00 f303 	mul.w	r3, r0, r3
 800cc14:	4413      	add	r3, r2
 800cc16:	4622      	mov	r2, r4
 800cc18:	fba0 8902 	umull	r8, r9, r0, r2
 800cc1c:	444b      	add	r3, r9
 800cc1e:	4699      	mov	r9, r3
 800cc20:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cc24:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cc28:	e12f      	b.n	800ce8a <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800cc2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cc2e:	3301      	adds	r3, #1
 800cc30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800cc34:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800cc38:	461a      	mov	r2, r3
 800cc3a:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800cc3e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800cc42:	f003 fad5 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800cc46:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800cc4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d009      	beq.n	800cc66 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc56:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f006 ff82 	bl	8013b64 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cc60:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc64:	e33e      	b.n	800d2e4 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800cc66:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cc6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d006      	beq.n	800cc80 <_fx_file_open+0x354>
 800cc72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d908      	bls.n	800cc92 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc84:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f006 ff6b 	bl	8013b64 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e328      	b.n	800d2e4 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800cc92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d10f      	bne.n	800ccc0 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800cca0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00e      	beq.n	800ccc6 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800cca8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccb4:	619a      	str	r2, [r3, #24]
 800ccb6:	e006      	b.n	800ccc6 <_fx_file_open+0x39a>
 800ccb8:	4d454449 	.word	0x4d454449
 800ccbc:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800ccc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ccca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800ccce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ccd2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800ccd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cce0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800cce4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cce8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800ccec:	4641      	mov	r1, r8
 800ccee:	4291      	cmp	r1, r2
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	eb71 0303 	sbcs.w	r3, r1, r3
 800ccf6:	d216      	bcs.n	800cd26 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800ccf8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cd02:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cd06:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd0a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800cd0e:	4641      	mov	r1, r8
 800cd10:	1a51      	subs	r1, r2, r1
 800cd12:	6039      	str	r1, [r7, #0]
 800cd14:	4649      	mov	r1, r9
 800cd16:	eb63 0301 	sbc.w	r3, r3, r1
 800cd1a:	607b      	str	r3, [r7, #4]
 800cd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd20:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800cd24:	e040      	b.n	800cda8 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800cd26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd2a:	6a1b      	ldr	r3, [r3, #32]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d13b      	bne.n	800cda8 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800cd30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cd34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cd38:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800cd3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cd3e:	1e5a      	subs	r2, r3, #1
 800cd40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd44:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800cd46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd50:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd54:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800cd5c:	4641      	mov	r1, r8
 800cd5e:	4648      	mov	r0, r9
 800cd60:	4283      	cmp	r3, r0
 800cd62:	bf08      	it	eq
 800cd64:	428a      	cmpeq	r2, r1
 800cd66:	d11f      	bne.n	800cda8 <_fx_file_open+0x47c>
 800cd68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d91b      	bls.n	800cda8 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd78:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d211      	bcs.n	800cda8 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800cd84:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cd88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd8c:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800cd8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd9a:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	f04f 0300 	mov.w	r3, #0
 800cda4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cda8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d90a      	bls.n	800cdc6 <_fx_file_open+0x49a>
 800cdb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cdb8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cdbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	f4ff af32 	bcc.w	800cc2a <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cdc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cdd2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800cdd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cddc:	2200      	movs	r2, #0
 800cdde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cde2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cde6:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800cdea:	464b      	mov	r3, r9
 800cdec:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800cdf0:	4652      	mov	r2, sl
 800cdf2:	fb02 f203 	mul.w	r2, r2, r3
 800cdf6:	465b      	mov	r3, fp
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	fb01 f303 	mul.w	r3, r1, r3
 800cdfe:	4413      	add	r3, r2
 800ce00:	4642      	mov	r2, r8
 800ce02:	4651      	mov	r1, sl
 800ce04:	fba2 4501 	umull	r4, r5, r2, r1
 800ce08:	442b      	add	r3, r5
 800ce0a:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800ce0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce10:	2200      	movs	r2, #0
 800ce12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce16:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800ce1a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	fb03 f205 	mul.w	r2, r3, r5
 800ce24:	460b      	mov	r3, r1
 800ce26:	fb04 f303 	mul.w	r3, r4, r3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	fba4 1202 	umull	r1, r2, r4, r2
 800ce32:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800ce36:	460a      	mov	r2, r1
 800ce38:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800ce3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ce40:	4413      	add	r3, r2
 800ce42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ce46:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800ce4a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800ce4e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800ce52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce56:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800ce5a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ce5e:	4282      	cmp	r2, r0
 800ce60:	418b      	sbcs	r3, r1
 800ce62:	d309      	bcc.n	800ce78 <_fx_file_open+0x54c>
 800ce64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00e      	beq.n	800ce8a <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800ce6c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ce70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d908      	bls.n	800ce8a <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800ce78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce7c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce80:	4618      	mov	r0, r3
 800ce82:	f006 fe6f 	bl	8013b64 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800ce86:	2308      	movs	r3, #8
 800ce88:	e22c      	b.n	800d2e4 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800ce8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce8e:	4baa      	ldr	r3, [pc, #680]	; (800d138 <_fx_file_open+0x80c>)
 800ce90:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800ce92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce96:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800ce9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce9e:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800cea0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cea8:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800ceaa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ceae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ceb2:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800ceb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ceb8:	2300      	movs	r3, #0
 800ceba:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800cebc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cec0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cec4:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800cec6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceca:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800cece:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ced2:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800ced4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ced8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cedc:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cede:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cee2:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800cee6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceea:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800ceee:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cef2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800cef6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800cefa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cefe:	2300      	movs	r3, #0
 800cf00:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800cf04:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d163      	bne.n	800cfd4 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800cf0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf10:	695a      	ldr	r2, [r3, #20]
 800cf12:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf16:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800cf18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf26:	2200      	movs	r2, #0
 800cf28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf2c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cf30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	3b02      	subs	r3, #2
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800cf42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf4e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cf52:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800cf56:	462b      	mov	r3, r5
 800cf58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf5c:	4642      	mov	r2, r8
 800cf5e:	fb02 f203 	mul.w	r2, r2, r3
 800cf62:	464b      	mov	r3, r9
 800cf64:	4621      	mov	r1, r4
 800cf66:	fb01 f303 	mul.w	r3, r1, r3
 800cf6a:	4413      	add	r3, r2
 800cf6c:	4622      	mov	r2, r4
 800cf6e:	4641      	mov	r1, r8
 800cf70:	fba2 1201 	umull	r1, r2, r2, r1
 800cf74:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800cf78:	460a      	mov	r2, r1
 800cf7a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800cf7e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cf82:	4413      	add	r3, r2
 800cf84:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cf8c:	4623      	mov	r3, r4
 800cf8e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800cf92:	4602      	mov	r2, r0
 800cf94:	189b      	adds	r3, r3, r2
 800cf96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	462a      	mov	r2, r5
 800cf9e:	eb42 0303 	adc.w	r3, r2, r3
 800cfa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfa6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfaa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cfae:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800cfb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800cfba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800cfc2:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cfc6:	f04f 0200 	mov.w	r2, #0
 800cfca:	f04f 0300 	mov.w	r3, #0
 800cfce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800cfd2:	e140      	b.n	800d256 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800cfd4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfde:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfe2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cfe6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cfea:	4621      	mov	r1, r4
 800cfec:	4628      	mov	r0, r5
 800cfee:	4283      	cmp	r3, r0
 800cff0:	bf08      	it	eq
 800cff2:	428a      	cmpeq	r2, r1
 800cff4:	f040 80a2 	bne.w	800d13c <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d004:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d008:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d014:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d018:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d01c:	460b      	mov	r3, r1
 800d01e:	3b02      	subs	r3, #2
 800d020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d024:	4613      	mov	r3, r2
 800d026:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d02a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d02e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d034:	2200      	movs	r2, #0
 800d036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d03a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d03e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d042:	462b      	mov	r3, r5
 800d044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d048:	4642      	mov	r2, r8
 800d04a:	fb02 f203 	mul.w	r2, r2, r3
 800d04e:	464b      	mov	r3, r9
 800d050:	4621      	mov	r1, r4
 800d052:	fb01 f303 	mul.w	r3, r1, r3
 800d056:	4413      	add	r3, r2
 800d058:	4622      	mov	r2, r4
 800d05a:	4641      	mov	r1, r8
 800d05c:	fba2 1201 	umull	r1, r2, r2, r1
 800d060:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d064:	460a      	mov	r2, r1
 800d066:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d06a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d06e:	4413      	add	r3, r2
 800d070:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d074:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d078:	4623      	mov	r3, r4
 800d07a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d07e:	4602      	mov	r2, r0
 800d080:	189b      	adds	r3, r3, r2
 800d082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d086:	460b      	mov	r3, r1
 800d088:	462a      	mov	r2, r5
 800d08a:	eb42 0303 	adc.w	r3, r2, r3
 800d08e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d092:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d096:	1e51      	subs	r1, r2, #1
 800d098:	67b9      	str	r1, [r7, #120]	; 0x78
 800d09a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d09e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	673b      	str	r3, [r7, #112]	; 0x70
 800d0aa:	677a      	str	r2, [r7, #116]	; 0x74
 800d0ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d0b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d0b4:	f7f3 fa84 	bl	80005c0 <__aeabi_uldivmod>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	2300      	movs	r3, #0
 800d0be:	66ba      	str	r2, [r7, #104]	; 0x68
 800d0c0:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d0c2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d0c6:	4623      	mov	r3, r4
 800d0c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	189b      	adds	r3, r3, r2
 800d0d0:	663b      	str	r3, [r7, #96]	; 0x60
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	eb42 0303 	adc.w	r3, r2, r3
 800d0da:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d0e4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d0e8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d0ec:	1e51      	subs	r1, r2, #1
 800d0ee:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0f0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	653b      	str	r3, [r7, #80]	; 0x50
 800d100:	657a      	str	r2, [r7, #84]	; 0x54
 800d102:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d106:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d10a:	f7f3 fa59 	bl	80005c0 <__aeabi_uldivmod>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d116:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d118:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d11c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d120:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d124:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d12c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d12e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d132:	631a      	str	r2, [r3, #48]	; 0x30
 800d134:	e08f      	b.n	800d256 <_fx_file_open+0x92a>
 800d136:	bf00      	nop
 800d138:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d13c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d142:	2200      	movs	r2, #0
 800d144:	64bb      	str	r3, [r7, #72]	; 0x48
 800d146:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d148:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	2200      	movs	r2, #0
 800d150:	643b      	str	r3, [r7, #64]	; 0x40
 800d152:	647a      	str	r2, [r7, #68]	; 0x44
 800d154:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d158:	460b      	mov	r3, r1
 800d15a:	3b02      	subs	r3, #2
 800d15c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d15e:	4613      	mov	r3, r2
 800d160:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d166:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16c:	2200      	movs	r2, #0
 800d16e:	633b      	str	r3, [r7, #48]	; 0x30
 800d170:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d172:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d176:	462b      	mov	r3, r5
 800d178:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d17c:	4642      	mov	r2, r8
 800d17e:	fb02 f203 	mul.w	r2, r2, r3
 800d182:	464b      	mov	r3, r9
 800d184:	4621      	mov	r1, r4
 800d186:	fb01 f303 	mul.w	r3, r1, r3
 800d18a:	4413      	add	r3, r2
 800d18c:	4622      	mov	r2, r4
 800d18e:	4641      	mov	r1, r8
 800d190:	fba2 1201 	umull	r1, r2, r2, r1
 800d194:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d198:	460a      	mov	r2, r1
 800d19a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d19e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d1a8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d1ac:	4623      	mov	r3, r4
 800d1ae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	189b      	adds	r3, r3, r2
 800d1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	462a      	mov	r2, r5
 800d1bc:	eb42 0303 	adc.w	r3, r2, r3
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d1c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	623b      	str	r3, [r7, #32]
 800d1cc:	627a      	str	r2, [r7, #36]	; 0x24
 800d1ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1d2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d1d6:	f7f3 f9f3 	bl	80005c0 <__aeabi_uldivmod>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	2300      	movs	r3, #0
 800d1e0:	61ba      	str	r2, [r7, #24]
 800d1e2:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d1e4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	189b      	adds	r3, r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	462a      	mov	r2, r5
 800d1f8:	eb42 0303 	adc.w	r3, r2, r3
 800d1fc:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d1fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d202:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d206:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d20a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d210:	2200      	movs	r2, #0
 800d212:	60bb      	str	r3, [r7, #8]
 800d214:	60fa      	str	r2, [r7, #12]
 800d216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d21a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d21e:	f7f3 f9cf 	bl	80005c0 <__aeabi_uldivmod>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d22c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d230:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d234:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d238:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800d23c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d240:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d244:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d246:	fbb3 f1f2 	udiv	r1, r3, r2
 800d24a:	fb01 f202 	mul.w	r2, r1, r2
 800d24e:	1a9a      	subs	r2, r3, r2
 800d250:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d254:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800d256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d25a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d01f      	beq.n	800d2a2 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800d262:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d266:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d26a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d26c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800d270:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d274:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d278:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d27c:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800d27e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d282:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d286:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800d288:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d28c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800d290:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800d292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d296:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d29a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d29e:	65da      	str	r2, [r3, #92]	; 0x5c
 800d2a0:	e00f      	b.n	800d2c2 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800d2a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800d2ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2b6:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800d2b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d2c0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800d2c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800d2d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2d8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f006 fc41 	bl	8013b64 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d2f0 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800d2f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2f4:	b0aa      	sub	sp, #168	; 0xa8
 800d2f6:	af04      	add	r7, sp, #16
 800d2f8:	66f8      	str	r0, [r7, #108]	; 0x6c
 800d2fa:	66b9      	str	r1, [r7, #104]	; 0x68
 800d2fc:	667a      	str	r2, [r7, #100]	; 0x64
 800d2fe:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	4b9d      	ldr	r3, [pc, #628]	; (800d57c <_fx_file_read+0x28c>)
 800d306:	429a      	cmp	r2, r3
 800d308:	d001      	beq.n	800d30e <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d30a:	2307      	movs	r3, #7
 800d30c:	e28d      	b.n	800d82a <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d312:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800d314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d316:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d31a:	1c5a      	adds	r2, r3, #1
 800d31c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d31e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d326:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	4b94      	ldr	r3, [pc, #592]	; (800d580 <_fx_file_read+0x290>)
 800d32e:	429a      	cmp	r2, r3
 800d330:	d001      	beq.n	800d336 <_fx_file_read+0x46>
 800d332:	2311      	movs	r3, #17
 800d334:	e279      	b.n	800d82a <_fx_file_read+0x53a>
 800d336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d338:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d33c:	f04f 31ff 	mov.w	r1, #4294967295
 800d340:	4618      	mov	r0, r3
 800d342:	f006 f997 	bl	8013674 <_tx_mutex_get>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <_fx_file_read+0x60>
 800d34c:	2311      	movs	r3, #17
 800d34e:	e26c      	b.n	800d82a <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800d350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d352:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800d356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d358:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800d35c:	4290      	cmp	r0, r2
 800d35e:	eb71 0303 	sbcs.w	r3, r1, r3
 800d362:	d30a      	bcc.n	800d37a <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d366:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d36a:	4618      	mov	r0, r3
 800d36c:	f006 fbfa 	bl	8013b64 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800d370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800d376:	2309      	movs	r3, #9
 800d378:	e257      	b.n	800d82a <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800d37a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d37c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800d380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d382:	2200      	movs	r2, #0
 800d384:	4698      	mov	r8, r3
 800d386:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800d388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d390:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d394:	1a84      	subs	r4, r0, r2
 800d396:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800d39a:	4544      	cmp	r4, r8
 800d39c:	eb75 0309 	sbcs.w	r3, r5, r9
 800d3a0:	d209      	bcs.n	800d3b6 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800d3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	1acb      	subs	r3, r1, r3
 800d3b4:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800d3b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800d3bc:	e20a      	b.n	800d7d4 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800d3c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d3ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d24d      	bcs.n	800d46e <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d3d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3da:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d3dc:	2304      	movs	r3, #4
 800d3de:	9302      	str	r3, [sp, #8]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	9200      	str	r2, [sp, #0]
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d3ec:	f004 fb0e 	bl	8011a0c <_fx_utility_logical_sector_read>
 800d3f0:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d3f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d007      	beq.n	800d408 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d3f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f006 fbb0 	bl	8013b64 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d406:	e210      	b.n	800d82a <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d40a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800d40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800d416:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d41a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d41e:	429a      	cmp	r2, r3
 800d420:	d903      	bls.n	800d42a <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800d422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d42a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d42c:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800d42e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d432:	4413      	add	r3, r2
 800d434:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d438:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d43c:	4618      	mov	r0, r3
 800d43e:	f004 fee1 	bl	8012204 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800d442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d44a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800d44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d44e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800d450:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800d45e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d466:	4413      	add	r3, r2
 800d468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d46c:	e108      	b.n	800d680 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800d46e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d476:	fbb3 f3f2 	udiv	r3, r3, r2
 800d47a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800d47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d48a:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d48c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d48e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d49a:	e033      	b.n	800d504 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d49c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d4a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d4a8:	f002 fea2 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800d4ac:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d4ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <_fx_file_read+0x1da>
 800d4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d907      	bls.n	800d4ca <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d4ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4c0:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d20c      	bcs.n	800d4e4 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d4ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f006 fb47 	bl	8013b64 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <_fx_file_read+0x1f0>
                        {
                            return(status);
 800d4dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4de:	e1a4      	b.n	800d82a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	e1a2      	b.n	800d82a <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800d4e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d110      	bne.n	800d512 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800d4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d4f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4fe:	4413      	add	r3, r2
 800d500:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d504:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d3c5      	bcc.n	800d49c <_fx_file_read+0x1ac>
 800d510:	e000      	b.n	800d514 <_fx_file_read+0x224>
                        break;
 800d512:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800d514:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d203      	bcs.n	800d528 <_fx_file_read+0x238>
            {
                sectors = i;
 800d520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800d528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d129      	bne.n	800d584 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d532:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d538:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d53a:	2304      	movs	r3, #4
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	2301      	movs	r3, #1
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	9200      	str	r2, [sp, #0]
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d54a:	f004 fa5f 	bl	8011a0c <_fx_utility_logical_sector_read>
 800d54e:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d552:	2b00      	cmp	r3, #0
 800d554:	d007      	beq.n	800d566 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d558:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d55c:	4618      	mov	r0, r3
 800d55e:	f006 fb01 	bl	8013b64 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d564:	e161      	b.n	800d82a <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800d566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d568:	6898      	ldr	r0, [r3, #8]
 800d56a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56e:	461a      	mov	r2, r3
 800d570:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d574:	f004 fe46 	bl	8012204 <_fx_utility_memory_copy>
 800d578:	e02f      	b.n	800d5da <_fx_file_read+0x2ea>
 800d57a:	bf00      	nop
 800d57c:	46494c45 	.word	0x46494c45
 800d580:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800d584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d586:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800d58a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d58c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d590:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d596:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800d59a:	2304      	movs	r3, #4
 800d59c:	9302      	str	r3, [sp, #8]
 800d59e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d5b0:	f004 fa2c 	bl	8011a0c <_fx_utility_logical_sector_read>
 800d5b4:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800d5b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d5bc:	461a      	mov	r2, r3
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d5c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d007      	beq.n	800d5da <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d5ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f006 fac7 	bl	8013b64 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5d8:	e127      	b.n	800d82a <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800d5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5dc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800d5e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5ea:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800d5ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	18c3      	adds	r3, r0, r3
 800d5f4:	653b      	str	r3, [r7, #80]	; 0x50
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	eb41 0303 	adc.w	r3, r1, r3
 800d5fc:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800d5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d600:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d604:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60a:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d614:	4413      	add	r3, r2
 800d616:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800d618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d61c:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d620:	18ca      	adds	r2, r1, r3
 800d622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d624:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800d626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d62a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d62e:	4413      	add	r3, r2
 800d630:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800d632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d636:	fbb1 f3f2 	udiv	r3, r1, r2
 800d63a:	fb02 f303 	mul.w	r3, r2, r3
 800d63e:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800d640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d642:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800d644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800d648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d64a:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800d64c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d652:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d65c:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800d660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d664:	1a9b      	subs	r3, r3, r2
 800d666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d66c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d66e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d672:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800d676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d67a:	4413      	add	r3, r2
 800d67c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800d680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800d684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800d688:	429a      	cmp	r2, r3
 800d68a:	f0c0 80a3 	bcc.w	800d7d4 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d68e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d692:	2b00      	cmp	r3, #0
 800d694:	d11a      	bne.n	800d6cc <_fx_file_read+0x3dc>
 800d696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d698:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d69c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d69e:	2000      	movs	r0, #0
 800d6a0:	64b9      	str	r1, [r7, #72]	; 0x48
 800d6a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d6a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	1851      	adds	r1, r2, r1
 800d6ac:	6439      	str	r1, [r7, #64]	; 0x40
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	414b      	adcs	r3, r1
 800d6b2:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800d6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d6ba:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4291      	cmp	r1, r2
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	eb71 0303 	sbcs.w	r3, r1, r3
 800d6c8:	f080 808a 	bcs.w	800d7e0 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800d6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800d6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800d6da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d368      	bcc.n	800d7b4 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800d6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e4:	6a19      	ldr	r1, [r3, #32]
 800d6e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d6ee:	f002 fd7f 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800d6f2:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d6f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10a      	bne.n	800d710 <_fx_file_read+0x420>
 800d6fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d907      	bls.n	800d710 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d702:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d706:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d70a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d20c      	bcs.n	800d72a <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d712:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d716:	4618      	mov	r0, r3
 800d718:	f006 fa24 	bl	8013b64 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d71c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <_fx_file_read+0x436>
                        {
                            return(status);
 800d722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d724:	e081      	b.n	800d82a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d726:	2308      	movs	r3, #8
 800d728:	e07f      	b.n	800d82a <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800d72a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72e:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800d730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d738:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d73a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73e:	2200      	movs	r2, #0
 800d740:	63bb      	str	r3, [r7, #56]	; 0x38
 800d742:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d746:	2200      	movs	r2, #0
 800d748:	633b      	str	r3, [r7, #48]	; 0x30
 800d74a:	637a      	str	r2, [r7, #52]	; 0x34
 800d74c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d750:	460b      	mov	r3, r1
 800d752:	3b02      	subs	r3, #2
 800d754:	62bb      	str	r3, [r7, #40]	; 0x28
 800d756:	4613      	mov	r3, r2
 800d758:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d75e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d762:	2200      	movs	r2, #0
 800d764:	623b      	str	r3, [r7, #32]
 800d766:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d768:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d76c:	462b      	mov	r3, r5
 800d76e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d772:	4642      	mov	r2, r8
 800d774:	fb02 f203 	mul.w	r2, r2, r3
 800d778:	464b      	mov	r3, r9
 800d77a:	4621      	mov	r1, r4
 800d77c:	fb01 f303 	mul.w	r3, r1, r3
 800d780:	4413      	add	r3, r2
 800d782:	4622      	mov	r2, r4
 800d784:	4641      	mov	r1, r8
 800d786:	fba2 ab01 	umull	sl, fp, r2, r1
 800d78a:	445b      	add	r3, fp
 800d78c:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d78e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d792:	460b      	mov	r3, r1
 800d794:	eb13 030a 	adds.w	r3, r3, sl
 800d798:	61bb      	str	r3, [r7, #24]
 800d79a:	4613      	mov	r3, r2
 800d79c:	eb43 030b 	adc.w	r3, r3, fp
 800d7a0:	61fb      	str	r3, [r7, #28]
 800d7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7a8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800d7ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	6393      	str	r3, [r2, #56]	; 0x38
 800d7b2:	e00c      	b.n	800d7ce <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800d7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d7ba:	1c51      	adds	r1, r2, #1
 800d7bc:	6139      	str	r1, [r7, #16]
 800d7be:	f143 0300 	adc.w	r3, r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d7ca:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800d7ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800d7d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f47f adf0 	bne.w	800d3be <_fx_file_read+0xce>
 800d7de:	e000      	b.n	800d7e2 <_fx_file_read+0x4f2>
                break;
 800d7e0:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800d7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d7e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	1851      	adds	r1, r2, r1
 800d7f8:	6039      	str	r1, [r7, #0]
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	eb43 0101 	adc.w	r1, r3, r1
 800d800:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800d802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d804:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d808:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800d80c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d80e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d810:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800d812:	4b08      	ldr	r3, [pc, #32]	; (800d834 <_fx_file_read+0x544>)
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800d81c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d81e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d822:	4618      	mov	r0, r3
 800d824:	f006 f99e 	bl	8013b64 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3798      	adds	r7, #152	; 0x98
 800d82e:	46bd      	mov	sp, r7
 800d830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d834:	24014c90 	.word	0x24014c90

0800d838 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	2000      	movs	r0, #0
 800d846:	460a      	mov	r2, r1
 800d848:	4603      	mov	r3, r0
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7fe fd9e 	bl	800c38c <_fx_file_extended_seek>
 800d850:	4603      	mov	r3, r0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800d85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d860:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d864:	af04      	add	r7, sp, #16
 800d866:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800d86a:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800d86e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d872:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	4bd9      	ldr	r3, [pc, #868]	; (800dbe0 <_fx_file_write+0x384>)
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d002      	beq.n	800d884 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d87e:	2307      	movs	r3, #7
 800d880:	f000 bf26 	b.w	800e6d0 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d884:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800d88e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d892:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d89c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800d8a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8a4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d8a8:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	eb12 0804 	adds.w	r8, r2, r4
 800d8b6:	eb43 0905 	adc.w	r9, r3, r5
 800d8ba:	f1b9 0f01 	cmp.w	r9, #1
 800d8be:	d302      	bcc.n	800d8c6 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800d8c0:	230a      	movs	r3, #10
 800d8c2:	f000 bf05 	b.w	800e6d0 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d8c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	4bc5      	ldr	r3, [pc, #788]	; (800dbe4 <_fx_file_write+0x388>)
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d002      	beq.n	800d8d8 <_fx_file_write+0x7c>
 800d8d2:	2311      	movs	r3, #17
 800d8d4:	f000 befc 	b.w	800e6d0 <_fx_file_write+0xe74>
 800d8d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8e0:	f04f 31ff 	mov.w	r1, #4294967295
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f005 fec5 	bl	8013674 <_tx_mutex_get>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <_fx_file_write+0x9a>
 800d8f0:	2311      	movs	r3, #17
 800d8f2:	f000 beed 	b.w	800e6d0 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800d8f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d009      	beq.n	800d916 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d902:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d906:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d90a:	4618      	mov	r0, r3
 800d90c:	f006 f92a 	bl	8013b64 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800d910:	2323      	movs	r3, #35	; 0x23
 800d912:	f000 bedd 	b.w	800e6d0 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800d916:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d009      	beq.n	800d934 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d920:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d924:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d928:	4618      	mov	r0, r3
 800d92a:	f006 f91b 	bl	8013b64 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800d92e:	2306      	movs	r3, #6
 800d930:	f000 bece 	b.w	800e6d0 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d934:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d93a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d940:	fb02 f303 	mul.w	r3, r2, r3
 800d944:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d948:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d109      	bne.n	800d964 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800d950:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d954:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d958:	4618      	mov	r0, r3
 800d95a:	f006 f903 	bl	8013b64 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d95e:	2302      	movs	r3, #2
 800d960:	f000 beb6 	b.w	800e6d0 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800d964:	2300      	movs	r3, #0
 800d966:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800d96a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d96e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d972:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d976:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d97a:	ebb0 0a02 	subs.w	sl, r0, r2
 800d97e:	eb61 0b03 	sbc.w	fp, r1, r3
 800d982:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d986:	2200      	movs	r2, #0
 800d988:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800d98c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800d990:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800d994:	460b      	mov	r3, r1
 800d996:	459a      	cmp	sl, r3
 800d998:	4613      	mov	r3, r2
 800d99a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800d99e:	f080 82a9 	bcs.w	800def4 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d9a2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d9a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d9aa:	4413      	add	r3, r2
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d9b4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d9b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d9bc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800d9c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d9c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d9c8:	1a84      	subs	r4, r0, r2
 800d9ca:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d9ce:	eb61 0303 	sbc.w	r3, r1, r3
 800d9d2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d9d6:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800d9da:	4623      	mov	r3, r4
 800d9dc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	189b      	adds	r3, r3, r2
 800d9e4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	eb42 0303 	adc.w	r3, r2, r3
 800d9f0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d9f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800d9fe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800da02:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800da06:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800da0a:	f7f2 fdd9 	bl	80005c0 <__aeabi_uldivmod>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800da12:	4613      	mov	r3, r2
 800da14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800da18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800da1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da22:	4293      	cmp	r3, r2
 800da24:	d909      	bls.n	800da3a <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800da26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da2a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800da2e:	4618      	mov	r0, r3
 800da30:	f006 f898 	bl	8013b64 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800da34:	230a      	movs	r3, #10
 800da36:	f000 be4b 	b.w	800e6d0 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800da3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da44:	441a      	add	r2, r3
 800da46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da4a:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800da4c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da50:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800da54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800da58:	2200      	movs	r2, #0
 800da5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800da5e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800da62:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da66:	2200      	movs	r2, #0
 800da68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800da6c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800da70:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800da74:	464b      	mov	r3, r9
 800da76:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800da7a:	4652      	mov	r2, sl
 800da7c:	fb02 f203 	mul.w	r2, r2, r3
 800da80:	465b      	mov	r3, fp
 800da82:	4644      	mov	r4, r8
 800da84:	fb04 f303 	mul.w	r3, r4, r3
 800da88:	4413      	add	r3, r2
 800da8a:	4642      	mov	r2, r8
 800da8c:	4654      	mov	r4, sl
 800da8e:	fba2 4204 	umull	r4, r2, r2, r4
 800da92:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800da96:	4622      	mov	r2, r4
 800da98:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800da9c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800daa0:	4413      	add	r3, r2
 800daa2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800daa6:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800daaa:	4623      	mov	r3, r4
 800daac:	18c3      	adds	r3, r0, r3
 800daae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800dab2:	462b      	mov	r3, r5
 800dab4:	eb41 0303 	adc.w	r3, r1, r3
 800dab8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800dabc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d308      	bcc.n	800dad6 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800dac4:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800dac8:	f04f 32ff 	mov.w	r2, #4294967295
 800dacc:	f04f 0300 	mov.w	r3, #0
 800dad0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800dad4:	e03d      	b.n	800db52 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800dad6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dada:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800dade:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800dae8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800daec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800daf0:	2200      	movs	r2, #0
 800daf2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800daf6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800dafa:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800dafe:	464b      	mov	r3, r9
 800db00:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800db04:	4652      	mov	r2, sl
 800db06:	fb02 f203 	mul.w	r2, r2, r3
 800db0a:	465b      	mov	r3, fp
 800db0c:	4644      	mov	r4, r8
 800db0e:	fb04 f303 	mul.w	r3, r4, r3
 800db12:	4413      	add	r3, r2
 800db14:	4642      	mov	r2, r8
 800db16:	4654      	mov	r4, sl
 800db18:	fba2 4204 	umull	r4, r2, r2, r4
 800db1c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800db20:	4622      	mov	r2, r4
 800db22:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800db26:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800db2a:	4413      	add	r3, r2
 800db2c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800db30:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800db34:	4623      	mov	r3, r4
 800db36:	18c3      	adds	r3, r0, r3
 800db38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800db3c:	462b      	mov	r3, r5
 800db3e:	eb41 0303 	adc.w	r3, r1, r3
 800db42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800db46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db4a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800db4e:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800db52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800db58:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800db5c:	1ad2      	subs	r2, r2, r3
 800db5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db62:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800db64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800db6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db72:	69db      	ldr	r3, [r3, #28]
 800db74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800db78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800db84:	e16f      	b.n	800de66 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800db86:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800db8a:	3b01      	subs	r3, #1
 800db8c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800db90:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800db94:	2b00      	cmp	r3, #0
 800db96:	d109      	bne.n	800dbac <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800db98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db9c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dba0:	4618      	mov	r0, r3
 800dba2:	f005 ffdf 	bl	8013b64 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800dba6:	230a      	movs	r3, #10
 800dba8:	f000 bd92 	b.w	800e6d0 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800dbac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800dbb6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dbba:	f002 fb19 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800dbbe:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800dbc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00e      	beq.n	800dbe8 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dbca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f005 ffc6 	bl	8013b64 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800dbd8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dbdc:	f000 bd78 	b.w	800e6d0 <_fx_file_write+0xe74>
 800dbe0:	46494c45 	.word	0x46494c45
 800dbe4:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800dbe8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800dbec:	3b01      	subs	r3, #1
 800dbee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800dbf2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d116      	bne.n	800dc28 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800dbfa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800dc08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800dc10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc16:	3302      	adds	r3, #2
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d316      	bcc.n	800dc4a <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800dc1c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dc20:	2302      	movs	r3, #2
 800dc22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800dc26:	e010      	b.n	800dc4a <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800dc28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800dc32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc38:	1c9a      	adds	r2, r3, #2
 800dc3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d3a6      	bcc.n	800db90 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800dc42:	2302      	movs	r3, #2
 800dc44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800dc48:	e7a2      	b.n	800db90 <_fx_file_write+0x334>
                        break;
 800dc4a:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800dc4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d103      	bne.n	800dc5c <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800dc54:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800dc5c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 808f 	beq.w	800dd84 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800dc66:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc6a:	69da      	ldr	r2, [r3, #28]
 800dc6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d009      	beq.n	800dc88 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800dc74:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800dc78:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800dc7c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dc80:	f002 fcdf 	bl	8010642 <_fx_utility_FAT_entry_write>
 800dc84:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800dc88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00a      	beq.n	800dca6 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dc90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc94:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f005 ff63 	bl	8013b64 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800dc9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dca2:	f000 bd15 	b.w	800e6d0 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800dca6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800dcac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcb2:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	f0c0 80cc 	bcc.w	800de52 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800dcba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800dcc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	f0c0 80c3 	bcc.w	800de52 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800dccc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dcd0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dcd4:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800dcd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dce2:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800dce4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dce8:	2300      	movs	r3, #0
 800dcea:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dcec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dcf8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dcfc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd00:	3b02      	subs	r3, #2
 800dd02:	2200      	movs	r2, #0
 800dd04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dd08:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800dd0c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dd18:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dd1c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800dd20:	462b      	mov	r3, r5
 800dd22:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800dd26:	4642      	mov	r2, r8
 800dd28:	fb02 f203 	mul.w	r2, r2, r3
 800dd2c:	464b      	mov	r3, r9
 800dd2e:	4621      	mov	r1, r4
 800dd30:	fb01 f303 	mul.w	r3, r1, r3
 800dd34:	4413      	add	r3, r2
 800dd36:	4622      	mov	r2, r4
 800dd38:	4641      	mov	r1, r8
 800dd3a:	fba2 1201 	umull	r1, r2, r2, r1
 800dd3e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800dd42:	460a      	mov	r2, r1
 800dd44:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800dd48:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dd52:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800dd56:	4623      	mov	r3, r4
 800dd58:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	189b      	adds	r3, r3, r2
 800dd60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd64:	462b      	mov	r3, r5
 800dd66:	460a      	mov	r2, r1
 800dd68:	4153      	adcs	r3, r2
 800dd6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dd6e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd72:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800dd76:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800dd7a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd7e:	2300      	movs	r3, #0
 800dd80:	6313      	str	r3, [r2, #48]	; 0x30
 800dd82:	e066      	b.n	800de52 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800dd84:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd88:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd8c:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800dd8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd96:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800dd98:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dda0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda6:	2200      	movs	r2, #0
 800dda8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ddac:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800ddb0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800ddb4:	3b02      	subs	r3, #2
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ddbc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ddc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ddc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ddcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800ddd0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ddda:	4642      	mov	r2, r8
 800dddc:	fb02 f203 	mul.w	r2, r2, r3
 800dde0:	464b      	mov	r3, r9
 800dde2:	4621      	mov	r1, r4
 800dde4:	fb01 f303 	mul.w	r3, r1, r3
 800dde8:	4413      	add	r3, r2
 800ddea:	4622      	mov	r2, r4
 800ddec:	4641      	mov	r1, r8
 800ddee:	fba2 1201 	umull	r1, r2, r2, r1
 800ddf2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800ddf6:	460a      	mov	r2, r1
 800ddf8:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800ddfc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800de00:	4413      	add	r3, r2
 800de02:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800de06:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800de0a:	4623      	mov	r3, r4
 800de0c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800de10:	4602      	mov	r2, r0
 800de12:	189b      	adds	r3, r3, r2
 800de14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de18:	462b      	mov	r3, r5
 800de1a:	460a      	mov	r2, r1
 800de1c:	4153      	adcs	r3, r2
 800de1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de22:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800de2a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800de2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800de32:	2300      	movs	r3, #0
 800de34:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800de36:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800de3a:	f04f 0200 	mov.w	r2, #0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800de46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800de4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800de52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800de5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800de66:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f47f ae8b 	bne.w	800db86 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800de70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800de78:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800de7c:	461a      	mov	r2, r3
 800de7e:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800de82:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800de86:	f002 fbdc 	bl	8010642 <_fx_utility_FAT_entry_write>
 800de8a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800de8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00a      	beq.n	800deac <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800de96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de9a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de9e:	4618      	mov	r0, r3
 800dea0:	f005 fe60 	bl	8013b64 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800dea4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dea8:	f000 bc12 	b.w	800e6d0 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800deac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d019      	beq.n	800deea <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800deb6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800dec0:	4619      	mov	r1, r3
 800dec2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dec6:	f002 fbbc 	bl	8010642 <_fx_utility_FAT_entry_write>
 800deca:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800dece:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ded6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800deda:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dede:	4618      	mov	r0, r3
 800dee0:	f005 fe40 	bl	8013b64 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800dee4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dee8:	e3f2      	b.n	800e6d0 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800deea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800deee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800def2:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800def4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800def8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800defa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800defe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800df00:	429a      	cmp	r2, r3
 800df02:	d31b      	bcc.n	800df3c <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800df04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800df0c:	1c51      	adds	r1, r2, #1
 800df0e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800df12:	f143 0300 	adc.w	r3, r3, #0
 800df16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df1a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800df22:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800df26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2c:	1c5a      	adds	r2, r3, #1
 800df2e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df32:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800df34:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800df38:	2300      	movs	r3, #0
 800df3a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800df3c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800df40:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800df44:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800df48:	2200      	movs	r2, #0
 800df4a:	613b      	str	r3, [r7, #16]
 800df4c:	617a      	str	r2, [r7, #20]
 800df4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800df52:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800df56:	e290      	b.n	800e47a <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800df58:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d111      	bne.n	800df86 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800df62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df68:	2200      	movs	r2, #0
 800df6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df6e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800df72:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800df76:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800df7a:	4621      	mov	r1, r4
 800df7c:	428a      	cmp	r2, r1
 800df7e:	4629      	mov	r1, r5
 800df80:	418b      	sbcs	r3, r1
 800df82:	f080 8096 	bcs.w	800e0b2 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800df86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800df8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df92:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800df94:	2304      	movs	r3, #4
 800df96:	9302      	str	r3, [sp, #8]
 800df98:	2301      	movs	r3, #1
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	9200      	str	r2, [sp, #0]
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dfa6:	f003 fd31 	bl	8011a0c <_fx_utility_logical_sector_read>
 800dfaa:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800dfae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d009      	beq.n	800dfca <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800dfb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dfba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f005 fdd0 	bl	8013b64 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800dfc4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dfc8:	e382      	b.n	800e6d0 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dfca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dfce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800dfd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800dfdc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dfe6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800dfea:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dfee:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800dff2:	4621      	mov	r1, r4
 800dff4:	428a      	cmp	r2, r1
 800dff6:	4629      	mov	r1, r5
 800dff8:	418b      	sbcs	r3, r1
 800dffa:	d203      	bcs.n	800e004 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800dffc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e000:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800e004:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e008:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800e00a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800e010:	4413      	add	r3, r2
 800e012:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800e016:	4619      	mov	r1, r3
 800e018:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800e01c:	f004 f8f2 	bl	8012204 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e020:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e024:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800e028:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e02c:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e02e:	2304      	movs	r3, #4
 800e030:	9302      	str	r3, [sp, #8]
 800e032:	2301      	movs	r3, #1
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	9200      	str	r2, [sp, #0]
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e040:	f003 ff78 	bl	8011f34 <_fx_utility_logical_sector_write>
 800e044:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e048:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d009      	beq.n	800e064 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e050:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e054:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e058:	4618      	mov	r0, r3
 800e05a:	f005 fd83 	bl	8013b64 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e05e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e062:	e335      	b.n	800e6d0 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800e064:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e06a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e06e:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800e070:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e074:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800e076:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e080:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e084:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e088:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e08c:	4621      	mov	r1, r4
 800e08e:	1a51      	subs	r1, r2, r1
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4629      	mov	r1, r5
 800e094:	eb63 0301 	sbc.w	r3, r3, r1
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e09e:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800e0a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800e0a6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800e0b0:	e10d      	b.n	800e2ce <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800e0b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e0be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e0c2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e0c6:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800e0ca:	f7f2 fa79 	bl	80005c0 <__aeabi_uldivmod>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800e0d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800e0e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e0e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e0ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e0f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800e0fc:	e03f      	b.n	800e17e <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800e0fe:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e102:	461a      	mov	r2, r3
 800e104:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800e108:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e10c:	f002 f870 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800e110:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e114:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10d      	bne.n	800e138 <_fx_file_write+0x8dc>
 800e11c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e120:	2b01      	cmp	r3, #1
 800e122:	d909      	bls.n	800e138 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e124:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e128:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e12c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e130:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e134:	429a      	cmp	r2, r3
 800e136:	d20f      	bcs.n	800e158 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e138:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e13c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e140:	4618      	mov	r0, r3
 800e142:	f005 fd0f 	bl	8013b64 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e146:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800e14e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e152:	e2bd      	b.n	800e6d0 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e154:	2308      	movs	r3, #8
 800e156:	e2bb      	b.n	800e6d0 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800e158:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e162:	429a      	cmp	r2, r3
 800e164:	d112      	bne.n	800e18c <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800e166:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e16a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e16e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e174:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e178:	4413      	add	r3, r2
 800e17a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e17e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e182:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e186:	429a      	cmp	r2, r3
 800e188:	d3b9      	bcc.n	800e0fe <_fx_file_write+0x8a2>
 800e18a:	e000      	b.n	800e18e <_fx_file_write+0x932>
                        break;
 800e18c:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800e18e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e192:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e196:	429a      	cmp	r2, r3
 800e198:	d203      	bcs.n	800e1a2 <_fx_file_write+0x946>
            {
                sectors = i;
 800e19a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e19e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e1a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1b2:	9301      	str	r3, [sp, #4]
 800e1b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e1c2:	f003 feb7 	bl	8011f34 <_fx_utility_logical_sector_write>
 800e1c6:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e1ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d009      	beq.n	800e1e6 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e1d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f005 fcc2 	bl	8013b64 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e1e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e1e4:	e274      	b.n	800e6d0 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800e1e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800e1ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e1fa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800e1fe:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800e202:	4623      	mov	r3, r4
 800e204:	18c3      	adds	r3, r0, r3
 800e206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e20a:	462b      	mov	r3, r5
 800e20c:	eb41 0303 	adc.w	r3, r1, r3
 800e210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800e214:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e218:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e21c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800e220:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e224:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800e226:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e22a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e22c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e230:	4413      	add	r3, r2
 800e232:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800e234:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800e23a:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800e23e:	18ca      	adds	r2, r1, r3
 800e240:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e244:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800e246:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e24a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e24c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e250:	4413      	add	r3, r2
 800e252:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800e254:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800e25a:	fbb1 f3f2 	udiv	r3, r1, r2
 800e25e:	fb02 f303 	mul.w	r3, r2, r3
 800e262:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800e264:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e268:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800e26a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e26e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800e270:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e274:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800e276:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e27a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e27e:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800e280:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e286:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e28a:	fb02 f303 	mul.w	r3, r2, r3
 800e28e:	2200      	movs	r2, #0
 800e290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e294:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800e298:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e29c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	1a51      	subs	r1, r2, r1
 800e2a4:	6039      	str	r1, [r7, #0]
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	eb63 0301 	sbc.w	r3, r3, r1
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e2b2:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800e2b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2bc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e2c0:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800e2c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800e2ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800e2d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	f0c0 80cd 	bcc.w	800e47a <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800e2e0:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	d11f      	bne.n	800e328 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800e2e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e2f0:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e2fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800e2fe:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e302:	4621      	mov	r1, r4
 800e304:	1851      	adds	r1, r2, r1
 800e306:	67b9      	str	r1, [r7, #120]	; 0x78
 800e308:	4629      	mov	r1, r5
 800e30a:	414b      	adcs	r3, r1
 800e30c:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800e30e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e312:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800e316:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800e31a:	4621      	mov	r1, r4
 800e31c:	4291      	cmp	r1, r2
 800e31e:	4629      	mov	r1, r5
 800e320:	eb71 0303 	sbcs.w	r3, r1, r3
 800e324:	f080 80af 	bcs.w	800e486 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800e328:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32e:	1c5a      	adds	r2, r3, #1
 800e330:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e334:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800e336:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800e33c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800e342:	429a      	cmp	r2, r3
 800e344:	f0c0 8086 	bcc.w	800e454 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800e348:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e34c:	6a19      	ldr	r1, [r3, #32]
 800e34e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e352:	461a      	mov	r2, r3
 800e354:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e358:	f001 ff4a 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800e35c:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e360:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10d      	bne.n	800e384 <_fx_file_write+0xb28>
 800e368:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d909      	bls.n	800e384 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e370:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e374:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e378:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e37c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e380:	429a      	cmp	r2, r3
 800e382:	d20f      	bcs.n	800e3a4 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e384:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e388:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e38c:	4618      	mov	r0, r3
 800e38e:	f005 fbe9 	bl	8013b64 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e392:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <_fx_file_write+0xb44>
                        {
                            return(status);
 800e39a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e39e:	e197      	b.n	800e6d0 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e3a0:	2308      	movs	r3, #8
 800e3a2:	e195      	b.n	800e6d0 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800e3a4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800e3a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e3ac:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800e3ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b4:	1c5a      	adds	r2, r3, #1
 800e3b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e3ba:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e3bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	673b      	str	r3, [r7, #112]	; 0x70
 800e3c6:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e3c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	3b02      	subs	r3, #2
 800e3da:	663b      	str	r3, [r7, #96]	; 0x60
 800e3dc:	4613      	mov	r3, r2
 800e3de:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e3e2:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e3e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3ee:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e3f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e3f4:	462b      	mov	r3, r5
 800e3f6:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800e3fa:	4642      	mov	r2, r8
 800e3fc:	fb02 f203 	mul.w	r2, r2, r3
 800e400:	464b      	mov	r3, r9
 800e402:	4621      	mov	r1, r4
 800e404:	fb01 f303 	mul.w	r3, r1, r3
 800e408:	4413      	add	r3, r2
 800e40a:	4622      	mov	r2, r4
 800e40c:	4641      	mov	r1, r8
 800e40e:	fba2 1201 	umull	r1, r2, r2, r1
 800e412:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800e416:	460a      	mov	r2, r1
 800e418:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800e41c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800e420:	4413      	add	r3, r2
 800e422:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e426:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800e42a:	4623      	mov	r3, r4
 800e42c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800e430:	4602      	mov	r2, r0
 800e432:	189b      	adds	r3, r3, r2
 800e434:	653b      	str	r3, [r7, #80]	; 0x50
 800e436:	462b      	mov	r3, r5
 800e438:	460a      	mov	r2, r1
 800e43a:	4153      	adcs	r3, r2
 800e43c:	657b      	str	r3, [r7, #84]	; 0x54
 800e43e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e442:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e446:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800e44a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e44e:	2300      	movs	r3, #0
 800e450:	6393      	str	r3, [r2, #56]	; 0x38
 800e452:	e00e      	b.n	800e472 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800e454:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e458:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e45c:	1c51      	adds	r1, r2, #1
 800e45e:	64b9      	str	r1, [r7, #72]	; 0x48
 800e460:	f143 0300 	adc.w	r3, r3, #0
 800e464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e466:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e46a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e46e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800e472:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e476:	2300      	movs	r3, #0
 800e478:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800e47a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e47e:	4313      	orrs	r3, r2
 800e480:	f47f ad6a 	bne.w	800df58 <_fx_file_write+0x6fc>
 800e484:	e000      	b.n	800e488 <_fx_file_write+0xc2c>
                break;
 800e486:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800e488:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e48c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e490:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e494:	2000      	movs	r0, #0
 800e496:	6439      	str	r1, [r7, #64]	; 0x40
 800e498:	6478      	str	r0, [r7, #68]	; 0x44
 800e49a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e49e:	4621      	mov	r1, r4
 800e4a0:	1851      	adds	r1, r2, r1
 800e4a2:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	eb43 0101 	adc.w	r1, r3, r1
 800e4aa:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800e4ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e4b4:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800e4b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4bc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e4c0:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e4c4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800e4c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800e4d0:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e4d4:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800e4d8:	4290      	cmp	r0, r2
 800e4da:	eb71 0303 	sbcs.w	r3, r1, r3
 800e4de:	f080 80de 	bcs.w	800e69e <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e4e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e4ea:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e4ee:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800e4f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4fa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800e4fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e502:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e506:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800e50a:	e0c3      	b.n	800e694 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800e50c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800e510:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e514:	429a      	cmp	r2, r3
 800e516:	f000 80b3 	beq.w	800e680 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800e51a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e51e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e522:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e526:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800e52a:	4299      	cmp	r1, r3
 800e52c:	bf08      	it	eq
 800e52e:	4290      	cmpeq	r0, r2
 800e530:	f040 80a6 	bne.w	800e680 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800e534:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e538:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800e53c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e544:	429a      	cmp	r2, r3
 800e546:	f040 809b 	bne.w	800e680 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e54a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e54e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e552:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e556:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800e55a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e55e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e562:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800e56a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e56e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800e572:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e576:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800e57a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e57e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800e582:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e586:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800e58a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e58e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800e592:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800e59a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e59e:	69da      	ldr	r2, [r3, #28]
 800e5a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5a4:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800e5a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800e5ae:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e5b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800e5b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d15f      	bne.n	800e680 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800e5c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5c4:	691a      	ldr	r2, [r3, #16]
 800e5c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5ca:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800e5cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5d0:	695a      	ldr	r2, [r3, #20]
 800e5d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5d6:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800e5d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5dc:	2200      	movs	r2, #0
 800e5de:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e5e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ea:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e5ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	3b02      	subs	r3, #2
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5f8:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e5fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e600:	2200      	movs	r2, #0
 800e602:	623b      	str	r3, [r7, #32]
 800e604:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e606:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e60a:	462b      	mov	r3, r5
 800e60c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e610:	4642      	mov	r2, r8
 800e612:	fb02 f203 	mul.w	r2, r2, r3
 800e616:	464b      	mov	r3, r9
 800e618:	4621      	mov	r1, r4
 800e61a:	fb01 f303 	mul.w	r3, r1, r3
 800e61e:	4413      	add	r3, r2
 800e620:	4622      	mov	r2, r4
 800e622:	4641      	mov	r1, r8
 800e624:	fba2 1201 	umull	r1, r2, r2, r1
 800e628:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800e62c:	460a      	mov	r2, r1
 800e62e:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800e632:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800e636:	4413      	add	r3, r2
 800e638:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e63c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e640:	4623      	mov	r3, r4
 800e642:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800e646:	4602      	mov	r2, r0
 800e648:	189b      	adds	r3, r3, r2
 800e64a:	61bb      	str	r3, [r7, #24]
 800e64c:	462b      	mov	r3, r5
 800e64e:	460a      	mov	r2, r1
 800e650:	4153      	adcs	r3, r2
 800e652:	61fb      	str	r3, [r7, #28]
 800e654:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e658:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e65c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800e660:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e664:	2200      	movs	r2, #0
 800e666:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800e668:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e66c:	2200      	movs	r2, #0
 800e66e:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800e670:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e674:	f04f 0200 	mov.w	r2, #0
 800e678:	f04f 0300 	mov.w	r3, #0
 800e67c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800e680:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e686:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800e68a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e68e:	3b01      	subs	r3, #1
 800e690:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800e694:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f47f af37 	bne.w	800e50c <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800e69e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800e6a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e6aa:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d006      	beq.n	800e6c0 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800e6b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e6b6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e6ba:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800e6be:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e6c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e6c4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f005 fa4b 	bl	8013b64 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6dc <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a3f      	ldr	r2, [pc, #252]	; (800e7f4 <_fx_media_abort+0x118>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d001      	beq.n	800e700 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e6fc:	2311      	movs	r3, #17
 800e6fe:	e074      	b.n	800e7ea <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a3b      	ldr	r2, [pc, #236]	; (800e7f4 <_fx_media_abort+0x118>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d001      	beq.n	800e70e <_fx_media_abort+0x32>
 800e70a:	2311      	movs	r3, #17
 800e70c:	e06d      	b.n	800e7ea <_fx_media_abort+0x10e>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e714:	f04f 31ff 	mov.w	r1, #4294967295
 800e718:	4618      	mov	r0, r3
 800e71a:	f004 ffab 	bl	8013674 <_tx_mutex_get>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <_fx_media_abort+0x4c>
 800e724:	2311      	movs	r3, #17
 800e726:	e060      	b.n	800e7ea <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e72e:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e736:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800e738:	e008      	b.n	800e74c <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	4a2e      	ldr	r2, [pc, #184]	; (800e7f8 <_fx_media_abort+0x11c>)
 800e73e:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e744:	61bb      	str	r3, [r7, #24]
        open_count--;
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	3b01      	subs	r3, #1
 800e74a:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1f3      	bne.n	800e73a <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2203      	movs	r2, #3
 800e756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2290      	movs	r2, #144	; 0x90
 800e75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e76c:	f3ef 8310 	mrs	r3, PRIMASK
 800e770:	613b      	str	r3, [r7, #16]
    return(posture);
 800e772:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e774:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e776:	b672      	cpsid	i
    return(int_posture);
 800e778:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e77a:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e77c:	4b1f      	ldr	r3, [pc, #124]	; (800e7fc <_fx_media_abort+0x120>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d103      	bne.n	800e78c <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e784:	4b1e      	ldr	r3, [pc, #120]	; (800e800 <_fx_media_abort+0x124>)
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	e019      	b.n	800e7c0 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e798:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e7a8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e7ac:	4b14      	ldr	r3, [pc, #80]	; (800e800 <_fx_media_abort+0x124>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d104      	bne.n	800e7c0 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e7bc:	4a10      	ldr	r2, [pc, #64]	; (800e800 <_fx_media_abort+0x124>)
 800e7be:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e7c0:	4b0e      	ldr	r3, [pc, #56]	; (800e7fc <_fx_media_abort+0x120>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	4a0d      	ldr	r2, [pc, #52]	; (800e7fc <_fx_media_abort+0x120>)
 800e7c8:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a0d      	ldr	r2, [pc, #52]	; (800e804 <_fx_media_abort+0x128>)
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	f383 8810 	msr	PRIMASK, r3
}
 800e7da:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f004 fe9c 	bl	8013520 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3720      	adds	r7, #32
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	4d454449 	.word	0x4d454449
 800e7f8:	46494c41 	.word	0x46494c41
 800e7fc:	24014c8c 	.word	0x24014c8c
 800e800:	24014c88 	.word	0x24014c88
 800e804:	4d454441 	.word	0x4d454441

0800e808 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e80c:	b084      	sub	sp, #16
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e818:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	330b      	adds	r3, #11
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 fc80 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e824:	4602      	mov	r2, r0
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e832:	2302      	movs	r3, #2
 800e834:	e08c      	b.n	800e950 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3318      	adds	r3, #24
 800e83a:	4618      	mov	r0, r3
 800e83c:	f001 fc72 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e840:	4602      	mov	r2, r0
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	331a      	adds	r3, #26
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 fc6a 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e850:	4602      	mov	r2, r0
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3313      	adds	r3, #19
 800e85a:	4618      	mov	r0, r3
 800e85c:	f001 fc62 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e860:	4603      	mov	r3, r0
 800e862:	2200      	movs	r2, #0
 800e864:	4698      	mov	r8, r3
 800e866:	4691      	mov	r9, r2
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e874:	4313      	orrs	r3, r2
 800e876:	d10b      	bne.n	800e890 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	3320      	adds	r3, #32
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 fc79 	bl	8010174 <_fx_utility_32_unsigned_read>
 800e882:	4603      	mov	r3, r0
 800e884:	2200      	movs	r2, #0
 800e886:	461c      	mov	r4, r3
 800e888:	4615      	mov	r5, r2
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e896:	4313      	orrs	r3, r2
 800e898:	d101      	bne.n	800e89e <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e89a:	2302      	movs	r3, #2
 800e89c:	e058      	b.n	800e950 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	330e      	adds	r3, #14
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f001 fc3e 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	e04a      	b.n	800e950 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	330d      	adds	r3, #13
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	e03e      	b.n	800e950 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3316      	adds	r3, #22
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f001 fc24 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d107      	bne.n	800e8fa <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	3324      	adds	r3, #36	; 0x24
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f001 fc40 	bl	8010174 <_fx_utility_32_unsigned_read>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d101      	bne.n	800e906 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e902:	2302      	movs	r3, #2
 800e904:	e024      	b.n	800e950 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	3310      	adds	r3, #16
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	461a      	mov	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d101      	bne.n	800e91e <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e91a:	2301      	movs	r3, #1
 800e91c:	e018      	b.n	800e950 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	331c      	adds	r3, #28
 800e922:	4618      	mov	r0, r3
 800e924:	f001 fc26 	bl	8010174 <_fx_utility_32_unsigned_read>
 800e928:	4602      	mov	r2, r0
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3311      	adds	r3, #17
 800e932:	4618      	mov	r0, r3
 800e934:	f001 fbf6 	bl	8010124 <_fx_utility_16_unsigned_read>
 800e938:	4602      	mov	r2, r0
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	332c      	adds	r3, #44	; 0x2c
 800e942:	4618      	mov	r0, r3
 800e944:	f001 fc16 	bl	8010174 <_fx_utility_32_unsigned_read>
 800e948:	4602      	mov	r2, r0
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e94e:	2300      	movs	r3, #0
}
 800e950:	4618      	mov	r0, r3
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800e95c <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b092      	sub	sp, #72	; 0x48
 800e960:	af04      	add	r7, sp, #16
 800e962:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4aa6      	ldr	r2, [pc, #664]	; (800ec04 <_fx_media_close+0x2a8>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d001      	beq.n	800e972 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e96e:	2311      	movs	r3, #17
 800e970:	e1c2      	b.n	800ecf8 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4aa3      	ldr	r2, [pc, #652]	; (800ec04 <_fx_media_close+0x2a8>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d001      	beq.n	800e980 <_fx_media_close+0x24>
 800e97c:	2311      	movs	r3, #17
 800e97e:	e1bb      	b.n	800ecf8 <_fx_media_close+0x39c>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e986:	f04f 31ff 	mov.w	r1, #4294967295
 800e98a:	4618      	mov	r0, r3
 800e98c:	f004 fe72 	bl	8013674 <_tx_mutex_get>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <_fx_media_close+0x3e>
 800e996:	2311      	movs	r3, #17
 800e998:	e1ae      	b.n	800ecf8 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e9a0:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e9a8:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800e9aa:	e046      	b.n	800ea3a <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d139      	bne.n	800ea28 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d035      	beq.n	800ea28 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e9c0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e9c2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e9c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9c6:	b672      	cpsid	i
    return(int_posture);
 800e9c8:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800e9ca:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e9cc:	4b8e      	ldr	r3, [pc, #568]	; (800ec08 <_fx_media_close+0x2ac>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e9d6:	4b8d      	ldr	r3, [pc, #564]	; (800ec0c <_fx_media_close+0x2b0>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	f383 8810 	msr	PRIMASK, r3
}
 800e9ea:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e9f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9f4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	3368      	adds	r3, #104	; 0x68
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7fb fa9a 	bl	8009f38 <_fx_directory_entry_write>
 800ea04:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00a      	beq.n	800ea22 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea12:	4618      	mov	r0, r3
 800ea14:	f005 f8a6 	bl	8013b64 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7ff fe5f 	bl	800e6dc <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800ea1e:	2390      	movs	r3, #144	; 0x90
 800ea20:	e16a      	b.n	800ecf8 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	2200      	movs	r2, #0
 800ea26:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	4a79      	ldr	r2, [pc, #484]	; (800ec10 <_fx_media_close+0x2b4>)
 800ea2c:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea32:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800ea34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea36:	3b01      	subs	r3, #1
 800ea38:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1b5      	bne.n	800e9ac <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f001 fef2 	bl	801082a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f002 fa40 	bl	8010ecc <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea52:	2100      	movs	r1, #0
 800ea54:	9102      	str	r1, [sp, #8]
 800ea56:	e9cd 2300 	strd	r2, r3, [sp]
 800ea5a:	f04f 0201 	mov.w	r2, #1
 800ea5e:	f04f 0300 	mov.w	r3, #0
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f002 fdbc 	bl	80115e0 <_fx_utility_logical_sector_flush>
 800ea68:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00a      	beq.n	800ea86 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea76:	4618      	mov	r0, r3
 800ea78:	f005 f874 	bl	8013b64 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff fe2d 	bl	800e6dc <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800ea82:	2390      	movs	r3, #144	; 0x90
 800ea84:	e138      	b.n	800ecf8 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80ca 	beq.w	800ec24 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	f000 80c3 	beq.w	800ec24 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f040 80bd 	bne.w	800ec24 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	69d9      	ldr	r1, [r3, #28]
 800eab6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaba:	f04f 33ff 	mov.w	r3, #4294967295
 800eabe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	2200      	movs	r2, #0
 800eac8:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2290      	movs	r2, #144	; 0x90
 800ead6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2203      	movs	r2, #3
 800eaf8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eb24:	4618      	mov	r0, r3
 800eb26:	f005 f81d 	bl	8013b64 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff fdd6 	bl	800e6dc <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800eb30:	2390      	movs	r3, #144	; 0x90
 800eb32:	e0e1      	b.n	800ecf8 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb3a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800eb3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb3e:	f001 fb19 	bl	8010174 <_fx_utility_32_unsigned_read>
 800eb42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	4a33      	ldr	r2, [pc, #204]	; (800ec14 <_fx_media_close+0x2b8>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d16b      	bne.n	800ec24 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb52:	4618      	mov	r0, r3
 800eb54:	f001 fb0e 	bl	8010174 <_fx_utility_32_unsigned_read>
 800eb58:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5c:	4a2e      	ldr	r2, [pc, #184]	; (800ec18 <_fx_media_close+0x2bc>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d160      	bne.n	800ec24 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f001 fb1d 	bl	80101ae <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb80:	4619      	mov	r1, r3
 800eb82:	4610      	mov	r0, r2
 800eb84:	f001 fb13 	bl	80101ae <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2290      	movs	r2, #144	; 0x90
 800eb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2203      	movs	r2, #3
 800ebb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ebc8:	1c5a      	adds	r2, r3, #1
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d017      	beq.n	800ec1c <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f004 ffb6 	bl	8013b64 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff fd6f 	bl	800e6dc <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800ebfe:	2390      	movs	r3, #144	; 0x90
 800ec00:	e07a      	b.n	800ecf8 <_fx_media_close+0x39c>
 800ec02:	bf00      	nop
 800ec04:	4d454449 	.word	0x4d454449
 800ec08:	24014c94 	.word	0x24014c94
 800ec0c:	24014c90 	.word	0x24014c90
 800ec10:	46494c43 	.word	0x46494c43
 800ec14:	41615252 	.word	0x41615252
 800ec18:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2202      	movs	r2, #2
 800ec36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2290      	movs	r2, #144	; 0x90
 800ec3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2208      	movs	r2, #8
 800ec50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2290      	movs	r2, #144	; 0x90
 800ec58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec66:	f3ef 8310 	mrs	r3, PRIMASK
 800ec6a:	613b      	str	r3, [r7, #16]
    return(posture);
 800ec6c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ec6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec70:	b672      	cpsid	i
    return(int_posture);
 800ec72:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800ec74:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800ec76:	4b22      	ldr	r3, [pc, #136]	; (800ed00 <_fx_media_close+0x3a4>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d103      	bne.n	800ec86 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800ec7e:	4b21      	ldr	r3, [pc, #132]	; (800ed04 <_fx_media_close+0x3a8>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e019      	b.n	800ecba <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ec92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800eca2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800eca6:	4b17      	ldr	r3, [pc, #92]	; (800ed04 <_fx_media_close+0x3a8>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d104      	bne.n	800ecba <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ecb6:	4a13      	ldr	r2, [pc, #76]	; (800ed04 <_fx_media_close+0x3a8>)
 800ecb8:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800ecba:	4b11      	ldr	r3, [pc, #68]	; (800ed00 <_fx_media_close+0x3a4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	4a0f      	ldr	r2, [pc, #60]	; (800ed00 <_fx_media_close+0x3a4>)
 800ecc2:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a10      	ldr	r2, [pc, #64]	; (800ed08 <_fx_media_close+0x3ac>)
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	f383 8810 	msr	PRIMASK, r3
}
 800ecd4:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f004 fc1f 	bl	8013520 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3738      	adds	r7, #56	; 0x38
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	24014c8c 	.word	0x24014c8c
 800ed04:	24014c88 	.word	0x24014c88
 800ed08:	4d454443 	.word	0x4d454443

0800ed0c <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b090      	sub	sp, #64	; 0x40
 800ed10:	af04      	add	r7, sp, #16
 800ed12:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4aa2      	ldr	r2, [pc, #648]	; (800efb0 <_fx_media_flush+0x2a4>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d001      	beq.n	800ed30 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ed2c:	2311      	movs	r3, #17
 800ed2e:	e175      	b.n	800f01c <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a9e      	ldr	r2, [pc, #632]	; (800efb0 <_fx_media_flush+0x2a4>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d001      	beq.n	800ed3e <_fx_media_flush+0x32>
 800ed3a:	2311      	movs	r3, #17
 800ed3c:	e16e      	b.n	800f01c <_fx_media_flush+0x310>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed44:	f04f 31ff 	mov.w	r1, #4294967295
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f004 fc93 	bl	8013674 <_tx_mutex_get>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d001      	beq.n	800ed58 <_fx_media_flush+0x4c>
 800ed54:	2311      	movs	r3, #17
 800ed56:	e161      	b.n	800f01c <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d007      	beq.n	800ed72 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f004 fefb 	bl	8013b64 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800ed6e:	2323      	movs	r3, #35	; 0x23
 800ed70:	e154      	b.n	800f01c <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed78:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ed80:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800ed82:	e040      	b.n	800ee06 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ed84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d136      	bne.n	800edfa <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800ed8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8e:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d032      	beq.n	800edfa <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed94:	f3ef 8310 	mrs	r3, PRIMASK
 800ed98:	613b      	str	r3, [r7, #16]
    return(posture);
 800ed9a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ed9c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed9e:	b672      	cpsid	i
    return(int_posture);
 800eda0:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800eda2:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800eda4:	4b83      	ldr	r3, [pc, #524]	; (800efb4 <_fx_media_flush+0x2a8>)
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800edae:	4b82      	ldr	r3, [pc, #520]	; (800efb8 <_fx_media_flush+0x2ac>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	f383 8810 	msr	PRIMASK, r3
}
 800edc2:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800edc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800edca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edcc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800edd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd2:	3368      	adds	r3, #104	; 0x68
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7fb f8ae 	bl	8009f38 <_fx_directory_entry_write>
 800eddc:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d007      	beq.n	800edf4 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800edea:	4618      	mov	r0, r3
 800edec:	f004 feba 	bl	8013b64 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	e113      	b.n	800f01c <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	2200      	movs	r2, #0
 800edf8:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edfe:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	3b01      	subs	r3, #1
 800ee04:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1bb      	bne.n	800ed84 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f001 fd0c 	bl	801082a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f002 f85a 	bl	8010ecc <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ee1e:	2100      	movs	r1, #0
 800ee20:	9102      	str	r1, [sp, #8]
 800ee22:	e9cd 2300 	strd	r2, r3, [sp]
 800ee26:	f04f 0201 	mov.w	r2, #1
 800ee2a:	f04f 0300 	mov.w	r3, #0
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f002 fbd6 	bl	80115e0 <_fx_utility_logical_sector_flush>
 800ee34:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d007      	beq.n	800ee4c <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ee42:	4618      	mov	r0, r3
 800ee44:	f004 fe8e 	bl	8013b64 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	e0e7      	b.n	800f01c <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f000 80bb 	beq.w	800efcc <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	f000 80b4 	beq.w	800efcc <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	69db      	ldr	r3, [r3, #28]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	69d9      	ldr	r1, [r3, #28]
 800ee70:	f04f 32ff 	mov.w	r2, #4294967295
 800ee74:	f04f 33ff 	mov.w	r3, #4294967295
 800ee78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	2200      	movs	r2, #0
 800ee82:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2290      	movs	r2, #144	; 0x90
 800ee90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a3a      	ldr	r2, [r7, #32]
 800ee98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2203      	movs	r2, #3
 800eeb2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d007      	beq.n	800eee8 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eede:	4618      	mov	r0, r3
 800eee0:	f004 fe40 	bl	8013b64 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800eee4:	2390      	movs	r3, #144	; 0x90
 800eee6:	e099      	b.n	800f01c <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeee:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800eef0:	6a38      	ldr	r0, [r7, #32]
 800eef2:	f001 f93f 	bl	8010174 <_fx_utility_32_unsigned_read>
 800eef6:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	4a30      	ldr	r2, [pc, #192]	; (800efbc <_fx_media_flush+0x2b0>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d165      	bne.n	800efcc <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef06:	4618      	mov	r0, r3
 800ef08:	f001 f934 	bl	8010174 <_fx_utility_32_unsigned_read>
 800ef0c:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	4a2b      	ldr	r2, [pc, #172]	; (800efc0 <_fx_media_flush+0x2b4>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d15a      	bne.n	800efcc <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef20:	4619      	mov	r1, r3
 800ef22:	4610      	mov	r0, r2
 800ef24:	f001 f943 	bl	80101ae <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef34:	4619      	mov	r1, r3
 800ef36:	4610      	mov	r0, r2
 800ef38:	f001 f939 	bl	80101ae <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2290      	movs	r2, #144	; 0x90
 800ef48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a3a      	ldr	r2, [r7, #32]
 800ef50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2203      	movs	r2, #3
 800ef6a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ef7c:	1c5a      	adds	r2, r3, #1
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d011      	beq.n	800efc4 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800efa6:	4618      	mov	r0, r3
 800efa8:	f004 fddc 	bl	8013b64 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800efac:	2390      	movs	r3, #144	; 0x90
 800efae:	e035      	b.n	800f01c <_fx_media_flush+0x310>
 800efb0:	4d454449 	.word	0x4d454449
 800efb4:	24014c94 	.word	0x24014c94
 800efb8:	24014c90 	.word	0x24014c90
 800efbc:	41615252 	.word	0x41615252
 800efc0:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2202      	movs	r2, #2
 800efde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2290      	movs	r2, #144	; 0x90
 800efe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f004:	4618      	mov	r0, r3
 800f006:	f004 fdad 	bl	8013b64 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800f00a:	2390      	movs	r3, #144	; 0x90
 800f00c:	e006      	b.n	800f01c <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f014:	4618      	mov	r0, r3
 800f016:	f004 fda5 	bl	8013b64 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3730      	adds	r7, #48	; 0x30
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800f024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f028:	b09a      	sub	sp, #104	; 0x68
 800f02a:	af04      	add	r7, sp, #16
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	60b9      	str	r1, [r7, #8]
 800f030:	607a      	str	r2, [r7, #4]
 800f032:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800f034:	4bba      	ldr	r3, [pc, #744]	; (800f320 <_fx_media_open+0x2fc>)
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	4bba      	ldr	r3, [pc, #744]	; (800f324 <_fx_media_open+0x300>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	431a      	orrs	r2, r3
 800f03e:	4bba      	ldr	r3, [pc, #744]	; (800f328 <_fx_media_open+0x304>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4313      	orrs	r3, r2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d003      	beq.n	800f050 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800f048:	4bb8      	ldr	r3, [pc, #736]	; (800f32c <_fx_media_open+0x308>)
 800f04a:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800f050:	2322      	movs	r3, #34	; 0x22
 800f052:	f000 bd53 	b.w	800fafc <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f068:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f06e:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f076:	461a      	mov	r2, r3
 800f078:	2300      	movs	r3, #0
 800f07a:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f084:	2200      	movs	r2, #0
 800f086:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800f08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f08c:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2200      	movs	r2, #0
 800f14a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2200      	movs	r2, #0
 800f152:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2200      	movs	r2, #0
 800f17a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2200      	movs	r2, #0
 800f212:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2200      	movs	r2, #0
 800f22a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2204      	movs	r2, #4
 800f272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2290      	movs	r2, #144	; 0x90
 800f27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2200      	movs	r2, #0
 800f292:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800f2b2:	2390      	movs	r3, #144	; 0x90
 800f2b4:	f000 bc22 	b.w	800fafc <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2205      	movs	r2, #5
 800f2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2290      	movs	r2, #144	; 0x90
 800f2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f2da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d016      	beq.n	800f330 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2208      	movs	r2, #8
 800f306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2290      	movs	r2, #144	; 0x90
 800f30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800f31c:	2301      	movs	r3, #1
 800f31e:	e3ed      	b.n	800fafc <_fx_media_open+0xad8>
 800f320:	24014ca0 	.word	0x24014ca0
 800f324:	24014ca4 	.word	0x24014ca4
 800f328:	24014ca8 	.word	0x24014ca8
 800f32c:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7ff fa69 	bl	800e808 <_fx_media_boot_info_extract>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00e      	beq.n	800f35a <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2208      	movs	r2, #8
 800f340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2290      	movs	r2, #144	; 0x90
 800f348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800f356:	2302      	movs	r3, #2
 800f358:	e3d0      	b.n	800fafc <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f360:	3330      	adds	r3, #48	; 0x30
 800f362:	4618      	mov	r0, r3
 800f364:	f000 fede 	bl	8010124 <_fx_utility_16_unsigned_read>
 800f368:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f370:	429a      	cmp	r2, r3
 800f372:	d20e      	bcs.n	800f392 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2208      	movs	r2, #8
 800f378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2290      	movs	r2, #144	; 0x90
 800f380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800f38e:	2321      	movs	r3, #33	; 0x21
 800f390:	e3b4      	b.n	800fafc <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f396:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f398:	fbb2 f2f3 	udiv	r2, r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	695b      	ldr	r3, [r3, #20]
 800f3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3a8:	d903      	bls.n	800f3b2 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3b0:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	695b      	ldr	r3, [r3, #20]
 800f3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800f3be:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800f3c0:	e01c      	b.n	800f3fc <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800f3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3c6:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800f3c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800f3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d8:	2200      	movs	r2, #0
 800f3da:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800f3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3de:	2200      	movs	r2, #0
 800f3e0:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800f3e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3e4:	f103 0218 	add.w	r2, r3, #24
 800f3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3ea:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800f3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3ee:	3318      	adds	r3, #24
 800f3f0:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3f8:	4413      	add	r3, r2
 800f3fa:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800f3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3fe:	1e5a      	subs	r2, r3, #1
 800f400:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1dd      	bne.n	800f3c2 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800f406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f408:	3b18      	subs	r3, #24
 800f40a:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800f40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f40e:	2200      	movs	r2, #0
 800f410:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800f412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f414:	1e5a      	subs	r2, r3, #1
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2200      	movs	r2, #0
 800f428:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	695b      	ldr	r3, [r3, #20]
 800f434:	2b0f      	cmp	r3, #15
 800f436:	d91a      	bls.n	800f46e <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	695a      	ldr	r2, [r3, #20]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	695b      	ldr	r3, [r3, #20]
 800f440:	3b01      	subs	r3, #1
 800f442:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6959      	ldr	r1, [r3, #20]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	695b      	ldr	r3, [r3, #20]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f450:	429a      	cmp	r2, r3
 800f452:	d10c      	bne.n	800f46e <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2201      	movs	r2, #1
 800f458:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	089b      	lsrs	r3, r3, #2
 800f460:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800f468:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800f46c:	e002      	b.n	800f474 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f474:	2300      	movs	r3, #0
 800f476:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f478:	e023      	b.n	800f4c2 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800f47a:	68f9      	ldr	r1, [r7, #12]
 800f47c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f47e:	4613      	mov	r3, r2
 800f480:	005b      	lsls	r3, r3, #1
 800f482:	4413      	add	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	440b      	add	r3, r1
 800f488:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800f490:	68f9      	ldr	r1, [r7, #12]
 800f492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f494:	4613      	mov	r3, r2
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	4413      	add	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	440b      	add	r3, r1
 800f49e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800f4a6:	68f9      	ldr	r1, [r7, #12]
 800f4a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4413      	add	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	440b      	add	r3, r1
 800f4b4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4be:	3301      	adds	r3, #1
 800f4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c4:	2b0f      	cmp	r3, #15
 800f4c6:	d9d8      	bls.n	800f47a <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4cc:	e009      	b.n	800f4e2 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4d2:	4413      	add	r3, r2
 800f4d4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800f4d8:	2200      	movs	r2, #0
 800f4da:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4de:	3301      	adds	r3, #1
 800f4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4e4:	2b7f      	cmp	r3, #127	; 0x7f
 800f4e6:	d9f2      	bls.n	800f4ce <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800f4f0:	68f9      	ldr	r1, [r7, #12]
 800f4f2:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800f4f4:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f4f8:	441a      	add	r2, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f502:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f508:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f50a:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f510:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f520:	441a      	add	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f52c:	68f9      	ldr	r1, [r7, #12]
 800f52e:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800f530:	2000      	movs	r0, #0
 800f532:	460c      	mov	r4, r1
 800f534:	4605      	mov	r5, r0
 800f536:	ebb2 0804 	subs.w	r8, r2, r4
 800f53a:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f542:	2200      	movs	r2, #0
 800f544:	469a      	mov	sl, r3
 800f546:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f548:	4652      	mov	r2, sl
 800f54a:	465b      	mov	r3, fp
 800f54c:	4640      	mov	r0, r8
 800f54e:	4649      	mov	r1, r9
 800f550:	f7f1 f836 	bl	80005c0 <__aeabi_uldivmod>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f560:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f564:	4293      	cmp	r3, r2
 800f566:	d819      	bhi.n	800f59c <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2201      	movs	r2, #1
 800f56c:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2200      	movs	r2, #0
 800f572:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f580:	461a      	mov	r2, r3
 800f582:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f586:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f590:	461a      	mov	r2, r3
 800f592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f596:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f59a:	e037      	b.n	800f60c <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a0:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d819      	bhi.n	800f5dc <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f5c6:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5d6:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f5da:	e017      	b.n	800f60c <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5ec:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4b95      	ldr	r3, [pc, #596]	; (800f84c <_fx_media_open+0x828>)
 800f5f8:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f602:	461a      	mov	r2, r3
 800f604:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f608:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f610:	2b01      	cmp	r3, #1
 800f612:	d15f      	bne.n	800f6d4 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d801      	bhi.n	800f620 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800f61c:	2302      	movs	r3, #2
 800f61e:	e26d      	b.n	800fafc <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f628:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800f62a:	68f9      	ldr	r1, [r7, #12]
 800f62c:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f62e:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f632:	441a      	add	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800f638:	2300      	movs	r3, #0
 800f63a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f640:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f642:	f107 0310 	add.w	r3, r7, #16
 800f646:	461a      	mov	r2, r3
 800f648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	f000 fdd0 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800f650:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800f652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f654:	3301      	adds	r3, #1
 800f656:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00e      	beq.n	800f67c <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2208      	movs	r2, #8
 800f662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2290      	movs	r2, #144	; 0x90
 800f66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f678:	2303      	movs	r3, #3
 800f67a:	e23f      	b.n	800fafc <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f680:	429a      	cmp	r2, r3
 800f682:	d004      	beq.n	800f68e <_fx_media_open+0x66a>
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d90e      	bls.n	800f6ac <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2208      	movs	r2, #8
 800f692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2290      	movs	r2, #144	; 0x90
 800f69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f6a8:	2303      	movs	r3, #3
 800f6aa:	e227      	b.n	800fafc <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	4a68      	ldr	r2, [pc, #416]	; (800f850 <_fx_media_open+0x82c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d802      	bhi.n	800f6ba <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f6b8:	e7c3      	b.n	800f642 <_fx_media_open+0x61e>
                break;
 800f6ba:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6c2:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f6ca:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f6ce:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 808e 	beq.w	800f808 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	69db      	ldr	r3, [r3, #28]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	69d9      	ldr	r1, [r3, #28]
 800f6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f700:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	69db      	ldr	r3, [r3, #28]
 800f708:	2200      	movs	r2, #0
 800f70a:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2200      	movs	r2, #0
 800f710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2290      	movs	r2, #144	; 0x90
 800f718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2201      	movs	r2, #1
 800f732:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2203      	movs	r2, #3
 800f73a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d150      	bne.n	800f802 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f766:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f76a:	f000 fd03 	bl	8010174 <_fx_utility_32_unsigned_read>
 800f76e:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f772:	4a38      	ldr	r2, [pc, #224]	; (800f854 <_fx_media_open+0x830>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d140      	bne.n	800f7fa <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 fcf8 	bl	8010174 <_fx_utility_32_unsigned_read>
 800f784:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800f786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f788:	4a33      	ldr	r2, [pc, #204]	; (800f858 <_fx_media_open+0x834>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d131      	bne.n	800f7f2 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800f78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f790:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f794:	4618      	mov	r0, r3
 800f796:	f000 fced 	bl	8010174 <_fx_utility_32_unsigned_read>
 800f79a:	4602      	mov	r2, r0
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800f7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 fce0 	bl	8010174 <_fx_utility_32_unsigned_read>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d80c      	bhi.n	800f7e2 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d2:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d804      	bhi.n	800f7e2 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d812      	bhi.n	800f808 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800f7f0:	e00a      	b.n	800f808 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	669a      	str	r2, [r3, #104]	; 0x68
 800f7f8:	e006      	b.n	800f808 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	669a      	str	r2, [r3, #104]	; 0x68
 800f800:	e002      	b.n	800f808 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2200      	movs	r2, #0
 800f806:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d040      	beq.n	800f892 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f810:	2302      	movs	r3, #2
 800f812:	657b      	str	r3, [r7, #84]	; 0x54
 800f814:	e036      	b.n	800f884 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f816:	f107 0310 	add.w	r3, r7, #16
 800f81a:	461a      	mov	r2, r3
 800f81c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f000 fce6 	bl	80101f0 <_fx_utility_FAT_entry_read>
 800f824:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d017      	beq.n	800f85c <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2208      	movs	r2, #8
 800f830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2290      	movs	r2, #144	; 0x90
 800f838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f846:	2303      	movs	r3, #3
 800f848:	e158      	b.n	800fafc <_fx_media_open+0xad8>
 800f84a:	bf00      	nop
 800f84c:	0ffffff0 	.word	0x0ffffff0
 800f850:	0fffffef 	.word	0x0fffffef
 800f854:	41615252 	.word	0x41615252
 800f858:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10d      	bne.n	800f87e <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f872:	2b00      	cmp	r3, #0
 800f874:	d103      	bne.n	800f87e <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800f87e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f880:	3301      	adds	r3, #1
 800f882:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f888:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f88a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d3c2      	bcc.n	800f816 <_fx_media_open+0x7f2>
 800f890:	e0b4      	b.n	800f9fc <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f896:	2b00      	cmp	r3, #0
 800f898:	f040 80b0 	bne.w	800f9fc <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	9102      	str	r1, [sp, #8]
 800f8a6:	e9cd 2300 	strd	r2, r3, [sp]
 800f8aa:	f04f 0201 	mov.w	r2, #1
 800f8ae:	f04f 0300 	mov.w	r3, #0
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f001 fe94 	bl	80115e0 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8bc:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8c6:	e093      	b.n	800f9f0 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8ce:	4413      	add	r3, r2
 800f8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	695b      	ldr	r3, [r3, #20]
 800f8e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d902      	bls.n	800f8ec <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2290      	movs	r2, #144	; 0x90
 800f8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	689a      	ldr	r2, [r3, #8]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f90a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f912:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2202      	movs	r2, #2
 800f91a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00e      	beq.n	800f950 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2208      	movs	r2, #8
 800f936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2290      	movs	r2, #144	; 0x90
 800f93e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f94c:	2303      	movs	r3, #3
 800f94e:	e0d5      	b.n	800fafc <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f956:	fb02 f303 	mul.w	r3, r2, r3
 800f95a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800f95c:	2300      	movs	r3, #0
 800f95e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f960:	e03d      	b.n	800f9de <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f966:	2b00      	cmp	r3, #0
 800f968:	d009      	beq.n	800f97e <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	689a      	ldr	r2, [r3, #8]
 800f96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f970:	4413      	add	r3, r2
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800f976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f978:	3304      	adds	r3, #4
 800f97a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f97c:	e011      	b.n	800f9a2 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	689a      	ldr	r2, [r3, #8]
 800f982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f984:	4413      	add	r3, r2
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	689a      	ldr	r2, [r3, #8]
 800f98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f990:	3301      	adds	r3, #1
 800f992:	4413      	add	r3, r2
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f998:	430b      	orrs	r3, r1
 800f99a:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800f99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f99e:	3302      	adds	r3, #2
 800f9a0:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10d      	bne.n	800f9c4 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9ac:	1c5a      	adds	r2, r3, #1
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d103      	bne.n	800f9c4 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f9c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800f9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ce:	3302      	adds	r3, #2
 800f9d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d303      	bcc.n	800f9de <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9da:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800f9dc:	e003      	b.n	800f9e6 <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800f9de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d3bd      	bcc.n	800f962 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9ec:	4413      	add	r3, r2
 800f9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	f4ff af66 	bcc.w	800f8c8 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d103      	bne.n	800fa0e <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2202      	movs	r2, #2
 800fa0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fa28:	2200      	movs	r2, #0
 800fa2a:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fa62:	2200      	movs	r2, #0
 800fa64:	4928      	ldr	r1, [pc, #160]	; (800fb08 <_fx_media_open+0xae4>)
 800fa66:	4618      	mov	r0, r3
 800fa68:	f003 fd00 	bl	801346c <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa6c:	f3ef 8310 	mrs	r3, PRIMASK
 800fa70:	61fb      	str	r3, [r7, #28]
    return(posture);
 800fa72:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800fa74:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa76:	b672      	cpsid	i
    return(int_posture);
 800fa78:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4a23      	ldr	r2, [pc, #140]	; (800fb0c <_fx_media_open+0xae8>)
 800fa80:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800fa82:	4b23      	ldr	r3, [pc, #140]	; (800fb10 <_fx_media_open+0xaec>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d017      	beq.n	800faba <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800fa8a:	4b21      	ldr	r3, [pc, #132]	; (800fb10 <_fx_media_open+0xaec>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fa92:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800fa94:	4b1e      	ldr	r3, [pc, #120]	; (800fb10 <_fx_media_open+0xaec>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a3a      	ldr	r2, [r7, #32]
 800faaa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800faae:	4b18      	ldr	r3, [pc, #96]	; (800fb10 <_fx_media_open+0xaec>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800fab8:	e00a      	b.n	800fad0 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800faba:	4a15      	ldr	r2, [pc, #84]	; (800fb10 <_fx_media_open+0xaec>)
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800fad0:	4b10      	ldr	r3, [pc, #64]	; (800fb14 <_fx_media_open+0xaf0>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3301      	adds	r3, #1
 800fad6:	4a0f      	ldr	r2, [pc, #60]	; (800fb14 <_fx_media_open+0xaf0>)
 800fad8:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d004      	beq.n	800faee <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	4798      	blx	r3
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f383 8810 	msr	PRIMASK, r3
}
 800faf8:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3758      	adds	r7, #88	; 0x58
 800fb00:	46bd      	mov	sp, r7
 800fb02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb06:	bf00      	nop
 800fb08:	080176c8 	.word	0x080176c8
 800fb0c:	4d454449 	.word	0x4d454449
 800fb10:	24014c88 	.word	0x24014c88
 800fb14:	24014c8c 	.word	0x24014c8c

0800fb18 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800fb18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fb1c:	b090      	sub	sp, #64	; 0x40
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	60f8      	str	r0, [r7, #12]
 800fb22:	60b9      	str	r1, [r7, #8]
 800fb24:	607a      	str	r2, [r7, #4]
 800fb26:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800fb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	2be9      	cmp	r3, #233	; 0xe9
 800fb36:	d008      	beq.n	800fb4a <_fx_partition_offset_calculate+0x32>
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2beb      	cmp	r3, #235	; 0xeb
 800fb3e:	d17d      	bne.n	800fc3c <_fx_partition_offset_calculate+0x124>
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	3302      	adds	r3, #2
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b90      	cmp	r3, #144	; 0x90
 800fb48:	d178      	bne.n	800fc3c <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4c:	3316      	adds	r3, #22
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d118      	bne.n	800fb86 <_fx_partition_offset_calculate+0x6e>
 800fb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb56:	3317      	adds	r3, #23
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d113      	bne.n	800fb86 <_fx_partition_offset_calculate+0x6e>
 800fb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb60:	3324      	adds	r3, #36	; 0x24
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10e      	bne.n	800fb86 <_fx_partition_offset_calculate+0x6e>
 800fb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6a:	3325      	adds	r3, #37	; 0x25
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d109      	bne.n	800fb86 <_fx_partition_offset_calculate+0x6e>
 800fb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb74:	3326      	adds	r3, #38	; 0x26
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d104      	bne.n	800fb86 <_fx_partition_offset_calculate+0x6e>
 800fb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb7e:	3327      	adds	r3, #39	; 0x27
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d05a      	beq.n	800fc3c <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800fb86:	f04f 0200 	mov.w	r2, #0
 800fb8a:	f04f 0300 	mov.w	r3, #0
 800fb8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800fb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb94:	3313      	adds	r3, #19
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d104      	bne.n	800fba6 <_fx_partition_offset_calculate+0x8e>
 800fb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb9e:	3314      	adds	r3, #20
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00d      	beq.n	800fbc2 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800fba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba8:	3314      	adds	r3, #20
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	021b      	lsls	r3, r3, #8
 800fbae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb0:	3213      	adds	r2, #19
 800fbb2:	7812      	ldrb	r2, [r2, #0]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	4698      	mov	r8, r3
 800fbba:	4691      	mov	r9, r2
 800fbbc:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800fbc0:	e02a      	b.n	800fc18 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800fbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc4:	3320      	adds	r3, #32
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10e      	bne.n	800fbea <_fx_partition_offset_calculate+0xd2>
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbce:	3321      	adds	r3, #33	; 0x21
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d109      	bne.n	800fbea <_fx_partition_offset_calculate+0xd2>
 800fbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd8:	3322      	adds	r3, #34	; 0x22
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d104      	bne.n	800fbea <_fx_partition_offset_calculate+0xd2>
 800fbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe2:	3323      	adds	r3, #35	; 0x23
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d016      	beq.n	800fc18 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbec:	3323      	adds	r3, #35	; 0x23
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800fbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf4:	3322      	adds	r3, #34	; 0x22
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fbfa:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfe:	3321      	adds	r3, #33	; 0x21
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800fc04:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800fc06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc08:	3220      	adds	r2, #32
 800fc0a:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800fc0c:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fc0e:	2200      	movs	r2, #0
 800fc10:	461c      	mov	r4, r3
 800fc12:	4615      	mov	r5, r2
 800fc14:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800fc18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	d00d      	beq.n	800fc3c <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d002      	beq.n	800fc2c <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800fc32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e032      	b.n	800fca2 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b55      	cmp	r3, #85	; 0x55
 800fc46:	d105      	bne.n	800fc54 <_fx_partition_offset_calculate+0x13c>
 800fc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2baa      	cmp	r3, #170	; 0xaa
 800fc52:	d001      	beq.n	800fc58 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800fc54:	2304      	movs	r3, #4
 800fc56:	e024      	b.n	800fca2 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800fc58:	f107 0110 	add.w	r1, r7, #16
 800fc5c:	f107 0014 	add.w	r0, r7, #20
 800fc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc62:	2200      	movs	r2, #0
 800fc64:	f000 f822 	bl	800fcac <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d301      	bcc.n	800fc74 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800fc70:	2304      	movs	r3, #4
 800fc72:	e016      	b.n	800fca2 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d007      	beq.n	800fc8a <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	3340      	adds	r3, #64	; 0x40
 800fc80:	443b      	add	r3, r7
 800fc82:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d007      	beq.n	800fca0 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	00db      	lsls	r3, r3, #3
 800fc94:	3340      	adds	r3, #64	; 0x40
 800fc96:	443b      	add	r3, r7
 800fc98:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3740      	adds	r7, #64	; 0x40
 800fca6:	46bd      	mov	sp, r7
 800fca8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800fcac <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b089      	sub	sp, #36	; 0x24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800fcbe:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800fcc2:	61fb      	str	r3, [r7, #28]
 800fcc4:	e06f      	b.n	800fda6 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	683a      	ldr	r2, [r7, #0]
 800fccc:	4413      	add	r3, r2
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10e      	bne.n	800fcf2 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	00db      	lsls	r3, r3, #3
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	4413      	add	r3, r2
 800fcde:	2200      	movs	r2, #0
 800fce0:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	4413      	add	r3, r2
 800fcec:	2200      	movs	r2, #0
 800fcee:	605a      	str	r2, [r3, #4]
 800fcf0:	e051      	b.n	800fd96 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	3309      	adds	r3, #9
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	4413      	add	r3, r2
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	021b      	lsls	r3, r3, #8
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	330a      	adds	r3, #10
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	4413      	add	r3, r2
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	041b      	lsls	r3, r3, #16
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	330b      	adds	r3, #11
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	4413      	add	r3, r2
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	061b      	lsls	r3, r3, #24
 800fd2e:	697a      	ldr	r2, [r7, #20]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	00db      	lsls	r3, r3, #3
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	6979      	ldr	r1, [r7, #20]
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	440a      	add	r2, r1
 800fd44:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	330c      	adds	r3, #12
 800fd4a:	683a      	ldr	r2, [r7, #0]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	330d      	adds	r3, #13
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	4413      	add	r3, r2
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	021b      	lsls	r3, r3, #8
 800fd5e:	697a      	ldr	r2, [r7, #20]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	330e      	adds	r3, #14
 800fd68:	683a      	ldr	r2, [r7, #0]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	041b      	lsls	r3, r3, #16
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	330f      	adds	r3, #15
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	061b      	lsls	r3, r3, #24
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	4313      	orrs	r3, r2
 800fd86:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	00db      	lsls	r3, r3, #3
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	4413      	add	r3, r2
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	3310      	adds	r3, #16
 800fda4:	61fb      	str	r3, [r7, #28]
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800fdac:	d98b      	bls.n	800fcc6 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3724      	adds	r7, #36	; 0x24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800fdc2:	4b27      	ldr	r3, [pc, #156]	; (800fe60 <_fx_system_initialize+0xa4>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800fdc8:	4b26      	ldr	r3, [pc, #152]	; (800fe64 <_fx_system_initialize+0xa8>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800fdce:	4b26      	ldr	r3, [pc, #152]	; (800fe68 <_fx_system_initialize+0xac>)
 800fdd0:	f644 2221 	movw	r2, #18977	; 0x4a21
 800fdd4:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800fdd6:	4b25      	ldr	r3, [pc, #148]	; (800fe6c <_fx_system_initialize+0xb0>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800fddc:	4b24      	ldr	r3, [pc, #144]	; (800fe70 <_fx_system_initialize+0xb4>)
 800fdde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fde2:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800fde4:	4b23      	ldr	r3, [pc, #140]	; (800fe74 <_fx_system_initialize+0xb8>)
 800fde6:	2210      	movs	r2, #16
 800fde8:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800fdea:	2301      	movs	r3, #1
 800fdec:	9302      	str	r3, [sp, #8]
 800fdee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdf2:	9301      	str	r3, [sp, #4]
 800fdf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	4b1f      	ldr	r3, [pc, #124]	; (800fe78 <_fx_system_initialize+0xbc>)
 800fdfc:	4a1f      	ldr	r2, [pc, #124]	; (800fe7c <_fx_system_initialize+0xc0>)
 800fdfe:	4920      	ldr	r1, [pc, #128]	; (800fe80 <_fx_system_initialize+0xc4>)
 800fe00:	4820      	ldr	r0, [pc, #128]	; (800fe84 <_fx_system_initialize+0xc8>)
 800fe02:	f005 fc97 	bl	8015734 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800fe06:	4b20      	ldr	r3, [pc, #128]	; (800fe88 <_fx_system_initialize+0xcc>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe0e:	4a1e      	ldr	r2, [pc, #120]	; (800fe88 <_fx_system_initialize+0xcc>)
 800fe10:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800fe12:	4b1d      	ldr	r3, [pc, #116]	; (800fe88 <_fx_system_initialize+0xcc>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe1a:	4a1b      	ldr	r2, [pc, #108]	; (800fe88 <_fx_system_initialize+0xcc>)
 800fe1c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800fe1e:	4b1b      	ldr	r3, [pc, #108]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fe26:	4a19      	ldr	r2, [pc, #100]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe28:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800fe2a:	4b18      	ldr	r3, [pc, #96]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe32:	4a16      	ldr	r2, [pc, #88]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe34:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800fe36:	4b15      	ldr	r3, [pc, #84]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f043 0310 	orr.w	r3, r3, #16
 800fe3e:	4a13      	ldr	r2, [pc, #76]	; (800fe8c <_fx_system_initialize+0xd0>)
 800fe40:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800fe42:	4b13      	ldr	r3, [pc, #76]	; (800fe90 <_fx_system_initialize+0xd4>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800fe4a:	4a11      	ldr	r2, [pc, #68]	; (800fe90 <_fx_system_initialize+0xd4>)
 800fe4c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800fe4e:	4b10      	ldr	r3, [pc, #64]	; (800fe90 <_fx_system_initialize+0xd4>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800fe56:	4a0e      	ldr	r2, [pc, #56]	; (800fe90 <_fx_system_initialize+0xd4>)
 800fe58:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800fe5a:	bf00      	nop
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	24014c88 	.word	0x24014c88
 800fe64:	24014c8c 	.word	0x24014c8c
 800fe68:	24014c90 	.word	0x24014c90
 800fe6c:	24014c94 	.word	0x24014c94
 800fe70:	24014c98 	.word	0x24014c98
 800fe74:	24014c9c 	.word	0x24014c9c
 800fe78:	46585359 	.word	0x46585359
 800fe7c:	0800fe95 	.word	0x0800fe95
 800fe80:	080176dc 	.word	0x080176dc
 800fe84:	24014cac 	.word	0x24014cac
 800fe88:	24014ca0 	.word	0x24014ca0
 800fe8c:	24014ca4 	.word	0x24014ca4
 800fe90:	24014ca8 	.word	0x24014ca8

0800fe94 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b089      	sub	sp, #36	; 0x24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a9d      	ldr	r2, [pc, #628]	; (8010114 <_fx_system_timer_entry+0x280>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	f040 8132 	bne.w	801010a <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800fea6:	4b9c      	ldr	r3, [pc, #624]	; (8010118 <_fx_system_timer_entry+0x284>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f003 031f 	and.w	r3, r3, #31
 800feae:	005b      	lsls	r3, r3, #1
 800feb0:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800feb2:	4b99      	ldr	r3, [pc, #612]	; (8010118 <_fx_system_timer_entry+0x284>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	095b      	lsrs	r3, r3, #5
 800feb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800febc:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800febe:	4b96      	ldr	r3, [pc, #600]	; (8010118 <_fx_system_timer_entry+0x284>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	0adb      	lsrs	r3, r3, #11
 800fec4:	f003 031f 	and.w	r3, r3, #31
 800fec8:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800feca:	4b94      	ldr	r3, [pc, #592]	; (801011c <_fx_system_timer_entry+0x288>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f003 031f 	and.w	r3, r3, #31
 800fed2:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800fed4:	4b91      	ldr	r3, [pc, #580]	; (801011c <_fx_system_timer_entry+0x288>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	095b      	lsrs	r3, r3, #5
 800feda:	f003 030f 	and.w	r3, r3, #15
 800fede:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800fee0:	4b8e      	ldr	r3, [pc, #568]	; (801011c <_fx_system_timer_entry+0x288>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	0a5b      	lsrs	r3, r3, #9
 800fee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feea:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800feee:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	330a      	adds	r3, #10
 800fef4:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b3b      	cmp	r3, #59	; 0x3b
 800fefa:	f240 80d4 	bls.w	80100a6 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	4a87      	ldr	r2, [pc, #540]	; (8010120 <_fx_system_timer_entry+0x28c>)
 800ff02:	fba2 2303 	umull	r2, r3, r2, r3
 800ff06:	095b      	lsrs	r3, r3, #5
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800ff0e:	69fa      	ldr	r2, [r7, #28]
 800ff10:	4b83      	ldr	r3, [pc, #524]	; (8010120 <_fx_system_timer_entry+0x28c>)
 800ff12:	fba3 1302 	umull	r1, r3, r3, r2
 800ff16:	0959      	lsrs	r1, r3, #5
 800ff18:	460b      	mov	r3, r1
 800ff1a:	011b      	lsls	r3, r3, #4
 800ff1c:	1a5b      	subs	r3, r3, r1
 800ff1e:	009b      	lsls	r3, r3, #2
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	2b3b      	cmp	r3, #59	; 0x3b
 800ff28:	f240 80bd 	bls.w	80100a6 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	4a7c      	ldr	r2, [pc, #496]	; (8010120 <_fx_system_timer_entry+0x28c>)
 800ff30:	fba2 2303 	umull	r2, r3, r2, r3
 800ff34:	095b      	lsrs	r3, r3, #5
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	4413      	add	r3, r2
 800ff3a:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800ff3c:	69ba      	ldr	r2, [r7, #24]
 800ff3e:	4b78      	ldr	r3, [pc, #480]	; (8010120 <_fx_system_timer_entry+0x28c>)
 800ff40:	fba3 1302 	umull	r1, r3, r3, r2
 800ff44:	0959      	lsrs	r1, r3, #5
 800ff46:	460b      	mov	r3, r1
 800ff48:	011b      	lsls	r3, r3, #4
 800ff4a:	1a5b      	subs	r3, r3, r1
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	2b17      	cmp	r3, #23
 800ff56:	f240 80a6 	bls.w	80100a6 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	617b      	str	r3, [r7, #20]
                    day++;
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	3301      	adds	r3, #1
 800ff62:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	3b01      	subs	r3, #1
 800ff68:	2b0b      	cmp	r3, #11
 800ff6a:	f200 80cb 	bhi.w	8010104 <_fx_system_timer_entry+0x270>
 800ff6e:	a201      	add	r2, pc, #4	; (adr r2, 800ff74 <_fx_system_timer_entry+0xe0>)
 800ff70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff74:	0800ffa5 	.word	0x0800ffa5
 800ff78:	0800ffb7 	.word	0x0800ffb7
 800ff7c:	0800ffe5 	.word	0x0800ffe5
 800ff80:	0800fff7 	.word	0x0800fff7
 800ff84:	08010009 	.word	0x08010009
 800ff88:	0801001b 	.word	0x0801001b
 800ff8c:	0801002d 	.word	0x0801002d
 800ff90:	0801003f 	.word	0x0801003f
 800ff94:	08010051 	.word	0x08010051
 800ff98:	08010063 	.word	0x08010063
 800ff9c:	08010075 	.word	0x08010075
 800ffa0:	08010087 	.word	0x08010087

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	2b1f      	cmp	r3, #31
 800ffa8:	d97f      	bls.n	80100aa <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	613b      	str	r3, [r7, #16]
                            month++;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ffb4:	e079      	b.n	80100aa <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f003 0303 	and.w	r3, r3, #3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d108      	bne.n	800ffd2 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	2b1d      	cmp	r3, #29
 800ffc4:	d973      	bls.n	80100ae <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	613b      	str	r3, [r7, #16]
                                month++;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800ffd0:	e06d      	b.n	80100ae <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	2b1c      	cmp	r3, #28
 800ffd6:	d96a      	bls.n	80100ae <_fx_system_timer_entry+0x21a>
                                day = 1;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	613b      	str	r3, [r7, #16]
                                month++;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	60fb      	str	r3, [r7, #12]
                        break;
 800ffe2:	e064      	b.n	80100ae <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	2b1f      	cmp	r3, #31
 800ffe8:	d963      	bls.n	80100b2 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffea:	2301      	movs	r3, #1
 800ffec:	613b      	str	r3, [r7, #16]
                            month++;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	3301      	adds	r3, #1
 800fff2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800fff4:	e05d      	b.n	80100b2 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	2b1e      	cmp	r3, #30
 800fffa:	d95c      	bls.n	80100b6 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fffc:	2301      	movs	r3, #1
 800fffe:	613b      	str	r3, [r7, #16]
                            month++;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	3301      	adds	r3, #1
 8010004:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010006:	e056      	b.n	80100b6 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	2b1f      	cmp	r3, #31
 801000c:	d955      	bls.n	80100ba <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 801000e:	2301      	movs	r3, #1
 8010010:	613b      	str	r3, [r7, #16]
                            month++;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3301      	adds	r3, #1
 8010016:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010018:	e04f      	b.n	80100ba <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	2b1e      	cmp	r3, #30
 801001e:	d94e      	bls.n	80100be <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010020:	2301      	movs	r3, #1
 8010022:	613b      	str	r3, [r7, #16]
                            month++;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3301      	adds	r3, #1
 8010028:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801002a:	e048      	b.n	80100be <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	2b1f      	cmp	r3, #31
 8010030:	d947      	bls.n	80100c2 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010032:	2301      	movs	r3, #1
 8010034:	613b      	str	r3, [r7, #16]
                            month++;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	3301      	adds	r3, #1
 801003a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801003c:	e041      	b.n	80100c2 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	2b1f      	cmp	r3, #31
 8010042:	d940      	bls.n	80100c6 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010044:	2301      	movs	r3, #1
 8010046:	613b      	str	r3, [r7, #16]
                            month++;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3301      	adds	r3, #1
 801004c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801004e:	e03a      	b.n	80100c6 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2b1e      	cmp	r3, #30
 8010054:	d939      	bls.n	80100ca <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010056:	2301      	movs	r3, #1
 8010058:	613b      	str	r3, [r7, #16]
                            month++;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	3301      	adds	r3, #1
 801005e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010060:	e033      	b.n	80100ca <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b1f      	cmp	r3, #31
 8010066:	d932      	bls.n	80100ce <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010068:	2301      	movs	r3, #1
 801006a:	613b      	str	r3, [r7, #16]
                            month++;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	3301      	adds	r3, #1
 8010070:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010072:	e02c      	b.n	80100ce <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	2b1e      	cmp	r3, #30
 8010078:	d92b      	bls.n	80100d2 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 801007a:	2301      	movs	r3, #1
 801007c:	613b      	str	r3, [r7, #16]
                            month++;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	3301      	adds	r3, #1
 8010082:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010084:	e025      	b.n	80100d2 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2b1f      	cmp	r3, #31
 801008a:	d924      	bls.n	80100d6 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 801008c:	2301      	movs	r3, #1
 801008e:	613b      	str	r3, [r7, #16]
                            month = 1;
 8010090:	2301      	movs	r3, #1
 8010092:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	3301      	adds	r3, #1
 8010098:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	f640 023b 	movw	r2, #2107	; 0x83b
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d831      	bhi.n	8010108 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 80100a4:	e017      	b.n	80100d6 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 80100a6:	bf00      	nop
 80100a8:	e016      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100aa:	bf00      	nop
 80100ac:	e014      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100ae:	bf00      	nop
 80100b0:	e012      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100b2:	bf00      	nop
 80100b4:	e010      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100b6:	bf00      	nop
 80100b8:	e00e      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100ba:	bf00      	nop
 80100bc:	e00c      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100be:	bf00      	nop
 80100c0:	e00a      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100c2:	bf00      	nop
 80100c4:	e008      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100c6:	bf00      	nop
 80100c8:	e006      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100ca:	bf00      	nop
 80100cc:	e004      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100ce:	bf00      	nop
 80100d0:	e002      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100d2:	bf00      	nop
 80100d4:	e000      	b.n	80100d8 <_fx_system_timer_entry+0x244>
                        break;
 80100d6:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80100de:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80100e4:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80100ea:	4a0c      	ldr	r2, [pc, #48]	; (801011c <_fx_system_timer_entry+0x288>)
 80100ec:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100f6:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	085b      	lsrs	r3, r3, #1
 80100fc:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100fe:	4a06      	ldr	r2, [pc, #24]	; (8010118 <_fx_system_timer_entry+0x284>)
 8010100:	6013      	str	r3, [r2, #0]
 8010102:	e002      	b.n	801010a <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 8010104:	bf00      	nop
 8010106:	e000      	b.n	801010a <_fx_system_timer_entry+0x276>
                                return;
 8010108:	bf00      	nop
    }
}
 801010a:	3724      	adds	r7, #36	; 0x24
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	46585359 	.word	0x46585359
 8010118:	24014c94 	.word	0x24014c94
 801011c:	24014c90 	.word	0x24014c90
 8010120:	88888889 	.word	0x88888889

08010124 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3301      	adds	r3, #1
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8010138:	4313      	orrs	r3, r2
 801013a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 801013c:	68fb      	ldr	r3, [r7, #12]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3714      	adds	r7, #20
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 801014a:	b480      	push	{r7}
 801014c:	b083      	sub	sp, #12
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	b2da      	uxtb	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	0a1a      	lsrs	r2, r3, #8
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	3301      	adds	r3, #1
 8010164:	b2d2      	uxtb	r2, r2
 8010166:	701a      	strb	r2, [r3, #0]
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 8010174:	b480      	push	{r7}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3303      	adds	r3, #3
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3302      	adds	r3, #2
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801018c:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	3301      	adds	r3, #1
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8010196:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 801019c:	4313      	orrs	r3, r2
 801019e:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 80101a0:	68fb      	ldr	r3, [r7, #12]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b083      	sub	sp, #12
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	0a1a      	lsrs	r2, r3, #8
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3301      	adds	r3, #1
 80101c8:	b2d2      	uxtb	r2, r2
 80101ca:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	0c1a      	lsrs	r2, r3, #16
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3302      	adds	r3, #2
 80101d4:	b2d2      	uxtb	r2, r2
 80101d6:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	0e1a      	lsrs	r2, r3, #24
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3303      	adds	r3, #3
 80101e0:	b2d2      	uxtb	r2, r2
 80101e2:	701a      	strb	r2, [r3, #0]
}
 80101e4:	bf00      	nop
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 80101f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101f4:	b098      	sub	sp, #96	; 0x60
 80101f6:	af04      	add	r7, sp, #16
 80101f8:	61f8      	str	r0, [r7, #28]
 80101fa:	61b9      	str	r1, [r7, #24]
 80101fc:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	f003 0303 	and.w	r3, r3, #3
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010226:	4613      	mov	r3, r2
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	4413      	add	r3, r2
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010232:	69fa      	ldr	r2, [r7, #28]
 8010234:	4413      	add	r3, r2
 8010236:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8010238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	69ba      	ldr	r2, [r7, #24]
 801023e:	429a      	cmp	r2, r3
 8010240:	d105      	bne.n	801024e <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8010242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010244:	685a      	ldr	r2, [r3, #4]
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801024a:	2300      	movs	r3, #0
 801024c:	e1f4      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 801024e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010250:	330c      	adds	r3, #12
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	69ba      	ldr	r2, [r7, #24]
 8010256:	429a      	cmp	r2, r3
 8010258:	d11d      	bne.n	8010296 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 801025a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801025c:	330c      	adds	r3, #12
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801026a:	ca07      	ldmia	r2, {r0, r1, r2}
 801026c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8010270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010274:	4614      	mov	r4, r2
 8010276:	330c      	adds	r3, #12
 8010278:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801027c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010282:	330c      	adds	r3, #12
 8010284:	461c      	mov	r4, r3
 8010286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801028a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801028e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010292:	2300      	movs	r3, #0
 8010294:	e1d0      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8010296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010298:	3318      	adds	r3, #24
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d127      	bne.n	80102f2 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 80102a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a4:	3318      	adds	r3, #24
 80102a6:	685a      	ldr	r2, [r3, #4]
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 80102ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80102b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 80102b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102bc:	4614      	mov	r4, r2
 80102be:	3318      	adds	r3, #24
 80102c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80102c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ca:	f103 0218 	add.w	r2, r3, #24
 80102ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d0:	4614      	mov	r4, r2
 80102d2:	330c      	adds	r3, #12
 80102d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80102dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102de:	330c      	adds	r3, #12
 80102e0:	461c      	mov	r4, r3
 80102e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80102ee:	2300      	movs	r3, #0
 80102f0:	e1a2      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 80102f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f4:	3324      	adds	r3, #36	; 0x24
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	69ba      	ldr	r2, [r7, #24]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d131      	bne.n	8010362 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 80102fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010300:	3324      	adds	r3, #36	; 0x24
 8010302:	685a      	ldr	r2, [r3, #4]
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801030a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801030e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8010314:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010318:	4614      	mov	r4, r2
 801031a:	3324      	adds	r3, #36	; 0x24
 801031c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010326:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801032a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801032c:	4614      	mov	r4, r2
 801032e:	3318      	adds	r3, #24
 8010330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801033a:	f103 0218 	add.w	r2, r3, #24
 801033e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010340:	4614      	mov	r4, r2
 8010342:	330c      	adds	r3, #12
 8010344:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 801034c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801034e:	330c      	adds	r3, #12
 8010350:	461c      	mov	r4, r3
 8010352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801035a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801035e:	2300      	movs	r3, #0
 8010360:	e16a      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8010362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010364:	1cda      	adds	r2, r3, #3
 8010366:	69f9      	ldr	r1, [r7, #28]
 8010368:	4613      	mov	r3, r2
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4413      	add	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	440b      	add	r3, r1
 8010372:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d008      	beq.n	801038e <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 801037c:	69f8      	ldr	r0, [r7, #28]
 801037e:	f000 fa54 	bl	801082a <_fx_utility_FAT_flush>
 8010382:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8010384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 801038a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038c:	e154      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010394:	1e5a      	subs	r2, r3, #1
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 80a7 	beq.w	8010502 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	005a      	lsls	r2, r3, #1
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	4413      	add	r3, r2
 80103bc:	085b      	lsrs	r3, r3, #1
 80103be:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103c6:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80103ce:	4413      	add	r3, r2
 80103d0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80103d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d4:	2200      	movs	r2, #0
 80103d6:	60bb      	str	r3, [r7, #8]
 80103d8:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80103de:	2202      	movs	r2, #2
 80103e0:	9202      	str	r2, [sp, #8]
 80103e2:	2201      	movs	r2, #1
 80103e4:	9201      	str	r2, [sp, #4]
 80103e6:	9300      	str	r3, [sp, #0]
 80103e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80103ec:	69f8      	ldr	r0, [r7, #28]
 80103ee:	f001 fb0d 	bl	8011a0c <_fx_utility_logical_sector_read>
 80103f2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80103f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 80103fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fc:	e11c      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010404:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8010406:	69fa      	ldr	r2, [r7, #28]
 8010408:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801040a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801040e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	689a      	ldr	r2, [r3, #8]
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	4413      	add	r3, r2
 801041c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	f003 0301 	and.w	r3, r3, #1
 8010424:	2b00      	cmp	r3, #0
 8010426:	d030      	beq.n	801048a <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8010428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	091b      	lsrs	r3, r3, #4
 801042e:	b2db      	uxtb	r3, r3
 8010430:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 8010432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010434:	3301      	adds	r3, #1
 8010436:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043c:	3b01      	subs	r3, #1
 801043e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010440:	429a      	cmp	r2, r3
 8010442:	d11b      	bne.n	801047c <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010446:	3301      	adds	r3, #1
 8010448:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044c:	2200      	movs	r2, #0
 801044e:	603b      	str	r3, [r7, #0]
 8010450:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010456:	2202      	movs	r2, #2
 8010458:	9202      	str	r2, [sp, #8]
 801045a:	2201      	movs	r2, #1
 801045c:	9201      	str	r2, [sp, #4]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010464:	69f8      	ldr	r0, [r7, #28]
 8010466:	f001 fad1 	bl	8011a0c <_fx_utility_logical_sector_read>
 801046a:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801046c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 8010472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010474:	e0e0      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 801047c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010484:	4313      	orrs	r3, r2
 8010486:	64bb      	str	r3, [r7, #72]	; 0x48
 8010488:	e02f      	b.n	80104ea <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 801048a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8010490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010492:	3301      	adds	r3, #1
 8010494:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801049a:	3b01      	subs	r3, #1
 801049c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801049e:	429a      	cmp	r2, r3
 80104a0:	d11b      	bne.n	80104da <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 80104a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a4:	3301      	adds	r3, #1
 80104a6:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104aa:	2200      	movs	r2, #0
 80104ac:	469a      	mov	sl, r3
 80104ae:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104b4:	2202      	movs	r2, #2
 80104b6:	9202      	str	r2, [sp, #8]
 80104b8:	2201      	movs	r2, #1
 80104ba:	9201      	str	r2, [sp, #4]
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	4652      	mov	r2, sl
 80104c0:	465b      	mov	r3, fp
 80104c2:	69f8      	ldr	r0, [r7, #28]
 80104c4:	f001 faa2 	bl	8011a0c <_fx_utility_logical_sector_read>
 80104c8:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80104ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 80104d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d2:	e0b1      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 80104da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	021b      	lsls	r3, r3, #8
 80104e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80104e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104e6:	4313      	orrs	r3, r2
 80104e8:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 80104ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ec:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80104f0:	d303      	bcc.n	80104fa <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 80104f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104f4:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80104f8:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	e078      	b.n	80105f4 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010506:	2b00      	cmp	r3, #0
 8010508:	d139      	bne.n	801057e <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010516:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801051e:	4413      	add	r3, r2
 8010520:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010524:	2200      	movs	r2, #0
 8010526:	4698      	mov	r8, r3
 8010528:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801052e:	2202      	movs	r2, #2
 8010530:	9202      	str	r2, [sp, #8]
 8010532:	2201      	movs	r2, #1
 8010534:	9201      	str	r2, [sp, #4]
 8010536:	9300      	str	r3, [sp, #0]
 8010538:	4642      	mov	r2, r8
 801053a:	464b      	mov	r3, r9
 801053c:	69f8      	ldr	r0, [r7, #28]
 801053e:	f001 fa65 	bl	8011a0c <_fx_utility_logical_sector_read>
 8010542:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010546:	2b00      	cmp	r3, #0
 8010548:	d001      	beq.n	801054e <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 801054a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054c:	e074      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010554:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8010556:	69fa      	ldr	r2, [r7, #28]
 8010558:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801055a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 801055e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	689a      	ldr	r2, [r3, #8]
 8010568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056a:	4413      	add	r3, r2
 801056c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 801056e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010570:	f7ff fdd8 	bl	8010124 <_fx_utility_16_unsigned_read>
 8010574:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	e03a      	b.n	80105f4 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801058a:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010592:	4413      	add	r3, r2
 8010594:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801059a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059c:	fbb3 f1f2 	udiv	r1, r3, r2
 80105a0:	fb01 f202 	mul.w	r2, r1, r2
 80105a4:	1a9b      	subs	r3, r3, r2
 80105a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	2200      	movs	r2, #0
 80105ac:	461c      	mov	r4, r3
 80105ae:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80105b4:	2202      	movs	r2, #2
 80105b6:	9202      	str	r2, [sp, #8]
 80105b8:	2201      	movs	r2, #1
 80105ba:	9201      	str	r2, [sp, #4]
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	4622      	mov	r2, r4
 80105c0:	462b      	mov	r3, r5
 80105c2:	69f8      	ldr	r0, [r7, #28]
 80105c4:	f001 fa22 	bl	8011a0c <_fx_utility_logical_sector_read>
 80105c8:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80105ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 80105d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105d2:	e031      	b.n	8010638 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	689a      	ldr	r2, [r3, #8]
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	4413      	add	r3, r2
 80105dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 80105de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80105e0:	f7ff fdc8 	bl	8010174 <_fx_utility_32_unsigned_read>
 80105e4:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80105ec:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105f2:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80105f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80105fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fc:	4614      	mov	r4, r2
 80105fe:	3318      	adds	r3, #24
 8010600:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801060a:	f103 0218 	add.w	r2, r3, #24
 801060e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010610:	4614      	mov	r4, r2
 8010612:	330c      	adds	r3, #12
 8010614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 801061c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801061e:	330c      	adds	r3, #12
 8010620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010622:	ca07      	ldmia	r2, {r0, r1, r2}
 8010624:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8010628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801062a:	69ba      	ldr	r2, [r7, #24]
 801062c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010634:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3750      	adds	r7, #80	; 0x50
 801063c:	46bd      	mov	sp, r7
 801063e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010642 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8010642:	b590      	push	{r4, r7, lr}
 8010644:	b089      	sub	sp, #36	; 0x24
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	60b9      	str	r1, [r7, #8]
 801064c:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010662:	1c5a      	adds	r2, r3, #1
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	f003 0303 	and.w	r3, r3, #3
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010674:	69ba      	ldr	r2, [r7, #24]
 8010676:	4613      	mov	r3, r2
 8010678:	005b      	lsls	r3, r3, #1
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	4413      	add	r3, r2
 8010686:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8010688:	2300      	movs	r3, #0
 801068a:	61fb      	str	r3, [r7, #28]
 801068c:	e051      	b.n	8010732 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	4613      	mov	r3, r2
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	4413      	add	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	461a      	mov	r2, r3
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	4413      	add	r3, r2
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68ba      	ldr	r2, [r7, #8]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d142      	bne.n	801072c <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 80106a6:	69fa      	ldr	r2, [r7, #28]
 80106a8:	4613      	mov	r3, r2
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	4413      	add	r3, r2
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	461a      	mov	r2, r3
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	4413      	add	r3, r2
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 80106ba:	69fa      	ldr	r2, [r7, #28]
 80106bc:	4613      	mov	r3, r2
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	4413      	add	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	461a      	mov	r2, r3
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	4413      	add	r3, r2
 80106ca:	2201      	movs	r2, #1
 80106cc:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d027      	beq.n	8010728 <_fx_utility_FAT_entry_write+0xe6>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d124      	bne.n	8010728 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2206      	movs	r2, #6
 80106f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2290      	movs	r2, #144	; 0x90
 80106f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	3b02      	subs	r3, #2
 8010704:	68f9      	ldr	r1, [r7, #12]
 8010706:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010708:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 801070c:	441a      	add	r2, r3
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 8010728:	2300      	movs	r3, #0
 801072a:	e07a      	b.n	8010822 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	3301      	adds	r3, #1
 8010730:	61fb      	str	r3, [r7, #28]
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	2b03      	cmp	r3, #3
 8010736:	d9aa      	bls.n	801068e <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801073e:	1e5a      	subs	r2, r3, #1
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 801074c:	1c5a      	adds	r2, r3, #1
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	1cda      	adds	r2, r3, #3
 8010758:	68f9      	ldr	r1, [r7, #12]
 801075a:	4613      	mov	r3, r2
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4413      	add	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	440b      	add	r3, r1
 8010764:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b01      	cmp	r3, #1
 801076c:	d108      	bne.n	8010780 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f000 f85b 	bl	801082a <_fx_utility_FAT_flush>
 8010774:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d001      	beq.n	8010780 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	e050      	b.n	8010822 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	4614      	mov	r4, r2
 801078a:	3318      	adds	r3, #24
 801078c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	f103 0218 	add.w	r2, r3, #24
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	4614      	mov	r4, r2
 801079e:	330c      	adds	r3, #12
 80107a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	330c      	adds	r3, #12
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80107b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2201      	movs	r2, #1
 80107b8:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d027      	beq.n	8010820 <_fx_utility_FAT_entry_write+0x1de>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d124      	bne.n	8010820 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80107dc:	1c5a      	adds	r2, r3, #1
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2206      	movs	r2, #6
 80107e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2290      	movs	r2, #144	; 0x90
 80107f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	3b02      	subs	r3, #2
 80107fc:	68f9      	ldr	r1, [r7, #12]
 80107fe:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010800:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8010804:	441a      	add	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801081c:	68f8      	ldr	r0, [r7, #12]
 801081e:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3724      	adds	r7, #36	; 0x24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd90      	pop	{r4, r7, pc}

0801082a <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 801082a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801082e:	b09a      	sub	sp, #104	; 0x68
 8010830:	af04      	add	r7, sp, #16
 8010832:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 801083a:	1c5a      	adds	r2, r3, #1
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010842:	2300      	movs	r3, #0
 8010844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010846:	e337      	b.n	8010eb8 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8010848:	69f9      	ldr	r1, [r7, #28]
 801084a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801084c:	4613      	mov	r3, r2
 801084e:	005b      	lsls	r3, r3, #1
 8010850:	4413      	add	r3, r2
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	440b      	add	r3, r1
 8010856:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 8325 	beq.w	8010eac <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8010862:	69f9      	ldr	r1, [r7, #28]
 8010864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010866:	4613      	mov	r3, r2
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	4413      	add	r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	440b      	add	r3, r1
 8010870:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 816c 	beq.w	8010b5a <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010884:	005a      	lsls	r2, r3, #1
 8010886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010888:	4413      	add	r3, r2
 801088a:	085b      	lsrs	r3, r3, #1
 801088c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010894:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801089c:	4413      	add	r3, r2
 801089e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 80108a0:	f04f 33ff 	mov.w	r3, #4294967295
 80108a4:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80108a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108a8:	2200      	movs	r2, #0
 80108aa:	461c      	mov	r4, r3
 80108ac:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80108b2:	2302      	movs	r3, #2
 80108b4:	9302      	str	r3, [sp, #8]
 80108b6:	2301      	movs	r3, #1
 80108b8:	9301      	str	r3, [sp, #4]
 80108ba:	9200      	str	r2, [sp, #0]
 80108bc:	4622      	mov	r2, r4
 80108be:	462b      	mov	r3, r5
 80108c0:	69f8      	ldr	r0, [r7, #28]
 80108c2:	f001 f8a3 	bl	8011a0c <_fx_utility_logical_sector_read>
 80108c6:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80108c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 80108ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d0:	e2f7      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 80108d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d8:	d037      	beq.n	801094a <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	689b      	ldr	r3, [r3, #8]
 80108de:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 80108e0:	69f9      	ldr	r1, [r7, #28]
 80108e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	440b      	add	r3, r1
 80108ee:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 80108f6:	69f9      	ldr	r1, [r7, #28]
 80108f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108fa:	4613      	mov	r3, r2
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	4413      	add	r3, r2
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	440b      	add	r3, r1
 8010904:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 801090c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801090e:	f003 0301 	and.w	r3, r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	d005      	beq.n	8010922 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8010916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010918:	091b      	lsrs	r3, r3, #4
 801091a:	b2db      	uxtb	r3, r3
 801091c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801091e:	7013      	strb	r3, [r2, #0]
 8010920:	e010      	b.n	8010944 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8010922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801092a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	b2da      	uxtb	r2, r3
 8010930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010932:	0a1b      	lsrs	r3, r3, #8
 8010934:	b2db      	uxtb	r3, r3
 8010936:	f003 030f 	and.w	r3, r3, #15
 801093a:	b2db      	uxtb	r3, r3
 801093c:	4313      	orrs	r3, r2
 801093e:	b2db      	uxtb	r3, r3
 8010940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010942:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8010944:	f04f 33ff 	mov.w	r3, #4294967295
 8010948:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801094a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801094c:	653b      	str	r3, [r7, #80]	; 0x50
 801094e:	e0a0      	b.n	8010a92 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8010950:	69f9      	ldr	r1, [r7, #28]
 8010952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010954:	4613      	mov	r3, r2
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	4413      	add	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	440b      	add	r3, r1
 801095e:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 808a 	beq.w	8010a7e <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801096a:	69f9      	ldr	r1, [r7, #28]
 801096c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801096e:	4613      	mov	r3, r2
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	440b      	add	r3, r1
 8010978:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010982:	005a      	lsls	r2, r3, #1
 8010984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010986:	4413      	add	r3, r2
 8010988:	085b      	lsrs	r3, r3, #1
 801098a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010992:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801099a:	4413      	add	r3, r2
 801099c:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 801099e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d16d      	bne.n	8010a82 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 80109a6:	69f9      	ldr	r1, [r7, #28]
 80109a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109aa:	4613      	mov	r3, r2
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	4413      	add	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	440b      	add	r3, r1
 80109b4:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109c2:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80109c8:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 80109cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d6:	3b01      	subs	r3, #1
 80109d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109da:	429a      	cmp	r2, r3
 80109dc:	d101      	bne.n	80109e2 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 80109de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109e0:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	689a      	ldr	r2, [r3, #8]
 80109e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e8:	4413      	add	r3, r2
 80109ea:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80109ec:	69f9      	ldr	r1, [r7, #28]
 80109ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109f0:	4613      	mov	r3, r2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	4413      	add	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	440b      	add	r3, r1
 80109fa:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80109fe:	2200      	movs	r2, #0
 8010a00:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8010a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a04:	f003 0301 	and.w	r3, r3, #1
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d01b      	beq.n	8010a44 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f003 030f 	and.w	r3, r3, #15
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	011b      	lsls	r3, r3, #4
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	4313      	orrs	r3, r2
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a28:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8010a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d029      	beq.n	8010a86 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 8010a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a34:	3301      	adds	r3, #1
 8010a36:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8010a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3a:	091b      	lsrs	r3, r3, #4
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a40:	7013      	strb	r3, [r2, #0]
 8010a42:	e023      	b.n	8010a8c <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8010a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a4a:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8010a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d01a      	beq.n	8010a8a <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	3301      	adds	r3, #1
 8010a58:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a62:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	0a1b      	lsrs	r3, r3, #8
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	f003 030f 	and.w	r3, r3, #15
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	4313      	orrs	r3, r2
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a7a:	7013      	strb	r3, [r2, #0]
 8010a7c:	e006      	b.n	8010a8c <_fx_utility_FAT_flush+0x262>
                        continue;
 8010a7e:	bf00      	nop
 8010a80:	e004      	b.n	8010a8c <_fx_utility_FAT_flush+0x262>
                        continue;
 8010a82:	bf00      	nop
 8010a84:	e002      	b.n	8010a8c <_fx_utility_FAT_flush+0x262>
                            continue;
 8010a86:	bf00      	nop
 8010a88:	e000      	b.n	8010a8c <_fx_utility_FAT_flush+0x262>
                            continue;
 8010a8a:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8e:	3301      	adds	r3, #1
 8010a90:	653b      	str	r3, [r7, #80]	; 0x50
 8010a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a94:	2b0f      	cmp	r3, #15
 8010a96:	f67f af5b 	bls.w	8010950 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4698      	mov	r8, r3
 8010aa0:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	9302      	str	r3, [sp, #8]
 8010aaa:	2301      	movs	r3, #1
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	9200      	str	r2, [sp, #0]
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	69f8      	ldr	r0, [r7, #28]
 8010ab6:	f001 fa3d 	bl	8011f34 <_fx_utility_logical_sector_write>
 8010aba:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 8010ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac4:	e1fd      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d105      	bne.n	8010ade <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ad6:	0a9b      	lsrs	r3, r3, #10
 8010ad8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010adc:	e006      	b.n	8010aec <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae2:	0a9b      	lsrs	r3, r3, #10
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 8010aec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d101      	bne.n	8010af8 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8010af4:	2302      	movs	r3, #2
 8010af6:	e1e4      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010afe:	1ad2      	subs	r2, r2, r3
 8010b00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b08:	08db      	lsrs	r3, r3, #3
 8010b0a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010b0c:	69fa      	ldr	r2, [r7, #28]
 8010b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b10:	4413      	add	r3, r2
 8010b12:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b20:	1a9a      	subs	r2, r3, r2
 8010b22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b2a:	f003 0207 	and.w	r2, r3, #7
 8010b2e:	2301      	movs	r3, #1
 8010b30:	4093      	lsls	r3, r2
 8010b32:	b25b      	sxtb	r3, r3
 8010b34:	430b      	orrs	r3, r1
 8010b36:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010b38:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010b3a:	69fa      	ldr	r2, [r7, #28]
 8010b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b3e:	4413      	add	r3, r2
 8010b40:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010b44:	460b      	mov	r3, r1
 8010b46:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 8010b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4e:	f000 81af 	beq.w	8010eb0 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 8010b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b54:	3301      	adds	r3, #1
 8010b56:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b58:	e6a5      	b.n	80108a6 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f040 80d2 	bne.w	8010d08 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8010b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b70:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010b78:	4413      	add	r3, r2
 8010b7a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b7e:	2200      	movs	r2, #0
 8010b80:	469a      	mov	sl, r3
 8010b82:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b88:	2302      	movs	r3, #2
 8010b8a:	9302      	str	r3, [sp, #8]
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	9301      	str	r3, [sp, #4]
 8010b90:	9200      	str	r2, [sp, #0]
 8010b92:	4652      	mov	r2, sl
 8010b94:	465b      	mov	r3, fp
 8010b96:	69f8      	ldr	r0, [r7, #28]
 8010b98:	f000 ff38 	bl	8011a0c <_fx_utility_logical_sector_read>
 8010b9c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8010ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba6:	e18c      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010baa:	653b      	str	r3, [r7, #80]	; 0x50
 8010bac:	e057      	b.n	8010c5e <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010bae:	69f9      	ldr	r1, [r7, #28]
 8010bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	005b      	lsls	r3, r3, #1
 8010bb6:	4413      	add	r3, r2
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	440b      	add	r3, r1
 8010bbc:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d045      	beq.n	8010c52 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010bc6:	69f9      	ldr	r1, [r7, #28]
 8010bc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010bca:	4613      	mov	r3, r2
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	4413      	add	r3, r2
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	440b      	add	r3, r1
 8010bd4:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8010bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010be8:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010bf0:	4413      	add	r3, r2
 8010bf2:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d12c      	bne.n	8010c56 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c02:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010c08:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c0e:	1ad3      	subs	r3, r2, r3
 8010c10:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	689a      	ldr	r2, [r3, #8]
 8010c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c18:	4413      	add	r3, r2
 8010c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010c1c:	69f9      	ldr	r1, [r7, #28]
 8010c1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c20:	4613      	mov	r3, r2
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	4413      	add	r3, r2
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	440b      	add	r3, r1
 8010c2a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8010c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c36:	f7ff fa88 	bl	801014a <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010c3a:	69f9      	ldr	r1, [r7, #28]
 8010c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c3e:	4613      	mov	r3, r2
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	440b      	add	r3, r1
 8010c48:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	601a      	str	r2, [r3, #0]
 8010c50:	e002      	b.n	8010c58 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8010c52:	bf00      	nop
 8010c54:	e000      	b.n	8010c58 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8010c56:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8010c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c60:	2b0f      	cmp	r3, #15
 8010c62:	d9a4      	bls.n	8010bae <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c66:	2200      	movs	r2, #0
 8010c68:	613b      	str	r3, [r7, #16]
 8010c6a:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010c70:	2302      	movs	r3, #2
 8010c72:	9302      	str	r3, [sp, #8]
 8010c74:	2301      	movs	r3, #1
 8010c76:	9301      	str	r3, [sp, #4]
 8010c78:	9200      	str	r2, [sp, #0]
 8010c7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c7e:	69f8      	ldr	r0, [r7, #28]
 8010c80:	f001 f958 	bl	8011f34 <_fx_utility_logical_sector_write>
 8010c84:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d001      	beq.n	8010c90 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 8010c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8e:	e118      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d105      	bne.n	8010ca8 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ca0:	0a9b      	lsrs	r3, r3, #10
 8010ca2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010ca6:	e006      	b.n	8010cb6 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cac:	0a9b      	lsrs	r3, r3, #10
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cbc:	1ad2      	subs	r2, r2, r3
 8010cbe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cc6:	08db      	lsrs	r3, r3, #3
 8010cc8:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010cca:	69fa      	ldr	r2, [r7, #28]
 8010ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cce:	4413      	add	r3, r2
 8010cd0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cde:	1a9a      	subs	r2, r3, r2
 8010ce0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ce8:	f003 0207 	and.w	r2, r3, #7
 8010cec:	2301      	movs	r3, #1
 8010cee:	4093      	lsls	r3, r2
 8010cf0:	b25b      	sxtb	r3, r3
 8010cf2:	430b      	orrs	r3, r1
 8010cf4:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010cf6:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010cf8:	69fa      	ldr	r2, [r7, #28]
 8010cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010d02:	460b      	mov	r3, r1
 8010d04:	7013      	strb	r3, [r2, #0]
 8010d06:	e0d4      	b.n	8010eb2 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8010d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d14:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d1c:	4413      	add	r3, r2
 8010d1e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d22:	2200      	movs	r2, #0
 8010d24:	60bb      	str	r3, [r7, #8]
 8010d26:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010d2c:	2302      	movs	r3, #2
 8010d2e:	9302      	str	r3, [sp, #8]
 8010d30:	2301      	movs	r3, #1
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	9200      	str	r2, [sp, #0]
 8010d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010d3a:	69f8      	ldr	r0, [r7, #28]
 8010d3c:	f000 fe66 	bl	8011a0c <_fx_utility_logical_sector_read>
 8010d40:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d001      	beq.n	8010d4c <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 8010d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4a:	e0ba      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8010d50:	e057      	b.n	8010e02 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010d52:	69f9      	ldr	r1, [r7, #28]
 8010d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d56:	4613      	mov	r3, r2
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	4413      	add	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	440b      	add	r3, r1
 8010d60:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d045      	beq.n	8010df6 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010d6a:	69f9      	ldr	r1, [r7, #28]
 8010d6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	440b      	add	r3, r1
 8010d78:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 8010d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d8c:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d94:	4413      	add	r3, r2
 8010d96:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d12c      	bne.n	8010dfa <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010da6:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010dac:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010db2:	1ad3      	subs	r3, r2, r3
 8010db4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	689a      	ldr	r2, [r3, #8]
 8010dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dbc:	4413      	add	r3, r2
 8010dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010dc0:	69f9      	ldr	r1, [r7, #28]
 8010dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	009b      	lsls	r3, r3, #2
 8010dcc:	440b      	add	r3, r1
 8010dce:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8010dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dda:	f7ff f9e8 	bl	80101ae <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010dde:	69f9      	ldr	r1, [r7, #28]
 8010de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010de2:	4613      	mov	r3, r2
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	4413      	add	r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	440b      	add	r3, r1
 8010dec:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010df0:	2200      	movs	r2, #0
 8010df2:	601a      	str	r2, [r3, #0]
 8010df4:	e002      	b.n	8010dfc <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010df6:	bf00      	nop
 8010df8:	e000      	b.n	8010dfc <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010dfa:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dfe:	3301      	adds	r3, #1
 8010e00:	653b      	str	r3, [r7, #80]	; 0x50
 8010e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e04:	2b0f      	cmp	r3, #15
 8010e06:	d9a4      	bls.n	8010d52 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	603b      	str	r3, [r7, #0]
 8010e0e:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010e14:	2302      	movs	r3, #2
 8010e16:	9302      	str	r3, [sp, #8]
 8010e18:	2301      	movs	r3, #1
 8010e1a:	9301      	str	r3, [sp, #4]
 8010e1c:	9200      	str	r2, [sp, #0]
 8010e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e22:	69f8      	ldr	r0, [r7, #28]
 8010e24:	f001 f886 	bl	8011f34 <_fx_utility_logical_sector_write>
 8010e28:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8010e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e32:	e046      	b.n	8010ec2 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d105      	bne.n	8010e4c <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e44:	0a9b      	lsrs	r3, r3, #10
 8010e46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010e4a:	e006      	b.n	8010e5a <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e50:	0a9b      	lsrs	r3, r3, #10
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	3301      	adds	r3, #1
 8010e56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e60:	1ad2      	subs	r2, r2, r3
 8010e62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e6a:	08db      	lsrs	r3, r3, #3
 8010e6c:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e72:	4413      	add	r3, r2
 8010e74:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e82:	1a9a      	subs	r2, r3, r2
 8010e84:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e8c:	f003 0207 	and.w	r2, r3, #7
 8010e90:	2301      	movs	r3, #1
 8010e92:	4093      	lsls	r3, r2
 8010e94:	b25b      	sxtb	r3, r3
 8010e96:	430b      	orrs	r3, r1
 8010e98:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010e9a:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010e9c:	69fa      	ldr	r2, [r7, #28]
 8010e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea0:	4413      	add	r3, r2
 8010ea2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	7013      	strb	r3, [r2, #0]
 8010eaa:	e002      	b.n	8010eb2 <_fx_utility_FAT_flush+0x688>
            continue;
 8010eac:	bf00      	nop
 8010eae:	e000      	b.n	8010eb2 <_fx_utility_FAT_flush+0x688>
                    break;
 8010eb0:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eba:	2b0f      	cmp	r3, #15
 8010ebc:	f67f acc4 	bls.w	8010848 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3758      	adds	r7, #88	; 0x58
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ecc <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8010ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ed0:	b092      	sub	sp, #72	; 0x48
 8010ed2:	af04      	add	r7, sp, #16
 8010ed4:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d105      	bne.n	8010eee <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ee6:	0a9b      	lsrs	r3, r3, #10
 8010ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010eec:	e006      	b.n	8010efc <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ef2:	0a9b      	lsrs	r3, r3, #10
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010efc:	2300      	movs	r3, #0
 8010efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f00:	e089      	b.n	8011016 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8010f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f04:	08db      	lsrs	r3, r3, #3
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	4413      	add	r3, r2
 8010f0a:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 8010f0e:	461a      	mov	r2, r3
 8010f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f12:	f003 0307 	and.w	r3, r3, #7
 8010f16:	fa42 f303 	asr.w	r3, r2, r3
 8010f1a:	f003 0301 	and.w	r3, r3, #1
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d075      	beq.n	801100e <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8010f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f28:	fb03 f202 	mul.w	r2, r3, r2
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f30:	4413      	add	r3, r2
 8010f32:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8010f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f3a:	4413      	add	r3, r2
 8010f3c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f46:	4413      	add	r3, r2
 8010f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d95a      	bls.n	8011004 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f56:	4413      	add	r3, r2
 8010f58:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 8010f5a:	e053      	b.n	8011004 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f5e:	2200      	movs	r2, #0
 8010f60:	613b      	str	r3, [r7, #16]
 8010f62:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010f68:	2302      	movs	r3, #2
 8010f6a:	9302      	str	r3, [sp, #8]
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	9301      	str	r3, [sp, #4]
 8010f70:	9200      	str	r2, [sp, #0]
 8010f72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f76:	69f8      	ldr	r0, [r7, #28]
 8010f78:	f000 fd48 	bl	8011a0c <_fx_utility_logical_sector_read>
 8010f7c:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010f7e:	6a3b      	ldr	r3, [r7, #32]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	e05c      	b.n	8011042 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 8010f90:	e032      	b.n	8010ff8 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 8010f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f94:	2200      	movs	r2, #0
 8010f96:	60bb      	str	r3, [r7, #8]
 8010f98:	60fa      	str	r2, [r7, #12]
 8010f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	4698      	mov	r8, r3
 8010fa0:	4691      	mov	r9, r2
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	469a      	mov	sl, r3
 8010faa:	4693      	mov	fp, r2
 8010fac:	fb0a f209 	mul.w	r2, sl, r9
 8010fb0:	fb08 f30b 	mul.w	r3, r8, fp
 8010fb4:	4413      	add	r3, r2
 8010fb6:	fba8 450a 	umull	r4, r5, r8, sl
 8010fba:	442b      	add	r3, r5
 8010fbc:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010fbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	191b      	adds	r3, r3, r4
 8010fc6:	603b      	str	r3, [r7, #0]
 8010fc8:	4613      	mov	r3, r2
 8010fca:	416b      	adcs	r3, r5
 8010fcc:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010fd2:	2302      	movs	r3, #2
 8010fd4:	9302      	str	r3, [sp, #8]
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	9301      	str	r3, [sp, #4]
 8010fda:	9200      	str	r2, [sp, #0]
 8010fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fe0:	69f8      	ldr	r0, [r7, #28]
 8010fe2:	f000 ffa7 	bl	8011f34 <_fx_utility_logical_sector_write>
 8010fe6:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d001      	beq.n	8010ff2 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	e027      	b.n	8011042 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1c9      	bne.n	8010f92 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011000:	3301      	adds	r3, #1
 8011002:	637b      	str	r3, [r7, #52]	; 0x34
 8011004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011008:	429a      	cmp	r2, r3
 801100a:	d3a7      	bcc.n	8010f5c <_fx_utility_FAT_map_flush+0x90>
 801100c:	e000      	b.n	8011010 <_fx_utility_FAT_map_flush+0x144>
            continue;
 801100e:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8011010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011012:	3301      	adds	r3, #1
 8011014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801101c:	f4ff af71 	bcc.w	8010f02 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8011020:	2300      	movs	r3, #0
 8011022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011024:	e009      	b.n	801103a <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8011026:	69fa      	ldr	r2, [r7, #28]
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102a:	4413      	add	r3, r2
 801102c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011030:	2200      	movs	r2, #0
 8011032:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8011034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011036:	3301      	adds	r3, #1
 8011038:	62fb      	str	r3, [r7, #44]	; 0x2c
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	2b7f      	cmp	r3, #127	; 0x7f
 801103e:	d9f2      	bls.n	8011026 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 8011040:	2300      	movs	r3, #0
}
 8011042:	4618      	mov	r0, r3
 8011044:	3738      	adds	r7, #56	; 0x38
 8011046:	46bd      	mov	sp, r7
 8011048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801104c <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 801104c:	b480      	push	{r7}
 801104e:	b08f      	sub	sp, #60	; 0x3c
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 8275 	beq.w	801154c <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801106a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801106e:	4013      	ands	r3, r2
 8011070:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	6a1a      	ldr	r2, [r3, #32]
 8011076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011078:	f003 031f 	and.w	r3, r3, #31
 801107c:	2101      	movs	r1, #1
 801107e:	fa01 f303 	lsl.w	r3, r1, r3
 8011082:	431a      	orrs	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801108e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011090:	4613      	mov	r3, r2
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	4413      	add	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	4413      	add	r3, r2
 80110a0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80110a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a4:	7c5b      	ldrb	r3, [r3, #17]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d015      	beq.n	80110d6 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 80110aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80110b4:	4299      	cmp	r1, r3
 80110b6:	bf08      	it	eq
 80110b8:	4290      	cmpeq	r0, r2
 80110ba:	d10c      	bne.n	80110d6 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80110bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80110d2:	2300      	movs	r3, #0
 80110d4:	e27e      	b.n	80115d4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 80110d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d8:	3318      	adds	r3, #24
 80110da:	7c5b      	ldrb	r3, [r3, #17]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d060      	beq.n	80111a2 <_fx_utility_logical_sector_cache_entry_read+0x156>
 80110e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e2:	3318      	adds	r3, #24
 80110e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80110ec:	4299      	cmp	r1, r3
 80110ee:	bf08      	it	eq
 80110f0:	4290      	cmpeq	r0, r2
 80110f2:	d156      	bne.n	80111a2 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80110f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f6:	3318      	adds	r3, #24
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8011112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011114:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011118:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111e:	7c1b      	ldrb	r3, [r3, #16]
 8011120:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8011124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011126:	7c5b      	ldrb	r3, [r3, #17]
 8011128:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112e:	7c9b      	ldrb	r3, [r3, #18]
 8011130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011136:	3318      	adds	r3, #24
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113c:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011140:	3318      	adds	r3, #24
 8011142:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011148:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801114e:	3318      	adds	r3, #24
 8011150:	7c1a      	ldrb	r2, [r3, #16]
 8011152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011154:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8011156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011158:	3318      	adds	r3, #24
 801115a:	7c5a      	ldrb	r2, [r3, #17]
 801115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115e:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8011160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011162:	3318      	adds	r3, #24
 8011164:	7c9a      	ldrb	r2, [r3, #18]
 8011166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011168:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116c:	3318      	adds	r3, #24
 801116e:	693a      	ldr	r2, [r7, #16]
 8011170:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8011172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011174:	f103 0118 	add.w	r1, r3, #24
 8011178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801117c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8011180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011182:	3318      	adds	r3, #24
 8011184:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011188:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801118a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118c:	3318      	adds	r3, #24
 801118e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011192:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011196:	3318      	adds	r3, #24
 8011198:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801119c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801119e:	2300      	movs	r3, #0
 80111a0:	e218      	b.n	80115d4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 80111a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a4:	3330      	adds	r3, #48	; 0x30
 80111a6:	7c5b      	ldrb	r3, [r3, #17]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 8086 	beq.w	80112ba <_fx_utility_logical_sector_cache_entry_read+0x26e>
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	3330      	adds	r3, #48	; 0x30
 80111b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80111b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80111ba:	4299      	cmp	r1, r3
 80111bc:	bf08      	it	eq
 80111be:	4290      	cmpeq	r0, r2
 80111c0:	d17b      	bne.n	80112ba <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80111c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c4:	3330      	adds	r3, #48	; 0x30
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80111da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80111e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80111e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80111ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ec:	7c1b      	ldrb	r3, [r3, #16]
 80111ee:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80111f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f4:	7c5b      	ldrb	r3, [r3, #17]
 80111f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80111fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fc:	7c9b      	ldrb	r3, [r3, #18]
 80111fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011204:	3330      	adds	r3, #48	; 0x30
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120a:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 801120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120e:	3330      	adds	r3, #48	; 0x30
 8011210:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011216:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 801121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121c:	3330      	adds	r3, #48	; 0x30
 801121e:	7c1a      	ldrb	r2, [r3, #16]
 8011220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011222:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8011224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011226:	3330      	adds	r3, #48	; 0x30
 8011228:	7c5a      	ldrb	r2, [r3, #17]
 801122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122c:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 801122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011230:	3330      	adds	r3, #48	; 0x30
 8011232:	7c9a      	ldrb	r2, [r3, #18]
 8011234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011236:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123a:	f103 0218 	add.w	r2, r3, #24
 801123e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011240:	3330      	adds	r3, #48	; 0x30
 8011242:	6812      	ldr	r2, [r2, #0]
 8011244:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	3318      	adds	r3, #24
 801124a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801124c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011250:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011254:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125a:	f103 0218 	add.w	r2, r3, #24
 801125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011260:	3330      	adds	r3, #48	; 0x30
 8011262:	7c12      	ldrb	r2, [r2, #16]
 8011264:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011268:	f103 0218 	add.w	r2, r3, #24
 801126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801126e:	3330      	adds	r3, #48	; 0x30
 8011270:	7c52      	ldrb	r2, [r2, #17]
 8011272:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8011274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011276:	f103 0218 	add.w	r2, r3, #24
 801127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801127c:	3330      	adds	r3, #48	; 0x30
 801127e:	7c92      	ldrb	r2, [r2, #18]
 8011280:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8011282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011284:	3318      	adds	r3, #24
 8011286:	693a      	ldr	r2, [r7, #16]
 8011288:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128c:	f103 0118 	add.w	r1, r3, #24
 8011290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011294:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8011298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129a:	3318      	adds	r3, #24
 801129c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80112a0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80112a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a4:	3318      	adds	r3, #24
 80112a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80112aa:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80112ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ae:	3318      	adds	r3, #24
 80112b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80112b4:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80112b6:	2300      	movs	r3, #0
 80112b8:	e18c      	b.n	80115d4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 80112ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112bc:	3348      	adds	r3, #72	; 0x48
 80112be:	7c5b      	ldrb	r3, [r3, #17]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 80ac 	beq.w	801141e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 80112c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c8:	3348      	adds	r3, #72	; 0x48
 80112ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80112ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80112d2:	4299      	cmp	r1, r3
 80112d4:	bf08      	it	eq
 80112d6:	4290      	cmpeq	r0, r2
 80112d8:	f040 80a1 	bne.w	801141e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80112dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112de:	3348      	adds	r3, #72	; 0x48
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80112ec:	1c5a      	adds	r2, r3, #1
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80112f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80112fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011300:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8011304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011306:	7c1b      	ldrb	r3, [r3, #16]
 8011308:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 801130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130e:	7c5b      	ldrb	r3, [r3, #17]
 8011310:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8011314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011316:	7c9b      	ldrb	r3, [r3, #18]
 8011318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131e:	3348      	adds	r3, #72	; 0x48
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011324:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8011326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011328:	3348      	adds	r3, #72	; 0x48
 801132a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801132e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011330:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8011334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011336:	3348      	adds	r3, #72	; 0x48
 8011338:	7c1a      	ldrb	r2, [r3, #16]
 801133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801133c:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 801133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011340:	3348      	adds	r3, #72	; 0x48
 8011342:	7c5a      	ldrb	r2, [r3, #17]
 8011344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011346:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8011348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801134a:	3348      	adds	r3, #72	; 0x48
 801134c:	7c9a      	ldrb	r2, [r3, #18]
 801134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011350:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801135a:	3348      	adds	r3, #72	; 0x48
 801135c:	6812      	ldr	r2, [r2, #0]
 801135e:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8011360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011362:	3330      	adds	r3, #48	; 0x30
 8011364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011366:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801136a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801136e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011374:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137a:	3348      	adds	r3, #72	; 0x48
 801137c:	7c12      	ldrb	r2, [r2, #16]
 801137e:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8011380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011382:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011388:	3348      	adds	r3, #72	; 0x48
 801138a:	7c52      	ldrb	r2, [r2, #17]
 801138c:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	3348      	adds	r3, #72	; 0x48
 8011398:	7c92      	ldrb	r2, [r2, #18]
 801139a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801139e:	f103 0218 	add.w	r2, r3, #24
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	3330      	adds	r3, #48	; 0x30
 80113a6:	6812      	ldr	r2, [r2, #0]
 80113a8:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80113aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ac:	3318      	adds	r3, #24
 80113ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113b0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80113b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80113b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80113bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113be:	f103 0218 	add.w	r2, r3, #24
 80113c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c4:	3330      	adds	r3, #48	; 0x30
 80113c6:	7c12      	ldrb	r2, [r2, #16]
 80113c8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80113ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113cc:	f103 0218 	add.w	r2, r3, #24
 80113d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d2:	3330      	adds	r3, #48	; 0x30
 80113d4:	7c52      	ldrb	r2, [r2, #17]
 80113d6:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80113d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113da:	f103 0218 	add.w	r2, r3, #24
 80113de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e0:	3330      	adds	r3, #48	; 0x30
 80113e2:	7c92      	ldrb	r2, [r2, #18]
 80113e4:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80113e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e8:	3318      	adds	r3, #24
 80113ea:	693a      	ldr	r2, [r7, #16]
 80113ec:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80113ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f0:	f103 0118 	add.w	r1, r3, #24
 80113f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80113f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	3318      	adds	r3, #24
 8011400:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011404:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8011406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011408:	3318      	adds	r3, #24
 801140a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801140e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011412:	3318      	adds	r3, #24
 8011414:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011418:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801141a:	2300      	movs	r3, #0
 801141c:	e0da      	b.n	80115d4 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 801141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011420:	3348      	adds	r3, #72	; 0x48
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8011426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011428:	3348      	adds	r3, #72	; 0x48
 801142a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801142e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8011432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011434:	3348      	adds	r3, #72	; 0x48
 8011436:	7c1b      	ldrb	r3, [r3, #16]
 8011438:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 801143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143e:	3348      	adds	r3, #72	; 0x48
 8011440:	7c5b      	ldrb	r3, [r3, #17]
 8011442:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8011446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011448:	3348      	adds	r3, #72	; 0x48
 801144a:	7c9b      	ldrb	r3, [r3, #18]
 801144c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011452:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011458:	3348      	adds	r3, #72	; 0x48
 801145a:	6812      	ldr	r2, [r2, #0]
 801145c:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 801145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011460:	3330      	adds	r3, #48	; 0x30
 8011462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011464:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8011468:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801146c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011472:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011478:	3348      	adds	r3, #72	; 0x48
 801147a:	7c12      	ldrb	r2, [r2, #16]
 801147c:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 801147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011480:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011486:	3348      	adds	r3, #72	; 0x48
 8011488:	7c52      	ldrb	r2, [r2, #17]
 801148a:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011494:	3348      	adds	r3, #72	; 0x48
 8011496:	7c92      	ldrb	r2, [r2, #18]
 8011498:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801149c:	f103 0218 	add.w	r2, r3, #24
 80114a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a2:	3330      	adds	r3, #48	; 0x30
 80114a4:	6812      	ldr	r2, [r2, #0]
 80114a6:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 80114a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114aa:	3318      	adds	r3, #24
 80114ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114ae:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80114b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80114b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 80114ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114bc:	f103 0218 	add.w	r2, r3, #24
 80114c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c2:	3330      	adds	r3, #48	; 0x30
 80114c4:	7c12      	ldrb	r2, [r2, #16]
 80114c6:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 80114c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ca:	f103 0218 	add.w	r2, r3, #24
 80114ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d0:	3330      	adds	r3, #48	; 0x30
 80114d2:	7c52      	ldrb	r2, [r2, #17]
 80114d4:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 80114d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d8:	f103 0218 	add.w	r2, r3, #24
 80114dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114de:	3330      	adds	r3, #48	; 0x30
 80114e0:	7c92      	ldrb	r2, [r2, #18]
 80114e2:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 80114e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114e6:	3318      	adds	r3, #24
 80114e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114ea:	6812      	ldr	r2, [r2, #0]
 80114ec:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 80114ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f0:	f103 0118 	add.w	r1, r3, #24
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80114fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 80114fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011500:	3318      	adds	r3, #24
 8011502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011504:	7c12      	ldrb	r2, [r2, #16]
 8011506:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8011508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150a:	3318      	adds	r3, #24
 801150c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801150e:	7c52      	ldrb	r2, [r2, #17]
 8011510:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8011512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011514:	3318      	adds	r3, #24
 8011516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011518:	7c92      	ldrb	r2, [r2, #18]
 801151a:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011520:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8011522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011528:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 801152c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011532:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8011534:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153a:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 801153c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011542:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8011544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011546:	2200      	movs	r2, #0
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	e042      	b.n	80115d2 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	69db      	ldr	r3, [r3, #28]
 8011556:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8011558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801155a:	2200      	movs	r2, #0
 801155c:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 801155e:	e033      	b.n	80115c8 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011562:	7c5b      	ldrb	r3, [r3, #17]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d025      	beq.n	80115b4 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8011568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801156a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801156e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011572:	4299      	cmp	r1, r3
 8011574:	bf08      	it	eq
 8011576:	4290      	cmpeq	r0, r2
 8011578:	d11c      	bne.n	80115b4 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8011582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00b      	beq.n	80115a2 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801158a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801158c:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 801158e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011590:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8011592:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801159a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115a0:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80115a8:	1c5a      	adds	r2, r3, #1
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 80115b0:	2300      	movs	r3, #0
 80115b2:	e00f      	b.n	80115d4 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 80115b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b6:	695b      	ldr	r3, [r3, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d005      	beq.n	80115c8 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 80115bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115c0:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 80115c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c4:	695b      	ldr	r3, [r3, #20]
 80115c6:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 80115c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ca:	1e5a      	subs	r2, r3, #1
 80115cc:	633a      	str	r2, [r7, #48]	; 0x30
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1c6      	bne.n	8011560 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 80115d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	373c      	adds	r7, #60	; 0x3c
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 80115e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80115e4:	b094      	sub	sp, #80	; 0x50
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	61f8      	str	r0, [r7, #28]
 80115ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 80115ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80115f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80115f6:	1884      	adds	r4, r0, r2
 80115f8:	eb41 0503 	adc.w	r5, r1, r3
 80115fc:	1e63      	subs	r3, r4, #1
 80115fe:	60bb      	str	r3, [r7, #8]
 8011600:	f145 33ff 	adc.w	r3, r5, #4294967295
 8011604:	60fb      	str	r3, [r7, #12]
 8011606:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801160a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011612:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	2b00      	cmp	r3, #0
 801161a:	f040 80b4 	bne.w	8011786 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	695b      	ldr	r3, [r3, #20]
 8011622:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801162a:	e09f      	b.n	801176c <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 801162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162e:	2b00      	cmp	r3, #0
 8011630:	d103      	bne.n	801163a <_fx_utility_logical_sector_flush+0x5a>
 8011632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011634:	2b00      	cmp	r3, #0
 8011636:	f000 81de 	beq.w	80119f6 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 801163a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801163e:	4313      	orrs	r3, r2
 8011640:	f000 81db 	beq.w	80119fa <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011646:	7c5b      	ldrb	r3, [r3, #17]
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 808c 	beq.w	8011766 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801164e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011650:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011654:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011658:	4290      	cmp	r0, r2
 801165a:	eb71 0303 	sbcs.w	r3, r1, r3
 801165e:	f0c0 8082 	bcc.w	8011766 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8011662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011664:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011668:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801166c:	4290      	cmp	r0, r2
 801166e:	eb71 0303 	sbcs.w	r3, r1, r3
 8011672:	d378      	bcc.n	8011766 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011676:	7c1b      	ldrb	r3, [r3, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d04d      	beq.n	8011718 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011682:	2b00      	cmp	r3, #0
 8011684:	d148      	bne.n	8011718 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801168c:	1c5a      	adds	r2, r3, #1
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	2201      	movs	r2, #1
 8011698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	2290      	movs	r2, #144	; 0x90
 80116a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80116a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80116ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	2201      	movs	r2, #1
 80116be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80116c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116c4:	7c9b      	ldrb	r3, [r3, #18]
 80116c6:	461a      	mov	r2, r3
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80116ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116d0:	7c9b      	ldrb	r3, [r3, #18]
 80116d2:	2b04      	cmp	r3, #4
 80116d4:	d003      	beq.n	80116de <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	2201      	movs	r2, #1
 80116da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80116e4:	69f8      	ldr	r0, [r7, #28]
 80116e6:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d003      	beq.n	8011702 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011700:	e17f      	b.n	8011a02 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011704:	2200      	movs	r2, #0
 8011706:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170c:	1e5a      	subs	r2, r3, #1
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8011712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011714:	3b01      	subs	r3, #1
 8011716:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8011718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801171a:	2b00      	cmp	r3, #0
 801171c:	d018      	beq.n	8011750 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801171e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011720:	2200      	movs	r2, #0
 8011722:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011724:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011726:	f04f 32ff 	mov.w	r2, #4294967295
 801172a:	f04f 33ff 	mov.w	r3, #4294967295
 801172e:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011734:	7c1b      	ldrb	r3, [r3, #16]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00a      	beq.n	8011750 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801173c:	2200      	movs	r2, #0
 801173e:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011744:	1e5a      	subs	r2, r3, #1
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	3b01      	subs	r3, #1
 801174e:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8011750:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011754:	1e51      	subs	r1, r2, #1
 8011756:	6039      	str	r1, [r7, #0]
 8011758:	f143 33ff 	adc.w	r3, r3, #4294967295
 801175c:	607b      	str	r3, [r7, #4]
 801175e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011762:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011768:	695b      	ldr	r3, [r3, #20]
 801176a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 801176c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801176e:	1e5a      	subs	r2, r3, #1
 8011770:	64ba      	str	r2, [r7, #72]	; 0x48
 8011772:	2b00      	cmp	r3, #0
 8011774:	f000 8144 	beq.w	8011a00 <_fx_utility_logical_sector_flush+0x420>
 8011778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801177a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801177e:	4313      	orrs	r3, r2
 8011780:	f47f af54 	bne.w	801162c <_fx_utility_logical_sector_flush+0x4c>
 8011784:	e13c      	b.n	8011a00 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	695b      	ldr	r3, [r3, #20]
 801178a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 801178c:	2300      	movs	r3, #0
 801178e:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	6a1b      	ldr	r3, [r3, #32]
 8011794:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8011796:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801179a:	2a20      	cmp	r2, #32
 801179c:	f173 0300 	sbcs.w	r3, r3, #0
 80117a0:	d202      	bcs.n	80117a8 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 80117a2:	2301      	movs	r3, #1
 80117a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117a6:	e121      	b.n	80119ec <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 80117a8:	2300      	movs	r3, #0
 80117aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 80117ac:	e11e      	b.n	80119ec <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d103      	bne.n	80117bc <_fx_utility_logical_sector_flush+0x1dc>
 80117b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f000 8121 	beq.w	80119fe <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 80117bc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80117c0:	4313      	orrs	r3, r2
 80117c2:	f000 811d 	beq.w	8011a00 <_fx_utility_logical_sector_flush+0x420>
 80117c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80117ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80117ce:	4290      	cmp	r0, r2
 80117d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80117d4:	f0c0 8114 	bcc.w	8011a00 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 80117d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d015      	beq.n	801180a <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80117de:	693a      	ldr	r2, [r7, #16]
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80117e6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80117ea:	4013      	ands	r3, r2
 80117ec:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 80117ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f0:	f003 031f 	and.w	r3, r3, #31
 80117f4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80117f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80117fc:	e00d      	b.n	801181a <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	085b      	lsrs	r3, r3, #1
 8011802:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8011804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011806:	3301      	adds	r3, #1
 8011808:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 801180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180c:	f003 0301 	and.w	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	d0f4      	beq.n	80117fe <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8011814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 801181a:	2300      	movs	r3, #0
 801181c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801181e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011820:	4613      	mov	r3, r2
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	4413      	add	r3, r2
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801182c:	69fa      	ldr	r2, [r7, #28]
 801182e:	4413      	add	r3, r2
 8011830:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 8011832:	2300      	movs	r3, #0
 8011834:	647b      	str	r3, [r7, #68]	; 0x44
 8011836:	e0a7      	b.n	8011988 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8011838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801183a:	7c5b      	ldrb	r3, [r3, #17]
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 8089 	beq.w	8011954 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011844:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8011848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801184c:	4290      	cmp	r0, r2
 801184e:	eb71 0303 	sbcs.w	r3, r1, r3
 8011852:	d37f      	bcc.n	8011954 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8011854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011856:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801185a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801185e:	4290      	cmp	r0, r2
 8011860:	eb71 0303 	sbcs.w	r3, r1, r3
 8011864:	d376      	bcc.n	8011954 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011868:	7c1b      	ldrb	r3, [r3, #16]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d04d      	beq.n	801190a <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011874:	2b00      	cmp	r3, #0
 8011876:	d148      	bne.n	801190a <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	2201      	movs	r2, #1
 801188a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	2290      	movs	r2, #144	; 0x90
 8011892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80118a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	2201      	movs	r2, #1
 80118b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80118b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b6:	7c9b      	ldrb	r3, [r3, #18]
 80118b8:	461a      	mov	r2, r3
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80118c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c2:	7c9b      	ldrb	r3, [r3, #18]
 80118c4:	2b04      	cmp	r3, #4
 80118c6:	d003      	beq.n	80118d0 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	2201      	movs	r2, #1
 80118cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80118d6:	69f8      	ldr	r0, [r7, #28]
 80118d8:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	2200      	movs	r2, #0
 80118de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d003      	beq.n	80118f4 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118f2:	e086      	b.n	8011a02 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80118f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f6:	2200      	movs	r2, #0
 80118f8:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fe:	1e5a      	subs	r2, r3, #1
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	3b01      	subs	r3, #1
 8011908:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 801190a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801190c:	2b00      	cmp	r3, #0
 801190e:	d018      	beq.n	8011942 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8011910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011912:	2200      	movs	r2, #0
 8011914:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011916:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011918:	f04f 32ff 	mov.w	r2, #4294967295
 801191c:	f04f 33ff 	mov.w	r3, #4294967295
 8011920:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011926:	7c1b      	ldrb	r3, [r3, #16]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d00a      	beq.n	8011942 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801192c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801192e:	2200      	movs	r2, #0
 8011930:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011936:	1e5a      	subs	r2, r3, #1
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193e:	3b01      	subs	r3, #1
 8011940:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8011942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011946:	f112 38ff 	adds.w	r8, r2, #4294967295
 801194a:	f143 39ff 	adc.w	r9, r3, #4294967295
 801194e:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8011952:	e006      	b.n	8011962 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8011954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011956:	7c5b      	ldrb	r3, [r3, #17]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d002      	beq.n	8011962 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	3301      	adds	r3, #1
 8011960:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	2b00      	cmp	r3, #0
 8011966:	d102      	bne.n	801196e <_fx_utility_logical_sector_flush+0x38e>
 8011968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801196a:	2b00      	cmp	r3, #0
 801196c:	d011      	beq.n	8011992 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 801196e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011972:	4313      	orrs	r3, r2
 8011974:	d102      	bne.n	801197c <_fx_utility_logical_sector_flush+0x39c>
 8011976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00c      	beq.n	8011996 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 801197c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801197e:	3318      	adds	r3, #24
 8011980:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 8011982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011984:	3301      	adds	r3, #1
 8011986:	647b      	str	r3, [r7, #68]	; 0x44
 8011988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801198a:	2b03      	cmp	r3, #3
 801198c:	f67f af54 	bls.w	8011838 <_fx_utility_logical_sector_flush+0x258>
 8011990:	e002      	b.n	8011998 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8011992:	bf00      	nop
 8011994:	e000      	b.n	8011998 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8011996:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	3380      	adds	r3, #128	; 0x80
 801199c:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 801199e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119a2:	429a      	cmp	r2, r3
 80119a4:	f4ff af3b 	bcc.w	801181e <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 80119a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00c      	beq.n	80119c8 <_fx_utility_logical_sector_flush+0x3e8>
 80119ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d109      	bne.n	80119c8 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	6a1a      	ldr	r2, [r3, #32]
 80119b8:	2101      	movs	r1, #1
 80119ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119bc:	fa01 f303 	lsl.w	r3, r1, r3
 80119c0:	43db      	mvns	r3, r3
 80119c2:	401a      	ands	r2, r3
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 80119c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d008      	beq.n	80119e0 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 80119ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80119d2:	f112 0a01 	adds.w	sl, r2, #1
 80119d6:	f143 0b00 	adc.w	fp, r3, #0
 80119da:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80119de:	e005      	b.n	80119ec <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	085b      	lsrs	r3, r3, #1
 80119e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 80119e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119e8:	3301      	adds	r3, #1
 80119ea:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f47f aedd 	bne.w	80117ae <_fx_utility_logical_sector_flush+0x1ce>
 80119f4:	e004      	b.n	8011a00 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119f6:	bf00      	nop
 80119f8:	e002      	b.n	8011a00 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119fa:	bf00      	nop
 80119fc:	e000      	b.n	8011a00 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119fe:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3750      	adds	r7, #80	; 0x50
 8011a06:	46bd      	mov	sp, r7
 8011a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011a0c <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8011a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a10:	b09c      	sub	sp, #112	; 0x70
 8011a12:	af04      	add	r7, sp, #16
 8011a14:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011a16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8011a1a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d106      	bne.n	8011a30 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8011a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a24:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a2c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8011a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a32:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a3a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a40:	689a      	ldr	r2, [r3, #8]
 8011a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a46:	4293      	cmp	r3, r2
 8011a48:	f0c0 80d9 	bcc.w	8011bfe <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a4e:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a54:	4293      	cmp	r3, r2
 8011a56:	f200 80d2 	bhi.w	8011bfe <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011a64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011a66:	f7ff faf1 	bl	801104c <_fx_utility_logical_sector_cache_entry_read>
 8011a6a:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8011a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d101      	bne.n	8011a76 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 8011a72:	2300      	movs	r3, #0
 8011a74:	e259      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8011a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011a7c:	1c5a      	adds	r2, r3, #1
 8011a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a80:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a86:	7c5b      	ldrb	r3, [r3, #17]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d049      	beq.n	8011b20 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8011a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a8e:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d045      	beq.n	8011b20 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8011a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a96:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011a9a:	1c5a      	adds	r2, r3, #1
 8011a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a9e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aac:	2290      	movs	r2, #144	; 0x90
 8011aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011abe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8011ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aca:	2201      	movs	r2, #1
 8011acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad2:	7c9b      	ldrb	r3, [r3, #18]
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ad8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ade:	7c9b      	ldrb	r3, [r3, #18]
 8011ae0:	2b04      	cmp	r3, #4
 8011ae2:	d003      	beq.n	8011aec <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011af2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011af4:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af8:	2200      	movs	r2, #0
 8011afa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 8011afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d003      	beq.n	8011b10 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8011b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b0e:	e20c      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b12:	2200      	movs	r2, #0
 8011b14:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8011b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1a:	1e5a      	subs	r2, r3, #1
 8011b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8011b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011b26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8011b2a:	4290      	cmp	r0, r2
 8011b2c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011b30:	d301      	bcc.n	8011b36 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8011b32:	2389      	movs	r3, #137	; 0x89
 8011b34:	e1f9      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b38:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011b3c:	1c5a      	adds	r2, r3, #1
 8011b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b40:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b46:	2200      	movs	r2, #0
 8011b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b4e:	2290      	movs	r2, #144	; 0x90
 8011b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 8011b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b68:	2201      	movs	r2, #1
 8011b6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011b6e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b74:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011b78:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011b7c:	2b04      	cmp	r3, #4
 8011b7e:	d103      	bne.n	8011b88 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b82:	2201      	movs	r2, #1
 8011b84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011b8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011b90:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b94:	2200      	movs	r2, #0
 8011b96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8011b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d11a      	bne.n	8011bda <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8011ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011baa:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8011bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb6:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011bba:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8011bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d015      	beq.n	8011bee <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8011bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8011bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bc6:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8011bc8:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8011bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bcc:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8011bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd0:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bd6:	61da      	str	r2, [r3, #28]
 8011bd8:	e009      	b.n	8011bee <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8011bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bdc:	2200      	movs	r2, #0
 8011bde:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011be2:	f04f 32ff 	mov.w	r2, #4294967295
 8011be6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf4:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bfc:	e195      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8011bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c02:	2200      	movs	r2, #0
 8011c04:	469a      	mov	sl, r3
 8011c06:	4693      	mov	fp, r2
 8011c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c0c:	eb1a 0402 	adds.w	r4, sl, r2
 8011c10:	eb4b 0503 	adc.w	r5, fp, r3
 8011c14:	f114 38ff 	adds.w	r8, r4, #4294967295
 8011c18:	f145 39ff 	adc.w	r9, r5, #4294967295
 8011c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011c22:	2300      	movs	r3, #0
 8011c24:	63ba      	str	r2, [r7, #56]	; 0x38
 8011c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4543      	cmp	r3, r8
 8011c30:	4613      	mov	r3, r2
 8011c32:	eb73 0309 	sbcs.w	r3, r3, r9
 8011c36:	d22c      	bcs.n	8011c92 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8011c38:	2389      	movs	r3, #137	; 0x89
 8011c3a:	e176      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8011c3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011c48:	f7ff fa00 	bl	801104c <_fx_utility_logical_sector_cache_entry_read>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d124      	bne.n	8011c9c <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8011c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c54:	6898      	ldr	r0, [r3, #8]
 8011c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011c60:	f000 fad0 	bl	8012204 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8011c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c76:	1c51      	adds	r1, r2, #1
 8011c78:	61b9      	str	r1, [r7, #24]
 8011c7a:	f143 0300 	adc.w	r3, r3, #0
 8011c7e:	61fb      	str	r3, [r7, #28]
 8011c80:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011c84:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8011c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8011c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1d0      	bne.n	8011c3c <_fx_utility_logical_sector_read+0x230>
 8011c9a:	e000      	b.n	8011c9e <_fx_utility_logical_sector_read+0x292>
                break;
 8011c9c:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8011c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8011ca6:	637a      	str	r2, [r7, #52]	; 0x34
 8011ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011cac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	1889      	adds	r1, r1, r2
 8011cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	eb43 0101 	adc.w	r1, r3, r1
 8011cbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011cbe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	613b      	str	r3, [r7, #16]
 8011cc8:	4613      	mov	r3, r2
 8011cca:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011cd4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8011cd8:	e02b      	b.n	8011d32 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8011cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011ce4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ce6:	f7ff f9b1 	bl	801104c <_fx_utility_logical_sector_cache_entry_read>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d125      	bne.n	8011d3c <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cf2:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8011cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011cfe:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d06:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8011d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	f000 fa79 	bl	8012204 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8011d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011d16:	1e51      	subs	r1, r2, #1
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011d1e:	60fb      	str	r3, [r7, #12]
 8011d20:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011d24:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8011d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8011d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1cf      	bne.n	8011cda <_fx_utility_logical_sector_read+0x2ce>
 8011d3a:	e000      	b.n	8011d3e <_fx_utility_logical_sector_read+0x332>
                break;
 8011d3c:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8011d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d101      	bne.n	8011d4a <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8011d46:	2300      	movs	r3, #0
 8011d48:	e0ef      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d4e:	2200      	movs	r2, #0
 8011d50:	623b      	str	r3, [r7, #32]
 8011d52:	627a      	str	r2, [r7, #36]	; 0x24
 8011d54:	2301      	movs	r3, #1
 8011d56:	9302      	str	r3, [sp, #8]
 8011d58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011d5c:	e9cd 3400 	strd	r3, r4, [sp]
 8011d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011d66:	f7ff fc3b 	bl	80115e0 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d6c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011d70:	1c5a      	adds	r2, r3, #1
 8011d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d74:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d82:	2290      	movs	r2, #144	; 0x90
 8011d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011da0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011da4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011daa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011dae:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d103      	bne.n	8011dbe <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011db8:	2201      	movs	r2, #1
 8011dba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011dc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011dc6:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8011dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f040 80a4 	bne.w	8011f24 <_fx_utility_logical_sector_read+0x518>
 8011ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dde:	695b      	ldr	r3, [r3, #20]
 8011de0:	089b      	lsrs	r3, r3, #2
 8011de2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011de6:	429a      	cmp	r2, r3
 8011de8:	f080 809c 	bcs.w	8011f24 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8011dec:	e095      	b.n	8011f1a <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011df8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011dfa:	f7ff f927 	bl	801104c <_fx_utility_logical_sector_cache_entry_read>
 8011dfe:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8011e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d101      	bne.n	8011e0a <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8011e06:	2300      	movs	r3, #0
 8011e08:	e08f      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e0c:	7c5b      	ldrb	r3, [r3, #17]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d049      	beq.n	8011ea6 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8011e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e14:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d045      	beq.n	8011ea6 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8011e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e1c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011e20:	1c5a      	adds	r2, r3, #1
 8011e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e24:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e32:	2290      	movs	r2, #144	; 0x90
 8011e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 8011e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e50:	2201      	movs	r2, #1
 8011e52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e58:	7c9b      	ldrb	r3, [r3, #18]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e5e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e64:	7c9b      	ldrb	r3, [r3, #18]
 8011e66:	2b04      	cmp	r3, #4
 8011e68:	d003      	beq.n	8011e72 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011e78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011e7a:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8011e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d003      	beq.n	8011e96 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8011e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e94:	e049      	b.n	8011f2a <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e98:	2200      	movs	r2, #0
 8011e9a:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8011e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea0:	1e5a      	subs	r2, r3, #1
 8011ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea4:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8011ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ea8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011eac:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8011eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb8:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011ebc:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8011ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00a      	beq.n	8011eda <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8011ec6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ec8:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011eca:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ece:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ed2:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ed8:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011edc:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8011ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011ee8:	f000 f98c 	bl	8012204 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ef4:	4413      	add	r3, r2
 8011ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8011efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011efe:	1c51      	adds	r1, r2, #1
 8011f00:	6039      	str	r1, [r7, #0]
 8011f02:	f143 0300 	adc.w	r3, r3, #0
 8011f06:	607b      	str	r3, [r7, #4]
 8011f08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011f0c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8011f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f14:	3b01      	subs	r3, #1
 8011f16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8011f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f47f af65 	bne.w	8011dee <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3760      	adds	r7, #96	; 0x60
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011f34 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8011f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f38:	b096      	sub	sp, #88	; 0x58
 8011f3a:	af04      	add	r7, sp, #16
 8011f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011f3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8011f42:	2300      	movs	r3, #0
 8011f44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8011f48:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011f4c:	2b02      	cmp	r3, #2
 8011f4e:	d106      	bne.n	8011f5e <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8011f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f52:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011f56:	1c5a      	adds	r2, r3, #1
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8011f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8011f64:	1c5a      	adds	r2, r3, #1
 8011f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f68:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	689a      	ldr	r2, [r3, #8]
 8011f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f72:	4293      	cmp	r3, r2
 8011f74:	f0c0 80d8 	bcc.w	8012128 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	f200 80d2 	bhi.w	8012128 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8011f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f86:	691b      	ldr	r3, [r3, #16]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d030      	beq.n	8011fee <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8011f8c:	6a3a      	ldr	r2, [r7, #32]
 8011f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011f94:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011f98:	4013      	ands	r3, r2
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8011f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	005b      	lsls	r3, r3, #1
 8011fa4:	4413      	add	r3, r2
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fae:	4413      	add	r3, r2
 8011fb0:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fb6:	e016      	b.n	8011fe6 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fba:	7c5b      	ldrb	r3, [r3, #17]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00c      	beq.n	8011fda <_fx_utility_logical_sector_write+0xa6>
 8011fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011fc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011fca:	4299      	cmp	r1, r3
 8011fcc:	bf08      	it	eq
 8011fce:	4290      	cmpeq	r0, r2
 8011fd0:	d103      	bne.n	8011fda <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011fd8:	e02d      	b.n	8012036 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fdc:	3301      	adds	r3, #1
 8011fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fe2:	3318      	adds	r3, #24
 8011fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8011fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe8:	2b03      	cmp	r3, #3
 8011fea:	d9e5      	bls.n	8011fb8 <_fx_utility_logical_sector_write+0x84>
 8011fec:	e023      	b.n	8012036 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff0:	695b      	ldr	r3, [r3, #20]
 8011ff2:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8011ffa:	e017      	b.n	801202c <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ffe:	7c5b      	ldrb	r3, [r3, #17]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00c      	beq.n	801201e <_fx_utility_logical_sector_write+0xea>
 8012004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012006:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801200a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801200e:	4299      	cmp	r1, r3
 8012010:	bf08      	it	eq
 8012012:	4290      	cmpeq	r0, r2
 8012014:	d103      	bne.n	801201e <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8012016:	2301      	movs	r3, #1
 8012018:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801201c:	e00b      	b.n	8012036 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801201e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012020:	695b      	ldr	r3, [r3, #20]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d002      	beq.n	801202c <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8012026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012028:	695b      	ldr	r3, [r3, #20]
 801202a:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 801202c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801202e:	1e5a      	subs	r2, r3, #1
 8012030:	643a      	str	r2, [r7, #64]	; 0x40
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1e2      	bne.n	8011ffc <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8012036:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801203a:	2b00      	cmp	r3, #0
 801203c:	d00d      	beq.n	801205a <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801203e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012040:	7c1b      	ldrb	r3, [r3, #16]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d107      	bne.n	8012056 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204a:	1c5a      	adds	r2, r3, #1
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8012050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012052:	2201      	movs	r2, #1
 8012054:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 8012056:	2300      	movs	r3, #0
 8012058:	e0cf      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801205a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801205e:	4313      	orrs	r3, r2
 8012060:	d004      	beq.n	801206c <_fx_utility_logical_sector_write+0x138>
 8012062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012066:	1c51      	adds	r1, r2, #1
 8012068:	430b      	orrs	r3, r1
 801206a:	d101      	bne.n	8012070 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 801206c:	2389      	movs	r3, #137	; 0x89
 801206e:	e0c4      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8012070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012072:	2200      	movs	r2, #0
 8012074:	61bb      	str	r3, [r7, #24]
 8012076:	61fa      	str	r2, [r7, #28]
 8012078:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801207c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012080:	4621      	mov	r1, r4
 8012082:	1889      	adds	r1, r1, r2
 8012084:	6139      	str	r1, [r7, #16]
 8012086:	4629      	mov	r1, r5
 8012088:	eb43 0101 	adc.w	r1, r3, r1
 801208c:	6179      	str	r1, [r7, #20]
 801208e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012092:	460b      	mov	r3, r1
 8012094:	f113 3aff 	adds.w	sl, r3, #4294967295
 8012098:	4613      	mov	r3, r2
 801209a:	f143 3bff 	adc.w	fp, r3, #4294967295
 801209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80120a4:	4592      	cmp	sl, r2
 80120a6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80120aa:	d301      	bcc.n	80120b0 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 80120ac:	2389      	movs	r3, #137	; 0x89
 80120ae:	e0a4      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ba:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80120be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c0:	2201      	movs	r2, #1
 80120c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80120c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c8:	2290      	movs	r2, #144	; 0x90
 80120ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80120d6:	6a3a      	ldr	r2, [r7, #32]
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80120de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80120e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80120e6:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80120ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 80120f0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80120f4:	2b04      	cmp	r3, #4
 80120f6:	d003      	beq.n	8012100 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	2201      	movs	r2, #1
 80120fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012106:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012108:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210c:	2200      	movs	r2, #0
 801210e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8012112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012118:	2b00      	cmp	r3, #0
 801211a:	d003      	beq.n	8012124 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012122:	e06a      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8012124:	2300      	movs	r3, #0
 8012126:	e068      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8012128:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801212c:	4313      	orrs	r3, r2
 801212e:	d004      	beq.n	801213a <_fx_utility_logical_sector_write+0x206>
 8012130:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012134:	1c51      	adds	r1, r2, #1
 8012136:	430b      	orrs	r3, r1
 8012138:	d101      	bne.n	801213e <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 801213a:	2389      	movs	r3, #137	; 0x89
 801213c:	e05d      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012140:	2200      	movs	r2, #0
 8012142:	60bb      	str	r3, [r7, #8]
 8012144:	60fa      	str	r2, [r7, #12]
 8012146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801214a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801214e:	4651      	mov	r1, sl
 8012150:	eb11 0802 	adds.w	r8, r1, r2
 8012154:	4659      	mov	r1, fp
 8012156:	eb41 0903 	adc.w	r9, r1, r3
 801215a:	f118 34ff 	adds.w	r4, r8, #4294967295
 801215e:	f149 35ff 	adc.w	r5, r9, #4294967295
 8012162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012164:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012168:	4294      	cmp	r4, r2
 801216a:	eb75 0303 	sbcs.w	r3, r5, r3
 801216e:	d301      	bcc.n	8012174 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8012170:	2389      	movs	r3, #137	; 0x89
 8012172:	e042      	b.n	80121fa <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8012174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012176:	2200      	movs	r2, #0
 8012178:	603b      	str	r3, [r7, #0]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	2301      	movs	r3, #1
 801217e:	9302      	str	r3, [sp, #8]
 8012180:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012184:	e9cd 3400 	strd	r3, r4, [sp]
 8012188:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801218c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801218e:	f7ff fa27 	bl	80115e0 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8012198:	1c5a      	adds	r2, r3, #1
 801219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	2201      	movs	r2, #1
 80121a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80121a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121aa:	2290      	movs	r2, #144	; 0x90
 80121ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80121b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80121b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80121b8:	6a3a      	ldr	r2, [r7, #32]
 80121ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80121c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80121c8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80121cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 80121d2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80121d6:	2b04      	cmp	r3, #4
 80121d8:	d003      	beq.n	80121e2 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80121da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121dc:	2201      	movs	r2, #1
 80121de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80121e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80121e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ea:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80121ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ee:	2200      	movs	r2, #0
 80121f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3748      	adds	r7, #72	; 0x48
 80121fe:	46bd      	mov	sp, r7
 8012200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012204 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	68f9      	ldr	r1, [r7, #12]
 8012214:	68b8      	ldr	r0, [r7, #8]
 8012216:	f004 f9cf 	bl	80165b8 <memcpy>
}
 801221a:	bf00      	nop
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
	...

08012224 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d101      	bne.n	8012236 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8012232:	2318      	movs	r3, #24
 8012234:	e018      	b.n	8012268 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012236:	f3ef 8305 	mrs	r3, IPSR
 801223a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801223c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801223e:	4b0c      	ldr	r3, [pc, #48]	; (8012270 <_fxe_file_close+0x4c>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4313      	orrs	r3, r2
 8012244:	2b00      	cmp	r3, #0
 8012246:	d108      	bne.n	801225a <_fxe_file_close+0x36>
 8012248:	4b0a      	ldr	r3, [pc, #40]	; (8012274 <_fxe_file_close+0x50>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d004      	beq.n	801225a <_fxe_file_close+0x36>
 8012250:	4b08      	ldr	r3, [pc, #32]	; (8012274 <_fxe_file_close+0x50>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a08      	ldr	r2, [pc, #32]	; (8012278 <_fxe_file_close+0x54>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d101      	bne.n	801225e <_fxe_file_close+0x3a>
 801225a:	2320      	movs	r3, #32
 801225c:	e004      	b.n	8012268 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7f9 fe82 	bl	800bf68 <_fx_file_close>
 8012264:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012266:	68fb      	ldr	r3, [r7, #12]
}
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	2400006c 	.word	0x2400006c
 8012274:	24014f1c 	.word	0x24014f1c
 8012278:	24015064 	.word	0x24015064

0801227c <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d101      	bne.n	8012290 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 801228c:	2318      	movs	r3, #24
 801228e:	e019      	b.n	80122c4 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012290:	f3ef 8305 	mrs	r3, IPSR
 8012294:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012296:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012298:	4b0c      	ldr	r3, [pc, #48]	; (80122cc <_fxe_file_create+0x50>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4313      	orrs	r3, r2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d108      	bne.n	80122b4 <_fxe_file_create+0x38>
 80122a2:	4b0b      	ldr	r3, [pc, #44]	; (80122d0 <_fxe_file_create+0x54>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d004      	beq.n	80122b4 <_fxe_file_create+0x38>
 80122aa:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <_fxe_file_create+0x54>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4a09      	ldr	r2, [pc, #36]	; (80122d4 <_fxe_file_create+0x58>)
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d101      	bne.n	80122b8 <_fxe_file_create+0x3c>
 80122b4:	2320      	movs	r3, #32
 80122b6:	e005      	b.n	80122c4 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f7f9 fef8 	bl	800c0b0 <_fx_file_create>
 80122c0:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 80122c2:	68fb      	ldr	r3, [r7, #12]
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3710      	adds	r7, #16
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	2400006c 	.word	0x2400006c
 80122d0:	24014f1c 	.word	0x24014f1c
 80122d4:	24015064 	.word	0x24015064

080122d8 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b088      	sub	sp, #32
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
 80122e4:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00b      	beq.n	8012304 <_fxe_file_open+0x2c>
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a36      	ldr	r2, [pc, #216]	; (80123cc <_fxe_file_open+0xf4>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d106      	bne.n	8012304 <_fxe_file_open+0x2c>
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d003      	beq.n	8012304 <_fxe_file_open+0x2c>
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012302:	d001      	beq.n	8012308 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8012304:	2318      	movs	r3, #24
 8012306:	e05d      	b.n	80123c4 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d007      	beq.n	801231e <_fxe_file_open+0x46>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d004      	beq.n	801231e <_fxe_file_open+0x46>
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	2b01      	cmp	r3, #1
 8012318:	d001      	beq.n	801231e <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 801231a:	2306      	movs	r3, #6
 801231c:	e052      	b.n	80123c4 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801231e:	f3ef 8305 	mrs	r3, IPSR
 8012322:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012324:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012326:	4b2a      	ldr	r3, [pc, #168]	; (80123d0 <_fxe_file_open+0xf8>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4313      	orrs	r3, r2
 801232c:	2b00      	cmp	r3, #0
 801232e:	d108      	bne.n	8012342 <_fxe_file_open+0x6a>
 8012330:	4b28      	ldr	r3, [pc, #160]	; (80123d4 <_fxe_file_open+0xfc>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d004      	beq.n	8012342 <_fxe_file_open+0x6a>
 8012338:	4b26      	ldr	r3, [pc, #152]	; (80123d4 <_fxe_file_open+0xfc>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4a26      	ldr	r2, [pc, #152]	; (80123d8 <_fxe_file_open+0x100>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d101      	bne.n	8012346 <_fxe_file_open+0x6e>
 8012342:	2320      	movs	r3, #32
 8012344:	e03e      	b.n	80123c4 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4a20      	ldr	r2, [pc, #128]	; (80123cc <_fxe_file_open+0xf4>)
 801234c:	4293      	cmp	r3, r2
 801234e:	d001      	beq.n	8012354 <_fxe_file_open+0x7c>
 8012350:	2311      	movs	r3, #17
 8012352:	e037      	b.n	80123c4 <_fxe_file_open+0xec>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801235a:	f04f 31ff 	mov.w	r1, #4294967295
 801235e:	4618      	mov	r0, r3
 8012360:	f001 f988 	bl	8013674 <_tx_mutex_get>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <_fxe_file_open+0x96>
 801236a:	2311      	movs	r3, #17
 801236c:	e02a      	b.n	80123c4 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012374:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801237c:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 801237e:	e00e      	b.n	801239e <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	429a      	cmp	r2, r3
 8012386:	d107      	bne.n	8012398 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801238e:	4618      	mov	r0, r3
 8012390:	f001 fbe8 	bl	8013b64 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8012394:	2318      	movs	r3, #24
 8012396:	e015      	b.n	80123c4 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801239c:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	1e5a      	subs	r2, r3, #1
 80123a2:	61ba      	str	r2, [r7, #24]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1eb      	bne.n	8012380 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80123ae:	4618      	mov	r0, r3
 80123b0:	f001 fbd8 	bl	8013b64 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	68b9      	ldr	r1, [r7, #8]
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	f7fa fab6 	bl	800c92c <_fx_file_open>
 80123c0:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 80123c2:	697b      	ldr	r3, [r7, #20]
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3720      	adds	r7, #32
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	4d454449 	.word	0x4d454449
 80123d0:	2400006c 	.word	0x2400006c
 80123d4:	24014f1c 	.word	0x24014f1c
 80123d8:	24015064 	.word	0x24015064

080123dc <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d005      	beq.n	80123fc <_fxe_file_read+0x20>
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d002      	beq.n	80123fc <_fxe_file_read+0x20>
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 80123fc:	2318      	movs	r3, #24
 80123fe:	e01b      	b.n	8012438 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012400:	f3ef 8305 	mrs	r3, IPSR
 8012404:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012406:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012408:	4b0d      	ldr	r3, [pc, #52]	; (8012440 <_fxe_file_read+0x64>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4313      	orrs	r3, r2
 801240e:	2b00      	cmp	r3, #0
 8012410:	d108      	bne.n	8012424 <_fxe_file_read+0x48>
 8012412:	4b0c      	ldr	r3, [pc, #48]	; (8012444 <_fxe_file_read+0x68>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d004      	beq.n	8012424 <_fxe_file_read+0x48>
 801241a:	4b0a      	ldr	r3, [pc, #40]	; (8012444 <_fxe_file_read+0x68>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a0a      	ldr	r2, [pc, #40]	; (8012448 <_fxe_file_read+0x6c>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d101      	bne.n	8012428 <_fxe_file_read+0x4c>
 8012424:	2320      	movs	r3, #32
 8012426:	e007      	b.n	8012438 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	68b9      	ldr	r1, [r7, #8]
 801242e:	68f8      	ldr	r0, [r7, #12]
 8012430:	f7fa ff5e 	bl	800d2f0 <_fx_file_read>
 8012434:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8012436:	697b      	ldr	r3, [r7, #20]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	2400006c 	.word	0x2400006c
 8012444:	24014f1c 	.word	0x24014f1c
 8012448:	24015064 	.word	0x24015064

0801244c <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d101      	bne.n	8012460 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 801245c:	2318      	movs	r3, #24
 801245e:	e019      	b.n	8012494 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012460:	f3ef 8305 	mrs	r3, IPSR
 8012464:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012466:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012468:	4b0c      	ldr	r3, [pc, #48]	; (801249c <_fxe_file_seek+0x50>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4313      	orrs	r3, r2
 801246e:	2b00      	cmp	r3, #0
 8012470:	d108      	bne.n	8012484 <_fxe_file_seek+0x38>
 8012472:	4b0b      	ldr	r3, [pc, #44]	; (80124a0 <_fxe_file_seek+0x54>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d004      	beq.n	8012484 <_fxe_file_seek+0x38>
 801247a:	4b09      	ldr	r3, [pc, #36]	; (80124a0 <_fxe_file_seek+0x54>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a09      	ldr	r2, [pc, #36]	; (80124a4 <_fxe_file_seek+0x58>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d101      	bne.n	8012488 <_fxe_file_seek+0x3c>
 8012484:	2320      	movs	r3, #32
 8012486:	e005      	b.n	8012494 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7fb f9d4 	bl	800d838 <_fx_file_seek>
 8012490:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8012492:	68fb      	ldr	r3, [r7, #12]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	2400006c 	.word	0x2400006c
 80124a0:	24014f1c 	.word	0x24014f1c
 80124a4:	24015064 	.word	0x24015064

080124a8 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b086      	sub	sp, #24
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <_fxe_file_write+0x18>
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 80124c0:	2318      	movs	r3, #24
 80124c2:	e01a      	b.n	80124fa <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124c4:	f3ef 8305 	mrs	r3, IPSR
 80124c8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80124ca:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80124cc:	4b0d      	ldr	r3, [pc, #52]	; (8012504 <_fxe_file_write+0x5c>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d108      	bne.n	80124e8 <_fxe_file_write+0x40>
 80124d6:	4b0c      	ldr	r3, [pc, #48]	; (8012508 <_fxe_file_write+0x60>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d004      	beq.n	80124e8 <_fxe_file_write+0x40>
 80124de:	4b0a      	ldr	r3, [pc, #40]	; (8012508 <_fxe_file_write+0x60>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4a0a      	ldr	r2, [pc, #40]	; (801250c <_fxe_file_write+0x64>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d101      	bne.n	80124ec <_fxe_file_write+0x44>
 80124e8:	2320      	movs	r3, #32
 80124ea:	e006      	b.n	80124fa <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	68b9      	ldr	r1, [r7, #8]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f7fb f9b3 	bl	800d85c <_fx_file_write>
 80124f6:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80124f8:	697b      	ldr	r3, [r7, #20]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3718      	adds	r7, #24
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
 8012502:	bf00      	nop
 8012504:	2400006c 	.word	0x2400006c
 8012508:	24014f1c 	.word	0x24014f1c
 801250c:	24015064 	.word	0x24015064

08012510 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d101      	bne.n	8012522 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 801251e:	2318      	movs	r3, #24
 8012520:	e018      	b.n	8012554 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012522:	f3ef 8305 	mrs	r3, IPSR
 8012526:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012528:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801252a:	4b0c      	ldr	r3, [pc, #48]	; (801255c <_fxe_media_close+0x4c>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4313      	orrs	r3, r2
 8012530:	2b00      	cmp	r3, #0
 8012532:	d108      	bne.n	8012546 <_fxe_media_close+0x36>
 8012534:	4b0a      	ldr	r3, [pc, #40]	; (8012560 <_fxe_media_close+0x50>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d004      	beq.n	8012546 <_fxe_media_close+0x36>
 801253c:	4b08      	ldr	r3, [pc, #32]	; (8012560 <_fxe_media_close+0x50>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4a08      	ldr	r2, [pc, #32]	; (8012564 <_fxe_media_close+0x54>)
 8012542:	4293      	cmp	r3, r2
 8012544:	d101      	bne.n	801254a <_fxe_media_close+0x3a>
 8012546:	2320      	movs	r3, #32
 8012548:	e004      	b.n	8012554 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7fc fa06 	bl	800e95c <_fx_media_close>
 8012550:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012552:	68fb      	ldr	r3, [r7, #12]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	2400006c 	.word	0x2400006c
 8012560:	24014f1c 	.word	0x24014f1c
 8012564:	24015064 	.word	0x24015064

08012568 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d101      	bne.n	801257a <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8012576:	2318      	movs	r3, #24
 8012578:	e018      	b.n	80125ac <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801257a:	f3ef 8305 	mrs	r3, IPSR
 801257e:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012580:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012582:	4b0c      	ldr	r3, [pc, #48]	; (80125b4 <_fxe_media_flush+0x4c>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4313      	orrs	r3, r2
 8012588:	2b00      	cmp	r3, #0
 801258a:	d108      	bne.n	801259e <_fxe_media_flush+0x36>
 801258c:	4b0a      	ldr	r3, [pc, #40]	; (80125b8 <_fxe_media_flush+0x50>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d004      	beq.n	801259e <_fxe_media_flush+0x36>
 8012594:	4b08      	ldr	r3, [pc, #32]	; (80125b8 <_fxe_media_flush+0x50>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	4a08      	ldr	r2, [pc, #32]	; (80125bc <_fxe_media_flush+0x54>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d101      	bne.n	80125a2 <_fxe_media_flush+0x3a>
 801259e:	2320      	movs	r3, #32
 80125a0:	e004      	b.n	80125ac <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7fc fbb2 	bl	800ed0c <_fx_media_flush>
 80125a8:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 80125aa:	68fb      	ldr	r3, [r7, #12]
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	2400006c 	.word	0x2400006c
 80125b8:	24014f1c 	.word	0x24014f1c
 80125bc:	24015064 	.word	0x24015064

080125c0 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b08e      	sub	sp, #56	; 0x38
 80125c4:	af02      	add	r7, sp, #8
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00a      	beq.n	80125ea <_fxe_media_open+0x2a>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d007      	beq.n	80125ea <_fxe_media_open+0x2a>
 80125da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d004      	beq.n	80125ea <_fxe_media_open+0x2a>
 80125e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e2:	f242 42b8 	movw	r2, #9400	; 0x24b8
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d001      	beq.n	80125ee <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 80125ea:	2318      	movs	r3, #24
 80125ec:	e071      	b.n	80126d2 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125ee:	f3ef 8305 	mrs	r3, IPSR
 80125f2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80125f4:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80125f6:	4b39      	ldr	r3, [pc, #228]	; (80126dc <_fxe_media_open+0x11c>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4313      	orrs	r3, r2
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d108      	bne.n	8012612 <_fxe_media_open+0x52>
 8012600:	4b37      	ldr	r3, [pc, #220]	; (80126e0 <_fxe_media_open+0x120>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d004      	beq.n	8012612 <_fxe_media_open+0x52>
 8012608:	4b35      	ldr	r3, [pc, #212]	; (80126e0 <_fxe_media_open+0x120>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a35      	ldr	r2, [pc, #212]	; (80126e4 <_fxe_media_open+0x124>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d101      	bne.n	8012616 <_fxe_media_open+0x56>
 8012612:	2320      	movs	r3, #32
 8012614:	e05d      	b.n	80126d2 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8012616:	4b34      	ldr	r3, [pc, #208]	; (80126e8 <_fxe_media_open+0x128>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	425b      	negs	r3, r3
 8012620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012622:	4013      	ands	r3, r2
 8012624:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	2b01      	cmp	r3, #1
 801262a:	d004      	beq.n	8012636 <_fxe_media_open+0x76>
 801262c:	4b2e      	ldr	r3, [pc, #184]	; (80126e8 <_fxe_media_open+0x128>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012632:	429a      	cmp	r2, r3
 8012634:	d001      	beq.n	801263a <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8012636:	2302      	movs	r3, #2
 8012638:	e04b      	b.n	80126d2 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 801263a:	4b2c      	ldr	r3, [pc, #176]	; (80126ec <_fxe_media_open+0x12c>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	425b      	negs	r3, r3
 8012644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012646:	4013      	ands	r3, r2
 8012648:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	2b01      	cmp	r3, #1
 801264e:	d004      	beq.n	801265a <_fxe_media_open+0x9a>
 8012650:	4b26      	ldr	r3, [pc, #152]	; (80126ec <_fxe_media_open+0x12c>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012656:	429a      	cmp	r2, r3
 8012658:	d001      	beq.n	801265e <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801265a:	2302      	movs	r3, #2
 801265c:	e039      	b.n	80126d2 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 801265e:	f002 fbd1 	bl	8014e04 <_tx_thread_identify>
 8012662:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8012664:	f107 0314 	add.w	r3, r7, #20
 8012668:	461a      	mov	r2, r3
 801266a:	2100      	movs	r1, #0
 801266c:	6a38      	ldr	r0, [r7, #32]
 801266e:	f002 fc23 	bl	8014eb8 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8012672:	4b1f      	ldr	r3, [pc, #124]	; (80126f0 <_fxe_media_open+0x130>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8012678:	4b1e      	ldr	r3, [pc, #120]	; (80126f4 <_fxe_media_open+0x134>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 801267e:	e010      	b.n	80126a2 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012684:	429a      	cmp	r2, r3
 8012686:	d108      	bne.n	801269a <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	f107 0214 	add.w	r2, r7, #20
 801268e:	4619      	mov	r1, r3
 8012690:	6a38      	ldr	r0, [r7, #32]
 8012692:	f002 fc11 	bl	8014eb8 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8012696:	2318      	movs	r3, #24
 8012698:	e01b      	b.n	80126d2 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80126a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 80126a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a4:	1e5a      	subs	r2, r3, #1
 80126a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d1e9      	bne.n	8012680 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	f107 0214 	add.w	r2, r7, #20
 80126b2:	4619      	mov	r1, r3
 80126b4:	6a38      	ldr	r0, [r7, #32]
 80126b6:	f002 fbff 	bl	8014eb8 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 80126ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126bc:	9301      	str	r3, [sp, #4]
 80126be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c0:	9300      	str	r3, [sp, #0]
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	68b9      	ldr	r1, [r7, #8]
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f7fc fcab 	bl	800f024 <_fx_media_open>
 80126ce:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 80126d0:	69fb      	ldr	r3, [r7, #28]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3730      	adds	r7, #48	; 0x30
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	2400006c 	.word	0x2400006c
 80126e0:	24014f1c 	.word	0x24014f1c
 80126e4:	24015064 	.word	0x24015064
 80126e8:	24014c98 	.word	0x24014c98
 80126ec:	24014c9c 	.word	0x24014c9c
 80126f0:	24014c88 	.word	0x24014c88
 80126f4:	24014c8c 	.word	0x24014c8c

080126f8 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 8012700:	f002 fffa 	bl	80156f8 <_tx_time_get>
 8012704:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8012706:	e007      	b.n	8012718 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7f7 f825 	bl	8009758 <fx_stm32_sd_get_status>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d101      	bne.n	8012718 <check_sd_status+0x20>
    {
      return 0;
 8012714:	2300      	movs	r3, #0
 8012716:	e008      	b.n	801272a <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8012718:	f002 ffee 	bl	80156f8 <_tx_time_get>
 801271c:	4602      	mov	r2, r0
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	1ad3      	subs	r3, r2, r3
 8012722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012726:	d3ef      	bcc.n	8012708 <check_sd_status+0x10>
    }
  }

  return 1;
 8012728:	2301      	movs	r3, #1
}
 801272a:	4618      	mov	r0, r3
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
	...

08012734 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 801273c:	4b7e      	ldr	r3, [pc, #504]	; (8012938 <fx_stm32_sd_driver+0x204>)
 801273e:	2201      	movs	r2, #1
 8012740:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 8012742:	4b7d      	ldr	r3, [pc, #500]	; (8012938 <fx_stm32_sd_driver+0x204>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b01      	cmp	r3, #1
 8012748:	d10a      	bne.n	8012760 <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 801274a:	2000      	movs	r0, #0
 801274c:	f7ff ffd4 	bl	80126f8 <check_sd_status>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d004      	beq.n	8012760 <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2290      	movs	r2, #144	; 0x90
 801275a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801275e:	e0e7      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012766:	f003 0303 	and.w	r3, r3, #3
 801276a:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012772:	2b08      	cmp	r3, #8
 8012774:	f200 80d2 	bhi.w	801291c <fx_stm32_sd_driver+0x1e8>
 8012778:	a201      	add	r2, pc, #4	; (adr r2, 8012780 <fx_stm32_sd_driver+0x4c>)
 801277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801277e:	bf00      	nop
 8012780:	080127f3 	.word	0x080127f3
 8012784:	08012827 	.word	0x08012827
 8012788:	08012859 	.word	0x08012859
 801278c:	08012863 	.word	0x08012863
 8012790:	080127a5 	.word	0x080127a5
 8012794:	0801286d 	.word	0x0801286d
 8012798:	0801291d 	.word	0x0801291d
 801279c:	08012901 	.word	0x08012901
 80127a0:	080127dd 	.word	0x080127dd
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 80127ac:	231c      	movs	r3, #28
 80127ae:	2200      	movs	r2, #0
 80127b0:	4962      	ldr	r1, [pc, #392]	; (801293c <fx_stm32_sd_driver+0x208>)
 80127b2:	4863      	ldr	r0, [pc, #396]	; (8012940 <fx_stm32_sd_driver+0x20c>)
 80127b4:	f003 fcb0 	bl	8016118 <_txe_semaphore_create>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d109      	bne.n	80127d2 <fx_stm32_sd_driver+0x9e>
 80127be:	231c      	movs	r3, #28
 80127c0:	2200      	movs	r2, #0
 80127c2:	4960      	ldr	r1, [pc, #384]	; (8012944 <fx_stm32_sd_driver+0x210>)
 80127c4:	4860      	ldr	r0, [pc, #384]	; (8012948 <fx_stm32_sd_driver+0x214>)
 80127c6:	f003 fca7 	bl	8016118 <_txe_semaphore_create>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 80aa 	beq.w	8012926 <fx_stm32_sd_driver+0x1f2>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2290      	movs	r2, #144	; 0x90
 80127d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 80127da:	e0a4      	b.n	8012926 <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 80127e4:	4856      	ldr	r0, [pc, #344]	; (8012940 <fx_stm32_sd_driver+0x20c>)
 80127e6:	f003 fd2d 	bl	8016244 <_txe_semaphore_delete>
 80127ea:	4857      	ldr	r0, [pc, #348]	; (8012948 <fx_stm32_sd_driver+0x214>)
 80127ec:	f003 fd2a 	bl	8016244 <_txe_semaphore_delete>

      break;
 80127f0:	e09e      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2290      	movs	r2, #144	; 0x90
 80127f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012804:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f89c 	bl	801294c <sd_read_data>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	f040 8087 	bne.w	801292a <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8012824:	e081      	b.n	801292a <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2290      	movs	r2, #144	; 0x90
 801282a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012838:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 f940 	bl	8012ac8 <sd_write_data>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d16f      	bne.n	801292e <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2200      	movs	r2, #0
 8012852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8012856:	e06a      	b.n	801292e <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8012860:	e066      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 801286a:	e061      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2100      	movs	r1, #0
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 f868 	bl	801294c <sd_read_data>
 801287c:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d004      	beq.n	801288e <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	693a      	ldr	r2, [r7, #16]
 8012888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 801288c:	e050      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 801288e:	2300      	movs	r3, #0
 8012890:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8012898:	f107 0308 	add.w	r3, r7, #8
 801289c:	f107 020c 	add.w	r2, r7, #12
 80128a0:	2100      	movs	r1, #0
 80128a2:	f7fd f939 	bl	800fb18 <_fx_partition_offset_calculate>
 80128a6:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d004      	beq.n	80128b8 <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2290      	movs	r2, #144	; 0x90
 80128b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80128b6:	e03b      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d01b      	beq.n	80128f6 <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80128be:	2000      	movs	r0, #0
 80128c0:	f7ff ff1a 	bl	80126f8 <check_sd_status>
 80128c4:	4603      	mov	r3, r0
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d004      	beq.n	80128d4 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2290      	movs	r2, #144	; 0x90
 80128ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80128d2:	e02d      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80128d4:	68f9      	ldr	r1, [r7, #12]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 f834 	bl	801294c <sd_read_data>
 80128e4:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d004      	beq.n	80128f6 <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	693a      	ldr	r2, [r7, #16]
 80128f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80128f4:	e01c      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2200      	movs	r2, #0
 80128fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80128fe:	e017      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	2100      	movs	r1, #0
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 f8dc 	bl	8012ac8 <sd_write_data>
 8012910:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	693a      	ldr	r2, [r7, #16]
 8012916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 801291a:	e009      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2290      	movs	r2, #144	; 0x90
 8012920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8012924:	e004      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
      break;
 8012926:	bf00      	nop
 8012928:	e002      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
      break;
 801292a:	bf00      	nop
 801292c:	e000      	b.n	8012930 <fx_stm32_sd_driver+0x1fc>
      break;
 801292e:	bf00      	nop
    }
  }
}
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	24014ee0 	.word	0x24014ee0
 801293c:	080176f0 	.word	0x080176f0
 8012940:	24014c6c 	.word	0x24014c6c
 8012944:	0801770c 	.word	0x0801770c
 8012948:	24014c50 	.word	0x24014c50

0801294c <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b090      	sub	sp, #64	; 0x40
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	603b      	str	r3, [r7, #0]
  INT i = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d061      	beq.n	8012a28 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801296a:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 801296c:	2300      	movs	r3, #0
 801296e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012970:	e04c      	b.n	8012a0c <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012972:	68ba      	ldr	r2, [r7, #8]
 8012974:	1c53      	adds	r3, r2, #1
 8012976:	60bb      	str	r3, [r7, #8]
 8012978:	2301      	movs	r3, #1
 801297a:	4950      	ldr	r1, [pc, #320]	; (8012abc <sd_read_data+0x170>)
 801297c:	2000      	movs	r0, #0
 801297e:	f7f6 ff01 	bl	8009784 <fx_stm32_sd_read_blocks>
 8012982:	4603      	mov	r3, r0
 8012984:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 801298c:	2390      	movs	r3, #144	; 0x90
 801298e:	e090      	b.n	8012ab2 <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012994:	484a      	ldr	r0, [pc, #296]	; (8012ac0 <sd_read_data+0x174>)
 8012996:	f003 fc93 	bl	80162c0 <_txe_semaphore_get>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <sd_read_data+0x58>
 80129a0:	2390      	movs	r3, #144	; 0x90
 80129a2:	e086      	b.n	8012ab2 <sd_read_data+0x166>
 80129a4:	4b45      	ldr	r3, [pc, #276]	; (8012abc <sd_read_data+0x170>)
 80129a6:	633b      	str	r3, [r7, #48]	; 0x30
 80129a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80129ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	dd1d      	ble.n	80129f0 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80129b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b6:	f003 021f 	and.w	r2, r3, #31
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	4413      	add	r3, r2
 80129be:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80129c4:	f3bf 8f4f 	dsb	sy
}
 80129c8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80129ca:	4a3e      	ldr	r2, [pc, #248]	; (8012ac4 <sd_read_data+0x178>)
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80129d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d4:	3320      	adds	r3, #32
 80129d6:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	3b20      	subs	r3, #32
 80129dc:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 80129de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	dcf2      	bgt.n	80129ca <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80129e4:	f3bf 8f4f 	dsb	sy
}
 80129e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80129ea:	f3bf 8f6f 	isb	sy
}
 80129ee:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80129f0:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80129f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80129f8:	4830      	ldr	r0, [pc, #192]	; (8012abc <sd_read_data+0x170>)
 80129fa:	f7ff fc03 	bl	8012204 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80129fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012a04:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 8012a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a08:	3301      	adds	r3, #1
 8012a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d8ae      	bhi.n	8012972 <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8012a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d102      	bne.n	8012a22 <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a20:	e046      	b.n	8012ab0 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8012a22:	2321      	movs	r3, #33	; 0x21
 8012a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a26:	e043      	b.n	8012ab0 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	2000      	movs	r0, #0
 8012a34:	f7f6 fea6 	bl	8009784 <fx_stm32_sd_read_blocks>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d001      	beq.n	8012a46 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8012a42:	2390      	movs	r3, #144	; 0x90
 8012a44:	e035      	b.n	8012ab2 <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012a46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a4a:	481d      	ldr	r0, [pc, #116]	; (8012ac0 <sd_read_data+0x174>)
 8012a4c:	f003 fc38 	bl	80162c0 <_txe_semaphore_get>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <sd_read_data+0x10e>
 8012a56:	2390      	movs	r3, #144	; 0x90
 8012a58:	e02b      	b.n	8012ab2 <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	025b      	lsls	r3, r3, #9
 8012a64:	623a      	str	r2, [r7, #32]
 8012a66:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	dd1d      	ble.n	8012aaa <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	f003 021f 	and.w	r2, r3, #31
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	4413      	add	r3, r2
 8012a78:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012a7a:	6a3b      	ldr	r3, [r7, #32]
 8012a7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a7e:	f3bf 8f4f 	dsb	sy
}
 8012a82:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012a84:	4a0f      	ldr	r2, [pc, #60]	; (8012ac4 <sd_read_data+0x178>)
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	3320      	adds	r3, #32
 8012a90:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	3b20      	subs	r3, #32
 8012a96:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	dcf2      	bgt.n	8012a84 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8012a9e:	f3bf 8f4f 	dsb	sy
}
 8012aa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012aa4:	f3bf 8f6f 	isb	sy
}
 8012aa8:	bf00      	nop
}
 8012aaa:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8012aac:	2300      	movs	r3, #0
 8012aae:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 8012ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3740      	adds	r7, #64	; 0x40
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	24014ce0 	.word	0x24014ce0
 8012ac0:	24014c6c 	.word	0x24014c6c
 8012ac4:	e000ed00 	.word	0xe000ed00

08012ac8 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b090      	sub	sp, #64	; 0x40
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d061      	beq.n	8012ba4 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ae6:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8012ae8:	2300      	movs	r3, #0
 8012aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012aec:	e04c      	b.n	8012b88 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012af2:	4951      	ldr	r1, [pc, #324]	; (8012c38 <sd_write_data+0x170>)
 8012af4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012af6:	f7ff fb85 	bl	8012204 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8012afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012b00:	637b      	str	r3, [r7, #52]	; 0x34
 8012b02:	4b4d      	ldr	r3, [pc, #308]	; (8012c38 <sd_write_data+0x170>)
 8012b04:	633b      	str	r3, [r7, #48]	; 0x30
 8012b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8012b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	dd1d      	ble.n	8012b4e <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	f003 021f 	and.w	r2, r3, #31
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	4413      	add	r3, r2
 8012b1c:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012b22:	f3bf 8f4f 	dsb	sy
}
 8012b26:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012b28:	4a44      	ldr	r2, [pc, #272]	; (8012c3c <sd_write_data+0x174>)
 8012b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	3320      	adds	r3, #32
 8012b34:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b38:	3b20      	subs	r3, #32
 8012b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	dcf2      	bgt.n	8012b28 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8012b42:	f3bf 8f4f 	dsb	sy
}
 8012b46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012b48:	f3bf 8f6f 	isb	sy
}
 8012b4c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8012b4e:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	1c53      	adds	r3, r2, #1
 8012b54:	60bb      	str	r3, [r7, #8]
 8012b56:	2301      	movs	r3, #1
 8012b58:	4937      	ldr	r1, [pc, #220]	; (8012c38 <sd_write_data+0x170>)
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	f7f6 fe2e 	bl	80097bc <fx_stm32_sd_write_blocks>
 8012b60:	4603      	mov	r3, r0
 8012b62:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d001      	beq.n	8012b6e <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8012b6a:	2390      	movs	r3, #144	; 0x90
 8012b6c:	e05f      	b.n	8012c2e <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8012b6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012b72:	4833      	ldr	r0, [pc, #204]	; (8012c40 <sd_write_data+0x178>)
 8012b74:	f003 fba4 	bl	80162c0 <_txe_semaphore_get>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d001      	beq.n	8012b82 <sd_write_data+0xba>
 8012b7e:	2390      	movs	r3, #144	; 0x90
 8012b80:	e055      	b.n	8012c2e <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 8012b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b84:	3301      	adds	r3, #1
 8012b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d8ae      	bhi.n	8012aee <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8012b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d102      	bne.n	8012b9e <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b9c:	e046      	b.n	8012c2c <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8012b9e:	2321      	movs	r3, #33	; 0x21
 8012ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ba2:	e043      	b.n	8012c2c <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	025b      	lsls	r3, r3, #9
 8012bae:	623a      	str	r2, [r7, #32]
 8012bb0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	dd1d      	ble.n	8012bf4 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012bb8:	6a3b      	ldr	r3, [r7, #32]
 8012bba:	f003 021f 	and.w	r2, r3, #31
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012bc8:	f3bf 8f4f 	dsb	sy
}
 8012bcc:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012bce:	4a1b      	ldr	r2, [pc, #108]	; (8012c3c <sd_write_data+0x174>)
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	3320      	adds	r3, #32
 8012bda:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	3b20      	subs	r3, #32
 8012be0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dcf2      	bgt.n	8012bce <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8012be8:	f3bf 8f4f 	dsb	sy
}
 8012bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012bee:	f3bf 8f6f 	isb	sy
}
 8012bf2:	bf00      	nop
}
 8012bf4:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	2000      	movs	r0, #0
 8012c02:	f7f6 fddb 	bl	80097bc <fx_stm32_sd_write_blocks>
 8012c06:	4603      	mov	r3, r0
 8012c08:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d001      	beq.n	8012c14 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8012c10:	2390      	movs	r3, #144	; 0x90
 8012c12:	e00c      	b.n	8012c2e <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8012c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012c18:	4809      	ldr	r0, [pc, #36]	; (8012c40 <sd_write_data+0x178>)
 8012c1a:	f003 fb51 	bl	80162c0 <_txe_semaphore_get>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <sd_write_data+0x160>
 8012c24:	2390      	movs	r3, #144	; 0x90
 8012c26:	e002      	b.n	8012c2e <sd_write_data+0x166>

    status = FX_SUCCESS;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8012c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3740      	adds	r7, #64	; 0x40
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	24014ce0 	.word	0x24014ce0
 8012c3c:	e000ed00 	.word	0xe000ed00
 8012c40:	24014c50 	.word	0x24014c50

08012c44 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b096      	sub	sp, #88	; 0x58
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
 8012c50:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3303      	adds	r3, #3
 8012c56:	f023 0303 	bic.w	r3, r3, #3
 8012c5a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8012c60:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012c64:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c66:	b672      	cpsid	i
    return(int_posture);
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012c6a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012c6c:	4b55      	ldr	r3, [pc, #340]	; (8012dc4 <_tx_byte_allocate+0x180>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012c72:	2300      	movs	r3, #0
 8012c74:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c7a:	621a      	str	r2, [r3, #32]
 8012c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	f383 8810 	msr	PRIMASK, r3
}
 8012c86:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f000 f9b2 	bl	8012ff4 <_tx_byte_pool_search>
 8012c90:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c92:	f3ef 8310 	mrs	r3, PRIMASK
 8012c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c9c:	b672      	cpsid	i
    return(int_posture);
 8012c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8012ca0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8012ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d002      	beq.n	8012cae <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012cac:	e006      	b.n	8012cbc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	6a1b      	ldr	r3, [r3, #32]
 8012cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d101      	bne.n	8012cbc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012cb8:	2301      	movs	r3, #1
 8012cba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d0d9      	beq.n	8012c76 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012cc6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d008      	beq.n	8012ce0 <_tx_byte_allocate+0x9c>
 8012cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cd0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	f383 8810 	msr	PRIMASK, r3
}
 8012cd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8012cde:	e06c      	b.n	8012dba <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d061      	beq.n	8012daa <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012ce6:	4b38      	ldr	r3, [pc, #224]	; (8012dc8 <_tx_byte_allocate+0x184>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d007      	beq.n	8012cfe <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012cee:	2310      	movs	r3, #16
 8012cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8012cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	f383 8810 	msr	PRIMASK, r3
}
 8012cfc:	e05d      	b.n	8012dba <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d00:	4a32      	ldr	r2, [pc, #200]	; (8012dcc <_tx_byte_allocate+0x188>)
 8012d02:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0c:	68ba      	ldr	r2, [r7, #8]
 8012d0e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012d1c:	1c5a      	adds	r2, r3, #1
 8012d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d28:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	1c5a      	adds	r2, r3, #1
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d109      	bne.n	8012d4e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d3e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d44:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d4a:	675a      	str	r2, [r3, #116]	; 0x74
 8012d4c:	e011      	b.n	8012d72 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d52:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d58:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d5e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d64:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d6a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d70:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d74:	2209      	movs	r2, #9
 8012d76:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012d84:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <_tx_byte_allocate+0x184>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	4a0f      	ldr	r2, [pc, #60]	; (8012dc8 <_tx_byte_allocate+0x184>)
 8012d8c:	6013      	str	r3, [r2, #0]
 8012d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d90:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d92:	69bb      	ldr	r3, [r7, #24]
 8012d94:	f383 8810 	msr	PRIMASK, r3
}
 8012d98:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012d9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012d9c:	f002 fb06 	bl	80153ac <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012da6:	653b      	str	r3, [r7, #80]	; 0x50
 8012da8:	e007      	b.n	8012dba <_tx_byte_allocate+0x176>
 8012daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	f383 8810 	msr	PRIMASK, r3
}
 8012db4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012db6:	2310      	movs	r3, #16
 8012db8:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3758      	adds	r7, #88	; 0x58
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	24014f1c 	.word	0x24014f1c
 8012dc8:	24014fb4 	.word	0x24014fb4
 8012dcc:	08012dd1 	.word	0x08012dd1

08012dd0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08e      	sub	sp, #56	; 0x38
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012dda:	f3ef 8310 	mrs	r3, PRIMASK
 8012dde:	623b      	str	r3, [r7, #32]
    return(posture);
 8012de0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012de2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012de4:	b672      	cpsid	i
    return(int_posture);
 8012de6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012de8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dee:	4a33      	ldr	r2, [pc, #204]	; (8012ebc <_tx_byte_pool_cleanup+0xec>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d158      	bne.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012dfa:	683a      	ldr	r2, [r7, #0]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d152      	bne.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e04:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d04c      	beq.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a2b      	ldr	r2, [pc, #172]	; (8012ec0 <_tx_byte_pool_cleanup+0xf0>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d147      	bne.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d043      	beq.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e28:	1e5a      	subs	r2, r3, #1
 8012e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e32:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d103      	bne.n	8012e42 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	625a      	str	r2, [r3, #36]	; 0x24
 8012e40:	e013      	b.n	8012e6a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e46:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e4c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e52:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e58:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d102      	bne.n	8012e6a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e68:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e6e:	2b09      	cmp	r3, #9
 8012e70:	d119      	bne.n	8012ea6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2210      	movs	r2, #16
 8012e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012e7a:	4b12      	ldr	r3, [pc, #72]	; (8012ec4 <_tx_byte_pool_cleanup+0xf4>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3301      	adds	r3, #1
 8012e80:	4a10      	ldr	r2, [pc, #64]	; (8012ec4 <_tx_byte_pool_cleanup+0xf4>)
 8012e82:	6013      	str	r3, [r2, #0]
 8012e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	f383 8810 	msr	PRIMASK, r3
}
 8012e8e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f002 f98b 	bl	80151ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e96:	f3ef 8310 	mrs	r3, PRIMASK
 8012e9a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e9c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ea0:	b672      	cpsid	i
    return(int_posture);
 8012ea2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8012ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f383 8810 	msr	PRIMASK, r3
}
 8012eb0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012eb2:	bf00      	nop
 8012eb4:	3738      	adds	r7, #56	; 0x38
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	08012dd1 	.word	0x08012dd1
 8012ec0:	42595445 	.word	0x42595445
 8012ec4:	24014fb4 	.word	0x24014fb4

08012ec8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08e      	sub	sp, #56	; 0x38
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8012ed6:	2234      	movs	r2, #52	; 0x34
 8012ed8:	2100      	movs	r1, #0
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f003 fb7a 	bl	80165d4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	f023 0303 	bic.w	r3, r3, #3
 8012ee6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	f1a3 0208 	sub.w	r2, r3, #8
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2202      	movs	r2, #2
 8012f14:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	4413      	add	r3, r2
 8012f20:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8012f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f24:	3b04      	subs	r3, #4
 8012f26:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8012f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f34:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f38:	3b04      	subs	r3, #4
 8012f3a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8012f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f52:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8012f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8012f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f60:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	4a1f      	ldr	r2, [pc, #124]	; (8012fe4 <_tx_byte_pool_create+0x11c>)
 8012f66:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f72:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012f74:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012f76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f78:	b672      	cpsid	i
    return(int_posture);
 8012f7a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8012f7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	4a19      	ldr	r2, [pc, #100]	; (8012fe8 <_tx_byte_pool_create+0x120>)
 8012f82:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8012f84:	4b19      	ldr	r3, [pc, #100]	; (8012fec <_tx_byte_pool_create+0x124>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d109      	bne.n	8012fa0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8012f8c:	4a18      	ldr	r2, [pc, #96]	; (8012ff0 <_tx_byte_pool_create+0x128>)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	68fa      	ldr	r2, [r7, #12]
 8012f96:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8012f9e:	e011      	b.n	8012fc4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8012fa0:	4b13      	ldr	r3, [pc, #76]	; (8012ff0 <_tx_byte_pool_create+0x128>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8012fa6:	6a3b      	ldr	r3, [r7, #32]
 8012fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012faa:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	68fa      	ldr	r2, [r7, #12]
 8012fb6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	69fa      	ldr	r2, [r7, #28]
 8012fbc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	6a3a      	ldr	r2, [r7, #32]
 8012fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8012fc4:	4b09      	ldr	r3, [pc, #36]	; (8012fec <_tx_byte_pool_create+0x124>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	4a08      	ldr	r2, [pc, #32]	; (8012fec <_tx_byte_pool_create+0x124>)
 8012fcc:	6013      	str	r3, [r2, #0]
 8012fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	f383 8810 	msr	PRIMASK, r3
}
 8012fd8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012fda:	2300      	movs	r3, #0
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3738      	adds	r7, #56	; 0x38
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	ffffeeee 	.word	0xffffeeee
 8012fe8:	42595445 	.word	0x42595445
 8012fec:	24014f10 	.word	0x24014f10
 8012ff0:	24014f0c 	.word	0x24014f0c

08012ff4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b097      	sub	sp, #92	; 0x5c
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8012ffe:	2300      	movs	r3, #0
 8013000:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013002:	f3ef 8310 	mrs	r3, PRIMASK
 8013006:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801300a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801300c:	b672      	cpsid	i
    return(int_posture);
 801300e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8013010:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	689a      	ldr	r2, [r3, #8]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	3b02      	subs	r3, #2
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	4413      	add	r3, r2
 8013020:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8013022:	683a      	ldr	r2, [r7, #0]
 8013024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013026:	429a      	cmp	r2, r3
 8013028:	d308      	bcc.n	801303c <_tx_byte_pool_search+0x48>
 801302a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801302c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	f383 8810 	msr	PRIMASK, r3
}
 8013034:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8013036:	2300      	movs	r3, #0
 8013038:	653b      	str	r3, [r7, #80]	; 0x50
 801303a:	e0dd      	b.n	80131f8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801303c:	4b72      	ldr	r3, [pc, #456]	; (8013208 <_tx_byte_pool_search+0x214>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013046:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	695b      	ldr	r3, [r3, #20]
 801304c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	3301      	adds	r3, #1
 8013054:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8013056:	2300      	movs	r3, #0
 8013058:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801305c:	3304      	adds	r3, #4
 801305e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a68      	ldr	r2, [pc, #416]	; (801320c <_tx_byte_pool_search+0x218>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d143      	bne.n	80130f6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801306e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013070:	2b00      	cmp	r3, #0
 8013072:	d104      	bne.n	801307e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013078:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801307a:	2301      	movs	r3, #1
 801307c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801307e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013080:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8013082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8013088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013092:	3b08      	subs	r3, #8
 8013094:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8013096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	429a      	cmp	r2, r3
 801309c:	d257      	bcs.n	801314e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801309e:	2300      	movs	r3, #0
 80130a0:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80130a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a4:	3304      	adds	r3, #4
 80130a6:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80130ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a56      	ldr	r2, [pc, #344]	; (801320c <_tx_byte_pool_search+0x218>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d113      	bne.n	80130de <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80130b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b8:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80130ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	1e5a      	subs	r2, r3, #1
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	695b      	ldr	r3, [r3, #20]
 80130d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d114      	bne.n	8013100 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130da:	615a      	str	r2, [r3, #20]
 80130dc:	e010      	b.n	8013100 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80130de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80130e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80130e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d008      	beq.n	8013100 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80130ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130f0:	3b01      	subs	r3, #1
 80130f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80130f4:	e004      	b.n	8013100 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80130f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130f8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80130fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8013100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013102:	2b00      	cmp	r3, #0
 8013104:	d002      	beq.n	801310c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8013106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013108:	3b01      	subs	r3, #1
 801310a:	64bb      	str	r3, [r7, #72]	; 0x48
 801310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801310e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	f383 8810 	msr	PRIMASK, r3
}
 8013116:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013118:	f3ef 8310 	mrs	r3, PRIMASK
 801311c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801311e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013120:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013122:	b672      	cpsid	i
    return(int_posture);
 8013124:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8013126:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6a1b      	ldr	r3, [r3, #32]
 801312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801312e:	429a      	cmp	r2, r3
 8013130:	d009      	beq.n	8013146 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	695b      	ldr	r3, [r3, #20]
 8013136:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	3301      	adds	r3, #1
 801313e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013144:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8013146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013148:	2b00      	cmp	r3, #0
 801314a:	d186      	bne.n	801305a <_tx_byte_pool_search+0x66>
 801314c:	e000      	b.n	8013150 <_tx_byte_pool_search+0x15c>
                    break;
 801314e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8013150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013152:	2b00      	cmp	r3, #0
 8013154:	d048      	beq.n	80131e8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8013156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	2b13      	cmp	r3, #19
 801315e:	d91e      	bls.n	801319e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	3308      	adds	r3, #8
 8013164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013166:	4413      	add	r3, r2
 8013168:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801316e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013170:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8013172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317c:	3304      	adds	r3, #4
 801317e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8013184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013186:	4a21      	ldr	r2, [pc, #132]	; (801320c <_tx_byte_pool_search+0x218>)
 8013188:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013198:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801319e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a0:	3304      	adds	r3, #4
 80131a2:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80131a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	689a      	ldr	r2, [r3, #8]
 80131b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	f1a3 0208 	sub.w	r2, r3, #8
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d105      	bne.n	80131d4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80131c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ca:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80131cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	615a      	str	r2, [r3, #20]
 80131d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	f383 8810 	msr	PRIMASK, r3
}
 80131de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80131e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e2:	3308      	adds	r3, #8
 80131e4:	653b      	str	r3, [r7, #80]	; 0x50
 80131e6:	e007      	b.n	80131f8 <_tx_byte_pool_search+0x204>
 80131e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	f383 8810 	msr	PRIMASK, r3
}
 80131f2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80131f4:	2300      	movs	r3, #0
 80131f6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80131f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	375c      	adds	r7, #92	; 0x5c
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	24014f1c 	.word	0x24014f1c
 801320c:	ffffeeee 	.word	0xffffeeee

08013210 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8013214:	f001 fe14 	bl	8014e40 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8013218:	f002 fb12 	bl	8015840 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 801321c:	4b12      	ldr	r3, [pc, #72]	; (8013268 <_tx_initialize_high_level+0x58>)
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
 8013222:	4b12      	ldr	r3, [pc, #72]	; (801326c <_tx_initialize_high_level+0x5c>)
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8013228:	4b11      	ldr	r3, [pc, #68]	; (8013270 <_tx_initialize_high_level+0x60>)
 801322a:	2200      	movs	r2, #0
 801322c:	601a      	str	r2, [r3, #0]
 801322e:	4b11      	ldr	r3, [pc, #68]	; (8013274 <_tx_initialize_high_level+0x64>)
 8013230:	2200      	movs	r2, #0
 8013232:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8013234:	4b10      	ldr	r3, [pc, #64]	; (8013278 <_tx_initialize_high_level+0x68>)
 8013236:	2200      	movs	r2, #0
 8013238:	601a      	str	r2, [r3, #0]
 801323a:	4b10      	ldr	r3, [pc, #64]	; (801327c <_tx_initialize_high_level+0x6c>)
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8013240:	4b0f      	ldr	r3, [pc, #60]	; (8013280 <_tx_initialize_high_level+0x70>)
 8013242:	2200      	movs	r2, #0
 8013244:	601a      	str	r2, [r3, #0]
 8013246:	4b0f      	ldr	r3, [pc, #60]	; (8013284 <_tx_initialize_high_level+0x74>)
 8013248:	2200      	movs	r2, #0
 801324a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801324c:	4b0e      	ldr	r3, [pc, #56]	; (8013288 <_tx_initialize_high_level+0x78>)
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	4b0e      	ldr	r3, [pc, #56]	; (801328c <_tx_initialize_high_level+0x7c>)
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8013258:	4b0d      	ldr	r3, [pc, #52]	; (8013290 <_tx_initialize_high_level+0x80>)
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]
 801325e:	4b0d      	ldr	r3, [pc, #52]	; (8013294 <_tx_initialize_high_level+0x84>)
 8013260:	2200      	movs	r2, #0
 8013262:	601a      	str	r2, [r3, #0]
#endif
}
 8013264:	bf00      	nop
 8013266:	bd80      	pop	{r7, pc}
 8013268:	24014ee4 	.word	0x24014ee4
 801326c:	24014ee8 	.word	0x24014ee8
 8013270:	24014eec 	.word	0x24014eec
 8013274:	24014ef0 	.word	0x24014ef0
 8013278:	24014ef4 	.word	0x24014ef4
 801327c:	24014ef8 	.word	0x24014ef8
 8013280:	24014f04 	.word	0x24014f04
 8013284:	24014f08 	.word	0x24014f08
 8013288:	24014f0c 	.word	0x24014f0c
 801328c:	24014f10 	.word	0x24014f10
 8013290:	24014efc 	.word	0x24014efc
 8013294:	24014f00 	.word	0x24014f00

08013298 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801329c:	4b10      	ldr	r3, [pc, #64]	; (80132e0 <_tx_initialize_kernel_enter+0x48>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80132a4:	d00c      	beq.n	80132c0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80132a6:	4b0e      	ldr	r3, [pc, #56]	; (80132e0 <_tx_initialize_kernel_enter+0x48>)
 80132a8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80132ac:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80132ae:	f7ed f817 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80132b2:	f7ff ffad 	bl	8013210 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80132b6:	4b0b      	ldr	r3, [pc, #44]	; (80132e4 <_tx_initialize_kernel_enter+0x4c>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	3301      	adds	r3, #1
 80132bc:	4a09      	ldr	r2, [pc, #36]	; (80132e4 <_tx_initialize_kernel_enter+0x4c>)
 80132be:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80132c0:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <_tx_initialize_kernel_enter+0x48>)
 80132c2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80132c6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80132c8:	4b07      	ldr	r3, [pc, #28]	; (80132e8 <_tx_initialize_kernel_enter+0x50>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7ed faf9 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80132d2:	4b03      	ldr	r3, [pc, #12]	; (80132e0 <_tx_initialize_kernel_enter+0x48>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80132d8:	f7ed f842 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80132dc:	bf00      	nop
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	2400006c 	.word	0x2400006c
 80132e4:	24014fb4 	.word	0x24014fb4
 80132e8:	24014f14 	.word	0x24014f14

080132ec <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b08e      	sub	sp, #56	; 0x38
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132f6:	f3ef 8310 	mrs	r3, PRIMASK
 80132fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80132fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80132fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013300:	b672      	cpsid	i
    return(int_posture);
 8013302:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8013304:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801330a:	4a33      	ldr	r2, [pc, #204]	; (80133d8 <_tx_mutex_cleanup+0xec>)
 801330c:	4293      	cmp	r3, r2
 801330e:	d158      	bne.n	80133c2 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013316:	683a      	ldr	r2, [r7, #0]
 8013318:	429a      	cmp	r2, r3
 801331a:	d152      	bne.n	80133c2 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013320:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8013322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013324:	2b00      	cmp	r3, #0
 8013326:	d04c      	beq.n	80133c2 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8013328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	4a2b      	ldr	r2, [pc, #172]	; (80133dc <_tx_mutex_cleanup+0xf0>)
 801332e:	4293      	cmp	r3, r2
 8013330:	d147      	bne.n	80133c2 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	69db      	ldr	r3, [r3, #28]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d043      	beq.n	80133c2 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2200      	movs	r2, #0
 801333e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	69db      	ldr	r3, [r3, #28]
 8013344:	1e5a      	subs	r2, r3, #1
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801334c:	69db      	ldr	r3, [r3, #28]
 801334e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	2b00      	cmp	r3, #0
 8013354:	d103      	bne.n	801335e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013358:	2200      	movs	r2, #0
 801335a:	619a      	str	r2, [r3, #24]
 801335c:	e013      	b.n	8013386 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013362:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013368:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801336e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013374:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8013376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013378:	699b      	ldr	r3, [r3, #24]
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	429a      	cmp	r2, r3
 801337e:	d102      	bne.n	8013386 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8013380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013384:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801338a:	2b0d      	cmp	r3, #13
 801338c:	d119      	bne.n	80133c2 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	221d      	movs	r2, #29
 8013392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013396:	4b12      	ldr	r3, [pc, #72]	; (80133e0 <_tx_mutex_cleanup+0xf4>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	3301      	adds	r3, #1
 801339c:	4a10      	ldr	r2, [pc, #64]	; (80133e0 <_tx_mutex_cleanup+0xf4>)
 801339e:	6013      	str	r3, [r2, #0]
 80133a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	f383 8810 	msr	PRIMASK, r3
}
 80133aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f001 fefd 	bl	80151ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133b2:	f3ef 8310 	mrs	r3, PRIMASK
 80133b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80133b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80133ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133bc:	b672      	cpsid	i
    return(int_posture);
 80133be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80133c0:	637b      	str	r3, [r7, #52]	; 0x34
 80133c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f383 8810 	msr	PRIMASK, r3
}
 80133cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80133ce:	bf00      	nop
 80133d0:	3738      	adds	r7, #56	; 0x38
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	080132ed 	.word	0x080132ed
 80133dc:	4d555445 	.word	0x4d555445
 80133e0:	24014fb4 	.word	0x24014fb4

080133e4 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b08a      	sub	sp, #40	; 0x28
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133ec:	f3ef 8310 	mrs	r3, PRIMASK
 80133f0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80133f2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80133f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133f6:	b672      	cpsid	i
    return(int_posture);
 80133f8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80133fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80133fc:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <_tx_mutex_thread_release+0x84>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	3301      	adds	r3, #1
 8013402:	4a19      	ldr	r2, [pc, #100]	; (8013468 <_tx_mutex_thread_release+0x84>)
 8013404:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801340c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d017      	beq.n	8013444 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013414:	6a3b      	ldr	r3, [r7, #32]
 8013416:	2201      	movs	r2, #1
 8013418:	609a      	str	r2, [r3, #8]
 801341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f383 8810 	msr	PRIMASK, r3
}
 8013424:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8013426:	6a38      	ldr	r0, [r7, #32]
 8013428:	f000 fb9c 	bl	8013b64 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801342c:	f3ef 8310 	mrs	r3, PRIMASK
 8013430:	617b      	str	r3, [r7, #20]
    return(posture);
 8013432:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013434:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013436:	b672      	cpsid	i
    return(int_posture);
 8013438:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801343a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013442:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d1dd      	bne.n	8013406 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801344a:	4b07      	ldr	r3, [pc, #28]	; (8013468 <_tx_mutex_thread_release+0x84>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	3b01      	subs	r3, #1
 8013450:	4a05      	ldr	r2, [pc, #20]	; (8013468 <_tx_mutex_thread_release+0x84>)
 8013452:	6013      	str	r3, [r2, #0]
 8013454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013456:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	f383 8810 	msr	PRIMASK, r3
}
 801345e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8013460:	bf00      	nop
 8013462:	3728      	adds	r7, #40	; 0x28
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	24014fb4 	.word	0x24014fb4

0801346c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b08a      	sub	sp, #40	; 0x28
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8013478:	2234      	movs	r2, #52	; 0x34
 801347a:	2100      	movs	r1, #0
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f003 f8a9 	bl	80165d4 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801348e:	f3ef 8310 	mrs	r3, PRIMASK
 8013492:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013494:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013496:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013498:	b672      	cpsid	i
    return(int_posture);
 801349a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 801349c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	4a1a      	ldr	r2, [pc, #104]	; (801350c <_tx_mutex_create+0xa0>)
 80134a2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80134a4:	4b1a      	ldr	r3, [pc, #104]	; (8013510 <_tx_mutex_create+0xa4>)
 80134a6:	4a1b      	ldr	r2, [pc, #108]	; (8013514 <_tx_mutex_create+0xa8>)
 80134a8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80134aa:	4b1b      	ldr	r3, [pc, #108]	; (8013518 <_tx_mutex_create+0xac>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d109      	bne.n	80134c6 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80134b2:	4a1a      	ldr	r2, [pc, #104]	; (801351c <_tx_mutex_create+0xb0>)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	625a      	str	r2, [r3, #36]	; 0x24
 80134c4:	e011      	b.n	80134ea <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80134c6:	4b15      	ldr	r3, [pc, #84]	; (801351c <_tx_mutex_create+0xb0>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80134cc:	6a3b      	ldr	r3, [r7, #32]
 80134ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	69fa      	ldr	r2, [r7, #28]
 80134e2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6a3a      	ldr	r2, [r7, #32]
 80134e8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80134ea:	4b0b      	ldr	r3, [pc, #44]	; (8013518 <_tx_mutex_create+0xac>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	3301      	adds	r3, #1
 80134f0:	4a09      	ldr	r2, [pc, #36]	; (8013518 <_tx_mutex_create+0xac>)
 80134f2:	6013      	str	r3, [r2, #0]
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	f383 8810 	msr	PRIMASK, r3
}
 80134fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013500:	2300      	movs	r3, #0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3728      	adds	r7, #40	; 0x28
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	4d555445 	.word	0x4d555445
 8013510:	24014fb8 	.word	0x24014fb8
 8013514:	080133e5 	.word	0x080133e5
 8013518:	24014f00 	.word	0x24014f00
 801351c:	24014efc 	.word	0x24014efc

08013520 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b096      	sub	sp, #88	; 0x58
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013528:	f3ef 8310 	mrs	r3, PRIMASK
 801352c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013530:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013532:	b672      	cpsid	i
    return(int_posture);
 8013534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8013536:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 801353e:	4b4a      	ldr	r3, [pc, #296]	; (8013668 <_tx_mutex_delete+0x148>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	3b01      	subs	r3, #1
 8013544:	4a48      	ldr	r2, [pc, #288]	; (8013668 <_tx_mutex_delete+0x148>)
 8013546:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013548:	4b47      	ldr	r3, [pc, #284]	; (8013668 <_tx_mutex_delete+0x148>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d103      	bne.n	8013558 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8013550:	4b46      	ldr	r3, [pc, #280]	; (801366c <_tx_mutex_delete+0x14c>)
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
 8013556:	e013      	b.n	8013580 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6a1b      	ldr	r3, [r3, #32]
 801355c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013562:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8013564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013568:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 801356a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801356c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801356e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8013570:	4b3e      	ldr	r3, [pc, #248]	; (801366c <_tx_mutex_delete+0x14c>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	429a      	cmp	r2, r3
 8013578:	d102      	bne.n	8013580 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 801357a:	4a3c      	ldr	r2, [pc, #240]	; (801366c <_tx_mutex_delete+0x14c>)
 801357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801357e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013580:	4b3b      	ldr	r3, [pc, #236]	; (8013670 <_tx_mutex_delete+0x150>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	3301      	adds	r3, #1
 8013586:	4a3a      	ldr	r2, [pc, #232]	; (8013670 <_tx_mutex_delete+0x150>)
 8013588:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	699b      	ldr	r3, [r3, #24]
 801358e:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	69db      	ldr	r3, [r3, #28]
 801359a:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 80135a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d013      	beq.n	80135d6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2201      	movs	r2, #1
 80135b2:	609a      	str	r2, [r3, #8]
 80135b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ba:	f383 8810 	msr	PRIMASK, r3
}
 80135be:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f000 facf 	bl	8013b64 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135c6:	f3ef 8310 	mrs	r3, PRIMASK
 80135ca:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80135cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80135ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80135d0:	b672      	cpsid	i
    return(int_posture);
 80135d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 80135d4:	657b      	str	r3, [r7, #84]	; 0x54
 80135d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135dc:	f383 8810 	msr	PRIMASK, r3
}
 80135e0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80135e2:	e024      	b.n	801362e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80135e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135e6:	3b01      	subs	r3, #1
 80135e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135ea:	f3ef 8310 	mrs	r3, PRIMASK
 80135ee:	61fb      	str	r3, [r7, #28]
    return(posture);
 80135f0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80135f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135f4:	b672      	cpsid	i
    return(int_posture);
 80135f6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80135f8:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80135fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135fc:	2200      	movs	r2, #0
 80135fe:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8013600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013602:	2201      	movs	r2, #1
 8013604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8013608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801360c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801360e:	4b18      	ldr	r3, [pc, #96]	; (8013670 <_tx_mutex_delete+0x150>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	3301      	adds	r3, #1
 8013614:	4a16      	ldr	r2, [pc, #88]	; (8013670 <_tx_mutex_delete+0x150>)
 8013616:	6013      	str	r3, [r2, #0]
 8013618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801361a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	f383 8810 	msr	PRIMASK, r3
}
 8013622:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013624:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013626:	f001 fdc1 	bl	80151ac <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801362c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 801362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1d7      	bne.n	80135e4 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013634:	f3ef 8310 	mrs	r3, PRIMASK
 8013638:	613b      	str	r3, [r7, #16]
    return(posture);
 801363a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801363c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801363e:	b672      	cpsid	i
    return(int_posture);
 8013640:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013642:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013644:	4b0a      	ldr	r3, [pc, #40]	; (8013670 <_tx_mutex_delete+0x150>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	3b01      	subs	r3, #1
 801364a:	4a09      	ldr	r2, [pc, #36]	; (8013670 <_tx_mutex_delete+0x150>)
 801364c:	6013      	str	r3, [r2, #0]
 801364e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013650:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	f383 8810 	msr	PRIMASK, r3
}
 8013658:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801365a:	f001 fd6d 	bl	8015138 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801365e:	2300      	movs	r3, #0
}
 8013660:	4618      	mov	r0, r3
 8013662:	3758      	adds	r7, #88	; 0x58
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	24014f00 	.word	0x24014f00
 801366c:	24014efc 	.word	0x24014efc
 8013670:	24014fb4 	.word	0x24014fb4

08013674 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b092      	sub	sp, #72	; 0x48
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801367e:	f3ef 8310 	mrs	r3, PRIMASK
 8013682:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013686:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013688:	b672      	cpsid	i
    return(int_posture);
 801368a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 801368c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801368e:	4b7a      	ldr	r3, [pc, #488]	; (8013878 <_tx_mutex_get+0x204>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d144      	bne.n	8013726 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136a6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80136a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d032      	beq.n	8013714 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	691b      	ldr	r3, [r3, #16]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d106      	bne.n	80136c4 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80136b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2220      	movs	r2, #32
 80136c2:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80136c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80136ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00f      	beq.n	80136f2 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80136d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80136d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80136de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136e8:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80136f0:	e009      	b.n	8013706 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80136f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8013706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801370c:	1c5a      	adds	r2, r3, #1
 801370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8013714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013716:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	f383 8810 	msr	PRIMASK, r3
}
 801371e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013720:	2300      	movs	r3, #0
 8013722:	647b      	str	r3, [r7, #68]	; 0x44
 8013724:	e0a2      	b.n	801386c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801372c:	429a      	cmp	r2, r3
 801372e:	d10d      	bne.n	801374c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	689b      	ldr	r3, [r3, #8]
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	609a      	str	r2, [r3, #8]
 801373a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801373c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	f383 8810 	msr	PRIMASK, r3
}
 8013744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013746:	2300      	movs	r3, #0
 8013748:	647b      	str	r3, [r7, #68]	; 0x44
 801374a:	e08f      	b.n	801386c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	f000 8084 	beq.w	801385c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013754:	4b49      	ldr	r3, [pc, #292]	; (801387c <_tx_mutex_get+0x208>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d008      	beq.n	801376e <_tx_mutex_get+0xfa>
 801375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801375e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	f383 8810 	msr	PRIMASK, r3
}
 8013766:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8013768:	231d      	movs	r3, #29
 801376a:	647b      	str	r3, [r7, #68]	; 0x44
 801376c:	e07e      	b.n	801386c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8013774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013776:	4a42      	ldr	r2, [pc, #264]	; (8013880 <_tx_mutex_get+0x20c>)
 8013778:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 801377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013786:	1c5a      	adds	r2, r3, #1
 8013788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801378a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	69db      	ldr	r3, [r3, #28]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d109      	bne.n	80137aa <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801379a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137a0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80137a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137a6:	675a      	str	r2, [r3, #116]	; 0x74
 80137a8:	e011      	b.n	80137ce <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	699b      	ldr	r3, [r3, #24]
 80137ae:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80137b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137b4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80137b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137ba:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80137bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137c0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80137c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137c6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80137c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137cc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	69db      	ldr	r3, [r3, #28]
 80137d2:	1c5a      	adds	r2, r3, #1
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80137d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137da:	220d      	movs	r2, #13
 80137dc:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80137de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e0:	2201      	movs	r2, #1
 80137e2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80137e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80137ea:	4b24      	ldr	r3, [pc, #144]	; (801387c <_tx_mutex_get+0x208>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	3301      	adds	r3, #1
 80137f0:	4a22      	ldr	r2, [pc, #136]	; (801387c <_tx_mutex_get+0x208>)
 80137f2:	6013      	str	r3, [r2, #0]
 80137f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	f383 8810 	msr	PRIMASK, r3
}
 80137fe:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	2b01      	cmp	r3, #1
 8013806:	d121      	bne.n	801384c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801380c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013810:	429a      	cmp	r2, r3
 8013812:	d903      	bls.n	801381c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8013814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801381c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013826:	429a      	cmp	r2, r3
 8013828:	d204      	bcs.n	8013834 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013830:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8013834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383c:	429a      	cmp	r2, r3
 801383e:	d905      	bls.n	801384c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8013840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013844:	4619      	mov	r1, r3
 8013846:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013848:	f000 f8ce 	bl	80139e8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801384c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801384e:	f001 fdad 	bl	80153ac <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8013852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013858:	647b      	str	r3, [r7, #68]	; 0x44
 801385a:	e007      	b.n	801386c <_tx_mutex_get+0x1f8>
 801385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801385e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f383 8810 	msr	PRIMASK, r3
}
 8013866:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8013868:	231d      	movs	r3, #29
 801386a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 801386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801386e:	4618      	mov	r0, r3
 8013870:	3748      	adds	r7, #72	; 0x48
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	24014f1c 	.word	0x24014f1c
 801387c:	24014fb4 	.word	0x24014fb4
 8013880:	080132ed 	.word	0x080132ed

08013884 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b092      	sub	sp, #72	; 0x48
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801388c:	f3ef 8310 	mrs	r3, PRIMASK
 8013890:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013894:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013896:	b672      	cpsid	i
    return(int_posture);
 8013898:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801389a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	69db      	ldr	r3, [r3, #28]
 80138a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80138a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d805      	bhi.n	80138b4 <_tx_mutex_prioritize+0x30>
 80138a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	f383 8810 	msr	PRIMASK, r3
}
 80138b2:	e092      	b.n	80139da <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80138b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138b6:	2b02      	cmp	r3, #2
 80138b8:	d114      	bne.n	80138e4 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80138c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138c4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80138c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d202      	bcs.n	80138d8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138d6:	619a      	str	r2, [r3, #24]
 80138d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	f383 8810 	msr	PRIMASK, r3
}
 80138e2:	e07a      	b.n	80139da <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	699b      	ldr	r3, [r3, #24]
 80138e8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80138ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ec:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80138ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138f2:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80138f4:	4b3b      	ldr	r3, [pc, #236]	; (80139e4 <_tx_mutex_prioritize+0x160>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	3301      	adds	r3, #1
 80138fa:	4a3a      	ldr	r2, [pc, #232]	; (80139e4 <_tx_mutex_prioritize+0x160>)
 80138fc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80138fe:	2300      	movs	r3, #0
 8013900:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8013902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801390a:	429a      	cmp	r2, r3
 801390c:	d201      	bcs.n	8013912 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 801390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013914:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f383 8810 	msr	PRIMASK, r3
}
 801391c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801391e:	f3ef 8310 	mrs	r3, PRIMASK
 8013922:	617b      	str	r3, [r7, #20]
    return(posture);
 8013924:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013926:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013928:	b672      	cpsid	i
    return(int_posture);
 801392a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801392c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	699b      	ldr	r3, [r3, #24]
 8013932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013934:	429a      	cmp	r2, r3
 8013936:	d002      	beq.n	801393e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8013938:	2301      	movs	r3, #1
 801393a:	633b      	str	r3, [r7, #48]	; 0x30
 801393c:	e006      	b.n	801394c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	69db      	ldr	r3, [r3, #28]
 8013942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013944:	429a      	cmp	r2, r3
 8013946:	d001      	beq.n	801394c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8013948:	2301      	movs	r3, #1
 801394a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 801394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394e:	2b00      	cmp	r3, #0
 8013950:	d103      	bne.n	801395a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8013952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013956:	643b      	str	r3, [r7, #64]	; 0x40
 8013958:	e00c      	b.n	8013974 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8013966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013968:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801396e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8013970:	2300      	movs	r3, #0
 8013972:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8013974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013978:	429a      	cmp	r2, r3
 801397a:	d1c2      	bne.n	8013902 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 801397c:	4b19      	ldr	r3, [pc, #100]	; (80139e4 <_tx_mutex_prioritize+0x160>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	3b01      	subs	r3, #1
 8013982:	4a18      	ldr	r2, [pc, #96]	; (80139e4 <_tx_mutex_prioritize+0x160>)
 8013984:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8013986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	429a      	cmp	r2, r3
 801398c:	d01d      	beq.n	80139ca <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013992:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8013994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013998:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801399e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80139a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139a4:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80139a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139aa:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80139ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139b0:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139b6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80139b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139bc:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139c8:	619a      	str	r2, [r3, #24]
 80139ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139cc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	f383 8810 	msr	PRIMASK, r3
}
 80139d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80139d6:	f001 fbaf 	bl	8015138 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80139da:	2300      	movs	r3, #0
#endif
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3748      	adds	r7, #72	; 0x48
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	24014fb4 	.word	0x24014fb4

080139e8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b090      	sub	sp, #64	; 0x40
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139f2:	f3ef 8310 	mrs	r3, PRIMASK
 80139f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80139f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80139fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80139fc:	b672      	cpsid	i
    return(int_posture);
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8013a00:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d017      	beq.n	8013a3a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d905      	bls.n	8013a28 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a26:	e002      	b.n	8013a2e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a30:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a34:	f383 8810 	msr	PRIMASK, r3
}
 8013a38:	e089      	b.n	8013b4e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8013a3a:	4b47      	ldr	r3, [pc, #284]	; (8013b58 <_tx_mutex_priority_change+0x170>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a44:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8013a46:	4b45      	ldr	r3, [pc, #276]	; (8013b5c <_tx_mutex_priority_change+0x174>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	3302      	adds	r3, #2
 8013a4c:	4a43      	ldr	r2, [pc, #268]	; (8013b5c <_tx_mutex_priority_change+0x174>)
 8013a4e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	220e      	movs	r2, #14
 8013a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2201      	movs	r2, #1
 8013a5a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	64da      	str	r2, [r3, #76]	; 0x4c
 8013a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	f383 8810 	msr	PRIMASK, r3
}
 8013a6c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f001 fc9c 	bl	80153ac <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a74:	f3ef 8310 	mrs	r3, PRIMASK
 8013a78:	623b      	str	r3, [r7, #32]
    return(posture);
 8013a7a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013a7c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a7e:	b672      	cpsid	i
    return(int_posture);
 8013a80:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8013a82:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	683a      	ldr	r2, [r7, #0]
 8013a88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a90:	683a      	ldr	r2, [r7, #0]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d905      	bls.n	8013aa2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8013aa0:	e002      	b.n	8013aa8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8013aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aaa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f383 8810 	msr	PRIMASK, r3
}
 8013ab2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f001 fb79 	bl	80151ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013aba:	f3ef 8310 	mrs	r3, PRIMASK
 8013abe:	617b      	str	r3, [r7, #20]
    return(posture);
 8013ac0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013ac2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ac4:	b672      	cpsid	i
    return(int_posture);
 8013ac6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8013ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8013aca:	4b23      	ldr	r3, [pc, #140]	; (8013b58 <_tx_mutex_priority_change+0x170>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d034      	beq.n	8013b42 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d130      	bne.n	8013b42 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d811      	bhi.n	8013b10 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d126      	bne.n	8013b42 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8013af4:	4a18      	ldr	r2, [pc, #96]	; (8013b58 <_tx_mutex_priority_change+0x170>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8013afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d21f      	bcs.n	8013b42 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b06:	4916      	ldr	r1, [pc, #88]	; (8013b60 <_tx_mutex_priority_change+0x178>)
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b0e:	e018      	b.n	8013b42 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d212      	bcs.n	8013b42 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d80c      	bhi.n	8013b42 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8013b28:	4a0b      	ldr	r2, [pc, #44]	; (8013b58 <_tx_mutex_priority_change+0x170>)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8013b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d205      	bcs.n	8013b42 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3a:	4909      	ldr	r1, [pc, #36]	; (8013b60 <_tx_mutex_priority_change+0x178>)
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b44:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	f383 8810 	msr	PRIMASK, r3
}
 8013b4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013b4e:	bf00      	nop
 8013b50:	3740      	adds	r7, #64	; 0x40
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	24014f20 	.word	0x24014f20
 8013b5c:	24014fb4 	.word	0x24014fb4
 8013b60:	24014f34 	.word	0x24014f34

08013b64 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b0a6      	sub	sp, #152	; 0x98
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8013b6c:	2320      	movs	r3, #32
 8013b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b72:	f3ef 8310 	mrs	r3, PRIMASK
 8013b76:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8013b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8013b7a:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b7c:	b672      	cpsid	i
    return(int_posture);
 8013b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8013b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 81ff 	beq.w	8013f8c <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013b94:	4ba3      	ldr	r3, [pc, #652]	; (8013e24 <_tx_mutex_put+0x2c0>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	68db      	ldr	r3, [r3, #12]
 8013b9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d00d      	beq.n	8013bc0 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8013ba4:	4ba0      	ldr	r3, [pc, #640]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d109      	bne.n	8013bc0 <_tx_mutex_put+0x5c>
 8013bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bb0:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bb4:	f383 8810 	msr	PRIMASK, r3
}
 8013bb8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8013bba:	231e      	movs	r3, #30
 8013bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8013bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013bc4:	2b20      	cmp	r3, #32
 8013bc6:	f040 81eb 	bne.w	8013fa0 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	1e5a      	subs	r2, r3, #1
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d00a      	beq.n	8013bf2 <_tx_mutex_put+0x8e>
 8013bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013be0:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be4:	f383 8810 	msr	PRIMASK, r3
}
 8013be8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8013bea:	2300      	movs	r3, #0
 8013bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bf0:	e1d6      	b.n	8013fa0 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8013bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10a      	bne.n	8013c0e <_tx_mutex_put+0xaa>
 8013bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c00:	f383 8810 	msr	PRIMASK, r3
}
 8013c04:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8013c06:	2300      	movs	r3, #0
 8013c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013c0c:	e1c8      	b.n	8013fa0 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8013c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013c14:	1e5a      	subs	r2, r3, #1
 8013c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8013c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d104      	bne.n	8013c30 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8013c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8013c2e:	e019      	b.n	8013c64 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c3c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8013c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013c44:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8013c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013c4c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8013c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d104      	bne.n	8013c64 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8013c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013c60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	699b      	ldr	r3, [r3, #24]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d110      	bne.n	8013c8e <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10c      	bne.n	8013c8e <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2200      	movs	r2, #0
 8013c78:	60da      	str	r2, [r3, #12]
 8013c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c7e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c82:	f383 8810 	msr	PRIMASK, r3
}
 8013c86:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8013c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c92:	2b20      	cmp	r3, #32
 8013c94:	f040 8184 	bne.w	8013fa0 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8013c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	691b      	ldr	r3, [r3, #16]
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	d155      	bne.n	8013d5c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013cb0:	4b5d      	ldr	r3, [pc, #372]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	4a5c      	ldr	r2, [pc, #368]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013cb8:	6013      	str	r3, [r2, #0]
 8013cba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013cbe:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cc2:	f383 8810 	msr	PRIMASK, r3
}
 8013cc6:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013cc8:	2320      	movs	r3, #32
 8013cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013cd8:	e01f      	b.n	8013d1a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8013cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cde:	691b      	ldr	r3, [r3, #16]
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d10b      	bne.n	8013cfc <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8013ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d904      	bls.n	8013cfc <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8013cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8013cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8013d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013d0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d102      	bne.n	8013d1a <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8013d14:	2300      	movs	r3, #0
 8013d16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d1db      	bne.n	8013cda <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d22:	f3ef 8310 	mrs	r3, PRIMASK
 8013d26:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8013d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8013d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d2c:	b672      	cpsid	i
    return(int_posture);
 8013d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013d34:	4b3c      	ldr	r3, [pc, #240]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	3b01      	subs	r3, #1
 8013d3a:	4a3b      	ldr	r2, [pc, #236]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013d3c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8013d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8013d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d203      	bcs.n	8013d5c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8013d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	69db      	ldr	r3, [r3, #28]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d920      	bls.n	8013da6 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d11c      	bne.n	8013da6 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8013d6c:	4b2e      	ldr	r3, [pc, #184]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	3301      	adds	r3, #1
 8013d72:	4a2d      	ldr	r2, [pc, #180]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d7a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7e:	f383 8810 	msr	PRIMASK, r3
}
 8013d82:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7ff fd7d 	bl	8013884 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d8e:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013d92:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d94:	b672      	cpsid	i
    return(int_posture);
 8013d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8013d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8013d9c:	4b22      	ldr	r3, [pc, #136]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	3b01      	subs	r3, #1
 8013da2:	4a21      	ldr	r2, [pc, #132]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013da4:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	699b      	ldr	r3, [r3, #24]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d13e      	bne.n	8013e2c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013dae:	4b1e      	ldr	r3, [pc, #120]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	3301      	adds	r3, #1
 8013db4:	4a1c      	ldr	r2, [pc, #112]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013db6:	6013      	str	r3, [r2, #0]
 8013db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc0:	f383 8810 	msr	PRIMASK, r3
}
 8013dc4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2220      	movs	r2, #32
 8013dca:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d006      	beq.n	8013de8 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7ff fe00 	bl	80139e8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013de8:	f3ef 8310 	mrs	r3, PRIMASK
 8013dec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013df0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013df2:	b672      	cpsid	i
    return(int_posture);
 8013df4:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8013df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013dfa:	4b0b      	ldr	r3, [pc, #44]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	4a09      	ldr	r2, [pc, #36]	; (8013e28 <_tx_mutex_put+0x2c4>)
 8013e02:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	60da      	str	r2, [r3, #12]
 8013e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e12:	f383 8810 	msr	PRIMASK, r3
}
 8013e16:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8013e18:	f001 f98e 	bl	8015138 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013e22:	e0bd      	b.n	8013fa0 <_tx_mutex_put+0x43c>
 8013e24:	24014f1c 	.word	0x24014f1c
 8013e28:	24014fb4 	.word	0x24014fb4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	699b      	ldr	r3, [r3, #24]
 8013e30:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d10a      	bne.n	8013e50 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2220      	movs	r2, #32
 8013e4e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8013e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013e56:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8013e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10a      	bne.n	8013e74 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8013e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	631a      	str	r2, [r3, #48]	; 0x30
 8013e72:	e016      	b.n	8013ea2 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8013e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8013e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e84:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8013e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8013e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e98:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013ea0:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8013ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013ea4:	1c5a      	adds	r2, r3, #1
 8013ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ea8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013eb6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	69db      	ldr	r3, [r3, #28]
 8013ebc:	1e5a      	subs	r2, r3, #1
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	69db      	ldr	r3, [r3, #28]
 8013ec6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8013ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d103      	bne.n	8013ed6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	619a      	str	r2, [r3, #24]
 8013ed4:	e00e      	b.n	8013ef4 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8013ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013eda:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ee0:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ee6:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013eec:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8013eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ef2:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013efc:	2200      	movs	r2, #0
 8013efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013f02:	4b2a      	ldr	r3, [pc, #168]	; (8013fac <_tx_mutex_put+0x448>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	3301      	adds	r3, #1
 8013f08:	4a28      	ldr	r2, [pc, #160]	; (8013fac <_tx_mutex_put+0x448>)
 8013f0a:	6013      	str	r3, [r2, #0]
 8013f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f10:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	f383 8810 	msr	PRIMASK, r3
}
 8013f18:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	691b      	ldr	r3, [r3, #16]
 8013f1e:	2b01      	cmp	r3, #1
 8013f20:	d12d      	bne.n	8013f7e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	69db      	ldr	r3, [r3, #28]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d01c      	beq.n	8013f64 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7ff fcaa 	bl	8013884 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f30:	f3ef 8310 	mrs	r3, PRIMASK
 8013f34:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013f36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013f38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f3a:	b672      	cpsid	i
    return(int_posture);
 8013f3c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8013f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	699b      	ldr	r3, [r3, #24]
 8013f46:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8013f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d003      	beq.n	8013f56 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8013f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	629a      	str	r2, [r3, #40]	; 0x28
 8013f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	f383 8810 	msr	PRIMASK, r3
}
 8013f62:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8013f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d005      	beq.n	8013f7e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8013f72:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013f76:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013f7a:	f7ff fd35 	bl	80139e8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8013f7e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013f80:	f001 f914 	bl	80151ac <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8013f84:	2300      	movs	r3, #0
 8013f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013f8a:	e009      	b.n	8013fa0 <_tx_mutex_put+0x43c>
 8013f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f383 8810 	msr	PRIMASK, r3
}
 8013f98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8013f9a:	231e      	movs	r3, #30
 8013f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8013fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3798      	adds	r7, #152	; 0x98
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	24014fb4 	.word	0x24014fb4

08013fb0 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b08e      	sub	sp, #56	; 0x38
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013fba:	f3ef 8310 	mrs	r3, PRIMASK
 8013fbe:	623b      	str	r3, [r7, #32]
    return(posture);
 8013fc0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013fc2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013fc4:	b672      	cpsid	i
    return(int_posture);
 8013fc6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8013fc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013fce:	4a37      	ldr	r2, [pc, #220]	; (80140ac <_tx_queue_cleanup+0xfc>)
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d161      	bne.n	8014098 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d15b      	bne.n	8014098 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d055      	beq.n	8014098 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8013fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a2f      	ldr	r2, [pc, #188]	; (80140b0 <_tx_queue_cleanup+0x100>)
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d150      	bne.n	8014098 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8013ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d04c      	beq.n	8014098 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2200      	movs	r2, #0
 8014002:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8014004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014008:	1e5a      	subs	r2, r3, #1
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014012:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014016:	2b00      	cmp	r3, #0
 8014018:	d103      	bne.n	8014022 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401c:	2200      	movs	r2, #0
 801401e:	629a      	str	r2, [r3, #40]	; 0x28
 8014020:	e013      	b.n	801404a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014026:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801402c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014032:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014038:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 801403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	429a      	cmp	r2, r3
 8014042:	d102      	bne.n	801404a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8014044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014048:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801404e:	2b05      	cmp	r3, #5
 8014050:	d122      	bne.n	8014098 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014054:	691b      	ldr	r3, [r3, #16]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d004      	beq.n	8014064 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	220b      	movs	r2, #11
 801405e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014062:	e003      	b.n	801406c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	220a      	movs	r2, #10
 8014068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801406c:	4b11      	ldr	r3, [pc, #68]	; (80140b4 <_tx_queue_cleanup+0x104>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	3301      	adds	r3, #1
 8014072:	4a10      	ldr	r2, [pc, #64]	; (80140b4 <_tx_queue_cleanup+0x104>)
 8014074:	6013      	str	r3, [r2, #0]
 8014076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014078:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	f383 8810 	msr	PRIMASK, r3
}
 8014080:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f001 f892 	bl	80151ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014088:	f3ef 8310 	mrs	r3, PRIMASK
 801408c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801408e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014090:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014092:	b672      	cpsid	i
    return(int_posture);
 8014094:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014096:	637b      	str	r3, [r7, #52]	; 0x34
 8014098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801409a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f383 8810 	msr	PRIMASK, r3
}
 80140a2:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80140a4:	bf00      	nop
 80140a6:	3738      	adds	r7, #56	; 0x38
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	08013fb1 	.word	0x08013fb1
 80140b0:	51554555 	.word	0x51554555
 80140b4:	24014fb4 	.word	0x24014fb4

080140b8 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b08c      	sub	sp, #48	; 0x30
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
 80140c4:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80140c6:	2238      	movs	r2, #56	; 0x38
 80140c8:	2100      	movs	r1, #0
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f002 fa82 	bl	80165d4 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80140e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80140e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	fb02 f303 	mul.w	r3, r2, r3
 80140f0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	683a      	ldr	r2, [r7, #0]
 80140f6:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	699a      	ldr	r2, [r3, #24]
 80140fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	441a      	add	r2, r3
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	683a      	ldr	r2, [r7, #0]
 801410a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014116:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801411c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801411e:	f3ef 8310 	mrs	r3, PRIMASK
 8014122:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014124:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014126:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014128:	b672      	cpsid	i
    return(int_posture);
 801412a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 801412c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	4a18      	ldr	r2, [pc, #96]	; (8014194 <_tx_queue_create+0xdc>)
 8014132:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8014134:	4b18      	ldr	r3, [pc, #96]	; (8014198 <_tx_queue_create+0xe0>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d109      	bne.n	8014150 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 801413c:	4a17      	ldr	r2, [pc, #92]	; (801419c <_tx_queue_create+0xe4>)
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	68fa      	ldr	r2, [r7, #12]
 8014146:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	68fa      	ldr	r2, [r7, #12]
 801414c:	635a      	str	r2, [r3, #52]	; 0x34
 801414e:	e011      	b.n	8014174 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8014150:	4b12      	ldr	r3, [pc, #72]	; (801419c <_tx_queue_create+0xe4>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801415a:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 801415c:	6a3b      	ldr	r3, [r7, #32]
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	69fa      	ldr	r2, [r7, #28]
 801416c:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	6a3a      	ldr	r2, [r7, #32]
 8014172:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8014174:	4b08      	ldr	r3, [pc, #32]	; (8014198 <_tx_queue_create+0xe0>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	3301      	adds	r3, #1
 801417a:	4a07      	ldr	r2, [pc, #28]	; (8014198 <_tx_queue_create+0xe0>)
 801417c:	6013      	str	r3, [r2, #0]
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014180:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	f383 8810 	msr	PRIMASK, r3
}
 8014188:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801418a:	2300      	movs	r3, #0
}
 801418c:	4618      	mov	r0, r3
 801418e:	3730      	adds	r7, #48	; 0x30
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	51554555 	.word	0x51554555
 8014198:	24014ef0 	.word	0x24014ef0
 801419c:	24014eec 	.word	0x24014eec

080141a0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b096      	sub	sp, #88	; 0x58
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80141ac:	2300      	movs	r3, #0
 80141ae:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141b0:	f3ef 8310 	mrs	r3, PRIMASK
 80141b4:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80141b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80141b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80141ba:	b672      	cpsid	i
    return(int_posture);
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80141be:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141c4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	691b      	ldr	r3, [r3, #16]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f000 8136 	beq.w	801443c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80141d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d13c      	bne.n	8014250 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	6a1b      	ldr	r3, [r3, #32]
 80141da:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80141e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141e8:	1d13      	adds	r3, r2, #4
 80141ea:	657b      	str	r3, [r7, #84]	; 0x54
 80141ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141ee:	1d19      	adds	r1, r3, #4
 80141f0:	6539      	str	r1, [r7, #80]	; 0x50
 80141f2:	6812      	ldr	r2, [r2, #0]
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141f8:	2b01      	cmp	r3, #1
 80141fa:	d90e      	bls.n	801421a <_tx_queue_receive+0x7a>
 80141fc:	e007      	b.n	801420e <_tx_queue_receive+0x6e>
 80141fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014200:	1d13      	adds	r3, r2, #4
 8014202:	657b      	str	r3, [r7, #84]	; 0x54
 8014204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014206:	1d19      	adds	r1, r3, #4
 8014208:	6539      	str	r1, [r7, #80]	; 0x50
 801420a:	6812      	ldr	r2, [r2, #0]
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014210:	3b01      	subs	r3, #1
 8014212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014216:	2b00      	cmp	r3, #0
 8014218:	d1f1      	bne.n	80141fe <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	69db      	ldr	r3, [r3, #28]
 801421e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014220:	429a      	cmp	r2, r3
 8014222:	d102      	bne.n	801422a <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	699b      	ldr	r3, [r3, #24]
 8014228:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801422e:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	695b      	ldr	r3, [r3, #20]
 8014234:	1c5a      	adds	r2, r3, #1
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	691b      	ldr	r3, [r3, #16]
 801423e:	1e5a      	subs	r2, r3, #1
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	611a      	str	r2, [r3, #16]
 8014244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014246:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424a:	f383 8810 	msr	PRIMASK, r3
}
 801424e:	e163      	b.n	8014518 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014254:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8014256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801425c:	2b01      	cmp	r3, #1
 801425e:	d153      	bne.n	8014308 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014264:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	689b      	ldr	r3, [r3, #8]
 801426e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014272:	1d13      	adds	r3, r2, #4
 8014274:	657b      	str	r3, [r7, #84]	; 0x54
 8014276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014278:	1d19      	adds	r1, r3, #4
 801427a:	6539      	str	r1, [r7, #80]	; 0x50
 801427c:	6812      	ldr	r2, [r2, #0]
 801427e:	601a      	str	r2, [r3, #0]
 8014280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014282:	2b01      	cmp	r3, #1
 8014284:	d90e      	bls.n	80142a4 <_tx_queue_receive+0x104>
 8014286:	e007      	b.n	8014298 <_tx_queue_receive+0xf8>
 8014288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801428a:	1d13      	adds	r3, r2, #4
 801428c:	657b      	str	r3, [r7, #84]	; 0x54
 801428e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014290:	1d19      	adds	r1, r3, #4
 8014292:	6539      	str	r1, [r7, #80]	; 0x50
 8014294:	6812      	ldr	r2, [r2, #0]
 8014296:	601a      	str	r2, [r3, #0]
 8014298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801429a:	3b01      	subs	r3, #1
 801429c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1f1      	bne.n	8014288 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80142a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142a6:	3b01      	subs	r3, #1
 80142a8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80142aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d103      	bne.n	80142b8 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2200      	movs	r2, #0
 80142b4:	629a      	str	r2, [r3, #40]	; 0x28
 80142b6:	e00e      	b.n	80142d6 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80142b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142bc:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142c2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80142c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142c8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80142ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142ce:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80142d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142d4:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142da:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80142dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142de:	2200      	movs	r2, #0
 80142e0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80142e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142e4:	2200      	movs	r2, #0
 80142e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80142ea:	4b8e      	ldr	r3, [pc, #568]	; (8014524 <_tx_queue_receive+0x384>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	3301      	adds	r3, #1
 80142f0:	4a8c      	ldr	r2, [pc, #560]	; (8014524 <_tx_queue_receive+0x384>)
 80142f2:	6013      	str	r3, [r2, #0]
 80142f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	f383 8810 	msr	PRIMASK, r3
}
 80142fe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014300:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014302:	f000 ff53 	bl	80151ac <_tx_thread_system_resume>
 8014306:	e107      	b.n	8014518 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	6a1b      	ldr	r3, [r3, #32]
 801430c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801431a:	1d13      	adds	r3, r2, #4
 801431c:	657b      	str	r3, [r7, #84]	; 0x54
 801431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014320:	1d19      	adds	r1, r3, #4
 8014322:	6539      	str	r1, [r7, #80]	; 0x50
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	601a      	str	r2, [r3, #0]
 8014328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801432a:	2b01      	cmp	r3, #1
 801432c:	d90e      	bls.n	801434c <_tx_queue_receive+0x1ac>
 801432e:	e007      	b.n	8014340 <_tx_queue_receive+0x1a0>
 8014330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014332:	1d13      	adds	r3, r2, #4
 8014334:	657b      	str	r3, [r7, #84]	; 0x54
 8014336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014338:	1d19      	adds	r1, r3, #4
 801433a:	6539      	str	r1, [r7, #80]	; 0x50
 801433c:	6812      	ldr	r2, [r2, #0]
 801433e:	601a      	str	r2, [r3, #0]
 8014340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014342:	3b01      	subs	r3, #1
 8014344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1f1      	bne.n	8014330 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	69db      	ldr	r3, [r3, #28]
 8014350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014352:	429a      	cmp	r2, r3
 8014354:	d102      	bne.n	801435c <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	699b      	ldr	r3, [r3, #24]
 801435a:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014360:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8014362:	4b70      	ldr	r3, [pc, #448]	; (8014524 <_tx_queue_receive+0x384>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	3301      	adds	r3, #1
 8014368:	4a6e      	ldr	r2, [pc, #440]	; (8014524 <_tx_queue_receive+0x384>)
 801436a:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 801436c:	4b6d      	ldr	r3, [pc, #436]	; (8014524 <_tx_queue_receive+0x384>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	3b01      	subs	r3, #1
 8014372:	4a6c      	ldr	r2, [pc, #432]	; (8014524 <_tx_queue_receive+0x384>)
 8014374:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801437a:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014380:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801438a:	1d13      	adds	r3, r2, #4
 801438c:	657b      	str	r3, [r7, #84]	; 0x54
 801438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014390:	1d19      	adds	r1, r3, #4
 8014392:	6539      	str	r1, [r7, #80]	; 0x50
 8014394:	6812      	ldr	r2, [r2, #0]
 8014396:	601a      	str	r2, [r3, #0]
 8014398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801439a:	2b01      	cmp	r3, #1
 801439c:	d90e      	bls.n	80143bc <_tx_queue_receive+0x21c>
 801439e:	e007      	b.n	80143b0 <_tx_queue_receive+0x210>
 80143a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80143a2:	1d13      	adds	r3, r2, #4
 80143a4:	657b      	str	r3, [r7, #84]	; 0x54
 80143a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143a8:	1d19      	adds	r1, r3, #4
 80143aa:	6539      	str	r1, [r7, #80]	; 0x50
 80143ac:	6812      	ldr	r2, [r2, #0]
 80143ae:	601a      	str	r2, [r3, #0]
 80143b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143b2:	3b01      	subs	r3, #1
 80143b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80143b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1f1      	bne.n	80143a0 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	69db      	ldr	r3, [r3, #28]
 80143c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d102      	bne.n	80143cc <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	699b      	ldr	r3, [r3, #24]
 80143ca:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143d0:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143d6:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80143d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143da:	3b01      	subs	r3, #1
 80143dc:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80143de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d103      	bne.n	80143ec <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	2200      	movs	r2, #0
 80143e8:	629a      	str	r2, [r3, #40]	; 0x28
 80143ea:	e00e      	b.n	801440a <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80143ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143f0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143f6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80143f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143fc:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80143fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014402:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8014404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014408:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801440e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014412:	2200      	movs	r2, #0
 8014414:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014418:	2200      	movs	r2, #0
 801441a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801441e:	4b41      	ldr	r3, [pc, #260]	; (8014524 <_tx_queue_receive+0x384>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	3301      	adds	r3, #1
 8014424:	4a3f      	ldr	r2, [pc, #252]	; (8014524 <_tx_queue_receive+0x384>)
 8014426:	6013      	str	r3, [r2, #0]
 8014428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801442a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801442c:	6a3b      	ldr	r3, [r7, #32]
 801442e:	f383 8810 	msr	PRIMASK, r3
}
 8014432:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014436:	f000 feb9 	bl	80151ac <_tx_thread_system_resume>
 801443a:	e06d      	b.n	8014518 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d062      	beq.n	8014508 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014442:	4b38      	ldr	r3, [pc, #224]	; (8014524 <_tx_queue_receive+0x384>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d008      	beq.n	801445c <_tx_queue_receive+0x2bc>
 801444a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801444c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	f383 8810 	msr	PRIMASK, r3
}
 8014454:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014456:	230a      	movs	r3, #10
 8014458:	64bb      	str	r3, [r7, #72]	; 0x48
 801445a:	e05d      	b.n	8014518 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801445c:	4b32      	ldr	r3, [pc, #200]	; (8014528 <_tx_queue_receive+0x388>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014464:	4a31      	ldr	r2, [pc, #196]	; (801452c <_tx_queue_receive+0x38c>)
 8014466:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014470:	68ba      	ldr	r2, [r7, #8]
 8014472:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014476:	2200      	movs	r2, #0
 8014478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801447e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014482:	1c5a      	adds	r2, r3, #1
 8014484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014486:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 801448a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801448c:	2b00      	cmp	r3, #0
 801448e:	d109      	bne.n	80144a4 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014494:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801449a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144a0:	675a      	str	r2, [r3, #116]	; 0x74
 80144a2:	e011      	b.n	80144c8 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144a8:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80144aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144ae:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80144b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144b4:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80144b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144ba:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80144bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144c0:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80144c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144c6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80144c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80144d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144d2:	2205      	movs	r2, #5
 80144d4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80144d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144d8:	2201      	movs	r2, #1
 80144da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80144dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80144e2:	4b10      	ldr	r3, [pc, #64]	; (8014524 <_tx_queue_receive+0x384>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	3301      	adds	r3, #1
 80144e8:	4a0e      	ldr	r2, [pc, #56]	; (8014524 <_tx_queue_receive+0x384>)
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	f383 8810 	msr	PRIMASK, r3
}
 80144f6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80144f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144fa:	f000 ff57 	bl	80153ac <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80144fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014504:	64bb      	str	r3, [r7, #72]	; 0x48
 8014506:	e007      	b.n	8014518 <_tx_queue_receive+0x378>
 8014508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801450a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	f383 8810 	msr	PRIMASK, r3
}
 8014512:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8014514:	230a      	movs	r3, #10
 8014516:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8014518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801451a:	4618      	mov	r0, r3
 801451c:	3758      	adds	r7, #88	; 0x58
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	24014fb4 	.word	0x24014fb4
 8014528:	24014f1c 	.word	0x24014f1c
 801452c:	08013fb1 	.word	0x08013fb1

08014530 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b094      	sub	sp, #80	; 0x50
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801453c:	2300      	movs	r3, #0
 801453e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014540:	f3ef 8310 	mrs	r3, PRIMASK
 8014544:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014548:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801454a:	b672      	cpsid	i
    return(int_posture);
 801454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 801454e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014554:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	695b      	ldr	r3, [r3, #20]
 801455a:	2b00      	cmp	r3, #0
 801455c:	f000 809b 	beq.w	8014696 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014562:	2b00      	cmp	r3, #0
 8014564:	d13c      	bne.n	80145e0 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	695b      	ldr	r3, [r3, #20]
 801456a:	1e5a      	subs	r2, r3, #1
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	691b      	ldr	r3, [r3, #16]
 8014574:	1c5a      	adds	r2, r3, #1
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014582:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801458a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801458c:	1d13      	adds	r3, r2, #4
 801458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014592:	1d19      	adds	r1, r3, #4
 8014594:	64b9      	str	r1, [r7, #72]	; 0x48
 8014596:	6812      	ldr	r2, [r2, #0]
 8014598:	601a      	str	r2, [r3, #0]
 801459a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801459c:	2b01      	cmp	r3, #1
 801459e:	d90e      	bls.n	80145be <_tx_queue_send+0x8e>
 80145a0:	e007      	b.n	80145b2 <_tx_queue_send+0x82>
 80145a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80145a4:	1d13      	adds	r3, r2, #4
 80145a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80145a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145aa:	1d19      	adds	r1, r3, #4
 80145ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80145ae:	6812      	ldr	r2, [r2, #0]
 80145b0:	601a      	str	r2, [r3, #0]
 80145b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b4:	3b01      	subs	r3, #1
 80145b6:	647b      	str	r3, [r7, #68]	; 0x44
 80145b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d1f1      	bne.n	80145a2 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	69db      	ldr	r3, [r3, #28]
 80145c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d102      	bne.n	80145ce <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	699b      	ldr	r3, [r3, #24]
 80145cc:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145d2:	625a      	str	r2, [r3, #36]	; 0x24
 80145d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145d8:	6a3b      	ldr	r3, [r7, #32]
 80145da:	f383 8810 	msr	PRIMASK, r3
}
 80145de:	e0c8      	b.n	8014772 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e4:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80145e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e8:	3b01      	subs	r3, #1
 80145ea:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80145ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d103      	bne.n	80145fa <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2200      	movs	r2, #0
 80145f6:	629a      	str	r2, [r3, #40]	; 0x28
 80145f8:	e012      	b.n	8014620 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80145fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014606:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801460c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014612:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014618:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 801461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801461e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014624:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014628:	2200      	movs	r2, #0
 801462a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014634:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	689b      	ldr	r3, [r3, #8]
 801463a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801463c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801463e:	1d13      	adds	r3, r2, #4
 8014640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014644:	1d19      	adds	r1, r3, #4
 8014646:	64b9      	str	r1, [r7, #72]	; 0x48
 8014648:	6812      	ldr	r2, [r2, #0]
 801464a:	601a      	str	r2, [r3, #0]
 801464c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801464e:	2b01      	cmp	r3, #1
 8014650:	d90e      	bls.n	8014670 <_tx_queue_send+0x140>
 8014652:	e007      	b.n	8014664 <_tx_queue_send+0x134>
 8014654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014656:	1d13      	adds	r3, r2, #4
 8014658:	64fb      	str	r3, [r7, #76]	; 0x4c
 801465a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801465c:	1d19      	adds	r1, r3, #4
 801465e:	64b9      	str	r1, [r7, #72]	; 0x48
 8014660:	6812      	ldr	r2, [r2, #0]
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014666:	3b01      	subs	r3, #1
 8014668:	647b      	str	r3, [r7, #68]	; 0x44
 801466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1f1      	bne.n	8014654 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014672:	2200      	movs	r2, #0
 8014674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014678:	4b40      	ldr	r3, [pc, #256]	; (801477c <_tx_queue_send+0x24c>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	3301      	adds	r3, #1
 801467e:	4a3f      	ldr	r2, [pc, #252]	; (801477c <_tx_queue_send+0x24c>)
 8014680:	6013      	str	r3, [r2, #0]
 8014682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014684:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	f383 8810 	msr	PRIMASK, r3
}
 801468c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 801468e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014690:	f000 fd8c 	bl	80151ac <_tx_thread_system_resume>
 8014694:	e06d      	b.n	8014772 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d062      	beq.n	8014762 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801469c:	4b37      	ldr	r3, [pc, #220]	; (801477c <_tx_queue_send+0x24c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d008      	beq.n	80146b6 <_tx_queue_send+0x186>
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	f383 8810 	msr	PRIMASK, r3
}
 80146ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80146b0:	230b      	movs	r3, #11
 80146b2:	643b      	str	r3, [r7, #64]	; 0x40
 80146b4:	e05d      	b.n	8014772 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80146b6:	4b32      	ldr	r3, [pc, #200]	; (8014780 <_tx_queue_send+0x250>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80146bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146be:	4a31      	ldr	r2, [pc, #196]	; (8014784 <_tx_queue_send+0x254>)
 80146c0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80146c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80146c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ca:	68ba      	ldr	r2, [r7, #8]
 80146cc:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80146ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d0:	2200      	movs	r2, #0
 80146d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80146d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80146e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d109      	bne.n	80146fe <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146ee:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80146f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146f4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80146f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146fa:	675a      	str	r2, [r3, #116]	; 0x74
 80146fc:	e011      	b.n	8014722 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014702:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014708:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801470e:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014714:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801471a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014720:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014724:	1c5a      	adds	r2, r3, #1
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 801472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801472c:	2205      	movs	r2, #5
 801472e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014732:	2201      	movs	r2, #1
 8014734:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801473c:	4b0f      	ldr	r3, [pc, #60]	; (801477c <_tx_queue_send+0x24c>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	3301      	adds	r3, #1
 8014742:	4a0e      	ldr	r2, [pc, #56]	; (801477c <_tx_queue_send+0x24c>)
 8014744:	6013      	str	r3, [r2, #0]
 8014746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014748:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	f383 8810 	msr	PRIMASK, r3
}
 8014750:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014754:	f000 fe2a 	bl	80153ac <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801475e:	643b      	str	r3, [r7, #64]	; 0x40
 8014760:	e007      	b.n	8014772 <_tx_queue_send+0x242>
 8014762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014764:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	f383 8810 	msr	PRIMASK, r3
}
 801476c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 801476e:	230b      	movs	r3, #11
 8014770:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8014772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014774:	4618      	mov	r0, r3
 8014776:	3750      	adds	r7, #80	; 0x50
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	24014fb4 	.word	0x24014fb4
 8014780:	24014f1c 	.word	0x24014f1c
 8014784:	08013fb1 	.word	0x08013fb1

08014788 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b08e      	sub	sp, #56	; 0x38
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014792:	f3ef 8310 	mrs	r3, PRIMASK
 8014796:	623b      	str	r3, [r7, #32]
    return(posture);
 8014798:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801479a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801479c:	b672      	cpsid	i
    return(int_posture);
 801479e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80147a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147a6:	4a33      	ldr	r2, [pc, #204]	; (8014874 <_tx_semaphore_cleanup+0xec>)
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d158      	bne.n	801485e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80147b2:	683a      	ldr	r2, [r7, #0]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d152      	bne.n	801485e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147bc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80147be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d04c      	beq.n	801485e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	4a2b      	ldr	r2, [pc, #172]	; (8014878 <_tx_semaphore_cleanup+0xf0>)
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d147      	bne.n	801485e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80147ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d0:	691b      	ldr	r3, [r3, #16]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d043      	beq.n	801485e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2200      	movs	r2, #0
 80147da:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80147dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147de:	691b      	ldr	r3, [r3, #16]
 80147e0:	1e5a      	subs	r2, r3, #1
 80147e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80147e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80147ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d103      	bne.n	80147fa <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80147f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f4:	2200      	movs	r2, #0
 80147f6:	60da      	str	r2, [r3, #12]
 80147f8:	e013      	b.n	8014822 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fe:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014804:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801480a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014810:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8014812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	429a      	cmp	r2, r3
 801481a:	d102      	bne.n	8014822 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014820:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014826:	2b06      	cmp	r3, #6
 8014828:	d119      	bne.n	801485e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	220d      	movs	r2, #13
 801482e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014832:	4b12      	ldr	r3, [pc, #72]	; (801487c <_tx_semaphore_cleanup+0xf4>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	3301      	adds	r3, #1
 8014838:	4a10      	ldr	r2, [pc, #64]	; (801487c <_tx_semaphore_cleanup+0xf4>)
 801483a:	6013      	str	r3, [r2, #0]
 801483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801483e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	f383 8810 	msr	PRIMASK, r3
}
 8014846:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 fcaf 	bl	80151ac <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801484e:	f3ef 8310 	mrs	r3, PRIMASK
 8014852:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014854:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014856:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014858:	b672      	cpsid	i
    return(int_posture);
 801485a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801485c:	637b      	str	r3, [r7, #52]	; 0x34
 801485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014860:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	f383 8810 	msr	PRIMASK, r3
}
 8014868:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801486a:	bf00      	nop
 801486c:	3738      	adds	r7, #56	; 0x38
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	08014789 	.word	0x08014789
 8014878:	53454d41 	.word	0x53454d41
 801487c:	24014fb4 	.word	0x24014fb4

08014880 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b08a      	sub	sp, #40	; 0x28
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 801488c:	221c      	movs	r2, #28
 801488e:	2100      	movs	r1, #0
 8014890:	68f8      	ldr	r0, [r7, #12]
 8014892:	f001 fe9f 	bl	80165d4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	68ba      	ldr	r2, [r7, #8]
 801489a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148a2:	f3ef 8310 	mrs	r3, PRIMASK
 80148a6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80148a8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80148aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80148ac:	b672      	cpsid	i
    return(int_posture);
 80148ae:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80148b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	4a18      	ldr	r2, [pc, #96]	; (8014918 <_tx_semaphore_create+0x98>)
 80148b6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80148b8:	4b18      	ldr	r3, [pc, #96]	; (801491c <_tx_semaphore_create+0x9c>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d109      	bne.n	80148d4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80148c0:	4a17      	ldr	r2, [pc, #92]	; (8014920 <_tx_semaphore_create+0xa0>)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	68fa      	ldr	r2, [r7, #12]
 80148ca:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	619a      	str	r2, [r3, #24]
 80148d2:	e011      	b.n	80148f8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80148d4:	4b12      	ldr	r3, [pc, #72]	; (8014920 <_tx_semaphore_create+0xa0>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80148da:	6a3b      	ldr	r3, [r7, #32]
 80148dc:	699b      	ldr	r3, [r3, #24]
 80148de:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80148e0:	6a3b      	ldr	r3, [r7, #32]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80148e6:	69fb      	ldr	r3, [r7, #28]
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	69fa      	ldr	r2, [r7, #28]
 80148f0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6a3a      	ldr	r2, [r7, #32]
 80148f6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80148f8:	4b08      	ldr	r3, [pc, #32]	; (801491c <_tx_semaphore_create+0x9c>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	3301      	adds	r3, #1
 80148fe:	4a07      	ldr	r2, [pc, #28]	; (801491c <_tx_semaphore_create+0x9c>)
 8014900:	6013      	str	r3, [r2, #0]
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	f383 8810 	msr	PRIMASK, r3
}
 801490c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3728      	adds	r7, #40	; 0x28
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	53454d41 	.word	0x53454d41
 801491c:	24014ee8 	.word	0x24014ee8
 8014920:	24014ee4 	.word	0x24014ee4

08014924 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b092      	sub	sp, #72	; 0x48
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801492c:	f3ef 8310 	mrs	r3, PRIMASK
 8014930:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014934:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014936:	b672      	cpsid	i
    return(int_posture);
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801493a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8014942:	4b3d      	ldr	r3, [pc, #244]	; (8014a38 <_tx_semaphore_delete+0x114>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	3b01      	subs	r3, #1
 8014948:	4a3b      	ldr	r2, [pc, #236]	; (8014a38 <_tx_semaphore_delete+0x114>)
 801494a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801494c:	4b3a      	ldr	r3, [pc, #232]	; (8014a38 <_tx_semaphore_delete+0x114>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d103      	bne.n	801495c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8014954:	4b39      	ldr	r3, [pc, #228]	; (8014a3c <_tx_semaphore_delete+0x118>)
 8014956:	2200      	movs	r2, #0
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	e013      	b.n	8014984 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	695b      	ldr	r3, [r3, #20]
 8014960:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	699b      	ldr	r3, [r3, #24]
 8014966:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8014968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801496c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014972:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8014974:	4b31      	ldr	r3, [pc, #196]	; (8014a3c <_tx_semaphore_delete+0x118>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	429a      	cmp	r2, r3
 801497c:	d102      	bne.n	8014984 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801497e:	4a2f      	ldr	r2, [pc, #188]	; (8014a3c <_tx_semaphore_delete+0x118>)
 8014980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014982:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014984:	4b2e      	ldr	r3, [pc, #184]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3301      	adds	r3, #1
 801498a:	4a2d      	ldr	r2, [pc, #180]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 801498c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	691b      	ldr	r3, [r3, #16]
 801499e:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2200      	movs	r2, #0
 80149a4:	611a      	str	r2, [r3, #16]
 80149a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	f383 8810 	msr	PRIMASK, r3
}
 80149b0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80149b2:	e024      	b.n	80149fe <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80149b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149b6:	3b01      	subs	r3, #1
 80149b8:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149ba:	f3ef 8310 	mrs	r3, PRIMASK
 80149be:	61fb      	str	r3, [r7, #28]
    return(posture);
 80149c0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80149c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80149c4:	b672      	cpsid	i
    return(int_posture);
 80149c6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80149c8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80149ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149cc:	2200      	movs	r2, #0
 80149ce:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80149d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149d2:	2201      	movs	r2, #1
 80149d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80149d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149dc:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80149de:	4b18      	ldr	r3, [pc, #96]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	3301      	adds	r3, #1
 80149e4:	4a16      	ldr	r2, [pc, #88]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149ec:	6a3b      	ldr	r3, [r7, #32]
 80149ee:	f383 8810 	msr	PRIMASK, r3
}
 80149f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80149f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80149f6:	f000 fbd9 	bl	80151ac <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80149fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fc:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80149fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d1d7      	bne.n	80149b4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a04:	f3ef 8310 	mrs	r3, PRIMASK
 8014a08:	613b      	str	r3, [r7, #16]
    return(posture);
 8014a0a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8014a0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a0e:	b672      	cpsid	i
    return(int_posture);
 8014a10:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8014a12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8014a14:	4b0a      	ldr	r3, [pc, #40]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	4a09      	ldr	r2, [pc, #36]	; (8014a40 <_tx_semaphore_delete+0x11c>)
 8014a1c:	6013      	str	r3, [r2, #0]
 8014a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	f383 8810 	msr	PRIMASK, r3
}
 8014a28:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8014a2a:	f000 fb85 	bl	8015138 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3748      	adds	r7, #72	; 0x48
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	24014ee8 	.word	0x24014ee8
 8014a3c:	24014ee4 	.word	0x24014ee4
 8014a40:	24014fb4 	.word	0x24014fb4

08014a44 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b08e      	sub	sp, #56	; 0x38
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a52:	f3ef 8310 	mrs	r3, PRIMASK
 8014a56:	623b      	str	r3, [r7, #32]
    return(posture);
 8014a58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014a5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a5c:	b672      	cpsid	i
    return(int_posture);
 8014a5e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8014a60:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d00a      	beq.n	8014a80 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	689b      	ldr	r3, [r3, #8]
 8014a6e:	1e5a      	subs	r2, r3, #1
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	609a      	str	r2, [r3, #8]
 8014a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a78:	69bb      	ldr	r3, [r7, #24]
 8014a7a:	f383 8810 	msr	PRIMASK, r3
}
 8014a7e:	e068      	b.n	8014b52 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d05d      	beq.n	8014b42 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014a86:	4b35      	ldr	r3, [pc, #212]	; (8014b5c <_tx_semaphore_get+0x118>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d008      	beq.n	8014aa0 <_tx_semaphore_get+0x5c>
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	f383 8810 	msr	PRIMASK, r3
}
 8014a98:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8014a9a:	230d      	movs	r3, #13
 8014a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8014a9e:	e058      	b.n	8014b52 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014aa0:	4b2f      	ldr	r3, [pc, #188]	; (8014b60 <_tx_semaphore_get+0x11c>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8014aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa8:	4a2e      	ldr	r2, [pc, #184]	; (8014b64 <_tx_semaphore_get+0x120>)
 8014aaa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8014aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aae:	687a      	ldr	r2, [r7, #4]
 8014ab0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014ab8:	1c5a      	adds	r2, r3, #1
 8014aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014abc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	691b      	ldr	r3, [r3, #16]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d109      	bne.n	8014adc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014acc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8014ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ad2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8014ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ad8:	675a      	str	r2, [r3, #116]	; 0x74
 8014ada:	e011      	b.n	8014b00 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ae6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aec:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014af8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014afe:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	691b      	ldr	r3, [r3, #16]
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8014b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0c:	2206      	movs	r2, #6
 8014b0e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b12:	2201      	movs	r2, #1
 8014b14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b18:	683a      	ldr	r2, [r7, #0]
 8014b1a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014b1c:	4b0f      	ldr	r3, [pc, #60]	; (8014b5c <_tx_semaphore_get+0x118>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	3301      	adds	r3, #1
 8014b22:	4a0e      	ldr	r2, [pc, #56]	; (8014b5c <_tx_semaphore_get+0x118>)
 8014b24:	6013      	str	r3, [r2, #0]
 8014b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	f383 8810 	msr	PRIMASK, r3
}
 8014b30:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b34:	f000 fc3a 	bl	80153ac <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8014b40:	e007      	b.n	8014b52 <_tx_semaphore_get+0x10e>
 8014b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b44:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	f383 8810 	msr	PRIMASK, r3
}
 8014b4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8014b4e:	230d      	movs	r3, #13
 8014b50:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8014b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3738      	adds	r7, #56	; 0x38
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	24014fb4 	.word	0x24014fb4
 8014b60:	24014f1c 	.word	0x24014f1c
 8014b64:	08014789 	.word	0x08014789

08014b68 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b08c      	sub	sp, #48	; 0x30
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b70:	f3ef 8310 	mrs	r3, PRIMASK
 8014b74:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014b76:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014b78:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b7a:	b672      	cpsid	i
    return(int_posture);
 8014b7c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8014b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	691b      	ldr	r3, [r3, #16]
 8014b84:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8014b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d10a      	bne.n	8014ba2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	609a      	str	r2, [r3, #8]
 8014b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b98:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	f383 8810 	msr	PRIMASK, r3
}
 8014ba0:	e033      	b.n	8014c0a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8014ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014baa:	3b01      	subs	r3, #1
 8014bac:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d103      	bne.n	8014bbc <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	60da      	str	r2, [r3, #12]
 8014bba:	e00e      	b.n	8014bda <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8014bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bc0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6a3a      	ldr	r2, [r7, #32]
 8014bc6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bcc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014bce:	6a3b      	ldr	r3, [r7, #32]
 8014bd0:	69fa      	ldr	r2, [r7, #28]
 8014bd2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	6a3a      	ldr	r2, [r7, #32]
 8014bd8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bde:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be2:	2200      	movs	r2, #0
 8014be4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be8:	2200      	movs	r2, #0
 8014bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014bee:	4b09      	ldr	r3, [pc, #36]	; (8014c14 <_tx_semaphore_put+0xac>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	4a07      	ldr	r2, [pc, #28]	; (8014c14 <_tx_semaphore_put+0xac>)
 8014bf6:	6013      	str	r3, [r2, #0]
 8014bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f383 8810 	msr	PRIMASK, r3
}
 8014c02:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c06:	f000 fad1 	bl	80151ac <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8014c0a:	2300      	movs	r3, #0
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3730      	adds	r7, #48	; 0x30
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	24014fb4 	.word	0x24014fb4

08014c18 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b092      	sub	sp, #72	; 0x48
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8014c26:	2300      	movs	r3, #0
 8014c28:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8014c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c2c:	21ef      	movs	r1, #239	; 0xef
 8014c2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014c30:	f001 fcd0 	bl	80165d4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8014c34:	22b0      	movs	r2, #176	; 0xb0
 8014c36:	2100      	movs	r1, #0
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f001 fccb 	bl	80165d4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	683a      	ldr	r2, [r7, #0]
 8014c4e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c54:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c5a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c60:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c6e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c74:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2220      	movs	r2, #32
 8014c7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8014c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c84:	3b01      	subs	r3, #1
 8014c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c88:	4413      	add	r3, r2
 8014c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c90:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8014c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d007      	beq.n	8014caa <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014ca8:	e006      	b.n	8014cb8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cae:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2203      	movs	r2, #3
 8014cbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	4a48      	ldr	r2, [pc, #288]	; (8014de4 <_tx_thread_create+0x1cc>)
 8014cc2:	655a      	str	r2, [r3, #84]	; 0x54
 8014cc4:	68fa      	ldr	r2, [r7, #12]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8014cca:	4947      	ldr	r1, [pc, #284]	; (8014de8 <_tx_thread_create+0x1d0>)
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7eb fba7 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8014cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014cda:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014cdc:	b672      	cpsid	i
    return(int_posture);
 8014cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8014ce0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	4a41      	ldr	r2, [pc, #260]	; (8014dec <_tx_thread_create+0x1d4>)
 8014ce6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8014ce8:	4b41      	ldr	r3, [pc, #260]	; (8014df0 <_tx_thread_create+0x1d8>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d10b      	bne.n	8014d08 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8014cf0:	4a40      	ldr	r2, [pc, #256]	; (8014df4 <_tx_thread_create+0x1dc>)
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	68fa      	ldr	r2, [r7, #12]
 8014cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8014d06:	e016      	b.n	8014d36 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8014d08:	4b3a      	ldr	r3, [pc, #232]	; (8014df4 <_tx_thread_create+0x1dc>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8014d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014d14:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8014d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014d36:	4b2e      	ldr	r3, [pc, #184]	; (8014df0 <_tx_thread_create+0x1d8>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	4a2c      	ldr	r2, [pc, #176]	; (8014df0 <_tx_thread_create+0x1d8>)
 8014d3e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014d40:	4b2d      	ldr	r3, [pc, #180]	; (8014df8 <_tx_thread_create+0x1e0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	3301      	adds	r3, #1
 8014d46:	4a2c      	ldr	r2, [pc, #176]	; (8014df8 <_tx_thread_create+0x1e0>)
 8014d48:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8014d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d129      	bne.n	8014da4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d50:	f3ef 8305 	mrs	r3, IPSR
 8014d54:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8014d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014d58:	4b28      	ldr	r3, [pc, #160]	; (8014dfc <_tx_thread_create+0x1e4>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4313      	orrs	r3, r2
 8014d5e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014d62:	d30d      	bcc.n	8014d80 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014d64:	4b26      	ldr	r3, [pc, #152]	; (8014e00 <_tx_thread_create+0x1e8>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d009      	beq.n	8014d84 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d74:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8014d7e:	e001      	b.n	8014d84 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014d80:	2300      	movs	r3, #0
 8014d82:	647b      	str	r3, [r7, #68]	; 0x44
 8014d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d88:	6a3b      	ldr	r3, [r7, #32]
 8014d8a:	f383 8810 	msr	PRIMASK, r3
}
 8014d8e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8014d90:	68f8      	ldr	r0, [r7, #12]
 8014d92:	f000 fa0b 	bl	80151ac <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d01e      	beq.n	8014dda <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8014d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014da0:	63da      	str	r2, [r3, #60]	; 0x3c
 8014da2:	e01a      	b.n	8014dda <_tx_thread_create+0x1c2>
 8014da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	f383 8810 	msr	PRIMASK, r3
}
 8014dae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014db0:	f3ef 8310 	mrs	r3, PRIMASK
 8014db4:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014db6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014db8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014dba:	b672      	cpsid	i
    return(int_posture);
 8014dbc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8014dbe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8014dc0:	4b0d      	ldr	r3, [pc, #52]	; (8014df8 <_tx_thread_create+0x1e0>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	3b01      	subs	r3, #1
 8014dc6:	4a0c      	ldr	r2, [pc, #48]	; (8014df8 <_tx_thread_create+0x1e0>)
 8014dc8:	6013      	str	r3, [r2, #0]
 8014dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dcc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	f383 8810 	msr	PRIMASK, r3
}
 8014dd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014dd6:	f000 f9af 	bl	8015138 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3748      	adds	r7, #72	; 0x48
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	08015681 	.word	0x08015681
 8014de8:	08014fa1 	.word	0x08014fa1
 8014dec:	54485244 	.word	0x54485244
 8014df0:	24014f28 	.word	0x24014f28
 8014df4:	24014f24 	.word	0x24014f24
 8014df8:	24014fb4 	.word	0x24014fb4
 8014dfc:	2400006c 	.word	0x2400006c
 8014e00:	24014f20 	.word	0x24014f20

08014e04 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e0e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014e10:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8014e12:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e14:	b672      	cpsid	i
    return(int_posture);
 8014e16:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8014e18:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014e1a:	4b08      	ldr	r3, [pc, #32]	; (8014e3c <_tx_thread_identify+0x38>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	613b      	str	r3, [r7, #16]
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f383 8810 	msr	PRIMASK, r3
}
 8014e2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8014e2c:	693b      	ldr	r3, [r7, #16]
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	371c      	adds	r7, #28
 8014e32:	46bd      	mov	sp, r7
 8014e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop
 8014e3c:	24014f1c 	.word	0x24014f1c

08014e40 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8014e44:	4b12      	ldr	r3, [pc, #72]	; (8014e90 <_tx_thread_initialize+0x50>)
 8014e46:	2200      	movs	r2, #0
 8014e48:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8014e4a:	4b12      	ldr	r3, [pc, #72]	; (8014e94 <_tx_thread_initialize+0x54>)
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	4b11      	ldr	r3, [pc, #68]	; (8014e98 <_tx_thread_initialize+0x58>)
 8014e52:	2200      	movs	r2, #0
 8014e54:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014e56:	4b11      	ldr	r3, [pc, #68]	; (8014e9c <_tx_thread_initialize+0x5c>)
 8014e58:	2220      	movs	r2, #32
 8014e5a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8014e5c:	2280      	movs	r2, #128	; 0x80
 8014e5e:	2100      	movs	r1, #0
 8014e60:	480f      	ldr	r0, [pc, #60]	; (8014ea0 <_tx_thread_initialize+0x60>)
 8014e62:	f001 fbb7 	bl	80165d4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014e66:	4b0f      	ldr	r3, [pc, #60]	; (8014ea4 <_tx_thread_initialize+0x64>)
 8014e68:	2200      	movs	r2, #0
 8014e6a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8014e6c:	4b0e      	ldr	r3, [pc, #56]	; (8014ea8 <_tx_thread_initialize+0x68>)
 8014e6e:	2200      	movs	r2, #0
 8014e70:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8014e72:	4b0e      	ldr	r3, [pc, #56]	; (8014eac <_tx_thread_initialize+0x6c>)
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014e78:	4b0d      	ldr	r3, [pc, #52]	; (8014eb0 <_tx_thread_initialize+0x70>)
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8014e7e:	4b0d      	ldr	r3, [pc, #52]	; (8014eb4 <_tx_thread_initialize+0x74>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8014e86:	4a0b      	ldr	r2, [pc, #44]	; (8014eb4 <_tx_thread_initialize+0x74>)
 8014e88:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8014e8a:	bf00      	nop
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	24014f1c 	.word	0x24014f1c
 8014e94:	24014f20 	.word	0x24014f20
 8014e98:	24014f2c 	.word	0x24014f2c
 8014e9c:	24014f30 	.word	0x24014f30
 8014ea0:	24014f34 	.word	0x24014f34
 8014ea4:	24014f24 	.word	0x24014f24
 8014ea8:	24014f28 	.word	0x24014f28
 8014eac:	24014fb4 	.word	0x24014fb4
 8014eb0:	24014fb8 	.word	0x24014fb8
 8014eb4:	24014fbc 	.word	0x24014fbc

08014eb8 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b08c      	sub	sp, #48	; 0x30
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	60b9      	str	r1, [r7, #8]
 8014ec2:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ece:	68ba      	ldr	r2, [r7, #8]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d004      	beq.n	8014ede <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d001      	beq.n	8014ede <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8014eda:	2300      	movs	r3, #0
 8014edc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ede:	f3ef 8310 	mrs	r3, PRIMASK
 8014ee2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014ee6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ee8:	b672      	cpsid	i
    return(int_posture);
 8014eea:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014eec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ef4:	68ba      	ldr	r2, [r7, #8]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d902      	bls.n	8014f00 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8014efa:	2318      	movs	r3, #24
 8014efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8014efe:	e03e      	b.n	8014f7e <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	68ba      	ldr	r2, [r7, #8]
 8014f0e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014f18:	68ba      	ldr	r2, [r7, #8]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d203      	bcs.n	8014f26 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	68ba      	ldr	r2, [r7, #8]
 8014f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8014f24:	e004      	b.n	8014f30 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f34:	4b17      	ldr	r3, [pc, #92]	; (8014f94 <_tx_thread_preemption_change+0xdc>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d920      	bls.n	8014f7e <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8014f3c:	4b15      	ldr	r3, [pc, #84]	; (8014f94 <_tx_thread_preemption_change+0xdc>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d91b      	bls.n	8014f7e <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8014f46:	4b14      	ldr	r3, [pc, #80]	; (8014f98 <_tx_thread_preemption_change+0xe0>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d116      	bne.n	8014f7e <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014f50:	4b10      	ldr	r3, [pc, #64]	; (8014f94 <_tx_thread_preemption_change+0xdc>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	4a11      	ldr	r2, [pc, #68]	; (8014f9c <_tx_thread_preemption_change+0xe4>)
 8014f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f5a:	4a0f      	ldr	r2, [pc, #60]	; (8014f98 <_tx_thread_preemption_change+0xe0>)
 8014f5c:	6013      	str	r3, [r2, #0]
 8014f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f60:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	f383 8810 	msr	PRIMASK, r3
}
 8014f68:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8014f6a:	f000 f8e5 	bl	8015138 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8014f72:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014f74:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014f76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f78:	b672      	cpsid	i
    return(int_posture);
 8014f7a:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8014f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	f383 8810 	msr	PRIMASK, r3
}
 8014f88:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8014f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3730      	adds	r7, #48	; 0x30
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	24014f30 	.word	0x24014f30
 8014f98:	24014f20 	.word	0x24014f20
 8014f9c:	24014f34 	.word	0x24014f34

08014fa0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b088      	sub	sp, #32
 8014fa4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014fa6:	4b21      	ldr	r3, [pc, #132]	; (801502c <_tx_thread_shell_entry+0x8c>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fb0:	69fa      	ldr	r2, [r7, #28]
 8014fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014fb4:	4610      	mov	r0, r2
 8014fb6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014fb8:	4b1d      	ldr	r3, [pc, #116]	; (8015030 <_tx_thread_shell_entry+0x90>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d003      	beq.n	8014fc8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8014fc0:	4b1b      	ldr	r3, [pc, #108]	; (8015030 <_tx_thread_shell_entry+0x90>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	69f8      	ldr	r0, [r7, #28]
 8014fc6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8014fcc:	607b      	str	r3, [r7, #4]
    return(posture);
 8014fce:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014fd0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fd2:	b672      	cpsid	i
    return(int_posture);
 8014fd4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8014fd6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	2201      	movs	r2, #1
 8014fdc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014fea:	4b12      	ldr	r3, [pc, #72]	; (8015034 <_tx_thread_shell_entry+0x94>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	4a10      	ldr	r2, [pc, #64]	; (8015034 <_tx_thread_shell_entry+0x94>)
 8014ff2:	6013      	str	r3, [r2, #0]
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	f383 8810 	msr	PRIMASK, r3
}
 8014ffe:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8015000:	f3ef 8314 	mrs	r3, CONTROL
 8015004:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8015006:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8015008:	617b      	str	r3, [r7, #20]
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	f023 0304 	bic.w	r3, r3, #4
 8015010:	617b      	str	r3, [r7, #20]
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	f383 8814 	msr	CONTROL, r3
}
 801501c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801501e:	69f8      	ldr	r0, [r7, #28]
 8015020:	f000 f9c4 	bl	80153ac <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8015024:	bf00      	nop
 8015026:	3720      	adds	r7, #32
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}
 801502c:	24014f1c 	.word	0x24014f1c
 8015030:	24014fb8 	.word	0x24014fb8
 8015034:	24014fb4 	.word	0x24014fb4

08015038 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b08e      	sub	sp, #56	; 0x38
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015040:	f3ef 8310 	mrs	r3, PRIMASK
 8015044:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015046:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015048:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801504a:	b672      	cpsid	i
    return(int_posture);
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801504e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015050:	4b35      	ldr	r3, [pc, #212]	; (8015128 <_tx_thread_sleep+0xf0>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8015056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015058:	2b00      	cmp	r3, #0
 801505a:	d108      	bne.n	801506e <_tx_thread_sleep+0x36>
 801505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015060:	6a3b      	ldr	r3, [r7, #32]
 8015062:	f383 8810 	msr	PRIMASK, r3
}
 8015066:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8015068:	2313      	movs	r3, #19
 801506a:	637b      	str	r3, [r7, #52]	; 0x34
 801506c:	e056      	b.n	801511c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801506e:	f3ef 8305 	mrs	r3, IPSR
 8015072:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015074:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015076:	4b2d      	ldr	r3, [pc, #180]	; (801512c <_tx_thread_sleep+0xf4>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4313      	orrs	r3, r2
 801507c:	2b00      	cmp	r3, #0
 801507e:	d008      	beq.n	8015092 <_tx_thread_sleep+0x5a>
 8015080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015082:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015084:	69bb      	ldr	r3, [r7, #24]
 8015086:	f383 8810 	msr	PRIMASK, r3
}
 801508a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801508c:	2313      	movs	r3, #19
 801508e:	637b      	str	r3, [r7, #52]	; 0x34
 8015090:	e044      	b.n	801511c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8015092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015094:	4a26      	ldr	r2, [pc, #152]	; (8015130 <_tx_thread_sleep+0xf8>)
 8015096:	4293      	cmp	r3, r2
 8015098:	d108      	bne.n	80150ac <_tx_thread_sleep+0x74>
 801509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	f383 8810 	msr	PRIMASK, r3
}
 80150a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80150a6:	2313      	movs	r3, #19
 80150a8:	637b      	str	r3, [r7, #52]	; 0x34
 80150aa:	e037      	b.n	801511c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d108      	bne.n	80150c4 <_tx_thread_sleep+0x8c>
 80150b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	f383 8810 	msr	PRIMASK, r3
}
 80150bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80150be:	2300      	movs	r3, #0
 80150c0:	637b      	str	r3, [r7, #52]	; 0x34
 80150c2:	e02b      	b.n	801511c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80150c4:	4b1b      	ldr	r3, [pc, #108]	; (8015134 <_tx_thread_sleep+0xfc>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d008      	beq.n	80150de <_tx_thread_sleep+0xa6>
 80150cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f383 8810 	msr	PRIMASK, r3
}
 80150d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80150d8:	2313      	movs	r3, #19
 80150da:	637b      	str	r3, [r7, #52]	; 0x34
 80150dc:	e01e      	b.n	801511c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80150de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e0:	2204      	movs	r2, #4
 80150e2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80150e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e6:	2201      	movs	r2, #1
 80150e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80150ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ec:	2200      	movs	r2, #0
 80150ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80150f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f4:	687a      	ldr	r2, [r7, #4]
 80150f6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80150f8:	4b0e      	ldr	r3, [pc, #56]	; (8015134 <_tx_thread_sleep+0xfc>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3301      	adds	r3, #1
 80150fe:	4a0d      	ldr	r2, [pc, #52]	; (8015134 <_tx_thread_sleep+0xfc>)
 8015100:	6013      	str	r3, [r2, #0]
 8015102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015104:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	f383 8810 	msr	PRIMASK, r3
}
 801510c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801510e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015110:	f000 f94c 	bl	80153ac <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8015114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801511a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801511e:	4618      	mov	r0, r3
 8015120:	3738      	adds	r7, #56	; 0x38
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	24014f1c 	.word	0x24014f1c
 801512c:	2400006c 	.word	0x2400006c
 8015130:	24015064 	.word	0x24015064
 8015134:	24014fb4 	.word	0x24014fb4

08015138 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015138:	b480      	push	{r7}
 801513a:	b089      	sub	sp, #36	; 0x24
 801513c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801513e:	4b17      	ldr	r3, [pc, #92]	; (801519c <_tx_thread_system_preempt_check+0x64>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d121      	bne.n	801518e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801514a:	4b15      	ldr	r3, [pc, #84]	; (80151a0 <_tx_thread_system_preempt_check+0x68>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8015150:	4b14      	ldr	r3, [pc, #80]	; (80151a4 <_tx_thread_system_preempt_check+0x6c>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8015156:	69ba      	ldr	r2, [r7, #24]
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	429a      	cmp	r2, r3
 801515c:	d017      	beq.n	801518e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801515e:	4b12      	ldr	r3, [pc, #72]	; (80151a8 <_tx_thread_system_preempt_check+0x70>)
 8015160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015164:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015166:	f3ef 8305 	mrs	r3, IPSR
 801516a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801516c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801516e:	2b00      	cmp	r3, #0
 8015170:	d10c      	bne.n	801518c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015172:	f3ef 8310 	mrs	r3, PRIMASK
 8015176:	60fb      	str	r3, [r7, #12]
    return(posture);
 8015178:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801517a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801517c:	b662      	cpsie	i
}
 801517e:	bf00      	nop
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f383 8810 	msr	PRIMASK, r3
}
 801518a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 801518c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801518e:	bf00      	nop
 8015190:	3724      	adds	r7, #36	; 0x24
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr
 801519a:	bf00      	nop
 801519c:	24014fb4 	.word	0x24014fb4
 80151a0:	24014f1c 	.word	0x24014f1c
 80151a4:	24014f20 	.word	0x24014f20
 80151a8:	e000ed04 	.word	0xe000ed04

080151ac <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b096      	sub	sp, #88	; 0x58
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151b4:	f3ef 8310 	mrs	r3, PRIMASK
 80151b8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80151ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80151bc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80151be:	b672      	cpsid	i
    return(int_posture);
 80151c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80151c2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d005      	beq.n	80151d8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	334c      	adds	r3, #76	; 0x4c
 80151d0:	4618      	mov	r0, r3
 80151d2:	f000 fc13 	bl	80159fc <_tx_timer_system_deactivate>
 80151d6:	e002      	b.n	80151de <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2200      	movs	r2, #0
 80151dc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80151de:	4b6c      	ldr	r3, [pc, #432]	; (8015390 <_tx_thread_system_resume+0x1e4>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	3b01      	subs	r3, #1
 80151e4:	4a6a      	ldr	r2, [pc, #424]	; (8015390 <_tx_thread_system_resume+0x1e4>)
 80151e6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f040 8083 	bne.w	80152f8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f000 8097 	beq.w	801532a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015200:	2b00      	cmp	r3, #0
 8015202:	d172      	bne.n	80152ea <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2200      	movs	r2, #0
 8015208:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801520e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8015210:	4a60      	ldr	r2, [pc, #384]	; (8015394 <_tx_thread_system_resume+0x1e8>)
 8015212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015218:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801521a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801521c:	2b00      	cmp	r3, #0
 801521e:	d154      	bne.n	80152ca <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8015220:	495c      	ldr	r1, [pc, #368]	; (8015394 <_tx_thread_system_resume+0x1e8>)
 8015222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	687a      	ldr	r2, [r7, #4]
 801522e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8015236:	2201      	movs	r2, #1
 8015238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801523a:	fa02 f303 	lsl.w	r3, r2, r3
 801523e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8015240:	4b55      	ldr	r3, [pc, #340]	; (8015398 <_tx_thread_system_resume+0x1ec>)
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015246:	4313      	orrs	r3, r2
 8015248:	4a53      	ldr	r2, [pc, #332]	; (8015398 <_tx_thread_system_resume+0x1ec>)
 801524a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801524c:	4b53      	ldr	r3, [pc, #332]	; (801539c <_tx_thread_system_resume+0x1f0>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015252:	429a      	cmp	r2, r3
 8015254:	d269      	bcs.n	801532a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8015256:	4a51      	ldr	r2, [pc, #324]	; (801539c <_tx_thread_system_resume+0x1f0>)
 8015258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801525a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 801525c:	4b50      	ldr	r3, [pc, #320]	; (80153a0 <_tx_thread_system_resume+0x1f4>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8015262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015264:	2b00      	cmp	r3, #0
 8015266:	d103      	bne.n	8015270 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8015268:	4a4d      	ldr	r2, [pc, #308]	; (80153a0 <_tx_thread_system_resume+0x1f4>)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6013      	str	r3, [r2, #0]
 801526e:	e05c      	b.n	801532a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8015270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015276:	429a      	cmp	r2, r3
 8015278:	d257      	bcs.n	801532a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801527a:	4a49      	ldr	r2, [pc, #292]	; (80153a0 <_tx_thread_system_resume+0x1f4>)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6013      	str	r3, [r2, #0]
 8015280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015282:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015286:	f383 8810 	msr	PRIMASK, r3
}
 801528a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801528c:	4b40      	ldr	r3, [pc, #256]	; (8015390 <_tx_thread_system_resume+0x1e4>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8015292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015294:	2b00      	cmp	r3, #0
 8015296:	d174      	bne.n	8015382 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015298:	4b42      	ldr	r3, [pc, #264]	; (80153a4 <_tx_thread_system_resume+0x1f8>)
 801529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801529e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152a0:	f3ef 8305 	mrs	r3, IPSR
 80152a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10c      	bne.n	80152c6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80152ac:	f3ef 8310 	mrs	r3, PRIMASK
 80152b0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80152b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80152b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80152b6:	b662      	cpsie	i
}
 80152b8:	bf00      	nop
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	f383 8810 	msr	PRIMASK, r3
}
 80152c4:	bf00      	nop
}
 80152c6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80152c8:	e05b      	b.n	8015382 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80152ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ce:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80152d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80152d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152e0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152e6:	621a      	str	r2, [r3, #32]
 80152e8:	e01f      	b.n	801532a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2200      	movs	r2, #0
 80152ee:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2203      	movs	r2, #3
 80152f4:	631a      	str	r2, [r3, #48]	; 0x30
 80152f6:	e018      	b.n	801532a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152fc:	2b01      	cmp	r3, #1
 80152fe:	d014      	beq.n	801532a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015304:	2b02      	cmp	r3, #2
 8015306:	d010      	beq.n	801532a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801530c:	2b00      	cmp	r3, #0
 801530e:	d106      	bne.n	801531e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2200      	movs	r2, #0
 8015314:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	631a      	str	r2, [r3, #48]	; 0x30
 801531c:	e005      	b.n	801532a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2200      	movs	r2, #0
 8015322:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2203      	movs	r2, #3
 8015328:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801532a:	4b1f      	ldr	r3, [pc, #124]	; (80153a8 <_tx_thread_system_resume+0x1fc>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015332:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	f383 8810 	msr	PRIMASK, r3
}
 801533a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801533c:	4b18      	ldr	r3, [pc, #96]	; (80153a0 <_tx_thread_system_resume+0x1f4>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015342:	429a      	cmp	r2, r3
 8015344:	d020      	beq.n	8015388 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015346:	4b12      	ldr	r3, [pc, #72]	; (8015390 <_tx_thread_system_resume+0x1e4>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 801534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801534e:	2b00      	cmp	r3, #0
 8015350:	d11a      	bne.n	8015388 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015352:	4b14      	ldr	r3, [pc, #80]	; (80153a4 <_tx_thread_system_resume+0x1f8>)
 8015354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015358:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801535a:	f3ef 8305 	mrs	r3, IPSR
 801535e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015360:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8015362:	2b00      	cmp	r3, #0
 8015364:	d10f      	bne.n	8015386 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015366:	f3ef 8310 	mrs	r3, PRIMASK
 801536a:	613b      	str	r3, [r7, #16]
    return(posture);
 801536c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801536e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015370:	b662      	cpsie	i
}
 8015372:	bf00      	nop
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	f383 8810 	msr	PRIMASK, r3
}
 801537e:	bf00      	nop
}
 8015380:	e001      	b.n	8015386 <_tx_thread_system_resume+0x1da>
                                return;
 8015382:	bf00      	nop
 8015384:	e000      	b.n	8015388 <_tx_thread_system_resume+0x1dc>
 8015386:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8015388:	3758      	adds	r7, #88	; 0x58
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	24014fb4 	.word	0x24014fb4
 8015394:	24014f34 	.word	0x24014f34
 8015398:	24014f2c 	.word	0x24014f2c
 801539c:	24014f30 	.word	0x24014f30
 80153a0:	24014f20 	.word	0x24014f20
 80153a4:	e000ed04 	.word	0xe000ed04
 80153a8:	24014f1c 	.word	0x24014f1c

080153ac <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b09e      	sub	sp, #120	; 0x78
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80153b4:	4b81      	ldr	r3, [pc, #516]	; (80155bc <_tx_thread_system_suspend+0x210>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153ba:	f3ef 8310 	mrs	r3, PRIMASK
 80153be:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80153c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80153c2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80153c4:	b672      	cpsid	i
    return(int_posture);
 80153c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80153c8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d112      	bne.n	80153f8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153d6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80153d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d008      	beq.n	80153f0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80153de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153e4:	d004      	beq.n	80153f0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	334c      	adds	r3, #76	; 0x4c
 80153ea:	4618      	mov	r0, r3
 80153ec:	f000 faa4 	bl	8015938 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	69db      	ldr	r3, [r3, #28]
 80153f4:	4a72      	ldr	r2, [pc, #456]	; (80155c0 <_tx_thread_system_suspend+0x214>)
 80153f6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80153f8:	4b72      	ldr	r3, [pc, #456]	; (80155c4 <_tx_thread_system_suspend+0x218>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	3b01      	subs	r3, #1
 80153fe:	4a71      	ldr	r2, [pc, #452]	; (80155c4 <_tx_thread_system_suspend+0x218>)
 8015400:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015406:	2b01      	cmp	r3, #1
 8015408:	f040 80a6 	bne.w	8015558 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015416:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6a1b      	ldr	r3, [r3, #32]
 801541c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801541e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	429a      	cmp	r2, r3
 8015424:	d015      	beq.n	8015452 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801542c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801542e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015430:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8015432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015434:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015436:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015438:	4a63      	ldr	r2, [pc, #396]	; (80155c8 <_tx_thread_system_suspend+0x21c>)
 801543a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801543c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	429a      	cmp	r2, r3
 8015444:	d157      	bne.n	80154f6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8015446:	4960      	ldr	r1, [pc, #384]	; (80155c8 <_tx_thread_system_suspend+0x21c>)
 8015448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801544a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801544c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015450:	e051      	b.n	80154f6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8015452:	4a5d      	ldr	r2, [pc, #372]	; (80155c8 <_tx_thread_system_suspend+0x21c>)
 8015454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015456:	2100      	movs	r1, #0
 8015458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 801545c:	2201      	movs	r2, #1
 801545e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015460:	fa02 f303 	lsl.w	r3, r2, r3
 8015464:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8015466:	4b59      	ldr	r3, [pc, #356]	; (80155cc <_tx_thread_system_suspend+0x220>)
 8015468:	681a      	ldr	r2, [r3, #0]
 801546a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801546c:	43db      	mvns	r3, r3
 801546e:	4013      	ands	r3, r2
 8015470:	4a56      	ldr	r2, [pc, #344]	; (80155cc <_tx_thread_system_suspend+0x220>)
 8015472:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8015474:	2300      	movs	r3, #0
 8015476:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8015478:	4b54      	ldr	r3, [pc, #336]	; (80155cc <_tx_thread_system_suspend+0x220>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801547e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015480:	2b00      	cmp	r3, #0
 8015482:	d12b      	bne.n	80154dc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015484:	4b52      	ldr	r3, [pc, #328]	; (80155d0 <_tx_thread_system_suspend+0x224>)
 8015486:	2220      	movs	r2, #32
 8015488:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801548a:	4b52      	ldr	r3, [pc, #328]	; (80155d4 <_tx_thread_system_suspend+0x228>)
 801548c:	2200      	movs	r2, #0
 801548e:	601a      	str	r2, [r3, #0]
 8015490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015492:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015496:	f383 8810 	msr	PRIMASK, r3
}
 801549a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801549c:	4b49      	ldr	r3, [pc, #292]	; (80155c4 <_tx_thread_system_suspend+0x218>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80154a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f040 8081 	bne.w	80155ac <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80154aa:	4b4b      	ldr	r3, [pc, #300]	; (80155d8 <_tx_thread_system_suspend+0x22c>)
 80154ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154b0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154b2:	f3ef 8305 	mrs	r3, IPSR
 80154b6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80154b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d10c      	bne.n	80154d8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154be:	f3ef 8310 	mrs	r3, PRIMASK
 80154c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80154c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80154c6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80154c8:	b662      	cpsie	i
}
 80154ca:	bf00      	nop
 80154cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ce:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154d2:	f383 8810 	msr	PRIMASK, r3
}
 80154d6:	bf00      	nop
}
 80154d8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80154da:	e067      	b.n	80155ac <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80154dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154de:	fa93 f3a3 	rbit	r3, r3
 80154e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80154e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154e6:	fab3 f383 	clz	r3, r3
 80154ea:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80154ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80154ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154f0:	4413      	add	r3, r2
 80154f2:	4a37      	ldr	r2, [pc, #220]	; (80155d0 <_tx_thread_system_suspend+0x224>)
 80154f4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80154f6:	4b37      	ldr	r3, [pc, #220]	; (80155d4 <_tx_thread_system_suspend+0x228>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	d12b      	bne.n	8015558 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015500:	4b33      	ldr	r3, [pc, #204]	; (80155d0 <_tx_thread_system_suspend+0x224>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	4a30      	ldr	r2, [pc, #192]	; (80155c8 <_tx_thread_system_suspend+0x21c>)
 8015506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801550a:	4a32      	ldr	r2, [pc, #200]	; (80155d4 <_tx_thread_system_suspend+0x228>)
 801550c:	6013      	str	r3, [r2, #0]
 801550e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015510:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015514:	f383 8810 	msr	PRIMASK, r3
}
 8015518:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801551a:	4b2a      	ldr	r3, [pc, #168]	; (80155c4 <_tx_thread_system_suspend+0x218>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8015520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015522:	2b00      	cmp	r3, #0
 8015524:	d144      	bne.n	80155b0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015526:	4b2c      	ldr	r3, [pc, #176]	; (80155d8 <_tx_thread_system_suspend+0x22c>)
 8015528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801552c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801552e:	f3ef 8305 	mrs	r3, IPSR
 8015532:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8015536:	2b00      	cmp	r3, #0
 8015538:	d10c      	bne.n	8015554 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801553a:	f3ef 8310 	mrs	r3, PRIMASK
 801553e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015540:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8015542:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015544:	b662      	cpsie	i
}
 8015546:	bf00      	nop
 8015548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801554c:	6a3b      	ldr	r3, [r7, #32]
 801554e:	f383 8810 	msr	PRIMASK, r3
}
 8015552:	bf00      	nop
}
 8015554:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8015556:	e02b      	b.n	80155b0 <_tx_thread_system_suspend+0x204>
 8015558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801555a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	f383 8810 	msr	PRIMASK, r3
}
 8015562:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015564:	4b1b      	ldr	r3, [pc, #108]	; (80155d4 <_tx_thread_system_suspend+0x228>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801556a:	429a      	cmp	r2, r3
 801556c:	d022      	beq.n	80155b4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801556e:	4b15      	ldr	r3, [pc, #84]	; (80155c4 <_tx_thread_system_suspend+0x218>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8015574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015576:	2b00      	cmp	r3, #0
 8015578:	d11c      	bne.n	80155b4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801557a:	4b17      	ldr	r3, [pc, #92]	; (80155d8 <_tx_thread_system_suspend+0x22c>)
 801557c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015580:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015582:	f3ef 8305 	mrs	r3, IPSR
 8015586:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015588:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10c      	bne.n	80155a8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801558e:	f3ef 8310 	mrs	r3, PRIMASK
 8015592:	617b      	str	r3, [r7, #20]
    return(posture);
 8015594:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8015596:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015598:	b662      	cpsie	i
}
 801559a:	bf00      	nop
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f383 8810 	msr	PRIMASK, r3
}
 80155a6:	bf00      	nop
}
 80155a8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80155aa:	e003      	b.n	80155b4 <_tx_thread_system_suspend+0x208>
                return;
 80155ac:	bf00      	nop
 80155ae:	e002      	b.n	80155b6 <_tx_thread_system_suspend+0x20a>
            return;
 80155b0:	bf00      	nop
 80155b2:	e000      	b.n	80155b6 <_tx_thread_system_suspend+0x20a>
    return;
 80155b4:	bf00      	nop
}
 80155b6:	3778      	adds	r7, #120	; 0x78
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	24014f1c 	.word	0x24014f1c
 80155c0:	24015520 	.word	0x24015520
 80155c4:	24014fb4 	.word	0x24014fb4
 80155c8:	24014f34 	.word	0x24014f34
 80155cc:	24014f2c 	.word	0x24014f2c
 80155d0:	24014f30 	.word	0x24014f30
 80155d4:	24014f20 	.word	0x24014f20
 80155d8:	e000ed04 	.word	0xe000ed04

080155dc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80155dc:	b480      	push	{r7}
 80155de:	b087      	sub	sp, #28
 80155e0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80155e2:	4b21      	ldr	r3, [pc, #132]	; (8015668 <_tx_thread_time_slice+0x8c>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80155e8:	f3ef 8310 	mrs	r3, PRIMASK
 80155ec:	60fb      	str	r3, [r7, #12]
    return(posture);
 80155ee:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80155f0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80155f2:	b672      	cpsid	i
    return(int_posture);
 80155f4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80155f6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80155f8:	4b1c      	ldr	r3, [pc, #112]	; (801566c <_tx_thread_time_slice+0x90>)
 80155fa:	2200      	movs	r2, #0
 80155fc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d024      	beq.n	801564e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015608:	2b00      	cmp	r3, #0
 801560a:	d120      	bne.n	801564e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	69da      	ldr	r2, [r3, #28]
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	699b      	ldr	r3, [r3, #24]
 8015618:	4a15      	ldr	r2, [pc, #84]	; (8015670 <_tx_thread_time_slice+0x94>)
 801561a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	6a1b      	ldr	r3, [r3, #32]
 8015620:	697a      	ldr	r2, [r7, #20]
 8015622:	429a      	cmp	r2, r3
 8015624:	d013      	beq.n	801564e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801562e:	429a      	cmp	r2, r3
 8015630:	d10d      	bne.n	801564e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015636:	697a      	ldr	r2, [r7, #20]
 8015638:	6a12      	ldr	r2, [r2, #32]
 801563a:	490e      	ldr	r1, [pc, #56]	; (8015674 <_tx_thread_time_slice+0x98>)
 801563c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015640:	4b0d      	ldr	r3, [pc, #52]	; (8015678 <_tx_thread_time_slice+0x9c>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	4a0b      	ldr	r2, [pc, #44]	; (8015674 <_tx_thread_time_slice+0x98>)
 8015646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801564a:	4a0c      	ldr	r2, [pc, #48]	; (801567c <_tx_thread_time_slice+0xa0>)
 801564c:	6013      	str	r3, [r2, #0]
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f383 8810 	msr	PRIMASK, r3
}
 8015658:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801565a:	bf00      	nop
 801565c:	371c      	adds	r7, #28
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	24014f1c 	.word	0x24014f1c
 801566c:	24014fc4 	.word	0x24014fc4
 8015670:	24015520 	.word	0x24015520
 8015674:	24014f34 	.word	0x24014f34
 8015678:	24014f30 	.word	0x24014f30
 801567c:	24014f20 	.word	0x24014f20

08015680 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b08a      	sub	sp, #40	; 0x28
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801568c:	f3ef 8310 	mrs	r3, PRIMASK
 8015690:	617b      	str	r3, [r7, #20]
    return(posture);
 8015692:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015694:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015696:	b672      	cpsid	i
    return(int_posture);
 8015698:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801569a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156a0:	2b04      	cmp	r3, #4
 80156a2:	d10e      	bne.n	80156c2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80156a4:	4b13      	ldr	r3, [pc, #76]	; (80156f4 <_tx_thread_timeout+0x74>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	3301      	adds	r3, #1
 80156aa:	4a12      	ldr	r2, [pc, #72]	; (80156f4 <_tx_thread_timeout+0x74>)
 80156ac:	6013      	str	r3, [r2, #0]
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	f383 8810 	msr	PRIMASK, r3
}
 80156b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80156ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156bc:	f7ff fd76 	bl	80151ac <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80156c0:	e013      	b.n	80156ea <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80156c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156c6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80156ce:	61bb      	str	r3, [r7, #24]
 80156d0:	6a3b      	ldr	r3, [r7, #32]
 80156d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	f383 8810 	msr	PRIMASK, r3
}
 80156da:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d003      	beq.n	80156ea <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	69b9      	ldr	r1, [r7, #24]
 80156e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156e8:	4798      	blx	r3
}
 80156ea:	bf00      	nop
 80156ec:	3728      	adds	r7, #40	; 0x28
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	24014fb4 	.word	0x24014fb4

080156f8 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b087      	sub	sp, #28
 80156fc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156fe:	f3ef 8310 	mrs	r3, PRIMASK
 8015702:	60bb      	str	r3, [r7, #8]
    return(posture);
 8015704:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8015706:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015708:	b672      	cpsid	i
    return(int_posture);
 801570a:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 801570c:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 801570e:	4b08      	ldr	r3, [pc, #32]	; (8015730 <_tx_time_get+0x38>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	613b      	str	r3, [r7, #16]
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	f383 8810 	msr	PRIMASK, r3
}
 801571e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8015720:	693b      	ldr	r3, [r7, #16]
}
 8015722:	4618      	mov	r0, r3
 8015724:	371c      	adds	r7, #28
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr
 801572e:	bf00      	nop
 8015730:	24014fc0 	.word	0x24014fc0

08015734 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b08a      	sub	sp, #40	; 0x28
 8015738:	af00      	add	r7, sp, #0
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8015742:	222c      	movs	r2, #44	; 0x2c
 8015744:	2100      	movs	r1, #0
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f000 ff44 	bl	80165d4 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	68ba      	ldr	r2, [r7, #8]
 8015750:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015756:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801575c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801576a:	f3ef 8310 	mrs	r3, PRIMASK
 801576e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8015770:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8015772:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015774:	b672      	cpsid	i
    return(int_posture);
 8015776:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8015778:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	4a1c      	ldr	r2, [pc, #112]	; (80157f0 <_tx_timer_create+0xbc>)
 801577e:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8015780:	4b1c      	ldr	r3, [pc, #112]	; (80157f4 <_tx_timer_create+0xc0>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d109      	bne.n	801579c <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8015788:	4a1b      	ldr	r2, [pc, #108]	; (80157f8 <_tx_timer_create+0xc4>)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	68fa      	ldr	r2, [r7, #12]
 8015792:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	68fa      	ldr	r2, [r7, #12]
 8015798:	629a      	str	r2, [r3, #40]	; 0x28
 801579a:	e011      	b.n	80157c0 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 801579c:	4b16      	ldr	r3, [pc, #88]	; (80157f8 <_tx_timer_create+0xc4>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 80157a2:	6a3b      	ldr	r3, [r7, #32]
 80157a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157a6:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 80157a8:	6a3b      	ldr	r3, [r7, #32]
 80157aa:	68fa      	ldr	r2, [r7, #12]
 80157ac:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	68fa      	ldr	r2, [r7, #12]
 80157b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	69fa      	ldr	r2, [r7, #28]
 80157b8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	6a3a      	ldr	r2, [r7, #32]
 80157be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 80157c0:	4b0c      	ldr	r3, [pc, #48]	; (80157f4 <_tx_timer_create+0xc0>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	3301      	adds	r3, #1
 80157c6:	4a0b      	ldr	r2, [pc, #44]	; (80157f4 <_tx_timer_create+0xc0>)
 80157c8:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 80157ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d104      	bne.n	80157da <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	3308      	adds	r3, #8
 80157d4:	4618      	mov	r0, r3
 80157d6:	f000 f8af 	bl	8015938 <_tx_timer_system_activate>
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	f383 8810 	msr	PRIMASK, r3
}
 80157e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80157e6:	2300      	movs	r3, #0
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3728      	adds	r7, #40	; 0x28
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	4154494d 	.word	0x4154494d
 80157f4:	2401505c 	.word	0x2401505c
 80157f8:	24015058 	.word	0x24015058

080157fc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015802:	f3ef 8310 	mrs	r3, PRIMASK
 8015806:	607b      	str	r3, [r7, #4]
    return(posture);
 8015808:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801580a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801580c:	b672      	cpsid	i
    return(int_posture);
 801580e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8015810:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8015812:	4b09      	ldr	r3, [pc, #36]	; (8015838 <_tx_timer_expiration_process+0x3c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	3301      	adds	r3, #1
 8015818:	4a07      	ldr	r2, [pc, #28]	; (8015838 <_tx_timer_expiration_process+0x3c>)
 801581a:	6013      	str	r3, [r2, #0]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	f383 8810 	msr	PRIMASK, r3
}
 8015826:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8015828:	4804      	ldr	r0, [pc, #16]	; (801583c <_tx_timer_expiration_process+0x40>)
 801582a:	f7ff fcbf 	bl	80151ac <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801582e:	bf00      	nop
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	24014fb4 	.word	0x24014fb4
 801583c:	24015064 	.word	0x24015064

08015840 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015840:	b590      	push	{r4, r7, lr}
 8015842:	b089      	sub	sp, #36	; 0x24
 8015844:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8015846:	4b28      	ldr	r3, [pc, #160]	; (80158e8 <_tx_timer_initialize+0xa8>)
 8015848:	2200      	movs	r2, #0
 801584a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801584c:	4b27      	ldr	r3, [pc, #156]	; (80158ec <_tx_timer_initialize+0xac>)
 801584e:	2200      	movs	r2, #0
 8015850:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015852:	4b27      	ldr	r3, [pc, #156]	; (80158f0 <_tx_timer_initialize+0xb0>)
 8015854:	2200      	movs	r2, #0
 8015856:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8015858:	4b26      	ldr	r3, [pc, #152]	; (80158f4 <_tx_timer_initialize+0xb4>)
 801585a:	2200      	movs	r2, #0
 801585c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801585e:	4b26      	ldr	r3, [pc, #152]	; (80158f8 <_tx_timer_initialize+0xb8>)
 8015860:	2200      	movs	r2, #0
 8015862:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015864:	2280      	movs	r2, #128	; 0x80
 8015866:	2100      	movs	r1, #0
 8015868:	4824      	ldr	r0, [pc, #144]	; (80158fc <_tx_timer_initialize+0xbc>)
 801586a:	f000 feb3 	bl	80165d4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801586e:	4b24      	ldr	r3, [pc, #144]	; (8015900 <_tx_timer_initialize+0xc0>)
 8015870:	4a22      	ldr	r2, [pc, #136]	; (80158fc <_tx_timer_initialize+0xbc>)
 8015872:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015874:	4b23      	ldr	r3, [pc, #140]	; (8015904 <_tx_timer_initialize+0xc4>)
 8015876:	4a21      	ldr	r2, [pc, #132]	; (80158fc <_tx_timer_initialize+0xbc>)
 8015878:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801587a:	4b23      	ldr	r3, [pc, #140]	; (8015908 <_tx_timer_initialize+0xc8>)
 801587c:	4a23      	ldr	r2, [pc, #140]	; (801590c <_tx_timer_initialize+0xcc>)
 801587e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015880:	4b21      	ldr	r3, [pc, #132]	; (8015908 <_tx_timer_initialize+0xc8>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	3304      	adds	r3, #4
 8015886:	4a20      	ldr	r2, [pc, #128]	; (8015908 <_tx_timer_initialize+0xc8>)
 8015888:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801588a:	4b21      	ldr	r3, [pc, #132]	; (8015910 <_tx_timer_initialize+0xd0>)
 801588c:	4a21      	ldr	r2, [pc, #132]	; (8015914 <_tx_timer_initialize+0xd4>)
 801588e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015890:	4b21      	ldr	r3, [pc, #132]	; (8015918 <_tx_timer_initialize+0xd8>)
 8015892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015896:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8015898:	4b20      	ldr	r3, [pc, #128]	; (801591c <_tx_timer_initialize+0xdc>)
 801589a:	2200      	movs	r2, #0
 801589c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801589e:	4b1c      	ldr	r3, [pc, #112]	; (8015910 <_tx_timer_initialize+0xd0>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	4a1d      	ldr	r2, [pc, #116]	; (8015918 <_tx_timer_initialize+0xd8>)
 80158a4:	6812      	ldr	r2, [r2, #0]
 80158a6:	491d      	ldr	r1, [pc, #116]	; (801591c <_tx_timer_initialize+0xdc>)
 80158a8:	6809      	ldr	r1, [r1, #0]
 80158aa:	481c      	ldr	r0, [pc, #112]	; (801591c <_tx_timer_initialize+0xdc>)
 80158ac:	6800      	ldr	r0, [r0, #0]
 80158ae:	2400      	movs	r4, #0
 80158b0:	9405      	str	r4, [sp, #20]
 80158b2:	2400      	movs	r4, #0
 80158b4:	9404      	str	r4, [sp, #16]
 80158b6:	9003      	str	r0, [sp, #12]
 80158b8:	9102      	str	r1, [sp, #8]
 80158ba:	9201      	str	r2, [sp, #4]
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	4b18      	ldr	r3, [pc, #96]	; (8015920 <_tx_timer_initialize+0xe0>)
 80158c0:	4a18      	ldr	r2, [pc, #96]	; (8015924 <_tx_timer_initialize+0xe4>)
 80158c2:	4919      	ldr	r1, [pc, #100]	; (8015928 <_tx_timer_initialize+0xe8>)
 80158c4:	4819      	ldr	r0, [pc, #100]	; (801592c <_tx_timer_initialize+0xec>)
 80158c6:	f7ff f9a7 	bl	8014c18 <_tx_thread_create>
 80158ca:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d1e5      	bne.n	801589e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80158d2:	4b17      	ldr	r3, [pc, #92]	; (8015930 <_tx_timer_initialize+0xf0>)
 80158d4:	2200      	movs	r2, #0
 80158d6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80158d8:	4b16      	ldr	r3, [pc, #88]	; (8015934 <_tx_timer_initialize+0xf4>)
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80158de:	bf00      	nop
 80158e0:	370c      	adds	r7, #12
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd90      	pop	{r4, r7, pc}
 80158e6:	bf00      	nop
 80158e8:	24014fc0 	.word	0x24014fc0
 80158ec:	24015520 	.word	0x24015520
 80158f0:	24014fc4 	.word	0x24014fc4
 80158f4:	24015054 	.word	0x24015054
 80158f8:	24015060 	.word	0x24015060
 80158fc:	24014fc8 	.word	0x24014fc8
 8015900:	24015048 	.word	0x24015048
 8015904:	24015050 	.word	0x24015050
 8015908:	2401504c 	.word	0x2401504c
 801590c:	24015044 	.word	0x24015044
 8015910:	24015114 	.word	0x24015114
 8015914:	24015120 	.word	0x24015120
 8015918:	24015118 	.word	0x24015118
 801591c:	2401511c 	.word	0x2401511c
 8015920:	4154494d 	.word	0x4154494d
 8015924:	08015a6d 	.word	0x08015a6d
 8015928:	08017728 	.word	0x08017728
 801592c:	24015064 	.word	0x24015064
 8015930:	24015058 	.word	0x24015058
 8015934:	2401505c 	.word	0x2401505c

08015938 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015938:	b480      	push	{r7}
 801593a:	b089      	sub	sp, #36	; 0x24
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d04a      	beq.n	80159e2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015952:	d046      	beq.n	80159e2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	699b      	ldr	r3, [r3, #24]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d142      	bne.n	80159e2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2b20      	cmp	r3, #32
 8015960:	d902      	bls.n	8015968 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8015962:	231f      	movs	r3, #31
 8015964:	61bb      	str	r3, [r7, #24]
 8015966:	e002      	b.n	801596e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	3b01      	subs	r3, #1
 801596c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801596e:	4b20      	ldr	r3, [pc, #128]	; (80159f0 <_tx_timer_system_activate+0xb8>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	4413      	add	r3, r2
 8015978:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801597a:	4b1e      	ldr	r3, [pc, #120]	; (80159f4 <_tx_timer_system_activate+0xbc>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	69fa      	ldr	r2, [r7, #28]
 8015980:	429a      	cmp	r2, r3
 8015982:	d30b      	bcc.n	801599c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015984:	4b1b      	ldr	r3, [pc, #108]	; (80159f4 <_tx_timer_system_activate+0xbc>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	69fa      	ldr	r2, [r7, #28]
 801598a:	1ad3      	subs	r3, r2, r3
 801598c:	109b      	asrs	r3, r3, #2
 801598e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015990:	4b19      	ldr	r3, [pc, #100]	; (80159f8 <_tx_timer_system_activate+0xc0>)
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	009b      	lsls	r3, r3, #2
 8015998:	4413      	add	r3, r2
 801599a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d109      	bne.n	80159b8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	601a      	str	r2, [r3, #0]
 80159b6:	e011      	b.n	80159dc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	695b      	ldr	r3, [r3, #20]
 80159c2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	687a      	ldr	r2, [r7, #4]
 80159ce:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	68ba      	ldr	r2, [r7, #8]
 80159da:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	69fa      	ldr	r2, [r7, #28]
 80159e0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80159e2:	bf00      	nop
 80159e4:	3724      	adds	r7, #36	; 0x24
 80159e6:	46bd      	mov	sp, r7
 80159e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	24015050 	.word	0x24015050
 80159f4:	2401504c 	.word	0x2401504c
 80159f8:	24015048 	.word	0x24015048

080159fc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b087      	sub	sp, #28
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	699b      	ldr	r3, [r3, #24]
 8015a08:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8015a0a:	697b      	ldr	r3, [r7, #20]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d026      	beq.n	8015a5e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	691b      	ldr	r3, [r3, #16]
 8015a14:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d108      	bne.n	8015a30 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d117      	bne.n	8015a58 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	601a      	str	r2, [r3, #0]
 8015a2e:	e013      	b.n	8015a58 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	695b      	ldr	r3, [r3, #20]
 8015a34:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	68fa      	ldr	r2, [r7, #12]
 8015a3a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	693a      	ldr	r2, [r7, #16]
 8015a40:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015a42:	697b      	ldr	r3, [r7, #20]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d105      	bne.n	8015a58 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	697a      	ldr	r2, [r7, #20]
 8015a50:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	693a      	ldr	r2, [r7, #16]
 8015a56:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	619a      	str	r2, [r3, #24]
    }
}
 8015a5e:	bf00      	nop
 8015a60:	371c      	adds	r7, #28
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr
	...

08015a6c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b098      	sub	sp, #96	; 0x60
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015a74:	2300      	movs	r3, #0
 8015a76:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	4a73      	ldr	r2, [pc, #460]	; (8015c48 <_tx_timer_thread_entry+0x1dc>)
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	f040 80de 	bne.w	8015c3e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a82:	f3ef 8310 	mrs	r3, PRIMASK
 8015a86:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015a8c:	b672      	cpsid	i
    return(int_posture);
 8015a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8015a90:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8015a92:	4b6e      	ldr	r3, [pc, #440]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d003      	beq.n	8015aa8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	f107 020c 	add.w	r2, r7, #12
 8015aa6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015aa8:	4b68      	ldr	r3, [pc, #416]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	2200      	movs	r2, #0
 8015aae:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8015ab0:	4b66      	ldr	r3, [pc, #408]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	3304      	adds	r3, #4
 8015ab6:	4a65      	ldr	r2, [pc, #404]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015ab8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015aba:	4b64      	ldr	r3, [pc, #400]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	4b64      	ldr	r3, [pc, #400]	; (8015c50 <_tx_timer_thread_entry+0x1e4>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d103      	bne.n	8015ace <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015ac6:	4b63      	ldr	r3, [pc, #396]	; (8015c54 <_tx_timer_thread_entry+0x1e8>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4a60      	ldr	r2, [pc, #384]	; (8015c4c <_tx_timer_thread_entry+0x1e0>)
 8015acc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8015ace:	4b62      	ldr	r3, [pc, #392]	; (8015c58 <_tx_timer_thread_entry+0x1ec>)
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	601a      	str	r2, [r3, #0]
 8015ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ad6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ada:	f383 8810 	msr	PRIMASK, r3
}
 8015ade:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8015ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8015ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8015ae8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8015aea:	b672      	cpsid	i
    return(int_posture);
 8015aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8015aee:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8015af0:	e07f      	b.n	8015bf2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8015afc:	2300      	movs	r3, #0
 8015afe:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8015b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d102      	bne.n	8015b0e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	60fb      	str	r3, [r7, #12]
 8015b0c:	e00e      	b.n	8015b2c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8015b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b10:	695b      	ldr	r3, [r3, #20]
 8015b12:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b18:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b1e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8015b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b22:	f107 020c 	add.w	r2, r7, #12
 8015b26:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8015b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b2a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8015b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b20      	cmp	r3, #32
 8015b32:	d911      	bls.n	8015b58 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8015b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b3e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8015b40:	2300      	movs	r3, #0
 8015b42:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b46:	f107 0208 	add.w	r2, r7, #8
 8015b4a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b50:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8015b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b54:	60bb      	str	r3, [r7, #8]
 8015b56:	e01a      	b.n	8015b8e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8015b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b66:	685a      	ldr	r2, [r3, #4]
 8015b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b6a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d009      	beq.n	8015b88 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b76:	f107 0208 	add.w	r2, r7, #8
 8015b7a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b80:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8015b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b84:	60bb      	str	r3, [r7, #8]
 8015b86:	e002      	b.n	8015b8e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8015b8e:	4a33      	ldr	r2, [pc, #204]	; (8015c5c <_tx_timer_thread_entry+0x1f0>)
 8015b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b92:	6013      	str	r3, [r2, #0]
 8015b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	f383 8810 	msr	PRIMASK, r3
}
 8015b9e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8015ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d002      	beq.n	8015bac <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8015ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015ba8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015baa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015bac:	f3ef 8310 	mrs	r3, PRIMASK
 8015bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015bb4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015bb6:	b672      	cpsid	i
    return(int_posture);
 8015bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015bba:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015bbc:	4b27      	ldr	r3, [pc, #156]	; (8015c5c <_tx_timer_thread_entry+0x1f0>)
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d105      	bne.n	8015bd6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bcc:	2200      	movs	r2, #0
 8015bce:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8015bd0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015bd2:	f7ff feb1 	bl	8015938 <_tx_timer_system_activate>
 8015bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bd8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	f383 8810 	msr	PRIMASK, r3
}
 8015be0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015be2:	f3ef 8310 	mrs	r3, PRIMASK
 8015be6:	623b      	str	r3, [r7, #32]
    return(posture);
 8015be8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015bea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015bec:	b672      	cpsid	i
    return(int_posture);
 8015bee:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	f47f af7c 	bne.w	8015af2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8015bfa:	4b17      	ldr	r3, [pc, #92]	; (8015c58 <_tx_timer_thread_entry+0x1ec>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d116      	bne.n	8015c30 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8015c02:	4b17      	ldr	r3, [pc, #92]	; (8015c60 <_tx_timer_thread_entry+0x1f4>)
 8015c04:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8015c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c08:	2203      	movs	r2, #3
 8015c0a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c0e:	2201      	movs	r2, #1
 8015c10:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8015c12:	4b14      	ldr	r3, [pc, #80]	; (8015c64 <_tx_timer_thread_entry+0x1f8>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3301      	adds	r3, #1
 8015c18:	4a12      	ldr	r2, [pc, #72]	; (8015c64 <_tx_timer_thread_entry+0x1f8>)
 8015c1a:	6013      	str	r3, [r2, #0]
 8015c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	f383 8810 	msr	PRIMASK, r3
}
 8015c26:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8015c28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015c2a:	f7ff fbbf 	bl	80153ac <_tx_thread_system_suspend>
 8015c2e:	e728      	b.n	8015a82 <_tx_timer_thread_entry+0x16>
 8015c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	f383 8810 	msr	PRIMASK, r3
}
 8015c3a:	bf00      	nop
            TX_DISABLE
 8015c3c:	e721      	b.n	8015a82 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8015c3e:	bf00      	nop
 8015c40:	3760      	adds	r7, #96	; 0x60
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	4154494d 	.word	0x4154494d
 8015c4c:	24015050 	.word	0x24015050
 8015c50:	2401504c 	.word	0x2401504c
 8015c54:	24015048 	.word	0x24015048
 8015c58:	24015054 	.word	0x24015054
 8015c5c:	24015060 	.word	0x24015060
 8015c60:	24015064 	.word	0x24015064
 8015c64:	24014fb4 	.word	0x24014fb4

08015c68 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b08a      	sub	sp, #40	; 0x28
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	607a      	str	r2, [r7, #4]
 8015c74:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015c76:	2300      	movs	r3, #0
 8015c78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d102      	bne.n	8015c86 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c80:	2302      	movs	r3, #2
 8015c82:	627b      	str	r3, [r7, #36]	; 0x24
 8015c84:	e029      	b.n	8015cda <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	4a2d      	ldr	r2, [pc, #180]	; (8015d40 <_txe_byte_allocate+0xd8>)
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d002      	beq.n	8015c96 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c90:	2302      	movs	r3, #2
 8015c92:	627b      	str	r3, [r7, #36]	; 0x24
 8015c94:	e021      	b.n	8015cda <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d102      	bne.n	8015ca2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015c9c:	2303      	movs	r3, #3
 8015c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8015ca0:	e01b      	b.n	8015cda <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d102      	bne.n	8015cae <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015ca8:	2305      	movs	r3, #5
 8015caa:	627b      	str	r3, [r7, #36]	; 0x24
 8015cac:	e015      	b.n	8015cda <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	69db      	ldr	r3, [r3, #28]
 8015cb2:	687a      	ldr	r2, [r7, #4]
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d902      	bls.n	8015cbe <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015cb8:	2305      	movs	r3, #5
 8015cba:	627b      	str	r3, [r7, #36]	; 0x24
 8015cbc:	e00d      	b.n	8015cda <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00a      	beq.n	8015cda <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cc4:	f3ef 8305 	mrs	r3, IPSR
 8015cc8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015cca:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015ccc:	4b1d      	ldr	r3, [pc, #116]	; (8015d44 <_txe_byte_allocate+0xdc>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	4313      	orrs	r3, r2
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d001      	beq.n	8015cda <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015cd6:	2304      	movs	r3, #4
 8015cd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8015cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d108      	bne.n	8015cf2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015ce0:	4b19      	ldr	r3, [pc, #100]	; (8015d48 <_txe_byte_allocate+0xe0>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8015ce6:	6a3b      	ldr	r3, [r7, #32]
 8015ce8:	4a18      	ldr	r2, [pc, #96]	; (8015d4c <_txe_byte_allocate+0xe4>)
 8015cea:	4293      	cmp	r3, r2
 8015cec:	d101      	bne.n	8015cf2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015cee:	2313      	movs	r3, #19
 8015cf0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d114      	bne.n	8015d22 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cf8:	f3ef 8305 	mrs	r3, IPSR
 8015cfc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015cfe:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015d00:	4b10      	ldr	r3, [pc, #64]	; (8015d44 <_txe_byte_allocate+0xdc>)
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4313      	orrs	r3, r2
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00b      	beq.n	8015d22 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d0a:	f3ef 8305 	mrs	r3, IPSR
 8015d0e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015d10:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015d12:	4b0c      	ldr	r3, [pc, #48]	; (8015d44 <_txe_byte_allocate+0xdc>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4313      	orrs	r3, r2
 8015d18:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015d1c:	d201      	bcs.n	8015d22 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015d1e:	2313      	movs	r3, #19
 8015d20:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d106      	bne.n	8015d36 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	68b9      	ldr	r1, [r7, #8]
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	f7fc ff88 	bl	8012c44 <_tx_byte_allocate>
 8015d34:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	3728      	adds	r7, #40	; 0x28
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	42595445 	.word	0x42595445
 8015d44:	2400006c 	.word	0x2400006c
 8015d48:	24014f1c 	.word	0x24014f1c
 8015d4c:	24015064 	.word	0x24015064

08015d50 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b092      	sub	sp, #72	; 0x48
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	607a      	str	r2, [r7, #4]
 8015d5c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d102      	bne.n	8015d6e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d68:	2302      	movs	r3, #2
 8015d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8015d6c:	e075      	b.n	8015e5a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d70:	2b34      	cmp	r3, #52	; 0x34
 8015d72:	d002      	beq.n	8015d7a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d74:	2302      	movs	r3, #2
 8015d76:	647b      	str	r3, [r7, #68]	; 0x44
 8015d78:	e06f      	b.n	8015e5a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8015d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015d82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d84:	b672      	cpsid	i
    return(int_posture);
 8015d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015d88:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015d8a:	4b3b      	ldr	r3, [pc, #236]	; (8015e78 <_txe_byte_pool_create+0x128>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	4a39      	ldr	r2, [pc, #228]	; (8015e78 <_txe_byte_pool_create+0x128>)
 8015d92:	6013      	str	r3, [r2, #0]
 8015d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d96:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9a:	f383 8810 	msr	PRIMASK, r3
}
 8015d9e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015da0:	4b36      	ldr	r3, [pc, #216]	; (8015e7c <_txe_byte_pool_create+0x12c>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015da6:	2300      	movs	r3, #0
 8015da8:	643b      	str	r3, [r7, #64]	; 0x40
 8015daa:	e009      	b.n	8015dc0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8015dac:	68fa      	ldr	r2, [r7, #12]
 8015dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d00b      	beq.n	8015dcc <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8015db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8015dc0:	4b2f      	ldr	r3, [pc, #188]	; (8015e80 <_txe_byte_pool_create+0x130>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d3f0      	bcc.n	8015dac <_txe_byte_pool_create+0x5c>
 8015dca:	e000      	b.n	8015dce <_txe_byte_pool_create+0x7e>
                break;
 8015dcc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015dce:	f3ef 8310 	mrs	r3, PRIMASK
 8015dd2:	623b      	str	r3, [r7, #32]
    return(posture);
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015dd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015dd8:	b672      	cpsid	i
    return(int_posture);
 8015dda:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015ddc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015dde:	4b26      	ldr	r3, [pc, #152]	; (8015e78 <_txe_byte_pool_create+0x128>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	3b01      	subs	r3, #1
 8015de4:	4a24      	ldr	r2, [pc, #144]	; (8015e78 <_txe_byte_pool_create+0x128>)
 8015de6:	6013      	str	r3, [r2, #0]
 8015de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dee:	f383 8810 	msr	PRIMASK, r3
}
 8015df2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015df4:	f7ff f9a0 	bl	8015138 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d102      	bne.n	8015e06 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8015e00:	2302      	movs	r3, #2
 8015e02:	647b      	str	r3, [r7, #68]	; 0x44
 8015e04:	e029      	b.n	8015e5a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d102      	bne.n	8015e12 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8015e0c:	2303      	movs	r3, #3
 8015e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8015e10:	e023      	b.n	8015e5a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	2b63      	cmp	r3, #99	; 0x63
 8015e16:	d802      	bhi.n	8015e1e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8015e18:	2305      	movs	r3, #5
 8015e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8015e1c:	e01d      	b.n	8015e5a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015e1e:	4b19      	ldr	r3, [pc, #100]	; (8015e84 <_txe_byte_pool_create+0x134>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e26:	4a18      	ldr	r2, [pc, #96]	; (8015e88 <_txe_byte_pool_create+0x138>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d101      	bne.n	8015e30 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015e2c:	2313      	movs	r3, #19
 8015e2e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015e30:	f3ef 8305 	mrs	r3, IPSR
 8015e34:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015e36:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015e38:	4b14      	ldr	r3, [pc, #80]	; (8015e8c <_txe_byte_pool_create+0x13c>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	4313      	orrs	r3, r2
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d00b      	beq.n	8015e5a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015e42:	f3ef 8305 	mrs	r3, IPSR
 8015e46:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015e48:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015e4a:	4b10      	ldr	r3, [pc, #64]	; (8015e8c <_txe_byte_pool_create+0x13c>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4313      	orrs	r3, r2
 8015e50:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015e54:	d201      	bcs.n	8015e5a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015e56:	2313      	movs	r3, #19
 8015e58:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d106      	bne.n	8015e6e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	687a      	ldr	r2, [r7, #4]
 8015e64:	68b9      	ldr	r1, [r7, #8]
 8015e66:	68f8      	ldr	r0, [r7, #12]
 8015e68:	f7fd f82e 	bl	8012ec8 <_tx_byte_pool_create>
 8015e6c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3748      	adds	r7, #72	; 0x48
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	24014fb4 	.word	0x24014fb4
 8015e7c:	24014f0c 	.word	0x24014f0c
 8015e80:	24014f10 	.word	0x24014f10
 8015e84:	24014f1c 	.word	0x24014f1c
 8015e88:	24015064 	.word	0x24015064
 8015e8c:	2400006c 	.word	0x2400006c

08015e90 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b094      	sub	sp, #80	; 0x50
 8015e94:	af02      	add	r7, sp, #8
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	607a      	str	r2, [r7, #4]
 8015e9c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015ea8:	2309      	movs	r3, #9
 8015eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8015eac:	e083      	b.n	8015fb6 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8015eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015eb0:	2b38      	cmp	r3, #56	; 0x38
 8015eb2:	d002      	beq.n	8015eba <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015eb4:	2309      	movs	r3, #9
 8015eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8015eb8:	e07d      	b.n	8015fb6 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015eba:	f3ef 8310 	mrs	r3, PRIMASK
 8015ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015ec4:	b672      	cpsid	i
    return(int_posture);
 8015ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015ec8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015eca:	4b43      	ldr	r3, [pc, #268]	; (8015fd8 <_txe_queue_create+0x148>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	4a41      	ldr	r2, [pc, #260]	; (8015fd8 <_txe_queue_create+0x148>)
 8015ed2:	6013      	str	r3, [r2, #0]
 8015ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ed6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	f383 8810 	msr	PRIMASK, r3
}
 8015ede:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8015ee0:	4b3e      	ldr	r3, [pc, #248]	; (8015fdc <_txe_queue_create+0x14c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8015eea:	e009      	b.n	8015f00 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d00b      	beq.n	8015f0c <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8015ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015efc:	3301      	adds	r3, #1
 8015efe:	643b      	str	r3, [r7, #64]	; 0x40
 8015f00:	4b37      	ldr	r3, [pc, #220]	; (8015fe0 <_txe_queue_create+0x150>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d3f0      	bcc.n	8015eec <_txe_queue_create+0x5c>
 8015f0a:	e000      	b.n	8015f0e <_txe_queue_create+0x7e>
                break;
 8015f0c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8015f12:	623b      	str	r3, [r7, #32]
    return(posture);
 8015f14:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015f16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015f18:	b672      	cpsid	i
    return(int_posture);
 8015f1a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015f1c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015f1e:	4b2e      	ldr	r3, [pc, #184]	; (8015fd8 <_txe_queue_create+0x148>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	3b01      	subs	r3, #1
 8015f24:	4a2c      	ldr	r2, [pc, #176]	; (8015fd8 <_txe_queue_create+0x148>)
 8015f26:	6013      	str	r3, [r2, #0]
 8015f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2e:	f383 8810 	msr	PRIMASK, r3
}
 8015f32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015f34:	f7ff f900 	bl	8015138 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8015f38:	68fa      	ldr	r2, [r7, #12]
 8015f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d102      	bne.n	8015f46 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8015f40:	2309      	movs	r3, #9
 8015f42:	647b      	str	r3, [r7, #68]	; 0x44
 8015f44:	e037      	b.n	8015fb6 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d102      	bne.n	8015f52 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8015f50:	e031      	b.n	8015fb6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d102      	bne.n	8015f5e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015f58:	2305      	movs	r3, #5
 8015f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8015f5c:	e02b      	b.n	8015fb6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2b10      	cmp	r3, #16
 8015f62:	d902      	bls.n	8015f6a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015f64:	2305      	movs	r3, #5
 8015f66:	647b      	str	r3, [r7, #68]	; 0x44
 8015f68:	e025      	b.n	8015fb6 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8015f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f6c:	089b      	lsrs	r3, r3, #2
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d902      	bls.n	8015f7a <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8015f74:	2305      	movs	r3, #5
 8015f76:	647b      	str	r3, [r7, #68]	; 0x44
 8015f78:	e01d      	b.n	8015fb6 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015f7a:	4b1a      	ldr	r3, [pc, #104]	; (8015fe4 <_txe_queue_create+0x154>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f82:	4a19      	ldr	r2, [pc, #100]	; (8015fe8 <_txe_queue_create+0x158>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d101      	bne.n	8015f8c <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015f88:	2313      	movs	r3, #19
 8015f8a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f8c:	f3ef 8305 	mrs	r3, IPSR
 8015f90:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015f92:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f94:	4b15      	ldr	r3, [pc, #84]	; (8015fec <_txe_queue_create+0x15c>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	4313      	orrs	r3, r2
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00b      	beq.n	8015fb6 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f9e:	f3ef 8305 	mrs	r3, IPSR
 8015fa2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015fa4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015fa6:	4b11      	ldr	r3, [pc, #68]	; (8015fec <_txe_queue_create+0x15c>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4313      	orrs	r3, r2
 8015fac:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015fb0:	d201      	bcs.n	8015fb6 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015fb2:	2313      	movs	r3, #19
 8015fb4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d108      	bne.n	8015fce <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8015fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	68b9      	ldr	r1, [r7, #8]
 8015fc6:	68f8      	ldr	r0, [r7, #12]
 8015fc8:	f7fe f876 	bl	80140b8 <_tx_queue_create>
 8015fcc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3748      	adds	r7, #72	; 0x48
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	24014fb4 	.word	0x24014fb4
 8015fdc:	24014eec 	.word	0x24014eec
 8015fe0:	24014ef0 	.word	0x24014ef0
 8015fe4:	24014f1c 	.word	0x24014f1c
 8015fe8:	24015064 	.word	0x24015064
 8015fec:	2400006c 	.word	0x2400006c

08015ff0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b088      	sub	sp, #32
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	60f8      	str	r0, [r7, #12]
 8015ff8:	60b9      	str	r1, [r7, #8]
 8015ffa:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d102      	bne.n	801600c <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016006:	2309      	movs	r3, #9
 8016008:	61fb      	str	r3, [r7, #28]
 801600a:	e025      	b.n	8016058 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4a18      	ldr	r2, [pc, #96]	; (8016074 <_txe_queue_receive+0x84>)
 8016012:	4293      	cmp	r3, r2
 8016014:	d002      	beq.n	801601c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016016:	2309      	movs	r3, #9
 8016018:	61fb      	str	r3, [r7, #28]
 801601a:	e01d      	b.n	8016058 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d102      	bne.n	8016028 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8016022:	2303      	movs	r3, #3
 8016024:	61fb      	str	r3, [r7, #28]
 8016026:	e017      	b.n	8016058 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d014      	beq.n	8016058 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801602e:	f3ef 8305 	mrs	r3, IPSR
 8016032:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016034:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016036:	4b10      	ldr	r3, [pc, #64]	; (8016078 <_txe_queue_receive+0x88>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4313      	orrs	r3, r2
 801603c:	2b00      	cmp	r3, #0
 801603e:	d002      	beq.n	8016046 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016040:	2304      	movs	r3, #4
 8016042:	61fb      	str	r3, [r7, #28]
 8016044:	e008      	b.n	8016058 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016046:	4b0d      	ldr	r3, [pc, #52]	; (801607c <_txe_queue_receive+0x8c>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	4a0c      	ldr	r2, [pc, #48]	; (8016080 <_txe_queue_receive+0x90>)
 8016050:	4293      	cmp	r3, r2
 8016052:	d101      	bne.n	8016058 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016054:	2304      	movs	r3, #4
 8016056:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d105      	bne.n	801606a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	68b9      	ldr	r1, [r7, #8]
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	f7fe f89c 	bl	80141a0 <_tx_queue_receive>
 8016068:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801606a:	69fb      	ldr	r3, [r7, #28]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3720      	adds	r7, #32
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}
 8016074:	51554555 	.word	0x51554555
 8016078:	2400006c 	.word	0x2400006c
 801607c:	24014f1c 	.word	0x24014f1c
 8016080:	24015064 	.word	0x24015064

08016084 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016090:	2300      	movs	r3, #0
 8016092:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d102      	bne.n	80160a0 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801609a:	2309      	movs	r3, #9
 801609c:	61fb      	str	r3, [r7, #28]
 801609e:	e025      	b.n	80160ec <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	4a18      	ldr	r2, [pc, #96]	; (8016108 <_txe_queue_send+0x84>)
 80160a6:	4293      	cmp	r3, r2
 80160a8:	d002      	beq.n	80160b0 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80160aa:	2309      	movs	r3, #9
 80160ac:	61fb      	str	r3, [r7, #28]
 80160ae:	e01d      	b.n	80160ec <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d102      	bne.n	80160bc <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80160b6:	2303      	movs	r3, #3
 80160b8:	61fb      	str	r3, [r7, #28]
 80160ba:	e017      	b.n	80160ec <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d014      	beq.n	80160ec <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80160c2:	f3ef 8305 	mrs	r3, IPSR
 80160c6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80160c8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80160ca:	4b10      	ldr	r3, [pc, #64]	; (801610c <_txe_queue_send+0x88>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4313      	orrs	r3, r2
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d002      	beq.n	80160da <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80160d4:	2304      	movs	r3, #4
 80160d6:	61fb      	str	r3, [r7, #28]
 80160d8:	e008      	b.n	80160ec <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80160da:	4b0d      	ldr	r3, [pc, #52]	; (8016110 <_txe_queue_send+0x8c>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	4a0c      	ldr	r2, [pc, #48]	; (8016114 <_txe_queue_send+0x90>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d101      	bne.n	80160ec <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80160e8:	2304      	movs	r3, #4
 80160ea:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d105      	bne.n	80160fe <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	68b9      	ldr	r1, [r7, #8]
 80160f6:	68f8      	ldr	r0, [r7, #12]
 80160f8:	f7fe fa1a 	bl	8014530 <_tx_queue_send>
 80160fc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80160fe:	69fb      	ldr	r3, [r7, #28]
}
 8016100:	4618      	mov	r0, r3
 8016102:	3720      	adds	r7, #32
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	51554555 	.word	0x51554555
 801610c:	2400006c 	.word	0x2400006c
 8016110:	24014f1c 	.word	0x24014f1c
 8016114:	24015064 	.word	0x24015064

08016118 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b092      	sub	sp, #72	; 0x48
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016126:	2300      	movs	r3, #0
 8016128:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d102      	bne.n	8016136 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016130:	230c      	movs	r3, #12
 8016132:	647b      	str	r3, [r7, #68]	; 0x44
 8016134:	e054      	b.n	80161e0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	2b1c      	cmp	r3, #28
 801613a:	d002      	beq.n	8016142 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801613c:	230c      	movs	r3, #12
 801613e:	647b      	str	r3, [r7, #68]	; 0x44
 8016140:	e04e      	b.n	80161e0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016142:	f3ef 8310 	mrs	r3, PRIMASK
 8016146:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8016148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801614a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801614c:	b672      	cpsid	i
    return(int_posture);
 801614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016150:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016152:	4b36      	ldr	r3, [pc, #216]	; (801622c <_txe_semaphore_create+0x114>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	3301      	adds	r3, #1
 8016158:	4a34      	ldr	r2, [pc, #208]	; (801622c <_txe_semaphore_create+0x114>)
 801615a:	6013      	str	r3, [r2, #0]
 801615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801615e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016162:	f383 8810 	msr	PRIMASK, r3
}
 8016166:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8016168:	4b31      	ldr	r3, [pc, #196]	; (8016230 <_txe_semaphore_create+0x118>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801616e:	2300      	movs	r3, #0
 8016170:	643b      	str	r3, [r7, #64]	; 0x40
 8016172:	e009      	b.n	8016188 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8016174:	68fa      	ldr	r2, [r7, #12]
 8016176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016178:	429a      	cmp	r2, r3
 801617a:	d00b      	beq.n	8016194 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801617e:	695b      	ldr	r3, [r3, #20]
 8016180:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016184:	3301      	adds	r3, #1
 8016186:	643b      	str	r3, [r7, #64]	; 0x40
 8016188:	4b2a      	ldr	r3, [pc, #168]	; (8016234 <_txe_semaphore_create+0x11c>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801618e:	429a      	cmp	r2, r3
 8016190:	d3f0      	bcc.n	8016174 <_txe_semaphore_create+0x5c>
 8016192:	e000      	b.n	8016196 <_txe_semaphore_create+0x7e>
                break;
 8016194:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016196:	f3ef 8310 	mrs	r3, PRIMASK
 801619a:	623b      	str	r3, [r7, #32]
    return(posture);
 801619c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801619e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80161a0:	b672      	cpsid	i
    return(int_posture);
 80161a2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80161a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80161a6:	4b21      	ldr	r3, [pc, #132]	; (801622c <_txe_semaphore_create+0x114>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	3b01      	subs	r3, #1
 80161ac:	4a1f      	ldr	r2, [pc, #124]	; (801622c <_txe_semaphore_create+0x114>)
 80161ae:	6013      	str	r3, [r2, #0]
 80161b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b6:	f383 8810 	msr	PRIMASK, r3
}
 80161ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80161bc:	f7fe ffbc 	bl	8015138 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80161c0:	68fa      	ldr	r2, [r7, #12]
 80161c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d102      	bne.n	80161ce <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80161c8:	230c      	movs	r3, #12
 80161ca:	647b      	str	r3, [r7, #68]	; 0x44
 80161cc:	e008      	b.n	80161e0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80161ce:	4b1a      	ldr	r3, [pc, #104]	; (8016238 <_txe_semaphore_create+0x120>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80161d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d6:	4a19      	ldr	r2, [pc, #100]	; (801623c <_txe_semaphore_create+0x124>)
 80161d8:	4293      	cmp	r3, r2
 80161da:	d101      	bne.n	80161e0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161dc:	2313      	movs	r3, #19
 80161de:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d114      	bne.n	8016210 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161e6:	f3ef 8305 	mrs	r3, IPSR
 80161ea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80161ec:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80161ee:	4b14      	ldr	r3, [pc, #80]	; (8016240 <_txe_semaphore_create+0x128>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	4313      	orrs	r3, r2
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d00b      	beq.n	8016210 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161f8:	f3ef 8305 	mrs	r3, IPSR
 80161fc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80161fe:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016200:	4b0f      	ldr	r3, [pc, #60]	; (8016240 <_txe_semaphore_create+0x128>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	4313      	orrs	r3, r2
 8016206:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801620a:	d201      	bcs.n	8016210 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801620c:	2313      	movs	r3, #19
 801620e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016212:	2b00      	cmp	r3, #0
 8016214:	d105      	bne.n	8016222 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	68b9      	ldr	r1, [r7, #8]
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f7fe fb30 	bl	8014880 <_tx_semaphore_create>
 8016220:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8016222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016224:	4618      	mov	r0, r3
 8016226:	3748      	adds	r7, #72	; 0x48
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	24014fb4 	.word	0x24014fb4
 8016230:	24014ee4 	.word	0x24014ee4
 8016234:	24014ee8 	.word	0x24014ee8
 8016238:	24014f1c 	.word	0x24014f1c
 801623c:	24015064 	.word	0x24015064
 8016240:	2400006c 	.word	0x2400006c

08016244 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801624c:	2300      	movs	r3, #0
 801624e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d102      	bne.n	801625c <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016256:	230c      	movs	r3, #12
 8016258:	617b      	str	r3, [r7, #20]
 801625a:	e01c      	b.n	8016296 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4a13      	ldr	r2, [pc, #76]	; (80162b0 <_txe_semaphore_delete+0x6c>)
 8016262:	4293      	cmp	r3, r2
 8016264:	d002      	beq.n	801626c <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016266:	230c      	movs	r3, #12
 8016268:	617b      	str	r3, [r7, #20]
 801626a:	e014      	b.n	8016296 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801626c:	f3ef 8305 	mrs	r3, IPSR
 8016270:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016272:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016274:	4b0f      	ldr	r3, [pc, #60]	; (80162b4 <_txe_semaphore_delete+0x70>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	4313      	orrs	r3, r2
 801627a:	2b00      	cmp	r3, #0
 801627c:	d002      	beq.n	8016284 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801627e:	2313      	movs	r3, #19
 8016280:	617b      	str	r3, [r7, #20]
 8016282:	e008      	b.n	8016296 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016284:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <_txe_semaphore_delete+0x74>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801628a:	693b      	ldr	r3, [r7, #16]
 801628c:	4a0b      	ldr	r2, [pc, #44]	; (80162bc <_txe_semaphore_delete+0x78>)
 801628e:	4293      	cmp	r3, r2
 8016290:	d101      	bne.n	8016296 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016292:	2313      	movs	r3, #19
 8016294:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d103      	bne.n	80162a4 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f7fe fb41 	bl	8014924 <_tx_semaphore_delete>
 80162a2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80162a4:	697b      	ldr	r3, [r7, #20]
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3718      	adds	r7, #24
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	53454d41 	.word	0x53454d41
 80162b4:	2400006c 	.word	0x2400006c
 80162b8:	24014f1c 	.word	0x24014f1c
 80162bc:	24015064 	.word	0x24015064

080162c0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b086      	sub	sp, #24
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80162ca:	2300      	movs	r3, #0
 80162cc:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d102      	bne.n	80162da <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80162d4:	230c      	movs	r3, #12
 80162d6:	617b      	str	r3, [r7, #20]
 80162d8:	e01f      	b.n	801631a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	4a15      	ldr	r2, [pc, #84]	; (8016334 <_txe_semaphore_get+0x74>)
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d002      	beq.n	80162ea <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80162e4:	230c      	movs	r3, #12
 80162e6:	617b      	str	r3, [r7, #20]
 80162e8:	e017      	b.n	801631a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d014      	beq.n	801631a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162f0:	f3ef 8305 	mrs	r3, IPSR
 80162f4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80162f6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162f8:	4b0f      	ldr	r3, [pc, #60]	; (8016338 <_txe_semaphore_get+0x78>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	4313      	orrs	r3, r2
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d002      	beq.n	8016308 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016302:	2304      	movs	r3, #4
 8016304:	617b      	str	r3, [r7, #20]
 8016306:	e008      	b.n	801631a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016308:	4b0c      	ldr	r3, [pc, #48]	; (801633c <_txe_semaphore_get+0x7c>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	4a0b      	ldr	r2, [pc, #44]	; (8016340 <_txe_semaphore_get+0x80>)
 8016312:	4293      	cmp	r3, r2
 8016314:	d101      	bne.n	801631a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016316:	2304      	movs	r3, #4
 8016318:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d104      	bne.n	801632a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8016320:	6839      	ldr	r1, [r7, #0]
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7fe fb8e 	bl	8014a44 <_tx_semaphore_get>
 8016328:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801632a:	697b      	ldr	r3, [r7, #20]
}
 801632c:	4618      	mov	r0, r3
 801632e:	3718      	adds	r7, #24
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	53454d41 	.word	0x53454d41
 8016338:	2400006c 	.word	0x2400006c
 801633c:	24014f1c 	.word	0x24014f1c
 8016340:	24015064 	.word	0x24015064

08016344 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b084      	sub	sp, #16
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d102      	bne.n	8016358 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016352:	230c      	movs	r3, #12
 8016354:	60fb      	str	r3, [r7, #12]
 8016356:	e00b      	b.n	8016370 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4a07      	ldr	r2, [pc, #28]	; (801637c <_txe_semaphore_put+0x38>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d002      	beq.n	8016368 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016362:	230c      	movs	r3, #12
 8016364:	60fb      	str	r3, [r7, #12]
 8016366:	e003      	b.n	8016370 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f7fe fbfd 	bl	8014b68 <_tx_semaphore_put>
 801636e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016370:	68fb      	ldr	r3, [r7, #12]
}
 8016372:	4618      	mov	r0, r3
 8016374:	3710      	adds	r7, #16
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}
 801637a:	bf00      	nop
 801637c:	53454d41 	.word	0x53454d41

08016380 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b09a      	sub	sp, #104	; 0x68
 8016384:	af06      	add	r7, sp, #24
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
 801638c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801638e:	2300      	movs	r3, #0
 8016390:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d102      	bne.n	801639e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016398:	230e      	movs	r3, #14
 801639a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801639c:	e0bb      	b.n	8016516 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801639e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80163a0:	2bb0      	cmp	r3, #176	; 0xb0
 80163a2:	d002      	beq.n	80163aa <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80163a4:	230e      	movs	r3, #14
 80163a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163a8:	e0b5      	b.n	8016516 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163aa:	f3ef 8310 	mrs	r3, PRIMASK
 80163ae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80163b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80163b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80163b4:	b672      	cpsid	i
    return(int_posture);
 80163b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80163b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80163ba:	4b64      	ldr	r3, [pc, #400]	; (801654c <_txe_thread_create+0x1cc>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	3301      	adds	r3, #1
 80163c0:	4a62      	ldr	r2, [pc, #392]	; (801654c <_txe_thread_create+0x1cc>)
 80163c2:	6013      	str	r3, [r2, #0]
 80163c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80163c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ca:	f383 8810 	msr	PRIMASK, r3
}
 80163ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80163d0:	2300      	movs	r3, #0
 80163d2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80163d4:	4b5e      	ldr	r3, [pc, #376]	; (8016550 <_txe_thread_create+0x1d0>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80163da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163dc:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80163de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163e0:	3b01      	subs	r3, #1
 80163e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163e4:	4413      	add	r3, r2
 80163e6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80163e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ea:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80163ec:	2300      	movs	r3, #0
 80163ee:	647b      	str	r3, [r7, #68]	; 0x44
 80163f0:	e02b      	b.n	801644a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d101      	bne.n	80163fe <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80163fa:	2301      	movs	r3, #1
 80163fc:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80163fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016400:	2b01      	cmp	r3, #1
 8016402:	d028      	beq.n	8016456 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8016404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801640a:	429a      	cmp	r2, r3
 801640c:	d308      	bcc.n	8016420 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016410:	691b      	ldr	r3, [r3, #16]
 8016412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016414:	429a      	cmp	r2, r3
 8016416:	d203      	bcs.n	8016420 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016418:	2300      	movs	r3, #0
 801641a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801641c:	2301      	movs	r3, #1
 801641e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8016420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016422:	68db      	ldr	r3, [r3, #12]
 8016424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016426:	429a      	cmp	r2, r3
 8016428:	d308      	bcc.n	801643c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801642a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801642c:	691b      	ldr	r3, [r3, #16]
 801642e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016430:	429a      	cmp	r2, r3
 8016432:	d203      	bcs.n	801643c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016434:	2300      	movs	r3, #0
 8016436:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016438:	2301      	movs	r3, #1
 801643a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016442:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016446:	3301      	adds	r3, #1
 8016448:	647b      	str	r3, [r7, #68]	; 0x44
 801644a:	4b42      	ldr	r3, [pc, #264]	; (8016554 <_txe_thread_create+0x1d4>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016450:	429a      	cmp	r2, r3
 8016452:	d3ce      	bcc.n	80163f2 <_txe_thread_create+0x72>
 8016454:	e000      	b.n	8016458 <_txe_thread_create+0xd8>
                break;
 8016456:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016458:	f3ef 8310 	mrs	r3, PRIMASK
 801645c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801645e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8016460:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016462:	b672      	cpsid	i
    return(int_posture);
 8016464:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016466:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016468:	4b38      	ldr	r3, [pc, #224]	; (801654c <_txe_thread_create+0x1cc>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	3b01      	subs	r3, #1
 801646e:	4a37      	ldr	r2, [pc, #220]	; (801654c <_txe_thread_create+0x1cc>)
 8016470:	6013      	str	r3, [r2, #0]
 8016472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016474:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016476:	6a3b      	ldr	r3, [r7, #32]
 8016478:	f383 8810 	msr	PRIMASK, r3
}
 801647c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801647e:	f7fe fe5b 	bl	8015138 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016482:	68fa      	ldr	r2, [r7, #12]
 8016484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016486:	429a      	cmp	r2, r3
 8016488:	d102      	bne.n	8016490 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801648a:	230e      	movs	r3, #14
 801648c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801648e:	e042      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016492:	2b00      	cmp	r3, #0
 8016494:	d102      	bne.n	801649c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016496:	2303      	movs	r3, #3
 8016498:	64fb      	str	r3, [r7, #76]	; 0x4c
 801649a:	e03c      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d102      	bne.n	80164a8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80164a2:	2303      	movs	r3, #3
 80164a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164a6:	e036      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80164a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164aa:	2bc7      	cmp	r3, #199	; 0xc7
 80164ac:	d802      	bhi.n	80164b4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80164ae:	2305      	movs	r3, #5
 80164b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164b2:	e030      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80164b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80164b6:	2b1f      	cmp	r3, #31
 80164b8:	d902      	bls.n	80164c0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80164ba:	230f      	movs	r3, #15
 80164bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164be:	e02a      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80164c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80164c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d902      	bls.n	80164ce <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80164c8:	2318      	movs	r3, #24
 80164ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164cc:	e023      	b.n	8016516 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80164ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164d0:	2b01      	cmp	r3, #1
 80164d2:	d902      	bls.n	80164da <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80164d4:	2310      	movs	r3, #16
 80164d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164d8:	e01d      	b.n	8016516 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80164da:	4b1f      	ldr	r3, [pc, #124]	; (8016558 <_txe_thread_create+0x1d8>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80164e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e2:	4a1e      	ldr	r2, [pc, #120]	; (801655c <_txe_thread_create+0x1dc>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d101      	bne.n	80164ec <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80164e8:	2313      	movs	r3, #19
 80164ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164ec:	f3ef 8305 	mrs	r3, IPSR
 80164f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80164f2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80164f4:	4b1a      	ldr	r3, [pc, #104]	; (8016560 <_txe_thread_create+0x1e0>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4313      	orrs	r3, r2
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d00b      	beq.n	8016516 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164fe:	f3ef 8305 	mrs	r3, IPSR
 8016502:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016504:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016506:	4b16      	ldr	r3, [pc, #88]	; (8016560 <_txe_thread_create+0x1e0>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4313      	orrs	r3, r2
 801650c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016510:	d201      	bcs.n	8016516 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016512:	2313      	movs	r3, #19
 8016514:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016518:	2b00      	cmp	r3, #0
 801651a:	d112      	bne.n	8016542 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801651e:	9305      	str	r3, [sp, #20]
 8016520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016522:	9304      	str	r3, [sp, #16]
 8016524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016526:	9303      	str	r3, [sp, #12]
 8016528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801652a:	9302      	str	r3, [sp, #8]
 801652c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801652e:	9301      	str	r3, [sp, #4]
 8016530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	68b9      	ldr	r1, [r7, #8]
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	f7fe fb6c 	bl	8014c18 <_tx_thread_create>
 8016540:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016544:	4618      	mov	r0, r3
 8016546:	3750      	adds	r7, #80	; 0x50
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	24014fb4 	.word	0x24014fb4
 8016550:	24014f24 	.word	0x24014f24
 8016554:	24014f28 	.word	0x24014f28
 8016558:	24014f1c 	.word	0x24014f1c
 801655c:	24015064 	.word	0x24015064
 8016560:	2400006c 	.word	0x2400006c

08016564 <__errno>:
 8016564:	4b01      	ldr	r3, [pc, #4]	; (801656c <__errno+0x8>)
 8016566:	6818      	ldr	r0, [r3, #0]
 8016568:	4770      	bx	lr
 801656a:	bf00      	nop
 801656c:	24000070 	.word	0x24000070

08016570 <__libc_init_array>:
 8016570:	b570      	push	{r4, r5, r6, lr}
 8016572:	4d0d      	ldr	r5, [pc, #52]	; (80165a8 <__libc_init_array+0x38>)
 8016574:	4c0d      	ldr	r4, [pc, #52]	; (80165ac <__libc_init_array+0x3c>)
 8016576:	1b64      	subs	r4, r4, r5
 8016578:	10a4      	asrs	r4, r4, #2
 801657a:	2600      	movs	r6, #0
 801657c:	42a6      	cmp	r6, r4
 801657e:	d109      	bne.n	8016594 <__libc_init_array+0x24>
 8016580:	4d0b      	ldr	r5, [pc, #44]	; (80165b0 <__libc_init_array+0x40>)
 8016582:	4c0c      	ldr	r4, [pc, #48]	; (80165b4 <__libc_init_array+0x44>)
 8016584:	f001 f832 	bl	80175ec <_init>
 8016588:	1b64      	subs	r4, r4, r5
 801658a:	10a4      	asrs	r4, r4, #2
 801658c:	2600      	movs	r6, #0
 801658e:	42a6      	cmp	r6, r4
 8016590:	d105      	bne.n	801659e <__libc_init_array+0x2e>
 8016592:	bd70      	pop	{r4, r5, r6, pc}
 8016594:	f855 3b04 	ldr.w	r3, [r5], #4
 8016598:	4798      	blx	r3
 801659a:	3601      	adds	r6, #1
 801659c:	e7ee      	b.n	801657c <__libc_init_array+0xc>
 801659e:	f855 3b04 	ldr.w	r3, [r5], #4
 80165a2:	4798      	blx	r3
 80165a4:	3601      	adds	r6, #1
 80165a6:	e7f2      	b.n	801658e <__libc_init_array+0x1e>
 80165a8:	08017814 	.word	0x08017814
 80165ac:	08017814 	.word	0x08017814
 80165b0:	08017814 	.word	0x08017814
 80165b4:	08017818 	.word	0x08017818

080165b8 <memcpy>:
 80165b8:	440a      	add	r2, r1
 80165ba:	4291      	cmp	r1, r2
 80165bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80165c0:	d100      	bne.n	80165c4 <memcpy+0xc>
 80165c2:	4770      	bx	lr
 80165c4:	b510      	push	{r4, lr}
 80165c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165ce:	4291      	cmp	r1, r2
 80165d0:	d1f9      	bne.n	80165c6 <memcpy+0xe>
 80165d2:	bd10      	pop	{r4, pc}

080165d4 <memset>:
 80165d4:	4402      	add	r2, r0
 80165d6:	4603      	mov	r3, r0
 80165d8:	4293      	cmp	r3, r2
 80165da:	d100      	bne.n	80165de <memset+0xa>
 80165dc:	4770      	bx	lr
 80165de:	f803 1b01 	strb.w	r1, [r3], #1
 80165e2:	e7f9      	b.n	80165d8 <memset+0x4>

080165e4 <iprintf>:
 80165e4:	b40f      	push	{r0, r1, r2, r3}
 80165e6:	4b0a      	ldr	r3, [pc, #40]	; (8016610 <iprintf+0x2c>)
 80165e8:	b513      	push	{r0, r1, r4, lr}
 80165ea:	681c      	ldr	r4, [r3, #0]
 80165ec:	b124      	cbz	r4, 80165f8 <iprintf+0x14>
 80165ee:	69a3      	ldr	r3, [r4, #24]
 80165f0:	b913      	cbnz	r3, 80165f8 <iprintf+0x14>
 80165f2:	4620      	mov	r0, r4
 80165f4:	f000 fa5e 	bl	8016ab4 <__sinit>
 80165f8:	ab05      	add	r3, sp, #20
 80165fa:	9a04      	ldr	r2, [sp, #16]
 80165fc:	68a1      	ldr	r1, [r4, #8]
 80165fe:	9301      	str	r3, [sp, #4]
 8016600:	4620      	mov	r0, r4
 8016602:	f000 fc67 	bl	8016ed4 <_vfiprintf_r>
 8016606:	b002      	add	sp, #8
 8016608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801660c:	b004      	add	sp, #16
 801660e:	4770      	bx	lr
 8016610:	24000070 	.word	0x24000070

08016614 <_puts_r>:
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	460e      	mov	r6, r1
 8016618:	4605      	mov	r5, r0
 801661a:	b118      	cbz	r0, 8016624 <_puts_r+0x10>
 801661c:	6983      	ldr	r3, [r0, #24]
 801661e:	b90b      	cbnz	r3, 8016624 <_puts_r+0x10>
 8016620:	f000 fa48 	bl	8016ab4 <__sinit>
 8016624:	69ab      	ldr	r3, [r5, #24]
 8016626:	68ac      	ldr	r4, [r5, #8]
 8016628:	b913      	cbnz	r3, 8016630 <_puts_r+0x1c>
 801662a:	4628      	mov	r0, r5
 801662c:	f000 fa42 	bl	8016ab4 <__sinit>
 8016630:	4b2c      	ldr	r3, [pc, #176]	; (80166e4 <_puts_r+0xd0>)
 8016632:	429c      	cmp	r4, r3
 8016634:	d120      	bne.n	8016678 <_puts_r+0x64>
 8016636:	686c      	ldr	r4, [r5, #4]
 8016638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801663a:	07db      	lsls	r3, r3, #31
 801663c:	d405      	bmi.n	801664a <_puts_r+0x36>
 801663e:	89a3      	ldrh	r3, [r4, #12]
 8016640:	0598      	lsls	r0, r3, #22
 8016642:	d402      	bmi.n	801664a <_puts_r+0x36>
 8016644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016646:	f000 fad3 	bl	8016bf0 <__retarget_lock_acquire_recursive>
 801664a:	89a3      	ldrh	r3, [r4, #12]
 801664c:	0719      	lsls	r1, r3, #28
 801664e:	d51d      	bpl.n	801668c <_puts_r+0x78>
 8016650:	6923      	ldr	r3, [r4, #16]
 8016652:	b1db      	cbz	r3, 801668c <_puts_r+0x78>
 8016654:	3e01      	subs	r6, #1
 8016656:	68a3      	ldr	r3, [r4, #8]
 8016658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801665c:	3b01      	subs	r3, #1
 801665e:	60a3      	str	r3, [r4, #8]
 8016660:	bb39      	cbnz	r1, 80166b2 <_puts_r+0x9e>
 8016662:	2b00      	cmp	r3, #0
 8016664:	da38      	bge.n	80166d8 <_puts_r+0xc4>
 8016666:	4622      	mov	r2, r4
 8016668:	210a      	movs	r1, #10
 801666a:	4628      	mov	r0, r5
 801666c:	f000 f848 	bl	8016700 <__swbuf_r>
 8016670:	3001      	adds	r0, #1
 8016672:	d011      	beq.n	8016698 <_puts_r+0x84>
 8016674:	250a      	movs	r5, #10
 8016676:	e011      	b.n	801669c <_puts_r+0x88>
 8016678:	4b1b      	ldr	r3, [pc, #108]	; (80166e8 <_puts_r+0xd4>)
 801667a:	429c      	cmp	r4, r3
 801667c:	d101      	bne.n	8016682 <_puts_r+0x6e>
 801667e:	68ac      	ldr	r4, [r5, #8]
 8016680:	e7da      	b.n	8016638 <_puts_r+0x24>
 8016682:	4b1a      	ldr	r3, [pc, #104]	; (80166ec <_puts_r+0xd8>)
 8016684:	429c      	cmp	r4, r3
 8016686:	bf08      	it	eq
 8016688:	68ec      	ldreq	r4, [r5, #12]
 801668a:	e7d5      	b.n	8016638 <_puts_r+0x24>
 801668c:	4621      	mov	r1, r4
 801668e:	4628      	mov	r0, r5
 8016690:	f000 f888 	bl	80167a4 <__swsetup_r>
 8016694:	2800      	cmp	r0, #0
 8016696:	d0dd      	beq.n	8016654 <_puts_r+0x40>
 8016698:	f04f 35ff 	mov.w	r5, #4294967295
 801669c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801669e:	07da      	lsls	r2, r3, #31
 80166a0:	d405      	bmi.n	80166ae <_puts_r+0x9a>
 80166a2:	89a3      	ldrh	r3, [r4, #12]
 80166a4:	059b      	lsls	r3, r3, #22
 80166a6:	d402      	bmi.n	80166ae <_puts_r+0x9a>
 80166a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166aa:	f000 faa2 	bl	8016bf2 <__retarget_lock_release_recursive>
 80166ae:	4628      	mov	r0, r5
 80166b0:	bd70      	pop	{r4, r5, r6, pc}
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	da04      	bge.n	80166c0 <_puts_r+0xac>
 80166b6:	69a2      	ldr	r2, [r4, #24]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	dc06      	bgt.n	80166ca <_puts_r+0xb6>
 80166bc:	290a      	cmp	r1, #10
 80166be:	d004      	beq.n	80166ca <_puts_r+0xb6>
 80166c0:	6823      	ldr	r3, [r4, #0]
 80166c2:	1c5a      	adds	r2, r3, #1
 80166c4:	6022      	str	r2, [r4, #0]
 80166c6:	7019      	strb	r1, [r3, #0]
 80166c8:	e7c5      	b.n	8016656 <_puts_r+0x42>
 80166ca:	4622      	mov	r2, r4
 80166cc:	4628      	mov	r0, r5
 80166ce:	f000 f817 	bl	8016700 <__swbuf_r>
 80166d2:	3001      	adds	r0, #1
 80166d4:	d1bf      	bne.n	8016656 <_puts_r+0x42>
 80166d6:	e7df      	b.n	8016698 <_puts_r+0x84>
 80166d8:	6823      	ldr	r3, [r4, #0]
 80166da:	250a      	movs	r5, #10
 80166dc:	1c5a      	adds	r2, r3, #1
 80166de:	6022      	str	r2, [r4, #0]
 80166e0:	701d      	strb	r5, [r3, #0]
 80166e2:	e7db      	b.n	801669c <_puts_r+0x88>
 80166e4:	08017798 	.word	0x08017798
 80166e8:	080177b8 	.word	0x080177b8
 80166ec:	08017778 	.word	0x08017778

080166f0 <puts>:
 80166f0:	4b02      	ldr	r3, [pc, #8]	; (80166fc <puts+0xc>)
 80166f2:	4601      	mov	r1, r0
 80166f4:	6818      	ldr	r0, [r3, #0]
 80166f6:	f7ff bf8d 	b.w	8016614 <_puts_r>
 80166fa:	bf00      	nop
 80166fc:	24000070 	.word	0x24000070

08016700 <__swbuf_r>:
 8016700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016702:	460e      	mov	r6, r1
 8016704:	4614      	mov	r4, r2
 8016706:	4605      	mov	r5, r0
 8016708:	b118      	cbz	r0, 8016712 <__swbuf_r+0x12>
 801670a:	6983      	ldr	r3, [r0, #24]
 801670c:	b90b      	cbnz	r3, 8016712 <__swbuf_r+0x12>
 801670e:	f000 f9d1 	bl	8016ab4 <__sinit>
 8016712:	4b21      	ldr	r3, [pc, #132]	; (8016798 <__swbuf_r+0x98>)
 8016714:	429c      	cmp	r4, r3
 8016716:	d12b      	bne.n	8016770 <__swbuf_r+0x70>
 8016718:	686c      	ldr	r4, [r5, #4]
 801671a:	69a3      	ldr	r3, [r4, #24]
 801671c:	60a3      	str	r3, [r4, #8]
 801671e:	89a3      	ldrh	r3, [r4, #12]
 8016720:	071a      	lsls	r2, r3, #28
 8016722:	d52f      	bpl.n	8016784 <__swbuf_r+0x84>
 8016724:	6923      	ldr	r3, [r4, #16]
 8016726:	b36b      	cbz	r3, 8016784 <__swbuf_r+0x84>
 8016728:	6923      	ldr	r3, [r4, #16]
 801672a:	6820      	ldr	r0, [r4, #0]
 801672c:	1ac0      	subs	r0, r0, r3
 801672e:	6963      	ldr	r3, [r4, #20]
 8016730:	b2f6      	uxtb	r6, r6
 8016732:	4283      	cmp	r3, r0
 8016734:	4637      	mov	r7, r6
 8016736:	dc04      	bgt.n	8016742 <__swbuf_r+0x42>
 8016738:	4621      	mov	r1, r4
 801673a:	4628      	mov	r0, r5
 801673c:	f000 f926 	bl	801698c <_fflush_r>
 8016740:	bb30      	cbnz	r0, 8016790 <__swbuf_r+0x90>
 8016742:	68a3      	ldr	r3, [r4, #8]
 8016744:	3b01      	subs	r3, #1
 8016746:	60a3      	str	r3, [r4, #8]
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	1c5a      	adds	r2, r3, #1
 801674c:	6022      	str	r2, [r4, #0]
 801674e:	701e      	strb	r6, [r3, #0]
 8016750:	6963      	ldr	r3, [r4, #20]
 8016752:	3001      	adds	r0, #1
 8016754:	4283      	cmp	r3, r0
 8016756:	d004      	beq.n	8016762 <__swbuf_r+0x62>
 8016758:	89a3      	ldrh	r3, [r4, #12]
 801675a:	07db      	lsls	r3, r3, #31
 801675c:	d506      	bpl.n	801676c <__swbuf_r+0x6c>
 801675e:	2e0a      	cmp	r6, #10
 8016760:	d104      	bne.n	801676c <__swbuf_r+0x6c>
 8016762:	4621      	mov	r1, r4
 8016764:	4628      	mov	r0, r5
 8016766:	f000 f911 	bl	801698c <_fflush_r>
 801676a:	b988      	cbnz	r0, 8016790 <__swbuf_r+0x90>
 801676c:	4638      	mov	r0, r7
 801676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016770:	4b0a      	ldr	r3, [pc, #40]	; (801679c <__swbuf_r+0x9c>)
 8016772:	429c      	cmp	r4, r3
 8016774:	d101      	bne.n	801677a <__swbuf_r+0x7a>
 8016776:	68ac      	ldr	r4, [r5, #8]
 8016778:	e7cf      	b.n	801671a <__swbuf_r+0x1a>
 801677a:	4b09      	ldr	r3, [pc, #36]	; (80167a0 <__swbuf_r+0xa0>)
 801677c:	429c      	cmp	r4, r3
 801677e:	bf08      	it	eq
 8016780:	68ec      	ldreq	r4, [r5, #12]
 8016782:	e7ca      	b.n	801671a <__swbuf_r+0x1a>
 8016784:	4621      	mov	r1, r4
 8016786:	4628      	mov	r0, r5
 8016788:	f000 f80c 	bl	80167a4 <__swsetup_r>
 801678c:	2800      	cmp	r0, #0
 801678e:	d0cb      	beq.n	8016728 <__swbuf_r+0x28>
 8016790:	f04f 37ff 	mov.w	r7, #4294967295
 8016794:	e7ea      	b.n	801676c <__swbuf_r+0x6c>
 8016796:	bf00      	nop
 8016798:	08017798 	.word	0x08017798
 801679c:	080177b8 	.word	0x080177b8
 80167a0:	08017778 	.word	0x08017778

080167a4 <__swsetup_r>:
 80167a4:	4b32      	ldr	r3, [pc, #200]	; (8016870 <__swsetup_r+0xcc>)
 80167a6:	b570      	push	{r4, r5, r6, lr}
 80167a8:	681d      	ldr	r5, [r3, #0]
 80167aa:	4606      	mov	r6, r0
 80167ac:	460c      	mov	r4, r1
 80167ae:	b125      	cbz	r5, 80167ba <__swsetup_r+0x16>
 80167b0:	69ab      	ldr	r3, [r5, #24]
 80167b2:	b913      	cbnz	r3, 80167ba <__swsetup_r+0x16>
 80167b4:	4628      	mov	r0, r5
 80167b6:	f000 f97d 	bl	8016ab4 <__sinit>
 80167ba:	4b2e      	ldr	r3, [pc, #184]	; (8016874 <__swsetup_r+0xd0>)
 80167bc:	429c      	cmp	r4, r3
 80167be:	d10f      	bne.n	80167e0 <__swsetup_r+0x3c>
 80167c0:	686c      	ldr	r4, [r5, #4]
 80167c2:	89a3      	ldrh	r3, [r4, #12]
 80167c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167c8:	0719      	lsls	r1, r3, #28
 80167ca:	d42c      	bmi.n	8016826 <__swsetup_r+0x82>
 80167cc:	06dd      	lsls	r5, r3, #27
 80167ce:	d411      	bmi.n	80167f4 <__swsetup_r+0x50>
 80167d0:	2309      	movs	r3, #9
 80167d2:	6033      	str	r3, [r6, #0]
 80167d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80167d8:	81a3      	strh	r3, [r4, #12]
 80167da:	f04f 30ff 	mov.w	r0, #4294967295
 80167de:	e03e      	b.n	801685e <__swsetup_r+0xba>
 80167e0:	4b25      	ldr	r3, [pc, #148]	; (8016878 <__swsetup_r+0xd4>)
 80167e2:	429c      	cmp	r4, r3
 80167e4:	d101      	bne.n	80167ea <__swsetup_r+0x46>
 80167e6:	68ac      	ldr	r4, [r5, #8]
 80167e8:	e7eb      	b.n	80167c2 <__swsetup_r+0x1e>
 80167ea:	4b24      	ldr	r3, [pc, #144]	; (801687c <__swsetup_r+0xd8>)
 80167ec:	429c      	cmp	r4, r3
 80167ee:	bf08      	it	eq
 80167f0:	68ec      	ldreq	r4, [r5, #12]
 80167f2:	e7e6      	b.n	80167c2 <__swsetup_r+0x1e>
 80167f4:	0758      	lsls	r0, r3, #29
 80167f6:	d512      	bpl.n	801681e <__swsetup_r+0x7a>
 80167f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167fa:	b141      	cbz	r1, 801680e <__swsetup_r+0x6a>
 80167fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016800:	4299      	cmp	r1, r3
 8016802:	d002      	beq.n	801680a <__swsetup_r+0x66>
 8016804:	4630      	mov	r0, r6
 8016806:	f000 fa5b 	bl	8016cc0 <_free_r>
 801680a:	2300      	movs	r3, #0
 801680c:	6363      	str	r3, [r4, #52]	; 0x34
 801680e:	89a3      	ldrh	r3, [r4, #12]
 8016810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016814:	81a3      	strh	r3, [r4, #12]
 8016816:	2300      	movs	r3, #0
 8016818:	6063      	str	r3, [r4, #4]
 801681a:	6923      	ldr	r3, [r4, #16]
 801681c:	6023      	str	r3, [r4, #0]
 801681e:	89a3      	ldrh	r3, [r4, #12]
 8016820:	f043 0308 	orr.w	r3, r3, #8
 8016824:	81a3      	strh	r3, [r4, #12]
 8016826:	6923      	ldr	r3, [r4, #16]
 8016828:	b94b      	cbnz	r3, 801683e <__swsetup_r+0x9a>
 801682a:	89a3      	ldrh	r3, [r4, #12]
 801682c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016834:	d003      	beq.n	801683e <__swsetup_r+0x9a>
 8016836:	4621      	mov	r1, r4
 8016838:	4630      	mov	r0, r6
 801683a:	f000 fa01 	bl	8016c40 <__smakebuf_r>
 801683e:	89a0      	ldrh	r0, [r4, #12]
 8016840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016844:	f010 0301 	ands.w	r3, r0, #1
 8016848:	d00a      	beq.n	8016860 <__swsetup_r+0xbc>
 801684a:	2300      	movs	r3, #0
 801684c:	60a3      	str	r3, [r4, #8]
 801684e:	6963      	ldr	r3, [r4, #20]
 8016850:	425b      	negs	r3, r3
 8016852:	61a3      	str	r3, [r4, #24]
 8016854:	6923      	ldr	r3, [r4, #16]
 8016856:	b943      	cbnz	r3, 801686a <__swsetup_r+0xc6>
 8016858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801685c:	d1ba      	bne.n	80167d4 <__swsetup_r+0x30>
 801685e:	bd70      	pop	{r4, r5, r6, pc}
 8016860:	0781      	lsls	r1, r0, #30
 8016862:	bf58      	it	pl
 8016864:	6963      	ldrpl	r3, [r4, #20]
 8016866:	60a3      	str	r3, [r4, #8]
 8016868:	e7f4      	b.n	8016854 <__swsetup_r+0xb0>
 801686a:	2000      	movs	r0, #0
 801686c:	e7f7      	b.n	801685e <__swsetup_r+0xba>
 801686e:	bf00      	nop
 8016870:	24000070 	.word	0x24000070
 8016874:	08017798 	.word	0x08017798
 8016878:	080177b8 	.word	0x080177b8
 801687c:	08017778 	.word	0x08017778

08016880 <__sflush_r>:
 8016880:	898a      	ldrh	r2, [r1, #12]
 8016882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016886:	4605      	mov	r5, r0
 8016888:	0710      	lsls	r0, r2, #28
 801688a:	460c      	mov	r4, r1
 801688c:	d458      	bmi.n	8016940 <__sflush_r+0xc0>
 801688e:	684b      	ldr	r3, [r1, #4]
 8016890:	2b00      	cmp	r3, #0
 8016892:	dc05      	bgt.n	80168a0 <__sflush_r+0x20>
 8016894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016896:	2b00      	cmp	r3, #0
 8016898:	dc02      	bgt.n	80168a0 <__sflush_r+0x20>
 801689a:	2000      	movs	r0, #0
 801689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168a2:	2e00      	cmp	r6, #0
 80168a4:	d0f9      	beq.n	801689a <__sflush_r+0x1a>
 80168a6:	2300      	movs	r3, #0
 80168a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80168ac:	682f      	ldr	r7, [r5, #0]
 80168ae:	602b      	str	r3, [r5, #0]
 80168b0:	d032      	beq.n	8016918 <__sflush_r+0x98>
 80168b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168b4:	89a3      	ldrh	r3, [r4, #12]
 80168b6:	075a      	lsls	r2, r3, #29
 80168b8:	d505      	bpl.n	80168c6 <__sflush_r+0x46>
 80168ba:	6863      	ldr	r3, [r4, #4]
 80168bc:	1ac0      	subs	r0, r0, r3
 80168be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168c0:	b10b      	cbz	r3, 80168c6 <__sflush_r+0x46>
 80168c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168c4:	1ac0      	subs	r0, r0, r3
 80168c6:	2300      	movs	r3, #0
 80168c8:	4602      	mov	r2, r0
 80168ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168cc:	6a21      	ldr	r1, [r4, #32]
 80168ce:	4628      	mov	r0, r5
 80168d0:	47b0      	blx	r6
 80168d2:	1c43      	adds	r3, r0, #1
 80168d4:	89a3      	ldrh	r3, [r4, #12]
 80168d6:	d106      	bne.n	80168e6 <__sflush_r+0x66>
 80168d8:	6829      	ldr	r1, [r5, #0]
 80168da:	291d      	cmp	r1, #29
 80168dc:	d82c      	bhi.n	8016938 <__sflush_r+0xb8>
 80168de:	4a2a      	ldr	r2, [pc, #168]	; (8016988 <__sflush_r+0x108>)
 80168e0:	40ca      	lsrs	r2, r1
 80168e2:	07d6      	lsls	r6, r2, #31
 80168e4:	d528      	bpl.n	8016938 <__sflush_r+0xb8>
 80168e6:	2200      	movs	r2, #0
 80168e8:	6062      	str	r2, [r4, #4]
 80168ea:	04d9      	lsls	r1, r3, #19
 80168ec:	6922      	ldr	r2, [r4, #16]
 80168ee:	6022      	str	r2, [r4, #0]
 80168f0:	d504      	bpl.n	80168fc <__sflush_r+0x7c>
 80168f2:	1c42      	adds	r2, r0, #1
 80168f4:	d101      	bne.n	80168fa <__sflush_r+0x7a>
 80168f6:	682b      	ldr	r3, [r5, #0]
 80168f8:	b903      	cbnz	r3, 80168fc <__sflush_r+0x7c>
 80168fa:	6560      	str	r0, [r4, #84]	; 0x54
 80168fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168fe:	602f      	str	r7, [r5, #0]
 8016900:	2900      	cmp	r1, #0
 8016902:	d0ca      	beq.n	801689a <__sflush_r+0x1a>
 8016904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016908:	4299      	cmp	r1, r3
 801690a:	d002      	beq.n	8016912 <__sflush_r+0x92>
 801690c:	4628      	mov	r0, r5
 801690e:	f000 f9d7 	bl	8016cc0 <_free_r>
 8016912:	2000      	movs	r0, #0
 8016914:	6360      	str	r0, [r4, #52]	; 0x34
 8016916:	e7c1      	b.n	801689c <__sflush_r+0x1c>
 8016918:	6a21      	ldr	r1, [r4, #32]
 801691a:	2301      	movs	r3, #1
 801691c:	4628      	mov	r0, r5
 801691e:	47b0      	blx	r6
 8016920:	1c41      	adds	r1, r0, #1
 8016922:	d1c7      	bne.n	80168b4 <__sflush_r+0x34>
 8016924:	682b      	ldr	r3, [r5, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d0c4      	beq.n	80168b4 <__sflush_r+0x34>
 801692a:	2b1d      	cmp	r3, #29
 801692c:	d001      	beq.n	8016932 <__sflush_r+0xb2>
 801692e:	2b16      	cmp	r3, #22
 8016930:	d101      	bne.n	8016936 <__sflush_r+0xb6>
 8016932:	602f      	str	r7, [r5, #0]
 8016934:	e7b1      	b.n	801689a <__sflush_r+0x1a>
 8016936:	89a3      	ldrh	r3, [r4, #12]
 8016938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801693c:	81a3      	strh	r3, [r4, #12]
 801693e:	e7ad      	b.n	801689c <__sflush_r+0x1c>
 8016940:	690f      	ldr	r7, [r1, #16]
 8016942:	2f00      	cmp	r7, #0
 8016944:	d0a9      	beq.n	801689a <__sflush_r+0x1a>
 8016946:	0793      	lsls	r3, r2, #30
 8016948:	680e      	ldr	r6, [r1, #0]
 801694a:	bf08      	it	eq
 801694c:	694b      	ldreq	r3, [r1, #20]
 801694e:	600f      	str	r7, [r1, #0]
 8016950:	bf18      	it	ne
 8016952:	2300      	movne	r3, #0
 8016954:	eba6 0807 	sub.w	r8, r6, r7
 8016958:	608b      	str	r3, [r1, #8]
 801695a:	f1b8 0f00 	cmp.w	r8, #0
 801695e:	dd9c      	ble.n	801689a <__sflush_r+0x1a>
 8016960:	6a21      	ldr	r1, [r4, #32]
 8016962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016964:	4643      	mov	r3, r8
 8016966:	463a      	mov	r2, r7
 8016968:	4628      	mov	r0, r5
 801696a:	47b0      	blx	r6
 801696c:	2800      	cmp	r0, #0
 801696e:	dc06      	bgt.n	801697e <__sflush_r+0xfe>
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016976:	81a3      	strh	r3, [r4, #12]
 8016978:	f04f 30ff 	mov.w	r0, #4294967295
 801697c:	e78e      	b.n	801689c <__sflush_r+0x1c>
 801697e:	4407      	add	r7, r0
 8016980:	eba8 0800 	sub.w	r8, r8, r0
 8016984:	e7e9      	b.n	801695a <__sflush_r+0xda>
 8016986:	bf00      	nop
 8016988:	20400001 	.word	0x20400001

0801698c <_fflush_r>:
 801698c:	b538      	push	{r3, r4, r5, lr}
 801698e:	690b      	ldr	r3, [r1, #16]
 8016990:	4605      	mov	r5, r0
 8016992:	460c      	mov	r4, r1
 8016994:	b913      	cbnz	r3, 801699c <_fflush_r+0x10>
 8016996:	2500      	movs	r5, #0
 8016998:	4628      	mov	r0, r5
 801699a:	bd38      	pop	{r3, r4, r5, pc}
 801699c:	b118      	cbz	r0, 80169a6 <_fflush_r+0x1a>
 801699e:	6983      	ldr	r3, [r0, #24]
 80169a0:	b90b      	cbnz	r3, 80169a6 <_fflush_r+0x1a>
 80169a2:	f000 f887 	bl	8016ab4 <__sinit>
 80169a6:	4b14      	ldr	r3, [pc, #80]	; (80169f8 <_fflush_r+0x6c>)
 80169a8:	429c      	cmp	r4, r3
 80169aa:	d11b      	bne.n	80169e4 <_fflush_r+0x58>
 80169ac:	686c      	ldr	r4, [r5, #4]
 80169ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d0ef      	beq.n	8016996 <_fflush_r+0xa>
 80169b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80169b8:	07d0      	lsls	r0, r2, #31
 80169ba:	d404      	bmi.n	80169c6 <_fflush_r+0x3a>
 80169bc:	0599      	lsls	r1, r3, #22
 80169be:	d402      	bmi.n	80169c6 <_fflush_r+0x3a>
 80169c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169c2:	f000 f915 	bl	8016bf0 <__retarget_lock_acquire_recursive>
 80169c6:	4628      	mov	r0, r5
 80169c8:	4621      	mov	r1, r4
 80169ca:	f7ff ff59 	bl	8016880 <__sflush_r>
 80169ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169d0:	07da      	lsls	r2, r3, #31
 80169d2:	4605      	mov	r5, r0
 80169d4:	d4e0      	bmi.n	8016998 <_fflush_r+0xc>
 80169d6:	89a3      	ldrh	r3, [r4, #12]
 80169d8:	059b      	lsls	r3, r3, #22
 80169da:	d4dd      	bmi.n	8016998 <_fflush_r+0xc>
 80169dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169de:	f000 f908 	bl	8016bf2 <__retarget_lock_release_recursive>
 80169e2:	e7d9      	b.n	8016998 <_fflush_r+0xc>
 80169e4:	4b05      	ldr	r3, [pc, #20]	; (80169fc <_fflush_r+0x70>)
 80169e6:	429c      	cmp	r4, r3
 80169e8:	d101      	bne.n	80169ee <_fflush_r+0x62>
 80169ea:	68ac      	ldr	r4, [r5, #8]
 80169ec:	e7df      	b.n	80169ae <_fflush_r+0x22>
 80169ee:	4b04      	ldr	r3, [pc, #16]	; (8016a00 <_fflush_r+0x74>)
 80169f0:	429c      	cmp	r4, r3
 80169f2:	bf08      	it	eq
 80169f4:	68ec      	ldreq	r4, [r5, #12]
 80169f6:	e7da      	b.n	80169ae <_fflush_r+0x22>
 80169f8:	08017798 	.word	0x08017798
 80169fc:	080177b8 	.word	0x080177b8
 8016a00:	08017778 	.word	0x08017778

08016a04 <std>:
 8016a04:	2300      	movs	r3, #0
 8016a06:	b510      	push	{r4, lr}
 8016a08:	4604      	mov	r4, r0
 8016a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8016a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a12:	6083      	str	r3, [r0, #8]
 8016a14:	8181      	strh	r1, [r0, #12]
 8016a16:	6643      	str	r3, [r0, #100]	; 0x64
 8016a18:	81c2      	strh	r2, [r0, #14]
 8016a1a:	6183      	str	r3, [r0, #24]
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	2208      	movs	r2, #8
 8016a20:	305c      	adds	r0, #92	; 0x5c
 8016a22:	f7ff fdd7 	bl	80165d4 <memset>
 8016a26:	4b05      	ldr	r3, [pc, #20]	; (8016a3c <std+0x38>)
 8016a28:	6263      	str	r3, [r4, #36]	; 0x24
 8016a2a:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <std+0x3c>)
 8016a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a2e:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <std+0x40>)
 8016a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a32:	4b05      	ldr	r3, [pc, #20]	; (8016a48 <std+0x44>)
 8016a34:	6224      	str	r4, [r4, #32]
 8016a36:	6323      	str	r3, [r4, #48]	; 0x30
 8016a38:	bd10      	pop	{r4, pc}
 8016a3a:	bf00      	nop
 8016a3c:	0801747d 	.word	0x0801747d
 8016a40:	0801749f 	.word	0x0801749f
 8016a44:	080174d7 	.word	0x080174d7
 8016a48:	080174fb 	.word	0x080174fb

08016a4c <_cleanup_r>:
 8016a4c:	4901      	ldr	r1, [pc, #4]	; (8016a54 <_cleanup_r+0x8>)
 8016a4e:	f000 b8af 	b.w	8016bb0 <_fwalk_reent>
 8016a52:	bf00      	nop
 8016a54:	0801698d 	.word	0x0801698d

08016a58 <__sfmoreglue>:
 8016a58:	b570      	push	{r4, r5, r6, lr}
 8016a5a:	2268      	movs	r2, #104	; 0x68
 8016a5c:	1e4d      	subs	r5, r1, #1
 8016a5e:	4355      	muls	r5, r2
 8016a60:	460e      	mov	r6, r1
 8016a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016a66:	f000 f997 	bl	8016d98 <_malloc_r>
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	b140      	cbz	r0, 8016a80 <__sfmoreglue+0x28>
 8016a6e:	2100      	movs	r1, #0
 8016a70:	e9c0 1600 	strd	r1, r6, [r0]
 8016a74:	300c      	adds	r0, #12
 8016a76:	60a0      	str	r0, [r4, #8]
 8016a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a7c:	f7ff fdaa 	bl	80165d4 <memset>
 8016a80:	4620      	mov	r0, r4
 8016a82:	bd70      	pop	{r4, r5, r6, pc}

08016a84 <__sfp_lock_acquire>:
 8016a84:	4801      	ldr	r0, [pc, #4]	; (8016a8c <__sfp_lock_acquire+0x8>)
 8016a86:	f000 b8b3 	b.w	8016bf0 <__retarget_lock_acquire_recursive>
 8016a8a:	bf00      	nop
 8016a8c:	24015525 	.word	0x24015525

08016a90 <__sfp_lock_release>:
 8016a90:	4801      	ldr	r0, [pc, #4]	; (8016a98 <__sfp_lock_release+0x8>)
 8016a92:	f000 b8ae 	b.w	8016bf2 <__retarget_lock_release_recursive>
 8016a96:	bf00      	nop
 8016a98:	24015525 	.word	0x24015525

08016a9c <__sinit_lock_acquire>:
 8016a9c:	4801      	ldr	r0, [pc, #4]	; (8016aa4 <__sinit_lock_acquire+0x8>)
 8016a9e:	f000 b8a7 	b.w	8016bf0 <__retarget_lock_acquire_recursive>
 8016aa2:	bf00      	nop
 8016aa4:	24015526 	.word	0x24015526

08016aa8 <__sinit_lock_release>:
 8016aa8:	4801      	ldr	r0, [pc, #4]	; (8016ab0 <__sinit_lock_release+0x8>)
 8016aaa:	f000 b8a2 	b.w	8016bf2 <__retarget_lock_release_recursive>
 8016aae:	bf00      	nop
 8016ab0:	24015526 	.word	0x24015526

08016ab4 <__sinit>:
 8016ab4:	b510      	push	{r4, lr}
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	f7ff fff0 	bl	8016a9c <__sinit_lock_acquire>
 8016abc:	69a3      	ldr	r3, [r4, #24]
 8016abe:	b11b      	cbz	r3, 8016ac8 <__sinit+0x14>
 8016ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ac4:	f7ff bff0 	b.w	8016aa8 <__sinit_lock_release>
 8016ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016acc:	6523      	str	r3, [r4, #80]	; 0x50
 8016ace:	4b13      	ldr	r3, [pc, #76]	; (8016b1c <__sinit+0x68>)
 8016ad0:	4a13      	ldr	r2, [pc, #76]	; (8016b20 <__sinit+0x6c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016ad6:	42a3      	cmp	r3, r4
 8016ad8:	bf04      	itt	eq
 8016ada:	2301      	moveq	r3, #1
 8016adc:	61a3      	streq	r3, [r4, #24]
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f000 f820 	bl	8016b24 <__sfp>
 8016ae4:	6060      	str	r0, [r4, #4]
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f000 f81c 	bl	8016b24 <__sfp>
 8016aec:	60a0      	str	r0, [r4, #8]
 8016aee:	4620      	mov	r0, r4
 8016af0:	f000 f818 	bl	8016b24 <__sfp>
 8016af4:	2200      	movs	r2, #0
 8016af6:	60e0      	str	r0, [r4, #12]
 8016af8:	2104      	movs	r1, #4
 8016afa:	6860      	ldr	r0, [r4, #4]
 8016afc:	f7ff ff82 	bl	8016a04 <std>
 8016b00:	68a0      	ldr	r0, [r4, #8]
 8016b02:	2201      	movs	r2, #1
 8016b04:	2109      	movs	r1, #9
 8016b06:	f7ff ff7d 	bl	8016a04 <std>
 8016b0a:	68e0      	ldr	r0, [r4, #12]
 8016b0c:	2202      	movs	r2, #2
 8016b0e:	2112      	movs	r1, #18
 8016b10:	f7ff ff78 	bl	8016a04 <std>
 8016b14:	2301      	movs	r3, #1
 8016b16:	61a3      	str	r3, [r4, #24]
 8016b18:	e7d2      	b.n	8016ac0 <__sinit+0xc>
 8016b1a:	bf00      	nop
 8016b1c:	08017774 	.word	0x08017774
 8016b20:	08016a4d 	.word	0x08016a4d

08016b24 <__sfp>:
 8016b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b26:	4607      	mov	r7, r0
 8016b28:	f7ff ffac 	bl	8016a84 <__sfp_lock_acquire>
 8016b2c:	4b1e      	ldr	r3, [pc, #120]	; (8016ba8 <__sfp+0x84>)
 8016b2e:	681e      	ldr	r6, [r3, #0]
 8016b30:	69b3      	ldr	r3, [r6, #24]
 8016b32:	b913      	cbnz	r3, 8016b3a <__sfp+0x16>
 8016b34:	4630      	mov	r0, r6
 8016b36:	f7ff ffbd 	bl	8016ab4 <__sinit>
 8016b3a:	3648      	adds	r6, #72	; 0x48
 8016b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b40:	3b01      	subs	r3, #1
 8016b42:	d503      	bpl.n	8016b4c <__sfp+0x28>
 8016b44:	6833      	ldr	r3, [r6, #0]
 8016b46:	b30b      	cbz	r3, 8016b8c <__sfp+0x68>
 8016b48:	6836      	ldr	r6, [r6, #0]
 8016b4a:	e7f7      	b.n	8016b3c <__sfp+0x18>
 8016b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b50:	b9d5      	cbnz	r5, 8016b88 <__sfp+0x64>
 8016b52:	4b16      	ldr	r3, [pc, #88]	; (8016bac <__sfp+0x88>)
 8016b54:	60e3      	str	r3, [r4, #12]
 8016b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8016b5c:	f000 f847 	bl	8016bee <__retarget_lock_init_recursive>
 8016b60:	f7ff ff96 	bl	8016a90 <__sfp_lock_release>
 8016b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016b6c:	6025      	str	r5, [r4, #0]
 8016b6e:	61a5      	str	r5, [r4, #24]
 8016b70:	2208      	movs	r2, #8
 8016b72:	4629      	mov	r1, r5
 8016b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b78:	f7ff fd2c 	bl	80165d4 <memset>
 8016b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016b84:	4620      	mov	r0, r4
 8016b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b88:	3468      	adds	r4, #104	; 0x68
 8016b8a:	e7d9      	b.n	8016b40 <__sfp+0x1c>
 8016b8c:	2104      	movs	r1, #4
 8016b8e:	4638      	mov	r0, r7
 8016b90:	f7ff ff62 	bl	8016a58 <__sfmoreglue>
 8016b94:	4604      	mov	r4, r0
 8016b96:	6030      	str	r0, [r6, #0]
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	d1d5      	bne.n	8016b48 <__sfp+0x24>
 8016b9c:	f7ff ff78 	bl	8016a90 <__sfp_lock_release>
 8016ba0:	230c      	movs	r3, #12
 8016ba2:	603b      	str	r3, [r7, #0]
 8016ba4:	e7ee      	b.n	8016b84 <__sfp+0x60>
 8016ba6:	bf00      	nop
 8016ba8:	08017774 	.word	0x08017774
 8016bac:	ffff0001 	.word	0xffff0001

08016bb0 <_fwalk_reent>:
 8016bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	4688      	mov	r8, r1
 8016bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016bbc:	2700      	movs	r7, #0
 8016bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8016bc6:	d505      	bpl.n	8016bd4 <_fwalk_reent+0x24>
 8016bc8:	6824      	ldr	r4, [r4, #0]
 8016bca:	2c00      	cmp	r4, #0
 8016bcc:	d1f7      	bne.n	8016bbe <_fwalk_reent+0xe>
 8016bce:	4638      	mov	r0, r7
 8016bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bd4:	89ab      	ldrh	r3, [r5, #12]
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	d907      	bls.n	8016bea <_fwalk_reent+0x3a>
 8016bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bde:	3301      	adds	r3, #1
 8016be0:	d003      	beq.n	8016bea <_fwalk_reent+0x3a>
 8016be2:	4629      	mov	r1, r5
 8016be4:	4630      	mov	r0, r6
 8016be6:	47c0      	blx	r8
 8016be8:	4307      	orrs	r7, r0
 8016bea:	3568      	adds	r5, #104	; 0x68
 8016bec:	e7e9      	b.n	8016bc2 <_fwalk_reent+0x12>

08016bee <__retarget_lock_init_recursive>:
 8016bee:	4770      	bx	lr

08016bf0 <__retarget_lock_acquire_recursive>:
 8016bf0:	4770      	bx	lr

08016bf2 <__retarget_lock_release_recursive>:
 8016bf2:	4770      	bx	lr

08016bf4 <__swhatbuf_r>:
 8016bf4:	b570      	push	{r4, r5, r6, lr}
 8016bf6:	460e      	mov	r6, r1
 8016bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bfc:	2900      	cmp	r1, #0
 8016bfe:	b096      	sub	sp, #88	; 0x58
 8016c00:	4614      	mov	r4, r2
 8016c02:	461d      	mov	r5, r3
 8016c04:	da08      	bge.n	8016c18 <__swhatbuf_r+0x24>
 8016c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	602a      	str	r2, [r5, #0]
 8016c0e:	061a      	lsls	r2, r3, #24
 8016c10:	d410      	bmi.n	8016c34 <__swhatbuf_r+0x40>
 8016c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c16:	e00e      	b.n	8016c36 <__swhatbuf_r+0x42>
 8016c18:	466a      	mov	r2, sp
 8016c1a:	f000 fc95 	bl	8017548 <_fstat_r>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	dbf1      	blt.n	8016c06 <__swhatbuf_r+0x12>
 8016c22:	9a01      	ldr	r2, [sp, #4]
 8016c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c2c:	425a      	negs	r2, r3
 8016c2e:	415a      	adcs	r2, r3
 8016c30:	602a      	str	r2, [r5, #0]
 8016c32:	e7ee      	b.n	8016c12 <__swhatbuf_r+0x1e>
 8016c34:	2340      	movs	r3, #64	; 0x40
 8016c36:	2000      	movs	r0, #0
 8016c38:	6023      	str	r3, [r4, #0]
 8016c3a:	b016      	add	sp, #88	; 0x58
 8016c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c40 <__smakebuf_r>:
 8016c40:	898b      	ldrh	r3, [r1, #12]
 8016c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c44:	079d      	lsls	r5, r3, #30
 8016c46:	4606      	mov	r6, r0
 8016c48:	460c      	mov	r4, r1
 8016c4a:	d507      	bpl.n	8016c5c <__smakebuf_r+0x1c>
 8016c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c50:	6023      	str	r3, [r4, #0]
 8016c52:	6123      	str	r3, [r4, #16]
 8016c54:	2301      	movs	r3, #1
 8016c56:	6163      	str	r3, [r4, #20]
 8016c58:	b002      	add	sp, #8
 8016c5a:	bd70      	pop	{r4, r5, r6, pc}
 8016c5c:	ab01      	add	r3, sp, #4
 8016c5e:	466a      	mov	r2, sp
 8016c60:	f7ff ffc8 	bl	8016bf4 <__swhatbuf_r>
 8016c64:	9900      	ldr	r1, [sp, #0]
 8016c66:	4605      	mov	r5, r0
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f000 f895 	bl	8016d98 <_malloc_r>
 8016c6e:	b948      	cbnz	r0, 8016c84 <__smakebuf_r+0x44>
 8016c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c74:	059a      	lsls	r2, r3, #22
 8016c76:	d4ef      	bmi.n	8016c58 <__smakebuf_r+0x18>
 8016c78:	f023 0303 	bic.w	r3, r3, #3
 8016c7c:	f043 0302 	orr.w	r3, r3, #2
 8016c80:	81a3      	strh	r3, [r4, #12]
 8016c82:	e7e3      	b.n	8016c4c <__smakebuf_r+0xc>
 8016c84:	4b0d      	ldr	r3, [pc, #52]	; (8016cbc <__smakebuf_r+0x7c>)
 8016c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8016c88:	89a3      	ldrh	r3, [r4, #12]
 8016c8a:	6020      	str	r0, [r4, #0]
 8016c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c90:	81a3      	strh	r3, [r4, #12]
 8016c92:	9b00      	ldr	r3, [sp, #0]
 8016c94:	6163      	str	r3, [r4, #20]
 8016c96:	9b01      	ldr	r3, [sp, #4]
 8016c98:	6120      	str	r0, [r4, #16]
 8016c9a:	b15b      	cbz	r3, 8016cb4 <__smakebuf_r+0x74>
 8016c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	f000 fc63 	bl	801756c <_isatty_r>
 8016ca6:	b128      	cbz	r0, 8016cb4 <__smakebuf_r+0x74>
 8016ca8:	89a3      	ldrh	r3, [r4, #12]
 8016caa:	f023 0303 	bic.w	r3, r3, #3
 8016cae:	f043 0301 	orr.w	r3, r3, #1
 8016cb2:	81a3      	strh	r3, [r4, #12]
 8016cb4:	89a0      	ldrh	r0, [r4, #12]
 8016cb6:	4305      	orrs	r5, r0
 8016cb8:	81a5      	strh	r5, [r4, #12]
 8016cba:	e7cd      	b.n	8016c58 <__smakebuf_r+0x18>
 8016cbc:	08016a4d 	.word	0x08016a4d

08016cc0 <_free_r>:
 8016cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cc2:	2900      	cmp	r1, #0
 8016cc4:	d044      	beq.n	8016d50 <_free_r+0x90>
 8016cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cca:	9001      	str	r0, [sp, #4]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f1a1 0404 	sub.w	r4, r1, #4
 8016cd2:	bfb8      	it	lt
 8016cd4:	18e4      	addlt	r4, r4, r3
 8016cd6:	f000 fc6b 	bl	80175b0 <__malloc_lock>
 8016cda:	4a1e      	ldr	r2, [pc, #120]	; (8016d54 <_free_r+0x94>)
 8016cdc:	9801      	ldr	r0, [sp, #4]
 8016cde:	6813      	ldr	r3, [r2, #0]
 8016ce0:	b933      	cbnz	r3, 8016cf0 <_free_r+0x30>
 8016ce2:	6063      	str	r3, [r4, #4]
 8016ce4:	6014      	str	r4, [r2, #0]
 8016ce6:	b003      	add	sp, #12
 8016ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cec:	f000 bc66 	b.w	80175bc <__malloc_unlock>
 8016cf0:	42a3      	cmp	r3, r4
 8016cf2:	d908      	bls.n	8016d06 <_free_r+0x46>
 8016cf4:	6825      	ldr	r5, [r4, #0]
 8016cf6:	1961      	adds	r1, r4, r5
 8016cf8:	428b      	cmp	r3, r1
 8016cfa:	bf01      	itttt	eq
 8016cfc:	6819      	ldreq	r1, [r3, #0]
 8016cfe:	685b      	ldreq	r3, [r3, #4]
 8016d00:	1949      	addeq	r1, r1, r5
 8016d02:	6021      	streq	r1, [r4, #0]
 8016d04:	e7ed      	b.n	8016ce2 <_free_r+0x22>
 8016d06:	461a      	mov	r2, r3
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	b10b      	cbz	r3, 8016d10 <_free_r+0x50>
 8016d0c:	42a3      	cmp	r3, r4
 8016d0e:	d9fa      	bls.n	8016d06 <_free_r+0x46>
 8016d10:	6811      	ldr	r1, [r2, #0]
 8016d12:	1855      	adds	r5, r2, r1
 8016d14:	42a5      	cmp	r5, r4
 8016d16:	d10b      	bne.n	8016d30 <_free_r+0x70>
 8016d18:	6824      	ldr	r4, [r4, #0]
 8016d1a:	4421      	add	r1, r4
 8016d1c:	1854      	adds	r4, r2, r1
 8016d1e:	42a3      	cmp	r3, r4
 8016d20:	6011      	str	r1, [r2, #0]
 8016d22:	d1e0      	bne.n	8016ce6 <_free_r+0x26>
 8016d24:	681c      	ldr	r4, [r3, #0]
 8016d26:	685b      	ldr	r3, [r3, #4]
 8016d28:	6053      	str	r3, [r2, #4]
 8016d2a:	4421      	add	r1, r4
 8016d2c:	6011      	str	r1, [r2, #0]
 8016d2e:	e7da      	b.n	8016ce6 <_free_r+0x26>
 8016d30:	d902      	bls.n	8016d38 <_free_r+0x78>
 8016d32:	230c      	movs	r3, #12
 8016d34:	6003      	str	r3, [r0, #0]
 8016d36:	e7d6      	b.n	8016ce6 <_free_r+0x26>
 8016d38:	6825      	ldr	r5, [r4, #0]
 8016d3a:	1961      	adds	r1, r4, r5
 8016d3c:	428b      	cmp	r3, r1
 8016d3e:	bf04      	itt	eq
 8016d40:	6819      	ldreq	r1, [r3, #0]
 8016d42:	685b      	ldreq	r3, [r3, #4]
 8016d44:	6063      	str	r3, [r4, #4]
 8016d46:	bf04      	itt	eq
 8016d48:	1949      	addeq	r1, r1, r5
 8016d4a:	6021      	streq	r1, [r4, #0]
 8016d4c:	6054      	str	r4, [r2, #4]
 8016d4e:	e7ca      	b.n	8016ce6 <_free_r+0x26>
 8016d50:	b003      	add	sp, #12
 8016d52:	bd30      	pop	{r4, r5, pc}
 8016d54:	24015528 	.word	0x24015528

08016d58 <sbrk_aligned>:
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	4e0e      	ldr	r6, [pc, #56]	; (8016d94 <sbrk_aligned+0x3c>)
 8016d5c:	460c      	mov	r4, r1
 8016d5e:	6831      	ldr	r1, [r6, #0]
 8016d60:	4605      	mov	r5, r0
 8016d62:	b911      	cbnz	r1, 8016d6a <sbrk_aligned+0x12>
 8016d64:	f000 fb7a 	bl	801745c <_sbrk_r>
 8016d68:	6030      	str	r0, [r6, #0]
 8016d6a:	4621      	mov	r1, r4
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	f000 fb75 	bl	801745c <_sbrk_r>
 8016d72:	1c43      	adds	r3, r0, #1
 8016d74:	d00a      	beq.n	8016d8c <sbrk_aligned+0x34>
 8016d76:	1cc4      	adds	r4, r0, #3
 8016d78:	f024 0403 	bic.w	r4, r4, #3
 8016d7c:	42a0      	cmp	r0, r4
 8016d7e:	d007      	beq.n	8016d90 <sbrk_aligned+0x38>
 8016d80:	1a21      	subs	r1, r4, r0
 8016d82:	4628      	mov	r0, r5
 8016d84:	f000 fb6a 	bl	801745c <_sbrk_r>
 8016d88:	3001      	adds	r0, #1
 8016d8a:	d101      	bne.n	8016d90 <sbrk_aligned+0x38>
 8016d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8016d90:	4620      	mov	r0, r4
 8016d92:	bd70      	pop	{r4, r5, r6, pc}
 8016d94:	2401552c 	.word	0x2401552c

08016d98 <_malloc_r>:
 8016d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d9c:	1ccd      	adds	r5, r1, #3
 8016d9e:	f025 0503 	bic.w	r5, r5, #3
 8016da2:	3508      	adds	r5, #8
 8016da4:	2d0c      	cmp	r5, #12
 8016da6:	bf38      	it	cc
 8016da8:	250c      	movcc	r5, #12
 8016daa:	2d00      	cmp	r5, #0
 8016dac:	4607      	mov	r7, r0
 8016dae:	db01      	blt.n	8016db4 <_malloc_r+0x1c>
 8016db0:	42a9      	cmp	r1, r5
 8016db2:	d905      	bls.n	8016dc0 <_malloc_r+0x28>
 8016db4:	230c      	movs	r3, #12
 8016db6:	603b      	str	r3, [r7, #0]
 8016db8:	2600      	movs	r6, #0
 8016dba:	4630      	mov	r0, r6
 8016dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc0:	4e2e      	ldr	r6, [pc, #184]	; (8016e7c <_malloc_r+0xe4>)
 8016dc2:	f000 fbf5 	bl	80175b0 <__malloc_lock>
 8016dc6:	6833      	ldr	r3, [r6, #0]
 8016dc8:	461c      	mov	r4, r3
 8016dca:	bb34      	cbnz	r4, 8016e1a <_malloc_r+0x82>
 8016dcc:	4629      	mov	r1, r5
 8016dce:	4638      	mov	r0, r7
 8016dd0:	f7ff ffc2 	bl	8016d58 <sbrk_aligned>
 8016dd4:	1c43      	adds	r3, r0, #1
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	d14d      	bne.n	8016e76 <_malloc_r+0xde>
 8016dda:	6834      	ldr	r4, [r6, #0]
 8016ddc:	4626      	mov	r6, r4
 8016dde:	2e00      	cmp	r6, #0
 8016de0:	d140      	bne.n	8016e64 <_malloc_r+0xcc>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	4631      	mov	r1, r6
 8016de6:	4638      	mov	r0, r7
 8016de8:	eb04 0803 	add.w	r8, r4, r3
 8016dec:	f000 fb36 	bl	801745c <_sbrk_r>
 8016df0:	4580      	cmp	r8, r0
 8016df2:	d13a      	bne.n	8016e6a <_malloc_r+0xd2>
 8016df4:	6821      	ldr	r1, [r4, #0]
 8016df6:	3503      	adds	r5, #3
 8016df8:	1a6d      	subs	r5, r5, r1
 8016dfa:	f025 0503 	bic.w	r5, r5, #3
 8016dfe:	3508      	adds	r5, #8
 8016e00:	2d0c      	cmp	r5, #12
 8016e02:	bf38      	it	cc
 8016e04:	250c      	movcc	r5, #12
 8016e06:	4629      	mov	r1, r5
 8016e08:	4638      	mov	r0, r7
 8016e0a:	f7ff ffa5 	bl	8016d58 <sbrk_aligned>
 8016e0e:	3001      	adds	r0, #1
 8016e10:	d02b      	beq.n	8016e6a <_malloc_r+0xd2>
 8016e12:	6823      	ldr	r3, [r4, #0]
 8016e14:	442b      	add	r3, r5
 8016e16:	6023      	str	r3, [r4, #0]
 8016e18:	e00e      	b.n	8016e38 <_malloc_r+0xa0>
 8016e1a:	6822      	ldr	r2, [r4, #0]
 8016e1c:	1b52      	subs	r2, r2, r5
 8016e1e:	d41e      	bmi.n	8016e5e <_malloc_r+0xc6>
 8016e20:	2a0b      	cmp	r2, #11
 8016e22:	d916      	bls.n	8016e52 <_malloc_r+0xba>
 8016e24:	1961      	adds	r1, r4, r5
 8016e26:	42a3      	cmp	r3, r4
 8016e28:	6025      	str	r5, [r4, #0]
 8016e2a:	bf18      	it	ne
 8016e2c:	6059      	strne	r1, [r3, #4]
 8016e2e:	6863      	ldr	r3, [r4, #4]
 8016e30:	bf08      	it	eq
 8016e32:	6031      	streq	r1, [r6, #0]
 8016e34:	5162      	str	r2, [r4, r5]
 8016e36:	604b      	str	r3, [r1, #4]
 8016e38:	4638      	mov	r0, r7
 8016e3a:	f104 060b 	add.w	r6, r4, #11
 8016e3e:	f000 fbbd 	bl	80175bc <__malloc_unlock>
 8016e42:	f026 0607 	bic.w	r6, r6, #7
 8016e46:	1d23      	adds	r3, r4, #4
 8016e48:	1af2      	subs	r2, r6, r3
 8016e4a:	d0b6      	beq.n	8016dba <_malloc_r+0x22>
 8016e4c:	1b9b      	subs	r3, r3, r6
 8016e4e:	50a3      	str	r3, [r4, r2]
 8016e50:	e7b3      	b.n	8016dba <_malloc_r+0x22>
 8016e52:	6862      	ldr	r2, [r4, #4]
 8016e54:	42a3      	cmp	r3, r4
 8016e56:	bf0c      	ite	eq
 8016e58:	6032      	streq	r2, [r6, #0]
 8016e5a:	605a      	strne	r2, [r3, #4]
 8016e5c:	e7ec      	b.n	8016e38 <_malloc_r+0xa0>
 8016e5e:	4623      	mov	r3, r4
 8016e60:	6864      	ldr	r4, [r4, #4]
 8016e62:	e7b2      	b.n	8016dca <_malloc_r+0x32>
 8016e64:	4634      	mov	r4, r6
 8016e66:	6876      	ldr	r6, [r6, #4]
 8016e68:	e7b9      	b.n	8016dde <_malloc_r+0x46>
 8016e6a:	230c      	movs	r3, #12
 8016e6c:	603b      	str	r3, [r7, #0]
 8016e6e:	4638      	mov	r0, r7
 8016e70:	f000 fba4 	bl	80175bc <__malloc_unlock>
 8016e74:	e7a1      	b.n	8016dba <_malloc_r+0x22>
 8016e76:	6025      	str	r5, [r4, #0]
 8016e78:	e7de      	b.n	8016e38 <_malloc_r+0xa0>
 8016e7a:	bf00      	nop
 8016e7c:	24015528 	.word	0x24015528

08016e80 <__sfputc_r>:
 8016e80:	6893      	ldr	r3, [r2, #8]
 8016e82:	3b01      	subs	r3, #1
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	b410      	push	{r4}
 8016e88:	6093      	str	r3, [r2, #8]
 8016e8a:	da08      	bge.n	8016e9e <__sfputc_r+0x1e>
 8016e8c:	6994      	ldr	r4, [r2, #24]
 8016e8e:	42a3      	cmp	r3, r4
 8016e90:	db01      	blt.n	8016e96 <__sfputc_r+0x16>
 8016e92:	290a      	cmp	r1, #10
 8016e94:	d103      	bne.n	8016e9e <__sfputc_r+0x1e>
 8016e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e9a:	f7ff bc31 	b.w	8016700 <__swbuf_r>
 8016e9e:	6813      	ldr	r3, [r2, #0]
 8016ea0:	1c58      	adds	r0, r3, #1
 8016ea2:	6010      	str	r0, [r2, #0]
 8016ea4:	7019      	strb	r1, [r3, #0]
 8016ea6:	4608      	mov	r0, r1
 8016ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <__sfputs_r>:
 8016eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	460f      	mov	r7, r1
 8016eb4:	4614      	mov	r4, r2
 8016eb6:	18d5      	adds	r5, r2, r3
 8016eb8:	42ac      	cmp	r4, r5
 8016eba:	d101      	bne.n	8016ec0 <__sfputs_r+0x12>
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	e007      	b.n	8016ed0 <__sfputs_r+0x22>
 8016ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ec4:	463a      	mov	r2, r7
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	f7ff ffda 	bl	8016e80 <__sfputc_r>
 8016ecc:	1c43      	adds	r3, r0, #1
 8016ece:	d1f3      	bne.n	8016eb8 <__sfputs_r+0xa>
 8016ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016ed4 <_vfiprintf_r>:
 8016ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	460d      	mov	r5, r1
 8016eda:	b09d      	sub	sp, #116	; 0x74
 8016edc:	4614      	mov	r4, r2
 8016ede:	4698      	mov	r8, r3
 8016ee0:	4606      	mov	r6, r0
 8016ee2:	b118      	cbz	r0, 8016eec <_vfiprintf_r+0x18>
 8016ee4:	6983      	ldr	r3, [r0, #24]
 8016ee6:	b90b      	cbnz	r3, 8016eec <_vfiprintf_r+0x18>
 8016ee8:	f7ff fde4 	bl	8016ab4 <__sinit>
 8016eec:	4b89      	ldr	r3, [pc, #548]	; (8017114 <_vfiprintf_r+0x240>)
 8016eee:	429d      	cmp	r5, r3
 8016ef0:	d11b      	bne.n	8016f2a <_vfiprintf_r+0x56>
 8016ef2:	6875      	ldr	r5, [r6, #4]
 8016ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ef6:	07d9      	lsls	r1, r3, #31
 8016ef8:	d405      	bmi.n	8016f06 <_vfiprintf_r+0x32>
 8016efa:	89ab      	ldrh	r3, [r5, #12]
 8016efc:	059a      	lsls	r2, r3, #22
 8016efe:	d402      	bmi.n	8016f06 <_vfiprintf_r+0x32>
 8016f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f02:	f7ff fe75 	bl	8016bf0 <__retarget_lock_acquire_recursive>
 8016f06:	89ab      	ldrh	r3, [r5, #12]
 8016f08:	071b      	lsls	r3, r3, #28
 8016f0a:	d501      	bpl.n	8016f10 <_vfiprintf_r+0x3c>
 8016f0c:	692b      	ldr	r3, [r5, #16]
 8016f0e:	b9eb      	cbnz	r3, 8016f4c <_vfiprintf_r+0x78>
 8016f10:	4629      	mov	r1, r5
 8016f12:	4630      	mov	r0, r6
 8016f14:	f7ff fc46 	bl	80167a4 <__swsetup_r>
 8016f18:	b1c0      	cbz	r0, 8016f4c <_vfiprintf_r+0x78>
 8016f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f1c:	07dc      	lsls	r4, r3, #31
 8016f1e:	d50e      	bpl.n	8016f3e <_vfiprintf_r+0x6a>
 8016f20:	f04f 30ff 	mov.w	r0, #4294967295
 8016f24:	b01d      	add	sp, #116	; 0x74
 8016f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2a:	4b7b      	ldr	r3, [pc, #492]	; (8017118 <_vfiprintf_r+0x244>)
 8016f2c:	429d      	cmp	r5, r3
 8016f2e:	d101      	bne.n	8016f34 <_vfiprintf_r+0x60>
 8016f30:	68b5      	ldr	r5, [r6, #8]
 8016f32:	e7df      	b.n	8016ef4 <_vfiprintf_r+0x20>
 8016f34:	4b79      	ldr	r3, [pc, #484]	; (801711c <_vfiprintf_r+0x248>)
 8016f36:	429d      	cmp	r5, r3
 8016f38:	bf08      	it	eq
 8016f3a:	68f5      	ldreq	r5, [r6, #12]
 8016f3c:	e7da      	b.n	8016ef4 <_vfiprintf_r+0x20>
 8016f3e:	89ab      	ldrh	r3, [r5, #12]
 8016f40:	0598      	lsls	r0, r3, #22
 8016f42:	d4ed      	bmi.n	8016f20 <_vfiprintf_r+0x4c>
 8016f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f46:	f7ff fe54 	bl	8016bf2 <__retarget_lock_release_recursive>
 8016f4a:	e7e9      	b.n	8016f20 <_vfiprintf_r+0x4c>
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016f50:	2320      	movs	r3, #32
 8016f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f5a:	2330      	movs	r3, #48	; 0x30
 8016f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017120 <_vfiprintf_r+0x24c>
 8016f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f64:	f04f 0901 	mov.w	r9, #1
 8016f68:	4623      	mov	r3, r4
 8016f6a:	469a      	mov	sl, r3
 8016f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f70:	b10a      	cbz	r2, 8016f76 <_vfiprintf_r+0xa2>
 8016f72:	2a25      	cmp	r2, #37	; 0x25
 8016f74:	d1f9      	bne.n	8016f6a <_vfiprintf_r+0x96>
 8016f76:	ebba 0b04 	subs.w	fp, sl, r4
 8016f7a:	d00b      	beq.n	8016f94 <_vfiprintf_r+0xc0>
 8016f7c:	465b      	mov	r3, fp
 8016f7e:	4622      	mov	r2, r4
 8016f80:	4629      	mov	r1, r5
 8016f82:	4630      	mov	r0, r6
 8016f84:	f7ff ff93 	bl	8016eae <__sfputs_r>
 8016f88:	3001      	adds	r0, #1
 8016f8a:	f000 80aa 	beq.w	80170e2 <_vfiprintf_r+0x20e>
 8016f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f90:	445a      	add	r2, fp
 8016f92:	9209      	str	r2, [sp, #36]	; 0x24
 8016f94:	f89a 3000 	ldrb.w	r3, [sl]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	f000 80a2 	beq.w	80170e2 <_vfiprintf_r+0x20e>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8016fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016fa8:	f10a 0a01 	add.w	sl, sl, #1
 8016fac:	9304      	str	r3, [sp, #16]
 8016fae:	9307      	str	r3, [sp, #28]
 8016fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8016fb6:	4654      	mov	r4, sl
 8016fb8:	2205      	movs	r2, #5
 8016fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fbe:	4858      	ldr	r0, [pc, #352]	; (8017120 <_vfiprintf_r+0x24c>)
 8016fc0:	f7e9 faae 	bl	8000520 <memchr>
 8016fc4:	9a04      	ldr	r2, [sp, #16]
 8016fc6:	b9d8      	cbnz	r0, 8017000 <_vfiprintf_r+0x12c>
 8016fc8:	06d1      	lsls	r1, r2, #27
 8016fca:	bf44      	itt	mi
 8016fcc:	2320      	movmi	r3, #32
 8016fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fd2:	0713      	lsls	r3, r2, #28
 8016fd4:	bf44      	itt	mi
 8016fd6:	232b      	movmi	r3, #43	; 0x2b
 8016fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8016fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8016fe2:	d015      	beq.n	8017010 <_vfiprintf_r+0x13c>
 8016fe4:	9a07      	ldr	r2, [sp, #28]
 8016fe6:	4654      	mov	r4, sl
 8016fe8:	2000      	movs	r0, #0
 8016fea:	f04f 0c0a 	mov.w	ip, #10
 8016fee:	4621      	mov	r1, r4
 8016ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ff4:	3b30      	subs	r3, #48	; 0x30
 8016ff6:	2b09      	cmp	r3, #9
 8016ff8:	d94e      	bls.n	8017098 <_vfiprintf_r+0x1c4>
 8016ffa:	b1b0      	cbz	r0, 801702a <_vfiprintf_r+0x156>
 8016ffc:	9207      	str	r2, [sp, #28]
 8016ffe:	e014      	b.n	801702a <_vfiprintf_r+0x156>
 8017000:	eba0 0308 	sub.w	r3, r0, r8
 8017004:	fa09 f303 	lsl.w	r3, r9, r3
 8017008:	4313      	orrs	r3, r2
 801700a:	9304      	str	r3, [sp, #16]
 801700c:	46a2      	mov	sl, r4
 801700e:	e7d2      	b.n	8016fb6 <_vfiprintf_r+0xe2>
 8017010:	9b03      	ldr	r3, [sp, #12]
 8017012:	1d19      	adds	r1, r3, #4
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	9103      	str	r1, [sp, #12]
 8017018:	2b00      	cmp	r3, #0
 801701a:	bfbb      	ittet	lt
 801701c:	425b      	neglt	r3, r3
 801701e:	f042 0202 	orrlt.w	r2, r2, #2
 8017022:	9307      	strge	r3, [sp, #28]
 8017024:	9307      	strlt	r3, [sp, #28]
 8017026:	bfb8      	it	lt
 8017028:	9204      	strlt	r2, [sp, #16]
 801702a:	7823      	ldrb	r3, [r4, #0]
 801702c:	2b2e      	cmp	r3, #46	; 0x2e
 801702e:	d10c      	bne.n	801704a <_vfiprintf_r+0x176>
 8017030:	7863      	ldrb	r3, [r4, #1]
 8017032:	2b2a      	cmp	r3, #42	; 0x2a
 8017034:	d135      	bne.n	80170a2 <_vfiprintf_r+0x1ce>
 8017036:	9b03      	ldr	r3, [sp, #12]
 8017038:	1d1a      	adds	r2, r3, #4
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	9203      	str	r2, [sp, #12]
 801703e:	2b00      	cmp	r3, #0
 8017040:	bfb8      	it	lt
 8017042:	f04f 33ff 	movlt.w	r3, #4294967295
 8017046:	3402      	adds	r4, #2
 8017048:	9305      	str	r3, [sp, #20]
 801704a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017130 <_vfiprintf_r+0x25c>
 801704e:	7821      	ldrb	r1, [r4, #0]
 8017050:	2203      	movs	r2, #3
 8017052:	4650      	mov	r0, sl
 8017054:	f7e9 fa64 	bl	8000520 <memchr>
 8017058:	b140      	cbz	r0, 801706c <_vfiprintf_r+0x198>
 801705a:	2340      	movs	r3, #64	; 0x40
 801705c:	eba0 000a 	sub.w	r0, r0, sl
 8017060:	fa03 f000 	lsl.w	r0, r3, r0
 8017064:	9b04      	ldr	r3, [sp, #16]
 8017066:	4303      	orrs	r3, r0
 8017068:	3401      	adds	r4, #1
 801706a:	9304      	str	r3, [sp, #16]
 801706c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017070:	482c      	ldr	r0, [pc, #176]	; (8017124 <_vfiprintf_r+0x250>)
 8017072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017076:	2206      	movs	r2, #6
 8017078:	f7e9 fa52 	bl	8000520 <memchr>
 801707c:	2800      	cmp	r0, #0
 801707e:	d03f      	beq.n	8017100 <_vfiprintf_r+0x22c>
 8017080:	4b29      	ldr	r3, [pc, #164]	; (8017128 <_vfiprintf_r+0x254>)
 8017082:	bb1b      	cbnz	r3, 80170cc <_vfiprintf_r+0x1f8>
 8017084:	9b03      	ldr	r3, [sp, #12]
 8017086:	3307      	adds	r3, #7
 8017088:	f023 0307 	bic.w	r3, r3, #7
 801708c:	3308      	adds	r3, #8
 801708e:	9303      	str	r3, [sp, #12]
 8017090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017092:	443b      	add	r3, r7
 8017094:	9309      	str	r3, [sp, #36]	; 0x24
 8017096:	e767      	b.n	8016f68 <_vfiprintf_r+0x94>
 8017098:	fb0c 3202 	mla	r2, ip, r2, r3
 801709c:	460c      	mov	r4, r1
 801709e:	2001      	movs	r0, #1
 80170a0:	e7a5      	b.n	8016fee <_vfiprintf_r+0x11a>
 80170a2:	2300      	movs	r3, #0
 80170a4:	3401      	adds	r4, #1
 80170a6:	9305      	str	r3, [sp, #20]
 80170a8:	4619      	mov	r1, r3
 80170aa:	f04f 0c0a 	mov.w	ip, #10
 80170ae:	4620      	mov	r0, r4
 80170b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170b4:	3a30      	subs	r2, #48	; 0x30
 80170b6:	2a09      	cmp	r2, #9
 80170b8:	d903      	bls.n	80170c2 <_vfiprintf_r+0x1ee>
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d0c5      	beq.n	801704a <_vfiprintf_r+0x176>
 80170be:	9105      	str	r1, [sp, #20]
 80170c0:	e7c3      	b.n	801704a <_vfiprintf_r+0x176>
 80170c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80170c6:	4604      	mov	r4, r0
 80170c8:	2301      	movs	r3, #1
 80170ca:	e7f0      	b.n	80170ae <_vfiprintf_r+0x1da>
 80170cc:	ab03      	add	r3, sp, #12
 80170ce:	9300      	str	r3, [sp, #0]
 80170d0:	462a      	mov	r2, r5
 80170d2:	4b16      	ldr	r3, [pc, #88]	; (801712c <_vfiprintf_r+0x258>)
 80170d4:	a904      	add	r1, sp, #16
 80170d6:	4630      	mov	r0, r6
 80170d8:	f3af 8000 	nop.w
 80170dc:	4607      	mov	r7, r0
 80170de:	1c78      	adds	r0, r7, #1
 80170e0:	d1d6      	bne.n	8017090 <_vfiprintf_r+0x1bc>
 80170e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80170e4:	07d9      	lsls	r1, r3, #31
 80170e6:	d405      	bmi.n	80170f4 <_vfiprintf_r+0x220>
 80170e8:	89ab      	ldrh	r3, [r5, #12]
 80170ea:	059a      	lsls	r2, r3, #22
 80170ec:	d402      	bmi.n	80170f4 <_vfiprintf_r+0x220>
 80170ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170f0:	f7ff fd7f 	bl	8016bf2 <__retarget_lock_release_recursive>
 80170f4:	89ab      	ldrh	r3, [r5, #12]
 80170f6:	065b      	lsls	r3, r3, #25
 80170f8:	f53f af12 	bmi.w	8016f20 <_vfiprintf_r+0x4c>
 80170fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170fe:	e711      	b.n	8016f24 <_vfiprintf_r+0x50>
 8017100:	ab03      	add	r3, sp, #12
 8017102:	9300      	str	r3, [sp, #0]
 8017104:	462a      	mov	r2, r5
 8017106:	4b09      	ldr	r3, [pc, #36]	; (801712c <_vfiprintf_r+0x258>)
 8017108:	a904      	add	r1, sp, #16
 801710a:	4630      	mov	r0, r6
 801710c:	f000 f880 	bl	8017210 <_printf_i>
 8017110:	e7e4      	b.n	80170dc <_vfiprintf_r+0x208>
 8017112:	bf00      	nop
 8017114:	08017798 	.word	0x08017798
 8017118:	080177b8 	.word	0x080177b8
 801711c:	08017778 	.word	0x08017778
 8017120:	080177d8 	.word	0x080177d8
 8017124:	080177e2 	.word	0x080177e2
 8017128:	00000000 	.word	0x00000000
 801712c:	08016eaf 	.word	0x08016eaf
 8017130:	080177de 	.word	0x080177de

08017134 <_printf_common>:
 8017134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017138:	4616      	mov	r6, r2
 801713a:	4699      	mov	r9, r3
 801713c:	688a      	ldr	r2, [r1, #8]
 801713e:	690b      	ldr	r3, [r1, #16]
 8017140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017144:	4293      	cmp	r3, r2
 8017146:	bfb8      	it	lt
 8017148:	4613      	movlt	r3, r2
 801714a:	6033      	str	r3, [r6, #0]
 801714c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017150:	4607      	mov	r7, r0
 8017152:	460c      	mov	r4, r1
 8017154:	b10a      	cbz	r2, 801715a <_printf_common+0x26>
 8017156:	3301      	adds	r3, #1
 8017158:	6033      	str	r3, [r6, #0]
 801715a:	6823      	ldr	r3, [r4, #0]
 801715c:	0699      	lsls	r1, r3, #26
 801715e:	bf42      	ittt	mi
 8017160:	6833      	ldrmi	r3, [r6, #0]
 8017162:	3302      	addmi	r3, #2
 8017164:	6033      	strmi	r3, [r6, #0]
 8017166:	6825      	ldr	r5, [r4, #0]
 8017168:	f015 0506 	ands.w	r5, r5, #6
 801716c:	d106      	bne.n	801717c <_printf_common+0x48>
 801716e:	f104 0a19 	add.w	sl, r4, #25
 8017172:	68e3      	ldr	r3, [r4, #12]
 8017174:	6832      	ldr	r2, [r6, #0]
 8017176:	1a9b      	subs	r3, r3, r2
 8017178:	42ab      	cmp	r3, r5
 801717a:	dc26      	bgt.n	80171ca <_printf_common+0x96>
 801717c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017180:	1e13      	subs	r3, r2, #0
 8017182:	6822      	ldr	r2, [r4, #0]
 8017184:	bf18      	it	ne
 8017186:	2301      	movne	r3, #1
 8017188:	0692      	lsls	r2, r2, #26
 801718a:	d42b      	bmi.n	80171e4 <_printf_common+0xb0>
 801718c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017190:	4649      	mov	r1, r9
 8017192:	4638      	mov	r0, r7
 8017194:	47c0      	blx	r8
 8017196:	3001      	adds	r0, #1
 8017198:	d01e      	beq.n	80171d8 <_printf_common+0xa4>
 801719a:	6823      	ldr	r3, [r4, #0]
 801719c:	68e5      	ldr	r5, [r4, #12]
 801719e:	6832      	ldr	r2, [r6, #0]
 80171a0:	f003 0306 	and.w	r3, r3, #6
 80171a4:	2b04      	cmp	r3, #4
 80171a6:	bf08      	it	eq
 80171a8:	1aad      	subeq	r5, r5, r2
 80171aa:	68a3      	ldr	r3, [r4, #8]
 80171ac:	6922      	ldr	r2, [r4, #16]
 80171ae:	bf0c      	ite	eq
 80171b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80171b4:	2500      	movne	r5, #0
 80171b6:	4293      	cmp	r3, r2
 80171b8:	bfc4      	itt	gt
 80171ba:	1a9b      	subgt	r3, r3, r2
 80171bc:	18ed      	addgt	r5, r5, r3
 80171be:	2600      	movs	r6, #0
 80171c0:	341a      	adds	r4, #26
 80171c2:	42b5      	cmp	r5, r6
 80171c4:	d11a      	bne.n	80171fc <_printf_common+0xc8>
 80171c6:	2000      	movs	r0, #0
 80171c8:	e008      	b.n	80171dc <_printf_common+0xa8>
 80171ca:	2301      	movs	r3, #1
 80171cc:	4652      	mov	r2, sl
 80171ce:	4649      	mov	r1, r9
 80171d0:	4638      	mov	r0, r7
 80171d2:	47c0      	blx	r8
 80171d4:	3001      	adds	r0, #1
 80171d6:	d103      	bne.n	80171e0 <_printf_common+0xac>
 80171d8:	f04f 30ff 	mov.w	r0, #4294967295
 80171dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e0:	3501      	adds	r5, #1
 80171e2:	e7c6      	b.n	8017172 <_printf_common+0x3e>
 80171e4:	18e1      	adds	r1, r4, r3
 80171e6:	1c5a      	adds	r2, r3, #1
 80171e8:	2030      	movs	r0, #48	; 0x30
 80171ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80171ee:	4422      	add	r2, r4
 80171f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80171f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80171f8:	3302      	adds	r3, #2
 80171fa:	e7c7      	b.n	801718c <_printf_common+0x58>
 80171fc:	2301      	movs	r3, #1
 80171fe:	4622      	mov	r2, r4
 8017200:	4649      	mov	r1, r9
 8017202:	4638      	mov	r0, r7
 8017204:	47c0      	blx	r8
 8017206:	3001      	adds	r0, #1
 8017208:	d0e6      	beq.n	80171d8 <_printf_common+0xa4>
 801720a:	3601      	adds	r6, #1
 801720c:	e7d9      	b.n	80171c2 <_printf_common+0x8e>
	...

08017210 <_printf_i>:
 8017210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017214:	7e0f      	ldrb	r7, [r1, #24]
 8017216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017218:	2f78      	cmp	r7, #120	; 0x78
 801721a:	4691      	mov	r9, r2
 801721c:	4680      	mov	r8, r0
 801721e:	460c      	mov	r4, r1
 8017220:	469a      	mov	sl, r3
 8017222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017226:	d807      	bhi.n	8017238 <_printf_i+0x28>
 8017228:	2f62      	cmp	r7, #98	; 0x62
 801722a:	d80a      	bhi.n	8017242 <_printf_i+0x32>
 801722c:	2f00      	cmp	r7, #0
 801722e:	f000 80d8 	beq.w	80173e2 <_printf_i+0x1d2>
 8017232:	2f58      	cmp	r7, #88	; 0x58
 8017234:	f000 80a3 	beq.w	801737e <_printf_i+0x16e>
 8017238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801723c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017240:	e03a      	b.n	80172b8 <_printf_i+0xa8>
 8017242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017246:	2b15      	cmp	r3, #21
 8017248:	d8f6      	bhi.n	8017238 <_printf_i+0x28>
 801724a:	a101      	add	r1, pc, #4	; (adr r1, 8017250 <_printf_i+0x40>)
 801724c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017250:	080172a9 	.word	0x080172a9
 8017254:	080172bd 	.word	0x080172bd
 8017258:	08017239 	.word	0x08017239
 801725c:	08017239 	.word	0x08017239
 8017260:	08017239 	.word	0x08017239
 8017264:	08017239 	.word	0x08017239
 8017268:	080172bd 	.word	0x080172bd
 801726c:	08017239 	.word	0x08017239
 8017270:	08017239 	.word	0x08017239
 8017274:	08017239 	.word	0x08017239
 8017278:	08017239 	.word	0x08017239
 801727c:	080173c9 	.word	0x080173c9
 8017280:	080172ed 	.word	0x080172ed
 8017284:	080173ab 	.word	0x080173ab
 8017288:	08017239 	.word	0x08017239
 801728c:	08017239 	.word	0x08017239
 8017290:	080173eb 	.word	0x080173eb
 8017294:	08017239 	.word	0x08017239
 8017298:	080172ed 	.word	0x080172ed
 801729c:	08017239 	.word	0x08017239
 80172a0:	08017239 	.word	0x08017239
 80172a4:	080173b3 	.word	0x080173b3
 80172a8:	682b      	ldr	r3, [r5, #0]
 80172aa:	1d1a      	adds	r2, r3, #4
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	602a      	str	r2, [r5, #0]
 80172b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80172b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80172b8:	2301      	movs	r3, #1
 80172ba:	e0a3      	b.n	8017404 <_printf_i+0x1f4>
 80172bc:	6820      	ldr	r0, [r4, #0]
 80172be:	6829      	ldr	r1, [r5, #0]
 80172c0:	0606      	lsls	r6, r0, #24
 80172c2:	f101 0304 	add.w	r3, r1, #4
 80172c6:	d50a      	bpl.n	80172de <_printf_i+0xce>
 80172c8:	680e      	ldr	r6, [r1, #0]
 80172ca:	602b      	str	r3, [r5, #0]
 80172cc:	2e00      	cmp	r6, #0
 80172ce:	da03      	bge.n	80172d8 <_printf_i+0xc8>
 80172d0:	232d      	movs	r3, #45	; 0x2d
 80172d2:	4276      	negs	r6, r6
 80172d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172d8:	485e      	ldr	r0, [pc, #376]	; (8017454 <_printf_i+0x244>)
 80172da:	230a      	movs	r3, #10
 80172dc:	e019      	b.n	8017312 <_printf_i+0x102>
 80172de:	680e      	ldr	r6, [r1, #0]
 80172e0:	602b      	str	r3, [r5, #0]
 80172e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80172e6:	bf18      	it	ne
 80172e8:	b236      	sxthne	r6, r6
 80172ea:	e7ef      	b.n	80172cc <_printf_i+0xbc>
 80172ec:	682b      	ldr	r3, [r5, #0]
 80172ee:	6820      	ldr	r0, [r4, #0]
 80172f0:	1d19      	adds	r1, r3, #4
 80172f2:	6029      	str	r1, [r5, #0]
 80172f4:	0601      	lsls	r1, r0, #24
 80172f6:	d501      	bpl.n	80172fc <_printf_i+0xec>
 80172f8:	681e      	ldr	r6, [r3, #0]
 80172fa:	e002      	b.n	8017302 <_printf_i+0xf2>
 80172fc:	0646      	lsls	r6, r0, #25
 80172fe:	d5fb      	bpl.n	80172f8 <_printf_i+0xe8>
 8017300:	881e      	ldrh	r6, [r3, #0]
 8017302:	4854      	ldr	r0, [pc, #336]	; (8017454 <_printf_i+0x244>)
 8017304:	2f6f      	cmp	r7, #111	; 0x6f
 8017306:	bf0c      	ite	eq
 8017308:	2308      	moveq	r3, #8
 801730a:	230a      	movne	r3, #10
 801730c:	2100      	movs	r1, #0
 801730e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017312:	6865      	ldr	r5, [r4, #4]
 8017314:	60a5      	str	r5, [r4, #8]
 8017316:	2d00      	cmp	r5, #0
 8017318:	bfa2      	ittt	ge
 801731a:	6821      	ldrge	r1, [r4, #0]
 801731c:	f021 0104 	bicge.w	r1, r1, #4
 8017320:	6021      	strge	r1, [r4, #0]
 8017322:	b90e      	cbnz	r6, 8017328 <_printf_i+0x118>
 8017324:	2d00      	cmp	r5, #0
 8017326:	d04d      	beq.n	80173c4 <_printf_i+0x1b4>
 8017328:	4615      	mov	r5, r2
 801732a:	fbb6 f1f3 	udiv	r1, r6, r3
 801732e:	fb03 6711 	mls	r7, r3, r1, r6
 8017332:	5dc7      	ldrb	r7, [r0, r7]
 8017334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017338:	4637      	mov	r7, r6
 801733a:	42bb      	cmp	r3, r7
 801733c:	460e      	mov	r6, r1
 801733e:	d9f4      	bls.n	801732a <_printf_i+0x11a>
 8017340:	2b08      	cmp	r3, #8
 8017342:	d10b      	bne.n	801735c <_printf_i+0x14c>
 8017344:	6823      	ldr	r3, [r4, #0]
 8017346:	07de      	lsls	r6, r3, #31
 8017348:	d508      	bpl.n	801735c <_printf_i+0x14c>
 801734a:	6923      	ldr	r3, [r4, #16]
 801734c:	6861      	ldr	r1, [r4, #4]
 801734e:	4299      	cmp	r1, r3
 8017350:	bfde      	ittt	le
 8017352:	2330      	movle	r3, #48	; 0x30
 8017354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017358:	f105 35ff 	addle.w	r5, r5, #4294967295
 801735c:	1b52      	subs	r2, r2, r5
 801735e:	6122      	str	r2, [r4, #16]
 8017360:	f8cd a000 	str.w	sl, [sp]
 8017364:	464b      	mov	r3, r9
 8017366:	aa03      	add	r2, sp, #12
 8017368:	4621      	mov	r1, r4
 801736a:	4640      	mov	r0, r8
 801736c:	f7ff fee2 	bl	8017134 <_printf_common>
 8017370:	3001      	adds	r0, #1
 8017372:	d14c      	bne.n	801740e <_printf_i+0x1fe>
 8017374:	f04f 30ff 	mov.w	r0, #4294967295
 8017378:	b004      	add	sp, #16
 801737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801737e:	4835      	ldr	r0, [pc, #212]	; (8017454 <_printf_i+0x244>)
 8017380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017384:	6829      	ldr	r1, [r5, #0]
 8017386:	6823      	ldr	r3, [r4, #0]
 8017388:	f851 6b04 	ldr.w	r6, [r1], #4
 801738c:	6029      	str	r1, [r5, #0]
 801738e:	061d      	lsls	r5, r3, #24
 8017390:	d514      	bpl.n	80173bc <_printf_i+0x1ac>
 8017392:	07df      	lsls	r7, r3, #31
 8017394:	bf44      	itt	mi
 8017396:	f043 0320 	orrmi.w	r3, r3, #32
 801739a:	6023      	strmi	r3, [r4, #0]
 801739c:	b91e      	cbnz	r6, 80173a6 <_printf_i+0x196>
 801739e:	6823      	ldr	r3, [r4, #0]
 80173a0:	f023 0320 	bic.w	r3, r3, #32
 80173a4:	6023      	str	r3, [r4, #0]
 80173a6:	2310      	movs	r3, #16
 80173a8:	e7b0      	b.n	801730c <_printf_i+0xfc>
 80173aa:	6823      	ldr	r3, [r4, #0]
 80173ac:	f043 0320 	orr.w	r3, r3, #32
 80173b0:	6023      	str	r3, [r4, #0]
 80173b2:	2378      	movs	r3, #120	; 0x78
 80173b4:	4828      	ldr	r0, [pc, #160]	; (8017458 <_printf_i+0x248>)
 80173b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80173ba:	e7e3      	b.n	8017384 <_printf_i+0x174>
 80173bc:	0659      	lsls	r1, r3, #25
 80173be:	bf48      	it	mi
 80173c0:	b2b6      	uxthmi	r6, r6
 80173c2:	e7e6      	b.n	8017392 <_printf_i+0x182>
 80173c4:	4615      	mov	r5, r2
 80173c6:	e7bb      	b.n	8017340 <_printf_i+0x130>
 80173c8:	682b      	ldr	r3, [r5, #0]
 80173ca:	6826      	ldr	r6, [r4, #0]
 80173cc:	6961      	ldr	r1, [r4, #20]
 80173ce:	1d18      	adds	r0, r3, #4
 80173d0:	6028      	str	r0, [r5, #0]
 80173d2:	0635      	lsls	r5, r6, #24
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	d501      	bpl.n	80173dc <_printf_i+0x1cc>
 80173d8:	6019      	str	r1, [r3, #0]
 80173da:	e002      	b.n	80173e2 <_printf_i+0x1d2>
 80173dc:	0670      	lsls	r0, r6, #25
 80173de:	d5fb      	bpl.n	80173d8 <_printf_i+0x1c8>
 80173e0:	8019      	strh	r1, [r3, #0]
 80173e2:	2300      	movs	r3, #0
 80173e4:	6123      	str	r3, [r4, #16]
 80173e6:	4615      	mov	r5, r2
 80173e8:	e7ba      	b.n	8017360 <_printf_i+0x150>
 80173ea:	682b      	ldr	r3, [r5, #0]
 80173ec:	1d1a      	adds	r2, r3, #4
 80173ee:	602a      	str	r2, [r5, #0]
 80173f0:	681d      	ldr	r5, [r3, #0]
 80173f2:	6862      	ldr	r2, [r4, #4]
 80173f4:	2100      	movs	r1, #0
 80173f6:	4628      	mov	r0, r5
 80173f8:	f7e9 f892 	bl	8000520 <memchr>
 80173fc:	b108      	cbz	r0, 8017402 <_printf_i+0x1f2>
 80173fe:	1b40      	subs	r0, r0, r5
 8017400:	6060      	str	r0, [r4, #4]
 8017402:	6863      	ldr	r3, [r4, #4]
 8017404:	6123      	str	r3, [r4, #16]
 8017406:	2300      	movs	r3, #0
 8017408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801740c:	e7a8      	b.n	8017360 <_printf_i+0x150>
 801740e:	6923      	ldr	r3, [r4, #16]
 8017410:	462a      	mov	r2, r5
 8017412:	4649      	mov	r1, r9
 8017414:	4640      	mov	r0, r8
 8017416:	47d0      	blx	sl
 8017418:	3001      	adds	r0, #1
 801741a:	d0ab      	beq.n	8017374 <_printf_i+0x164>
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	079b      	lsls	r3, r3, #30
 8017420:	d413      	bmi.n	801744a <_printf_i+0x23a>
 8017422:	68e0      	ldr	r0, [r4, #12]
 8017424:	9b03      	ldr	r3, [sp, #12]
 8017426:	4298      	cmp	r0, r3
 8017428:	bfb8      	it	lt
 801742a:	4618      	movlt	r0, r3
 801742c:	e7a4      	b.n	8017378 <_printf_i+0x168>
 801742e:	2301      	movs	r3, #1
 8017430:	4632      	mov	r2, r6
 8017432:	4649      	mov	r1, r9
 8017434:	4640      	mov	r0, r8
 8017436:	47d0      	blx	sl
 8017438:	3001      	adds	r0, #1
 801743a:	d09b      	beq.n	8017374 <_printf_i+0x164>
 801743c:	3501      	adds	r5, #1
 801743e:	68e3      	ldr	r3, [r4, #12]
 8017440:	9903      	ldr	r1, [sp, #12]
 8017442:	1a5b      	subs	r3, r3, r1
 8017444:	42ab      	cmp	r3, r5
 8017446:	dcf2      	bgt.n	801742e <_printf_i+0x21e>
 8017448:	e7eb      	b.n	8017422 <_printf_i+0x212>
 801744a:	2500      	movs	r5, #0
 801744c:	f104 0619 	add.w	r6, r4, #25
 8017450:	e7f5      	b.n	801743e <_printf_i+0x22e>
 8017452:	bf00      	nop
 8017454:	080177e9 	.word	0x080177e9
 8017458:	080177fa 	.word	0x080177fa

0801745c <_sbrk_r>:
 801745c:	b538      	push	{r3, r4, r5, lr}
 801745e:	4d06      	ldr	r5, [pc, #24]	; (8017478 <_sbrk_r+0x1c>)
 8017460:	2300      	movs	r3, #0
 8017462:	4604      	mov	r4, r0
 8017464:	4608      	mov	r0, r1
 8017466:	602b      	str	r3, [r5, #0]
 8017468:	f7e9 ff6c 	bl	8001344 <_sbrk>
 801746c:	1c43      	adds	r3, r0, #1
 801746e:	d102      	bne.n	8017476 <_sbrk_r+0x1a>
 8017470:	682b      	ldr	r3, [r5, #0]
 8017472:	b103      	cbz	r3, 8017476 <_sbrk_r+0x1a>
 8017474:	6023      	str	r3, [r4, #0]
 8017476:	bd38      	pop	{r3, r4, r5, pc}
 8017478:	24015530 	.word	0x24015530

0801747c <__sread>:
 801747c:	b510      	push	{r4, lr}
 801747e:	460c      	mov	r4, r1
 8017480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017484:	f000 f8a0 	bl	80175c8 <_read_r>
 8017488:	2800      	cmp	r0, #0
 801748a:	bfab      	itete	ge
 801748c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801748e:	89a3      	ldrhlt	r3, [r4, #12]
 8017490:	181b      	addge	r3, r3, r0
 8017492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017496:	bfac      	ite	ge
 8017498:	6563      	strge	r3, [r4, #84]	; 0x54
 801749a:	81a3      	strhlt	r3, [r4, #12]
 801749c:	bd10      	pop	{r4, pc}

0801749e <__swrite>:
 801749e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a2:	461f      	mov	r7, r3
 80174a4:	898b      	ldrh	r3, [r1, #12]
 80174a6:	05db      	lsls	r3, r3, #23
 80174a8:	4605      	mov	r5, r0
 80174aa:	460c      	mov	r4, r1
 80174ac:	4616      	mov	r6, r2
 80174ae:	d505      	bpl.n	80174bc <__swrite+0x1e>
 80174b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b4:	2302      	movs	r3, #2
 80174b6:	2200      	movs	r2, #0
 80174b8:	f000 f868 	bl	801758c <_lseek_r>
 80174bc:	89a3      	ldrh	r3, [r4, #12]
 80174be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174c6:	81a3      	strh	r3, [r4, #12]
 80174c8:	4632      	mov	r2, r6
 80174ca:	463b      	mov	r3, r7
 80174cc:	4628      	mov	r0, r5
 80174ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174d2:	f000 b817 	b.w	8017504 <_write_r>

080174d6 <__sseek>:
 80174d6:	b510      	push	{r4, lr}
 80174d8:	460c      	mov	r4, r1
 80174da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174de:	f000 f855 	bl	801758c <_lseek_r>
 80174e2:	1c43      	adds	r3, r0, #1
 80174e4:	89a3      	ldrh	r3, [r4, #12]
 80174e6:	bf15      	itete	ne
 80174e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80174ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80174ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174f2:	81a3      	strheq	r3, [r4, #12]
 80174f4:	bf18      	it	ne
 80174f6:	81a3      	strhne	r3, [r4, #12]
 80174f8:	bd10      	pop	{r4, pc}

080174fa <__sclose>:
 80174fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174fe:	f000 b813 	b.w	8017528 <_close_r>
	...

08017504 <_write_r>:
 8017504:	b538      	push	{r3, r4, r5, lr}
 8017506:	4d07      	ldr	r5, [pc, #28]	; (8017524 <_write_r+0x20>)
 8017508:	4604      	mov	r4, r0
 801750a:	4608      	mov	r0, r1
 801750c:	4611      	mov	r1, r2
 801750e:	2200      	movs	r2, #0
 8017510:	602a      	str	r2, [r5, #0]
 8017512:	461a      	mov	r2, r3
 8017514:	f7e9 fec5 	bl	80012a2 <_write>
 8017518:	1c43      	adds	r3, r0, #1
 801751a:	d102      	bne.n	8017522 <_write_r+0x1e>
 801751c:	682b      	ldr	r3, [r5, #0]
 801751e:	b103      	cbz	r3, 8017522 <_write_r+0x1e>
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	bd38      	pop	{r3, r4, r5, pc}
 8017524:	24015530 	.word	0x24015530

08017528 <_close_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d06      	ldr	r5, [pc, #24]	; (8017544 <_close_r+0x1c>)
 801752c:	2300      	movs	r3, #0
 801752e:	4604      	mov	r4, r0
 8017530:	4608      	mov	r0, r1
 8017532:	602b      	str	r3, [r5, #0]
 8017534:	f7e9 fed1 	bl	80012da <_close>
 8017538:	1c43      	adds	r3, r0, #1
 801753a:	d102      	bne.n	8017542 <_close_r+0x1a>
 801753c:	682b      	ldr	r3, [r5, #0]
 801753e:	b103      	cbz	r3, 8017542 <_close_r+0x1a>
 8017540:	6023      	str	r3, [r4, #0]
 8017542:	bd38      	pop	{r3, r4, r5, pc}
 8017544:	24015530 	.word	0x24015530

08017548 <_fstat_r>:
 8017548:	b538      	push	{r3, r4, r5, lr}
 801754a:	4d07      	ldr	r5, [pc, #28]	; (8017568 <_fstat_r+0x20>)
 801754c:	2300      	movs	r3, #0
 801754e:	4604      	mov	r4, r0
 8017550:	4608      	mov	r0, r1
 8017552:	4611      	mov	r1, r2
 8017554:	602b      	str	r3, [r5, #0]
 8017556:	f7e9 fecc 	bl	80012f2 <_fstat>
 801755a:	1c43      	adds	r3, r0, #1
 801755c:	d102      	bne.n	8017564 <_fstat_r+0x1c>
 801755e:	682b      	ldr	r3, [r5, #0]
 8017560:	b103      	cbz	r3, 8017564 <_fstat_r+0x1c>
 8017562:	6023      	str	r3, [r4, #0]
 8017564:	bd38      	pop	{r3, r4, r5, pc}
 8017566:	bf00      	nop
 8017568:	24015530 	.word	0x24015530

0801756c <_isatty_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4d06      	ldr	r5, [pc, #24]	; (8017588 <_isatty_r+0x1c>)
 8017570:	2300      	movs	r3, #0
 8017572:	4604      	mov	r4, r0
 8017574:	4608      	mov	r0, r1
 8017576:	602b      	str	r3, [r5, #0]
 8017578:	f7e9 fecb 	bl	8001312 <_isatty>
 801757c:	1c43      	adds	r3, r0, #1
 801757e:	d102      	bne.n	8017586 <_isatty_r+0x1a>
 8017580:	682b      	ldr	r3, [r5, #0]
 8017582:	b103      	cbz	r3, 8017586 <_isatty_r+0x1a>
 8017584:	6023      	str	r3, [r4, #0]
 8017586:	bd38      	pop	{r3, r4, r5, pc}
 8017588:	24015530 	.word	0x24015530

0801758c <_lseek_r>:
 801758c:	b538      	push	{r3, r4, r5, lr}
 801758e:	4d07      	ldr	r5, [pc, #28]	; (80175ac <_lseek_r+0x20>)
 8017590:	4604      	mov	r4, r0
 8017592:	4608      	mov	r0, r1
 8017594:	4611      	mov	r1, r2
 8017596:	2200      	movs	r2, #0
 8017598:	602a      	str	r2, [r5, #0]
 801759a:	461a      	mov	r2, r3
 801759c:	f7e9 fec4 	bl	8001328 <_lseek>
 80175a0:	1c43      	adds	r3, r0, #1
 80175a2:	d102      	bne.n	80175aa <_lseek_r+0x1e>
 80175a4:	682b      	ldr	r3, [r5, #0]
 80175a6:	b103      	cbz	r3, 80175aa <_lseek_r+0x1e>
 80175a8:	6023      	str	r3, [r4, #0]
 80175aa:	bd38      	pop	{r3, r4, r5, pc}
 80175ac:	24015530 	.word	0x24015530

080175b0 <__malloc_lock>:
 80175b0:	4801      	ldr	r0, [pc, #4]	; (80175b8 <__malloc_lock+0x8>)
 80175b2:	f7ff bb1d 	b.w	8016bf0 <__retarget_lock_acquire_recursive>
 80175b6:	bf00      	nop
 80175b8:	24015524 	.word	0x24015524

080175bc <__malloc_unlock>:
 80175bc:	4801      	ldr	r0, [pc, #4]	; (80175c4 <__malloc_unlock+0x8>)
 80175be:	f7ff bb18 	b.w	8016bf2 <__retarget_lock_release_recursive>
 80175c2:	bf00      	nop
 80175c4:	24015524 	.word	0x24015524

080175c8 <_read_r>:
 80175c8:	b538      	push	{r3, r4, r5, lr}
 80175ca:	4d07      	ldr	r5, [pc, #28]	; (80175e8 <_read_r+0x20>)
 80175cc:	4604      	mov	r4, r0
 80175ce:	4608      	mov	r0, r1
 80175d0:	4611      	mov	r1, r2
 80175d2:	2200      	movs	r2, #0
 80175d4:	602a      	str	r2, [r5, #0]
 80175d6:	461a      	mov	r2, r3
 80175d8:	f7e9 fe46 	bl	8001268 <_read>
 80175dc:	1c43      	adds	r3, r0, #1
 80175de:	d102      	bne.n	80175e6 <_read_r+0x1e>
 80175e0:	682b      	ldr	r3, [r5, #0]
 80175e2:	b103      	cbz	r3, 80175e6 <_read_r+0x1e>
 80175e4:	6023      	str	r3, [r4, #0]
 80175e6:	bd38      	pop	{r3, r4, r5, pc}
 80175e8:	24015530 	.word	0x24015530

080175ec <_init>:
 80175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ee:	bf00      	nop
 80175f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175f2:	bc08      	pop	{r3}
 80175f4:	469e      	mov	lr, r3
 80175f6:	4770      	bx	lr

080175f8 <_fini>:
 80175f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175fa:	bf00      	nop
 80175fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175fe:	bc08      	pop	{r3}
 8017600:	469e      	mov	lr, r3
 8017602:	4770      	bx	lr
