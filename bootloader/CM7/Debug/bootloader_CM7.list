
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001723c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080174dc  080174dc  000274dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176e4  080176e4  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  080176e4  080176e4  000276e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176ec  080176ec  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176ec  080176ec  000276ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176f0  080176f0  000276f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  24000000  080176f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015454  240000e0  080177c8  000300e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24015534  080177c8  00035534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ab23  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ba3c  00000000  00000000  0008ac25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00096668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00098818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004d195  00000000  00000000  0009a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047e42  00000000  00000000  000e73cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b75fb  00000000  00000000  0012f20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002e680a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d8  00000000  00000000  002e685c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080174c4 	.word	0x080174c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	080174c4 	.word	0x080174c4

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24014f18 	.word	0x24014f18
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24014f20 	.word	0x24014f20
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24015520 	.word	0x24015520

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f015 f981 	bl	80157c0 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f015 f86c 	bl	80155a0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24014fc0 	.word	0x24014fc0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24015520 	.word	0x24015520
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24014fc4 	.word	0x24014fc4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24015050 	.word	0x24015050
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24015054 	.word	0x24015054
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2401504c 	.word	0x2401504c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24015048 	.word	0x24015048
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24014f20 	.word	0x24014f20
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f015 fa19 	bl	8015d14 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f015 fa03 	bl	8015d14 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f008 fd6f 	bl	80093fc <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000fc 	.word	0x240000fc
 8000934:	080174dc 	.word	0x080174dc
 8000938:	240080fc 	.word	0x240080fc
 800093c:	24008130 	.word	0x24008130
 8000940:	080174f0 	.word	0x080174f0
 8000944:	24012130 	.word	0x24012130

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f012 fbe3 	bl	801325c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aa8:	bf00      	nop
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <main+0xa8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <main+0x24>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dcf4      	bgt.n	8000aaa <main+0xe>
  if ( timeout < 0 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da01      	bge.n	8000aca <main+0x2e>
  {
  Error_Handler();
 8000ac6:	f000 f9f3 	bl	8000eb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fc7d 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f83d 	bl	8000b4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <main+0xa8>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <main+0xa8>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <main+0xa8>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 ffeb 	bl	8001acc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f801 	bl	8001b00 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b02:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b04:	bf00      	nop
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <main+0xa8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d104      	bne.n	8000b1c <main+0x80>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dcf4      	bgt.n	8000b06 <main+0x6a>
if ( timeout < 0 )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da01      	bge.n	8000b26 <main+0x8a>
{
Error_Handler();
 8000b22:	f000 f9c5 	bl	8000eb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 f903 	bl	8000d30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 f8b5 	bl	8000c98 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b2e:	f000 f891 	bl	8000c54 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\n",bootloader_ver[0], bootloader_ver[1]);
 8000b32:	2300      	movs	r3, #0
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <main+0xac>)
 8000b3a:	f015 fd35 	bl	80165a8 <iprintf>
  /* Jump to applicationdirectly for now */
//  goto_application();

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b3e:	f7ff ffa6 	bl	8000a8e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <main+0xa6>
 8000b44:	58024400 	.word	0x58024400
 8000b48:	08017504 	.word	0x08017504

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	; 0x70
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	224c      	movs	r2, #76	; 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f015 fd1c 	bl	8016598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2220      	movs	r2, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f015 fd16 	bl	8016598 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b6c:	2004      	movs	r0, #4
 8000b6e:	f000 ffdb 	bl	8001b28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <SystemClock_Config+0x100>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <SystemClock_Config+0x100>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
 8000b80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <SystemClock_Config+0x100>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <SystemClock_Config+0x104>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <SystemClock_Config+0x104>)
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <SystemClock_Config+0x104>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba4:	bf00      	nop
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <SystemClock_Config+0x104>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb2:	d1f8      	bne.n	8000ba6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000bd2:	2330      	movs	r3, #48	; 0x30
 8000bd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000be2:	2308      	movs	r3, #8
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fff2 	bl	8001bdc <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bfe:	f000 f957 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	233f      	movs	r3, #63	; 0x3f
 8000c04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fc32 	bl	8002490 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c32:	f000 f93d 	bl	8000eb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f001 fddd 	bl	80027fc <HAL_RCC_MCOConfig>
}
 8000c42:	bf00      	nop
 8000c44:	3770      	adds	r7, #112	; 0x70
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024800 	.word	0x58024800

08000c54 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <MX_SDMMC1_SD_Init+0x40>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_SDMMC1_SD_Init+0x3c>)
 8000c7e:	f004 fd7d 	bl	800577c <HAL_SD_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c88:	f000 f912 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	24012164 	.word	0x24012164
 8000c94:	52007000 	.word	0x52007000

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000ce2:	f006 fc5d 	bl	80075a0 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f8e0 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000cf4:	f007 fced 	bl	80086d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 f8d7 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d06:	f007 fd22 	bl	800874e <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f000 f8ce 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_USART1_UART_Init+0x90>)
 8000d16:	f007 fca3 	bl	8008660 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f8c6 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	240121e0 	.word	0x240121e0
 8000d2c:	40011000 	.word	0x40011000

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a3c      	ldr	r2, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000de2:	481f      	ldr	r0, [pc, #124]	; (8000e60 <MX_GPIO_Init+0x130>)
 8000de4:	f000 fe24 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_GPIO_Init+0x130>)
 8000e00:	f000 fc4e 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <MX_GPIO_Init+0x134>)
 8000e22:	f000 fc3d 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000e26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_GPIO_Init+0x130>)
 8000e40:	f000 fc2e 	bl	80016a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	210e      	movs	r1, #14
 8000e48:	2017      	movs	r0, #23
 8000e4a:	f000 fc01 	bl	8001650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e4e:	2017      	movs	r0, #23
 8000e50:	f000 fc18 	bl	8001684 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58022000 	.word	0x58022000
 8000e64:	58020000 	.word	0x58020000

08000e68 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e70:	1d39      	adds	r1, r7, #4
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2201      	movs	r2, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <__io_putchar+0x20>)
 8000e7a:	f006 fbe1 	bl	8007640 <HAL_UART_Transmit>

  return ch;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	240121e0 	.word	0x240121e0

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f000 facf 	bl	8001440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40001000 	.word	0x40001000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x30>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x30>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58024400 	.word	0x58024400

08000ef0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0be      	sub	sp, #248	; 0xf8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	22c8      	movs	r2, #200	; 0xc8
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f015 fb41 	bl	8016598 <memset>
  if(hsd->Instance==SDMMC1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a3c      	ldr	r2, [pc, #240]	; (800100c <HAL_SD_MspInit+0x11c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d171      	bne.n	8001004 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fee3 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000f40:	f7ff ffb6 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a29      	ldr	r2, [pc, #164]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_SD_MspInit+0x120>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000f9e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <HAL_SD_MspInit+0x124>)
 8000fc6:	f000 fb6b 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fec:	4619      	mov	r1, r3
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <HAL_SD_MspInit+0x128>)
 8000ff0:	f000 fb56 	bl	80016a0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2031      	movs	r0, #49	; 0x31
 8000ffa:	f000 fb29 	bl	8001650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ffe:	2031      	movs	r0, #49	; 0x31
 8001000:	f000 fb40 	bl	8001684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	37f8      	adds	r7, #248	; 0xf8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	52007000 	.word	0x52007000
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020c00 	.word	0x58020c00

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0bc      	sub	sp, #240	; 0xf0
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c8      	movs	r2, #200	; 0xc8
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f015 faab 	bl	8016598 <memset>
  if(huart->Instance==USART1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_UART_MspInit+0xc8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d146      	bne.n	80010da <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800104c:	f04f 0201 	mov.w	r2, #1
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fe4c 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f7ff ff1f 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 8001084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0xcc>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80010ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0xd0>)
 80010d6:	f000 fae3 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	37f0      	adds	r7, #240	; 0xf0
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40011000 	.word	0x40011000
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020000 	.word	0x58020000

080010f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d827      	bhi.n	800114e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010fe:	2200      	movs	r2, #0
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	2036      	movs	r0, #54	; 0x36
 8001104:	f000 faa4 	bl	8001650 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001108:	2036      	movs	r0, #54	; 0x36
 800110a:	f000 fabb 	bl	8001684 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800110e:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <HAL_InitTick+0xc4>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_InitTick+0xc8>)
 8001116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_InitTick+0xc8>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_InitTick+0xc8>)
 8001126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001132:	f107 0210 	add.w	r2, r7, #16
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fd9d 	bl	8002c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001148:	2b00      	cmp	r3, #0
 800114a:	d106      	bne.n	800115a <HAL_InitTick+0x6a>
 800114c:	e001      	b.n	8001152 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e02b      	b.n	80011aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001152:	f001 fd67 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8001156:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800115a:	f001 fd63 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800115e:	4603      	mov	r3, r0
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <HAL_InitTick+0xcc>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	3b01      	subs	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_InitTick+0xd0>)
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_InitTick+0xd4>)
 8001176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_InitTick+0xd0>)
 800117a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_InitTick+0xd0>)
 8001182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001184:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_InitTick+0xd0>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_InitTick+0xd0>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_InitTick+0xd0>)
 8001194:	f005 ff2a 	bl	8006fec <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_InitTick+0xd0>)
 80011a0:	f005 ff86 	bl	80070b0 <HAL_TIM_Base_Start_IT>
 80011a4:	4603      	mov	r3, r0
 80011a6:	e000      	b.n	80011aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3740      	adds	r7, #64	; 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000008 	.word	0x24000008
 80011b8:	58024400 	.word	0x58024400
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	24012274 	.word	0x24012274
 80011c4:	40001000 	.word	0x40001000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 80011f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011fc:	f000 fc4b 	bl	8001a96 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <SDMMC1_IRQHandler+0x10>)
 800120a:	f004 fd27 	bl	8005c5c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24012164 	.word	0x24012164

08001218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM6_DAC_IRQHandler+0x10>)
 800121e:	f005 ffbf 	bl	80071a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24012274 	.word	0x24012274

0800122c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
  }

  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fdf1 	bl	8000e68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x12>
  }
  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f015 f8f6 	bl	8016528 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	24080000 	.word	0x24080000
 8001368:	00000400 	.word	0x00000400
 800136c:	240122c0 	.word	0x240122c0
 8001370:	24015538 	.word	0x24015538

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001378:	f7ff fae6 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f015 f8c7 	bl	8016534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff fb79 	bl	8000a9c <main>
  bx  lr
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b4:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 80013b8:	080176f4 	.word	0x080176f4
  ldr r2, =_sbss
 80013bc:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80013c0:	24015534 	.word	0x24015534

080013c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC3_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f000 f933 	bl	800163a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d4:	f001 fa7c 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	4913      	ldr	r1, [pc, #76]	; (8001434 <HAL_Init+0x6c>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_Init+0x68>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_Init+0x6c>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_Init+0x70>)
 800140a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fe6c 	bl	80010f0 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e002      	b.n	8001428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001422:	f7ff fd4b 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400
 8001434:	08017614 	.word	0x08017614
 8001438:	24000004 	.word	0x24000004
 800143c:	24000000 	.word	0x24000000

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c
 8001464:	240122c4 	.word	0x240122c4

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	240122c4 	.word	0x240122c4

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c

080014c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetREVID+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1b      	lsrs	r3, r3, #16
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5c001000 	.word	0x5c001000

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <__NVIC_SetPriorityGrouping+0x40>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	4313      	orrs	r3, r2
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x40>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	05fa0000 	.word	0x05fa0000

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff4c 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800165e:	f7ff ff63 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001662:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f7ff ffb3 	bl	80015d4 <NVIC_EncodePriority>
 800166e:	4602      	mov	r2, r0
 8001670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff82 	bl	8001580 <__NVIC_SetPriority>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff56 	bl	8001544 <__NVIC_EnableIRQ>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_GPIO_Init+0x234>)
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b2:	e194      	b.n	80019de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8186 	beq.w	80019d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x44>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80e0 	beq.w	80019d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x238>)
 800181a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <HAL_GPIO_Init+0x238>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x238>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a29      	ldr	r2, [pc, #164]	; (80018dc <HAL_GPIO_Init+0x23c>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <HAL_GPIO_Init+0x240>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d052      	beq.n	8001908 <HAL_GPIO_Init+0x268>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1f      	ldr	r2, [pc, #124]	; (80018e4 <HAL_GPIO_Init+0x244>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d031      	beq.n	80018ce <HAL_GPIO_Init+0x22e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_GPIO_Init+0x248>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02b      	beq.n	80018ca <HAL_GPIO_Init+0x22a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x24c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_GPIO_Init+0x250>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_Init+0x222>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_GPIO_Init+0x254>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_Init+0x21e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_GPIO_Init+0x258>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0x21a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_GPIO_Init+0x25c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_Init+0x216>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a18      	ldr	r2, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x260>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_Init+0x212>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_GPIO_Init+0x264>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_Init+0x20e>
 80018aa:	2309      	movs	r3, #9
 80018ac:	e02d      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ae:	230a      	movs	r3, #10
 80018b0:	e02b      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018b2:	2308      	movs	r3, #8
 80018b4:	e029      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e027      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ba:	2306      	movs	r3, #6
 80018bc:	e025      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018be:	2305      	movs	r3, #5
 80018c0:	e023      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e021      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e01f      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e01d      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e01b      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018d2:	bf00      	nop
 80018d4:	58000080 	.word	0x58000080
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58000400 	.word	0x58000400
 80018e0:	58020000 	.word	0x58020000
 80018e4:	58020400 	.word	0x58020400
 80018e8:	58020800 	.word	0x58020800
 80018ec:	58020c00 	.word	0x58020c00
 80018f0:	58021000 	.word	0x58021000
 80018f4:	58021400 	.word	0x58021400
 80018f8:	58021800 	.word	0x58021800
 80018fc:	58021c00 	.word	0x58021c00
 8001900:	58022000 	.word	0x58022000
 8001904:	58022400 	.word	0x58022400
 8001908:	2300      	movs	r3, #0
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191a:	4938      	ldr	r1, [pc, #224]	; (80019fc <HAL_GPIO_Init+0x35c>)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800194e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae63 	bne.w	80016b4 <HAL_GPIO_Init+0x14>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	3724      	adds	r7, #36	; 0x24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58000400 	.word	0x58000400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	400b      	ands	r3, r1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f007 fe15 	bl	80096ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ad4:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_HSEM_FastTake+0x2c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3320      	adds	r3, #32
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_HSEM_FastTake+0x30>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	58026400 	.word	0x58026400
 8001afc:	80000300 	.word	0x80000300

08001b00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001b0a:	4906      	ldr	r1, [pc, #24]	; (8001b24 <HAL_HSEM_Release+0x24>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	58026400 	.word	0x58026400

08001b28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d00a      	beq.n	8001b52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e040      	b.n	8001bd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e03e      	b.n	8001bd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b5a:	491f      	ldr	r1, [pc, #124]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b62:	f7ff fc81 	bl	8001468 <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b68:	e009      	b.n	8001b7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b6a:	f7ff fc7d 	bl	8001468 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b78:	d901      	bls.n	8001b7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e028      	b.n	8001bd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b1e      	cmp	r3, #30
 8001b90:	d008      	beq.n	8001ba4 <HAL_PWREx_ConfigSupply+0x7c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b2e      	cmp	r3, #46	; 0x2e
 8001b96:	d005      	beq.n	8001ba4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b1d      	cmp	r3, #29
 8001b9c:	d002      	beq.n	8001ba4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ba2:	d114      	bne.n	8001bce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ba4:	f7ff fc60 	bl	8001468 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001baa:	e009      	b.n	8001bc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bac:	f7ff fc5c 	bl	8001468 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bba:	d901      	bls.n	8001bc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e007      	b.n	8001bd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d1ee      	bne.n	8001bac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58024800 	.word	0x58024800

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bc48 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8088 	beq.w	8001d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c08:	4b96      	ldr	r3, [pc, #600]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d007      	beq.n	8001c24 <HAL_RCC_OscConfig+0x48>
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d111      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b8f      	ldr	r3, [pc, #572]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06d      	beq.n	8001d0c <HAL_RCC_OscConfig+0x130>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d169      	bne.n	8001d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f000 bc21 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x7a>
 8001c48:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a85      	ldr	r2, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x9c>
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a80      	ldr	r2, [pc, #512]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001c82:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a74      	ldr	r2, [pc, #464]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c9c:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a70      	ldr	r2, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6d      	ldr	r2, [pc, #436]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fbd4 	bl	8001468 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fbd0 	bl	8001468 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e3d4      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fbc0 	bl	8001468 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fbbc 	bl	8001468 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e3c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x110>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80ca 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1c:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x166>
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b18      	cmp	r3, #24
 8001d36:	d156      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d151      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d42:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e392      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0219 	bic.w	r2, r3, #25
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	493f      	ldr	r1, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb7c 	bl	8001468 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff fb78 	bl	8001468 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e37c      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	f7ff fb99 	bl	80014c8 <HAL_GetREVID>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d817      	bhi.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d108      	bne.n	8001dba <HAL_RCC_OscConfig+0x1de>
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db8:	e07a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	031b      	lsls	r3, r3, #12
 8001dc8:	4926      	ldr	r1, [pc, #152]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dce:	e06f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de4:	e064      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d047      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0219 	bic.w	r2, r3, #25
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fb32 	bl	8001468 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fb2e 	bl	8001468 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e332      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	f7ff fb4f 	bl	80014c8 <HAL_GetREVID>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d819      	bhi.n	8001e68 <HAL_RCC_OscConfig+0x28c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d108      	bne.n	8001e4e <HAL_RCC_OscConfig+0x272>
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4a:	6053      	str	r3, [r2, #4]
 8001e4c:	e030      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	4901      	ldr	r1, [pc, #4]	; (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e64:	58024400 	.word	0x58024400
 8001e68:	4b9a      	ldr	r3, [pc, #616]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4997      	ldr	r1, [pc, #604]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b95      	ldr	r3, [pc, #596]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a94      	ldr	r2, [pc, #592]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff faed 	bl	8001468 <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff fae9 	bl	8001468 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e2ed      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a9 	beq.w	8002010 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b85      	ldr	r3, [pc, #532]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ec6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec8:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d007      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x308>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	d13a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d135      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee4:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2c1      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001efc:	f7ff fae4 	bl	80014c8 <HAL_GetREVID>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d817      	bhi.n	8001f3a <HAL_RCC_OscConfig+0x35e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x348>
 8001f12:	4b70      	ldr	r3, [pc, #448]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f1a:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f22:	e075      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	4968      	ldr	r1, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f38:	e06a      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3a:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	4962      	ldr	r1, [pc, #392]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4e:	e05f      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d042      	beq.n	8001fde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f58:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa80 	bl	8001468 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa7c 	bl	8001468 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e280      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f7e:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f8a:	f7ff fa9d 	bl	80014c8 <HAL_GetREVID>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d817      	bhi.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d108      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3d6>
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fae:	6053      	str	r3, [r2, #4]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	4944      	ldr	r1, [pc, #272]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e023      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fc8:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	493f      	ldr	r1, [pc, #252]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fa3d 	bl	8001468 <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fa39 	bl	8001468 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e23d      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d036      	beq.n	800208a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d019      	beq.n	8002058 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff fa1a 	bl	8001468 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fa16 	bl	8001468 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x45c>
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff fa00 	bl	8001468 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff f9fc 	bl	8001468 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e200      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d039      	beq.n	800210a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f9dd 	bl	8001468 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7ff f9d9 	bl	8001468 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1dd      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4d6>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 80020d2:	bf00      	nop
 80020d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d8:	4b9b      	ldr	r3, [pc, #620]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a9a      	ldr	r2, [pc, #616]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e4:	f7ff f9c0 	bl	8001468 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ec:	f7ff f9bc 	bl	8001468 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fe:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8081 	beq.w	800221a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002118:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCC_OscConfig+0x770>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a8b      	ldr	r2, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x770>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002124:	f7ff f9a0 	bl	8001468 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7ff f99c 	bl	8001468 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1a0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213e:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x770>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x584>
 8002152:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a7c      	ldr	r2, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	e02d      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x5a6>
 8002168:	4b77      	ldr	r3, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a76      	ldr	r2, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	4b74      	ldr	r3, [pc, #464]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a73      	ldr	r2, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5c8>
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a67      	ldr	r2, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a64      	ldr	r2, [pc, #400]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7ff f950 	bl	8001468 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7ff f94c 	bl	8001468 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e14e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x5f0>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f93a 	bl	8001468 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f936 	bl	8001468 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e138      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220e:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 812d 	beq.w	800247e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800222c:	2b18      	cmp	r3, #24
 800222e:	f000 80bd 	beq.w	80023ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 809e 	bne.w	8002378 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a41      	ldr	r2, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff f90e 	bl	8001468 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f90a 	bl	8001468 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e10e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_RCC_OscConfig+0x774>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	430a      	orrs	r2, r1
 8002282:	4931      	ldr	r1, [pc, #196]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	628b      	str	r3, [r1, #40]	; 0x28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	3b01      	subs	r3, #1
 800228e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	3b01      	subs	r3, #1
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	b29b      	uxth	r3, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	3b01      	subs	r3, #1
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	3b01      	subs	r3, #1
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022b8:	4923      	ldr	r1, [pc, #140]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_OscConfig+0x778>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4917      	ldr	r1, [pc, #92]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f023 0202 	bic.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	4912      	ldr	r1, [pc, #72]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7ff f893 	bl	8001468 <HAL_GetTick>
 8002342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002344:	e011      	b.n	800236a <HAL_RCC_OscConfig+0x78e>
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	58024800 	.word	0x58024800
 8002350:	fffffc0c 	.word	0xfffffc0c
 8002354:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff f886 	bl	8001468 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e08a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x77c>
 8002376:	e082      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f870 	bl	8001468 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff f86c 	bl	8001468 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e070      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x7b0>
 80023aa:	e068      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d031      	beq.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d12a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d122      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0a5b      	lsrs	r3, r3, #9
 80023f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	0e1b      	lsrs	r3, r3, #24
 8002416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e02b      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002432:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d01f      	beq.n	800247e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800244a:	f7ff f80d 	bl	8001468 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002450:	bf00      	nop
 8002452:	f7ff f809 	bl	8001468 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	4293      	cmp	r3, r2
 800245c:	d0f9      	beq.n	8002452 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_OscConfig+0x8b0>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	4906      	ldr	r1, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800246e:	4313      	orrs	r3, r2
 8002470:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	ffff0007 	.word	0xffff0007

08002490 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e19c      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b8a      	ldr	r3, [pc, #552]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b87      	ldr	r3, [pc, #540]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	4985      	ldr	r1, [pc, #532]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e184      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d908      	bls.n	8002502 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f0:	4b78      	ldr	r3, [pc, #480]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4975      	ldr	r1, [pc, #468]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d908      	bls.n	8002530 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251e:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	496a      	ldr	r1, [pc, #424]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002548:	429a      	cmp	r2, r3
 800254a:	d908      	bls.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	495e      	ldr	r1, [pc, #376]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800255a:	4313      	orrs	r3, r2
 800255c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d908      	bls.n	800258c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4953      	ldr	r1, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f023 020f 	bic.w	r2, r3, #15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4947      	ldr	r1, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d055      	beq.n	8002672 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025c6:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4940      	ldr	r1, [pc, #256]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e0:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0f6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d115      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0ea      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0de      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4925      	ldr	r1, [pc, #148]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7fe ff11 	bl	8001468 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e00a      	b.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe ff0d 	bl	8001468 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0be      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	429a      	cmp	r2, r3
 8002670:	d1eb      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	429a      	cmp	r2, r3
 800268c:	d208      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800269c:	4313      	orrs	r3, r2
 800269e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d214      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 020f 	bic.w	r2, r3, #15
 80026b6:	4906      	ldr	r1, [pc, #24]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e086      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
 80026d0:	52002000 	.word	0x52002000
 80026d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d208      	bcs.n	8002706 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026f4:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4939      	ldr	r1, [pc, #228]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002702:	4313      	orrs	r3, r2
 8002704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800271e:	429a      	cmp	r2, r3
 8002720:	d208      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	492e      	ldr	r1, [pc, #184]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002730:	4313      	orrs	r3, r2
 8002732:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800274c:	429a      	cmp	r2, r3
 800274e:	d208      	bcs.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4922      	ldr	r1, [pc, #136]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800275e:	4313      	orrs	r3, r2
 8002760:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800277a:	429a      	cmp	r2, r3
 800277c:	d208      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4917      	ldr	r1, [pc, #92]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800278c:	4313      	orrs	r3, r2
 800278e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002790:	f000 f89e 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	4912      	ldr	r1, [pc, #72]	; (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x360>)
 80027c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x364>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x368>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc8c 	bl	80010f0 <HAL_InitTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400
 80027ec:	08017614 	.word	0x08017614
 80027f0:	24000004 	.word	0x24000004
 80027f4:	24000000 	.word	0x24000000
 80027f8:	24000008 	.word	0x24000008

080027fc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12a      	bne.n	8002864 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002814:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800282c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	481f      	ldr	r0, [pc, #124]	; (80028c8 <HAL_RCC_MCOConfig+0xcc>)
 800284a:	f7fe ff29 	bl	80016a0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	430b      	orrs	r3, r1
 800285c:	4919      	ldr	r1, [pc, #100]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002862:	e02a      	b.n	80028ba <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286a:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <HAL_RCC_MCOConfig+0xd0>)
 80028a0:	f7fe fefe 	bl	80016a0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	01d9      	lsls	r1, r3, #7
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_MCOConfig+0xc8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	610b      	str	r3, [r1, #16]
}
 80028ba:	bf00      	nop
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	58024400 	.word	0x58024400
 80028c8:	58020000 	.word	0x58020000
 80028cc:	58020800 	.word	0x58020800

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d6:	4bb3      	ldr	r3, [pc, #716]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028de:	2b18      	cmp	r3, #24
 80028e0:	f200 8155 	bhi.w	8002b8e <HAL_RCC_GetSysClockFreq+0x2be>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002951 	.word	0x08002951
 80028f0:	08002b8f 	.word	0x08002b8f
 80028f4:	08002b8f 	.word	0x08002b8f
 80028f8:	08002b8f 	.word	0x08002b8f
 80028fc:	08002b8f 	.word	0x08002b8f
 8002900:	08002b8f 	.word	0x08002b8f
 8002904:	08002b8f 	.word	0x08002b8f
 8002908:	08002b8f 	.word	0x08002b8f
 800290c:	08002977 	.word	0x08002977
 8002910:	08002b8f 	.word	0x08002b8f
 8002914:	08002b8f 	.word	0x08002b8f
 8002918:	08002b8f 	.word	0x08002b8f
 800291c:	08002b8f 	.word	0x08002b8f
 8002920:	08002b8f 	.word	0x08002b8f
 8002924:	08002b8f 	.word	0x08002b8f
 8002928:	08002b8f 	.word	0x08002b8f
 800292c:	0800297d 	.word	0x0800297d
 8002930:	08002b8f 	.word	0x08002b8f
 8002934:	08002b8f 	.word	0x08002b8f
 8002938:	08002b8f 	.word	0x08002b8f
 800293c:	08002b8f 	.word	0x08002b8f
 8002940:	08002b8f 	.word	0x08002b8f
 8002944:	08002b8f 	.word	0x08002b8f
 8002948:	08002b8f 	.word	0x08002b8f
 800294c:	08002983 	.word	0x08002983
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800295c:	4b91      	ldr	r3, [pc, #580]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800296e:	e111      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002970:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002972:	61bb      	str	r3, [r7, #24]
      break;
 8002974:	e10e      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002976:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002978:	61bb      	str	r3, [r7, #24]
      break;
 800297a:	e10b      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800297c:	4b8c      	ldr	r3, [pc, #560]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800297e:	61bb      	str	r3, [r7, #24]
      break;
 8002980:	e108      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800298c:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002996:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002998:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029a2:	4b80      	ldr	r3, [pc, #512]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80e1 	beq.w	8002b88 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f000 8083 	beq.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x204>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f200 80a1 	bhi.w	8002b18 <HAL_RCC_GetSysClockFreq+0x248>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x114>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d056      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029e2:	e099      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02d      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029f0:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	4a6b      	ldr	r2, [pc, #428]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1a:	4b62      	ldr	r3, [pc, #392]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a4a:	e087      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a72:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a8e:	e065      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ab6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad2:	e043      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ade:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bc0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b16:	e021      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	0a5b      	lsrs	r3, r3, #9
 8002b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b66:	3301      	adds	r3, #1
 8002b68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b80:	ee17 3a90 	vmov	r3, s15
 8002b84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
      break;
 8002b8c:	e002      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b90:	61bb      	str	r3, [r7, #24]
      break;
 8002b92:	bf00      	nop
  }

  return sysclockfreq;
 8002b94:	69bb      	ldr	r3, [r7, #24]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	03d09000 	.word	0x03d09000
 8002bac:	003d0900 	.word	0x003d0900
 8002bb0:	017d7840 	.word	0x017d7840
 8002bb4:	46000000 	.word	0x46000000
 8002bb8:	4c742400 	.word	0x4c742400
 8002bbc:	4a742400 	.word	0x4a742400
 8002bc0:	4bbebc20 	.word	0x4bbebc20

08002bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bca:	f7ff fe81 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490f      	ldr	r1, [pc, #60]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	58024400 	.word	0x58024400
 8002c18:	08017614 	.word	0x08017614
 8002c1c:	24000004 	.word	0x24000004
 8002c20:	24000000 	.word	0x24000000

08002c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c28:	f7ff ffcc 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4904      	ldr	r1, [pc, #16]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	08017614 	.word	0x08017614

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c54:	f7ff ffb6 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4904      	ldr	r1, [pc, #16]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	08017614 	.word	0x08017614

08002c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223f      	movs	r2, #63	; 0x3f
 8002c8a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0207 	and.w	r2, r3, #7
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 020f 	and.w	r2, r3, #15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_RCC_GetClockConfig+0x7c>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_GetClockConfig+0x80>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	52002000 	.word	0x52002000

08002d00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	b0cc      	sub	sp, #304	; 0x130
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d24:	2500      	movs	r5, #0
 8002d26:	ea54 0305 	orrs.w	r3, r4, r5
 8002d2a:	d049      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d36:	d02f      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d3c:	d828      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d42:	d01a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d48:	d822      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d52:	d007      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d54:	e01c      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d56:	4bb8      	ldr	r3, [pc, #736]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	4ab7      	ldr	r2, [pc, #732]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d62:	e01a      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d68:	3308      	adds	r3, #8
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fba1 	bl	80054b4 <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d78:	e00f      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d7e:	3328      	adds	r3, #40	; 0x28
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fc48 	bl	8005618 <RCCEx_PLL3_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d8e:	e004      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002da2:	4ba5      	ldr	r3, [pc, #660]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db0:	4aa1      	ldr	r2, [pc, #644]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6513      	str	r3, [r2, #80]	; 0x50
 8002db6:	e003      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dbc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	ea58 0309 	orrs.w	r3, r8, r9
 8002dd4:	d047      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d82a      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002dfd 	.word	0x08002dfd
 8002dec:	08002e0b 	.word	0x08002e0b
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e3f 	.word	0x08002e3f
 8002df8:	08002e3f 	.word	0x08002e3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfc:	4b8e      	ldr	r3, [pc, #568]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	4a8d      	ldr	r2, [pc, #564]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e08:	e01a      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e0e:	3308      	adds	r3, #8
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 fb4e 	bl	80054b4 <RCCEx_PLL2_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e24:	3328      	adds	r3, #40	; 0x28
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fbf5 	bl	8005618 <RCCEx_PLL3_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e34:	e004      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e3c:	e000      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e48:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	f023 0107 	bic.w	r1, r3, #7
 8002e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	4a78      	ldr	r2, [pc, #480]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e5c:	e003      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002e72:	f04f 0b00 	mov.w	fp, #0
 8002e76:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e7a:	d04c      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d030      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8c:	d829      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e90:	d02d      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e92:	2bc0      	cmp	r3, #192	; 0xc0
 8002e94:	d825      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d018      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d821      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d007      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a62      	ldr	r2, [pc, #392]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002eb4:	e01c      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eba:	3308      	adds	r3, #8
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 faf8 	bl	80054b4 <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002eca:	e011      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ed0:	3328      	adds	r3, #40	; 0x28
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fb9f 	bl	8005618 <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002f0c:	e003      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f12:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002f22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f2c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002f30:	460b      	mov	r3, r1
 8002f32:	4313      	orrs	r3, r2
 8002f34:	d053      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f42:	d035      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f48:	d82e      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f4e:	d031      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f54:	d828      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5a:	d01a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f60:	d822      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6a:	d007      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f80:	3308      	adds	r3, #8
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fa95 	bl	80054b4 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f90:	e011      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f96:	3328      	adds	r3, #40	; 0x28
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fb3c 	bl	8005618 <RCCEx_PLL3_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fa6:	e006      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fae:	e002      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fda:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ff4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d056      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800300a:	d038      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800300c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003010:	d831      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003012:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003016:	d034      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003018:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800301c:	d82b      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800301e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003022:	d01d      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003028:	d825      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800302e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003034:	e01f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003036:	bf00      	nop
 8003038:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303c:	4ba2      	ldr	r3, [pc, #648]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4aa1      	ldr	r2, [pc, #644]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003048:	e01c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800304e:	3308      	adds	r3, #8
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f002 fa2e 	bl	80054b4 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800305e:	e011      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003060:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003064:	3328      	adds	r3, #40	; 0x28
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f002 fad5 	bl	8005618 <RCCEx_PLL3_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003084:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800308c:	4b8e      	ldr	r3, [pc, #568]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800309c:	4a8a      	ldr	r2, [pc, #552]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800309e:	430b      	orrs	r3, r1
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
 80030a2:	e003      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80030b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d03a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	2b30      	cmp	r3, #48	; 0x30
 80030d4:	d01f      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80030d6:	2b30      	cmp	r3, #48	; 0x30
 80030d8:	d819      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d815      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d111      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ea:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	4a76      	ldr	r2, [pc, #472]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030f6:	e011      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030fc:	3308      	adds	r3, #8
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f002 f9d7 	bl	80054b4 <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800310c:	e006      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003114:	e002      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800311a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003128:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800312c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003134:	430b      	orrs	r3, r1
 8003136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003138:	e003      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800313e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800314e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003158:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800315c:	460b      	mov	r3, r1
 800315e:	4313      	orrs	r3, r2
 8003160:	d051      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003162:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316c:	d035      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800316e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003172:	d82e      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003174:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003178:	d031      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800317a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800317e:	d828      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003184:	d01a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318a:	d822      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d007      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003196:	e01c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a4a      	ldr	r2, [pc, #296]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031a4:	e01c      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031aa:	3308      	adds	r3, #8
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 f980 	bl	80054b4 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031ba:	e011      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fa27 	bl	8005618 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6513      	str	r3, [r2, #80]	; 0x50
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003202:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800321c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003220:	460b      	mov	r3, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	d056      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003226:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d033      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003236:	d82c      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800323c:	d02f      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800323e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003242:	d826      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003244:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003248:	d02b      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800324a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800324e:	d820      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003254:	d012      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800325a:	d81a      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d022      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d115      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003266:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800326a:	3308      	adds	r3, #8
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f002 f920 	bl	80054b4 <RCCEx_PLL2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800327a:	e015      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800327c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003280:	3328      	adds	r3, #40	; 0x28
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f002 f9c7 	bl	8005618 <RCCEx_PLL3_Config>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003290:	e00a      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003298:	e006      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800329a:	bf00      	nop
 800329c:	e004      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032be:	4a02      	ldr	r2, [pc, #8]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6513      	str	r3, [r2, #80]	; 0x50
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032c6:	bf00      	nop
 80032c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80032e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032ea:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d055      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d033      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003306:	d82c      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d02f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d826      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003314:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003318:	d02b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800331a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800331e:	d820      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003324:	d012      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332a:	d81a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003334:	d115      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800333a:	3308      	adds	r3, #8
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f002 f8b8 	bl	80054b4 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800334a:	e015      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800334c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003350:	3328      	adds	r3, #40	; 0x28
 8003352:	2101      	movs	r1, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f002 f95f 	bl	8005618 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003378:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003380:	4bb6      	ldr	r3, [pc, #728]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800338c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003390:	4ab2      	ldr	r2, [pc, #712]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003392:	430b      	orrs	r3, r1
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800339c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80033a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80033ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4313      	orrs	r3, r2
 80033be:	d02a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80033c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d011      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ce:	d10a      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033d4:	3308      	adds	r3, #8
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 f86b 	bl	80054b4 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80033f8:	4b98      	ldr	r3, [pc, #608]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003400:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	4a95      	ldr	r2, [pc, #596]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003408:	430b      	orrs	r3, r1
 800340a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003412:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800342c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003430:	460b      	mov	r3, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	d037      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003440:	d00e      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d816      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800344c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003450:	d111      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003452:	4b82      	ldr	r3, [pc, #520]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800345e:	e00f      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003460:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003464:	3308      	adds	r3, #8
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f002 f823 	bl	80054b4 <RCCEx_PLL2_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800347e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003480:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003488:	4b74      	ldr	r3, [pc, #464]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003490:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6513      	str	r3, [r2, #80]	; 0x50
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034a2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034bc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d03a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d81d      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	08003515 	.word	0x08003515
 80034dc:	080034e9 	.word	0x080034e9
 80034e0:	080034f7 	.word	0x080034f7
 80034e4:	08003515 	.word	0x08003515
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a5b      	ldr	r2, [pc, #364]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034f4:	e00f      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034fa:	3308      	adds	r3, #8
 80034fc:	2102      	movs	r1, #2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 ffd8 	bl	80054b4 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800350a:	e004      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003516:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	f023 0103 	bic.w	r1, r3, #3
 8003526:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800352e:	430b      	orrs	r3, r1
 8003530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003532:	e003      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003538:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003552:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003556:	460b      	mov	r3, r1
 8003558:	4313      	orrs	r3, r2
 800355a:	f000 80a0 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800356a:	f7fd ff7d 	bl	8001468 <HAL_GetTick>
 800356e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003572:	e00b      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003574:	f7fd ff78 	bl	8001468 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d903      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800358c:	4b34      	ldr	r3, [pc, #208]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ed      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003598:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800359c:	2b00      	cmp	r3, #0
 800359e:	d17a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035a0:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035ac:	4053      	eors	r3, r2
 80035ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d118      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fd ff3a 	bl	8001468 <HAL_GetTick>
 80035f4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f8:	e00d      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fd ff35 	bl	8001468 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	f241 3388 	movw	r3, #5000	; 0x1388
 800360a:	429a      	cmp	r2, r3
 800360c:	d903      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003614:	e005      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0eb      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003622:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003626:	2b00      	cmp	r3, #0
 8003628:	d130      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800362e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d115      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800364c:	091a      	lsrs	r2, r3, #4
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003650:	4013      	ands	r3, r2
 8003652:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6113      	str	r3, [r2, #16]
 8003658:	e00c      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	58024800 	.word	0x58024800
 8003664:	00ffffcf 	.word	0x00ffffcf
 8003668:	4bd4      	ldr	r3, [pc, #848]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4ad3      	ldr	r2, [pc, #844]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800366e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003672:	6113      	str	r3, [r2, #16]
 8003674:	4bd1      	ldr	r3, [pc, #836]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003676:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800367c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	4acd      	ldr	r2, [pc, #820]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003686:	430b      	orrs	r3, r1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e008      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800368c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003690:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800369a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f002 0301 	and.w	r3, r2, #1
 80036aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f000 808b 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c8:	2b28      	cmp	r3, #40	; 0x28
 80036ca:	d86b      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080037ad 	.word	0x080037ad
 80036d8:	080037a5 	.word	0x080037a5
 80036dc:	080037a5 	.word	0x080037a5
 80036e0:	080037a5 	.word	0x080037a5
 80036e4:	080037a5 	.word	0x080037a5
 80036e8:	080037a5 	.word	0x080037a5
 80036ec:	080037a5 	.word	0x080037a5
 80036f0:	080037a5 	.word	0x080037a5
 80036f4:	08003779 	.word	0x08003779
 80036f8:	080037a5 	.word	0x080037a5
 80036fc:	080037a5 	.word	0x080037a5
 8003700:	080037a5 	.word	0x080037a5
 8003704:	080037a5 	.word	0x080037a5
 8003708:	080037a5 	.word	0x080037a5
 800370c:	080037a5 	.word	0x080037a5
 8003710:	080037a5 	.word	0x080037a5
 8003714:	0800378f 	.word	0x0800378f
 8003718:	080037a5 	.word	0x080037a5
 800371c:	080037a5 	.word	0x080037a5
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080037a5 	.word	0x080037a5
 8003728:	080037a5 	.word	0x080037a5
 800372c:	080037a5 	.word	0x080037a5
 8003730:	080037a5 	.word	0x080037a5
 8003734:	080037ad 	.word	0x080037ad
 8003738:	080037a5 	.word	0x080037a5
 800373c:	080037a5 	.word	0x080037a5
 8003740:	080037a5 	.word	0x080037a5
 8003744:	080037a5 	.word	0x080037a5
 8003748:	080037a5 	.word	0x080037a5
 800374c:	080037a5 	.word	0x080037a5
 8003750:	080037a5 	.word	0x080037a5
 8003754:	080037ad 	.word	0x080037ad
 8003758:	080037a5 	.word	0x080037a5
 800375c:	080037a5 	.word	0x080037a5
 8003760:	080037a5 	.word	0x080037a5
 8003764:	080037a5 	.word	0x080037a5
 8003768:	080037a5 	.word	0x080037a5
 800376c:	080037a5 	.word	0x080037a5
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080037ad 	.word	0x080037ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800377c:	3308      	adds	r3, #8
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fe97 	bl	80054b4 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003792:	3328      	adds	r3, #40	; 0x28
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f001 ff3e 	bl	8005618 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037b6:	4b81      	ldr	r3, [pc, #516]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80037be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	4a7d      	ldr	r2, [pc, #500]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6553      	str	r3, [r2, #84]	; 0x54
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f002 0302 	and.w	r3, r2, #2
 80037e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80037ec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d042      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d825      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003855 	.word	0x08003855
 800380c:	08003821 	.word	0x08003821
 8003810:	08003837 	.word	0x08003837
 8003814:	08003855 	.word	0x08003855
 8003818:	08003855 	.word	0x08003855
 800381c:	08003855 	.word	0x08003855
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003824:	3308      	adds	r3, #8
 8003826:	2101      	movs	r1, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fe43 	bl	80054b4 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003834:	e00f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800383a:	3328      	adds	r3, #40	; 0x28
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f001 feea 	bl	8005618 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800384a:	e004      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003856:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800385e:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f023 0107 	bic.w	r1, r3, #7
 8003866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800386a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386c:	4a53      	ldr	r2, [pc, #332]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800386e:	430b      	orrs	r3, r1
 8003870:	6553      	str	r3, [r2, #84]	; 0x54
 8003872:	e003      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003878:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f002 0304 	and.w	r3, r2, #4
 8003888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003892:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d044      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800389c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d825      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038c9 	.word	0x080038c9
 80038b8:	080038df 	.word	0x080038df
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038cc:	3308      	adds	r3, #8
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fdef 	bl	80054b4 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038e2:	3328      	adds	r3, #40	; 0x28
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fe96 	bl	8005618 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f023 0107 	bic.w	r1, r3, #7
 800390e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003916:	4a29      	ldr	r2, [pc, #164]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003918:	430b      	orrs	r3, r1
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003922:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f002 0320 	and.w	r3, r2, #32
 8003932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800393c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d057      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003952:	d035      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003958:	d82c      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d031      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d826      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003966:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800396a:	d02d      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800396c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003970:	d820      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003976:	d012      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d81a      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003986:	d115      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800398c:	3308      	adds	r3, #8
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fd8f 	bl	80054b4 <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800399c:	e017      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039a2:	3328      	adds	r3, #40	; 0x28
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fe36 	bl	8005618 <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039b2:	e00c      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039ba:	e008      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80039bc:	58024400 	.word	0x58024400
        break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80039cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d6:	4bc2      	ldr	r3, [pc, #776]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	4abe      	ldr	r2, [pc, #760]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6553      	str	r3, [r2, #84]	; 0x54
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	d055      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a22:	d033      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003a24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a28:	d82c      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d02f      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d826      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3a:	d02b      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a40:	d820      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a46:	d012      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4c:	d81a      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d022      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a56:	d115      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fd27 	bl	80054b4 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e015      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a72:	3328      	adds	r3, #40	; 0x28
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fdce 	bl	8005618 <RCCEx_PLL3_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a82:	e00a      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003a8c:	bf00      	nop
 8003a8e:	e004      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003a90:	bf00      	nop
 8003a92:	e002      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aa2:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ab2:	4a8b      	ldr	r2, [pc, #556]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003abe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003ace:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ad8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003adc:	460b      	mov	r3, r1
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	d055      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003aee:	d033      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003af0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003af4:	d82c      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afa:	d02f      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d826      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b06:	d02b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003b08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b0c:	d820      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b12:	d012      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b18:	d81a      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d022      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b22:	d115      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b28:	3308      	adds	r3, #8
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fcc1 	bl	80054b4 <RCCEx_PLL2_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b38:	e015      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b3e:	3328      	adds	r3, #40	; 0x28
 8003b40:	2102      	movs	r1, #2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fd68 	bl	8005618 <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b56:	e006      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e004      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b66:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b7e:	4a58      	ldr	r2, [pc, #352]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6593      	str	r3, [r2, #88]	; 0x58
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b8a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f002 0308 	and.w	r3, r2, #8
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ba4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d01e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bc0:	3328      	adds	r3, #40	; 0x28
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fd27 	bl	8005618 <RCCEx_PLL3_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bd6:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 0310 	and.w	r3, r2, #16
 8003bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d01e      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	2102      	movs	r1, #2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 fcf8 	bl	8005618 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c76:	d022      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7c:	d81b      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d00b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003c88:	e015      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c8e:	3308      	adds	r3, #8
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fc0e 	bl	80054b4 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c9e:	e00f      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca4:	3328      	adds	r3, #40	; 0x28
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fcb5 	bl	8005618 <RCCEx_PLL3_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cb4:	e004      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cd8:	4a01      	ldr	r2, [pc, #4]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	e005      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ce8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cfe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d03b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d14:	d01f      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d1a:	d818      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d20:	d003      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d26:	d007      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003d28:	e011      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2a:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d36:	e00f      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d3c:	3328      	adds	r3, #40	; 0x28
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fc69 	bl	8005618 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d60:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d70:	4a52      	ldr	r2, [pc, #328]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6553      	str	r3, [r2, #84]	; 0x54
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d7c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003d8c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d8e:	2300      	movs	r3, #0
 8003d90:	677b      	str	r3, [r7, #116]	; 0x74
 8003d92:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d031      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003daa:	d007      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003dac:	e011      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dba:	e00e      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 fb75 	bl	80054b4 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dfc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0e:	2300      	movs	r3, #0
 8003e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d00c      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e20:	3328      	adds	r3, #40	; 0x28
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 fbf7 	bl	8005618 <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003e42:	663b      	str	r3, [r7, #96]	; 0x60
 8003e44:	2300      	movs	r3, #0
 8003e46:	667b      	str	r3, [r7, #100]	; 0x64
 8003e48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d03a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5e:	d018      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e64:	d811      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6a:	d014      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d80b      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e88:	e008      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e90:	e004      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb4:	4a01      	ldr	r2, [pc, #4]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6553      	str	r3, [r2, #84]	; 0x54
 8003eba:	e005      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ec4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee4:	4baa      	ldr	r3, [pc, #680]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef2:	4aa7      	ldr	r2, [pc, #668]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003f04:	653b      	str	r3, [r7, #80]	; 0x50
 8003f06:	2300      	movs	r3, #0
 8003f08:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f14:	4b9e      	ldr	r3, [pc, #632]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f24:	4a9a      	ldr	r2, [pc, #616]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f46:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a8e      	ldr	r2, [pc, #568]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f56:	430b      	orrs	r3, r1
 8003f58:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f76:	4b86      	ldr	r3, [pc, #536]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4a85      	ldr	r2, [pc, #532]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f80:	6113      	str	r3, [r2, #16]
 8003f82:	4b83      	ldr	r3, [pc, #524]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f8e:	4a80      	ldr	r2, [pc, #512]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fb0:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a74      	ldr	r2, [pc, #464]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fe0:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	4a67      	ldr	r2, [pc, #412]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	2100      	movs	r1, #0
 8004000:	62b9      	str	r1, [r7, #40]	; 0x28
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004008:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004016:	3308      	adds	r3, #8
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fa4a 	bl	80054b4 <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004026:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004032:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	2100      	movs	r1, #0
 8004040:	6239      	str	r1, [r7, #32]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d011      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004056:	3308      	adds	r3, #8
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fa2a 	bl	80054b4 <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004066:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004072:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004076:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	2100      	movs	r1, #0
 8004080:	61b9      	str	r1, [r7, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d011      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004096:	3308      	adds	r3, #8
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fa0a 	bl	80054b4 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80040a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	2100      	movs	r1, #0
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d011      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040d6:	3328      	adds	r3, #40	; 0x28
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fa9c 	bl	8005618 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80040e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	2100      	movs	r1, #0
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d011      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004116:	3328      	adds	r3, #40	; 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fa7c 	bl	8005618 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004126:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004132:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	2100      	movs	r1, #0
 8004140:	6039      	str	r1, [r7, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	e9d7 1200 	ldrd	r1, r2, [r7]
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d011      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004156:	3328      	adds	r3, #40	; 0x28
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fa5c 	bl	8005618 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004166:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004172:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8004176:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004190:	58024400 	.word	0x58024400

08004194 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af00      	add	r7, sp, #0
 800419a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800419e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80041a6:	430b      	orrs	r3, r1
 80041a8:	f040 8094 	bne.w	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80041ac:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	f200 8087 	bhi.w	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041d9 	.word	0x080041d9
 80041c8:	08004201 	.word	0x08004201
 80041cc:	08004229 	.word	0x08004229
 80041d0:	080042c5 	.word	0x080042c5
 80041d4:	08004251 	.word	0x08004251
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80041d8:	4b93      	ldr	r3, [pc, #588]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e4:	d108      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f810 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80041f4:	f000 bd45 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041fc:	f000 bd41 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004200:	4b89      	ldr	r3, [pc, #548]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420c:	d108      	bne.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fd54 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800421c:	f000 bd31 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004224:	f000 bd2d 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004228:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004234:	d108      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fe94 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004244:	f000 bd1d 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800424c:	f000 bd19 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004258:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800426c:	4b6e      	ldr	r3, [pc, #440]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	4a6d      	ldr	r2, [pc, #436]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427e:	e01f      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004280:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428c:	d106      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004294:	d102      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004296:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429a:	e011      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a8:	d106      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80042aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b0:	d102      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b6:	e003      	b.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80042bc:	f000 bce1 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80042c0:	f000 bcdf 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80042c4:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042c8:	f000 bcdb 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042d0:	f000 bcd7 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80042d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80042dc:	430b      	orrs	r3, r1
 80042de:	f040 80ad 	bne.w	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f2:	d056      	beq.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	f200 8090 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2bc0      	cmp	r3, #192	; 0xc0
 8004302:	f000 8088 	beq.w	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2bc0      	cmp	r3, #192	; 0xc0
 800430a:	f200 8088 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d032      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	f200 8081 	bhi.w	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d014      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004328:	e079      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004336:	d108      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433c:	4618      	mov	r0, r3
 800433e:	f000 ff67 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004346:	f000 bc9c 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800434e:	f000 bc98 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435e:	d108      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004360:	f107 0318 	add.w	r3, r7, #24
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fcab 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800436e:	f000 bc88 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004376:	f000 bc84 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004386:	d108      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fdeb 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004396:	f000 bc74 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800439e:	f000 bc70 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	08db      	lsrs	r3, r3, #3
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d0:	e01f      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d106      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e6:	d102      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	e011      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fa:	d106      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004402:	d102      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	e003      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800440e:	f000 bc38 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004412:	f000 bc36 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800441a:	f000 bc32 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004422:	f000 bc2e 	b.w	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	03d09000 	.word	0x03d09000
 8004430:	003d0900 	.word	0x003d0900
 8004434:	017d7840 	.word	0x017d7840
 8004438:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800443c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004440:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004444:	430b      	orrs	r3, r1
 8004446:	f040 809c 	bne.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800444a:	4b9e      	ldr	r3, [pc, #632]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004452:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800445a:	d054      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004462:	f200 808b 	bhi.w	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800446c:	f000 8083 	beq.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004476:	f200 8081 	bhi.w	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004480:	d02f      	beq.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d878      	bhi.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004496:	d012      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004498:	e070      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800449a:	4b8a      	ldr	r3, [pc, #552]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044a6:	d107      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 feaf 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044b6:	e3e4      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044bc:	e3e1      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044be:	4b81      	ldr	r3, [pc, #516]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ca:	d107      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044cc:	f107 0318 	add.w	r3, r7, #24
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fbf5 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044da:	e3d2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044e0:	e3cf      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80044e2:	4b78      	ldr	r3, [pc, #480]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ee:	d107      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd37 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80044fe:	e3c0      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004504:	e3bd      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004510:	4b6c      	ldr	r3, [pc, #432]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d10c      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004522:	4b68      	ldr	r3, [pc, #416]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	4a66      	ldr	r2, [pc, #408]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004534:	e01e      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004542:	d106      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454a:	d102      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800454c:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004550:	e010      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004552:	4b5c      	ldr	r3, [pc, #368]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455e:	d106      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004566:	d102      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004568:	4b59      	ldr	r3, [pc, #356]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004572:	e386      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004574:	e385      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004576:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800457a:	e382      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004580:	e37f      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004586:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800458a:	430b      	orrs	r3, r1
 800458c:	f040 80a7 	bne.w	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004598:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a0:	d055      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a8:	f200 8096 	bhi.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045b2:	f000 8084 	beq.w	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045bc:	f200 808c 	bhi.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045c6:	d030      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ce:	f200 8083 	bhi.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045de:	d012      	beq.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80045e0:	e07a      	b.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045e2:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ee:	d107      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fe0b 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045fe:	e340      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004604:	e33d      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004606:	4b2f      	ldr	r3, [pc, #188]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004612:	d107      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004614:	f107 0318 	add.w	r3, r7, #24
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb51 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004622:	e32e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004628:	e32b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004636:	d107      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fc93 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004646:	e31c      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800464c:	e319      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d10c      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467c:	e01e      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d106      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004692:	d102      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004698:	e010      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800469a:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ae:	d102      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80046ba:	e2e2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046bc:	e2e1      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046c2:	e2de      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046c4:	58024400 	.word	0x58024400
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	003d0900 	.word	0x003d0900
 80046d0:	017d7840 	.word	0x017d7840
 80046d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046dc:	e2d1      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80046de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80046e6:	430b      	orrs	r3, r1
 80046e8:	f040 809c 	bne.w	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80046ec:	4b93      	ldr	r3, [pc, #588]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046fc:	d054      	beq.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004704:	f200 808b 	bhi.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800470e:	f000 8083 	beq.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004718:	f200 8081 	bhi.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	d02f      	beq.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	d878      	bhi.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004738:	d012      	beq.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800473a:	e070      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800473c:	4b7f      	ldr	r3, [pc, #508]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004748:	d107      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800474a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fd5e 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004758:	e293      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800475e:	e290      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476c:	d107      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800476e:	f107 0318 	add.w	r3, r7, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f000 faa4 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800477c:	e281      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004782:	e27e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004784:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d107      	bne.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004792:	f107 030c 	add.w	r3, r7, #12
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fbe6 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047a0:	e26f      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a6:	e26c      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047a8:	4b64      	ldr	r3, [pc, #400]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047b2:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047c4:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	4a5c      	ldr	r2, [pc, #368]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d6:	e01e      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047d8:	4b58      	ldr	r3, [pc, #352]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e4:	d106      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ec:	d102      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80047ee:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f2:	e010      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80047f4:	4b51      	ldr	r3, [pc, #324]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004800:	d106      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d102      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800480a:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800480e:	e002      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004814:	e235      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004816:	e234      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004818:	4b4c      	ldr	r3, [pc, #304]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800481c:	e231      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004822:	e22e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800482c:	430b      	orrs	r3, r1
 800482e:	f040 808f 	bne.w	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004832:	4b42      	ldr	r3, [pc, #264]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004836:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004842:	d06b      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800484a:	d874      	bhi.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004852:	d056      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800485a:	d86c      	bhi.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004862:	d03b      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800486a:	d864      	bhi.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004872:	d021      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800487a:	d85c      	bhi.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d004      	beq.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800488a:	e054      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe f9ca 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8004890:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004892:	e1f6      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004894:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a0:	d107      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048a2:	f107 0318 	add.w	r3, r7, #24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa0a 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048b0:	e1e7      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048b6:	e1e4      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048b8:	4b20      	ldr	r3, [pc, #128]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c4:	d107      	bne.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb4c 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048d4:	e1d5      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048da:	e1d2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d109      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048e8:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048fa:	e1c2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004900:	e1bf      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	d102      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004914:	e1b5      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800491a:	e1b2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004928:	d102      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800492e:	e1a8      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004934:	e1a5      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800493a:	e1a2      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800493c:	58024400 	.word	0x58024400
 8004940:	03d09000 	.word	0x03d09000
 8004944:	003d0900 	.word	0x003d0900
 8004948:	017d7840 	.word	0x017d7840
 800494c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004954:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8004958:	430b      	orrs	r3, r1
 800495a:	d173      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800495c:	4b9c      	ldr	r3, [pc, #624]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496c:	d02f      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004974:	d863      	bhi.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d012      	beq.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004984:	e05b      	b.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004986:	4b92      	ldr	r3, [pc, #584]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004992:	d107      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004994:	f107 0318 	add.w	r3, r7, #24
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f991 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049a2:	e16e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049a8:	e16b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049aa:	4b89      	ldr	r3, [pc, #548]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b6:	d107      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fad3 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049c6:	e15c      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049cc:	e159      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049ce:	4b80      	ldr	r3, [pc, #512]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049d8:	4b7d      	ldr	r3, [pc, #500]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d10c      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ea:	4b79      	ldr	r3, [pc, #484]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	4a77      	ldr	r2, [pc, #476]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fc:	e01e      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049fe:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a12:	d102      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a14:	4b70      	ldr	r3, [pc, #448]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a18:	e010      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a26:	d106      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a30:	4b6a      	ldr	r3, [pc, #424]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a3a:	e122      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004a3c:	e121      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a42:	e11e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a48:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	d133      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d012      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004a68:	e023      	b.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a76:	d107      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fbc7 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a86:	e0fc      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a8c:	e0f9      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a8e:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9a:	d107      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a9c:	f107 0318 	add.w	r3, r7, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f90d 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004aaa:	e0ea      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ab0:	e0e7      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ab6:	e0e4      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004abc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	f040 808d 	bne.w	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004ac6:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad6:	d06b      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ade:	d874      	bhi.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d056      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d86c      	bhi.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004af6:	d03b      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004afe:	d864      	bhi.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b06:	d021      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0e:	d85c      	bhi.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1c:	d004      	beq.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004b1e:	e054      	b.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004b20:	f000 f8b8 	bl	8004c94 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b24:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b26:	e0ac      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b34:	d107      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f8c0 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b44:	e09d      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b4a:	e09a      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b58:	d107      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa02 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b68:	e08b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b6e:	e088      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d109      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b8e:	e078      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	e075      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba2:	d102      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ba8:	e06b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bae:	e068      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bbc:	d102      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bc2:	e05e      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc8:	e05b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bce:	e058      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	03d09000 	.word	0x03d09000
 8004bd8:	003d0900 	.word	0x003d0900
 8004bdc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004be8:	430b      	orrs	r3, r1
 8004bea:	d148      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004bec:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d02a      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d838      	bhi.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c12:	d00d      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004c14:	e030      	b.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c22:	d102      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c28:	e02b      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2e:	e028      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fae4 	bl	8005210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c4c:	e019      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c52:	e016      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c60:	d107      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c62:	f107 0318 	add.w	r3, r7, #24
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f82a 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c70:	e007      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c76:	e004      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c7c:	e001      	b.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3740      	adds	r7, #64	; 0x40
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	017d7840 	.word	0x017d7840

08004c94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c98:	f7fd ff94 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	4904      	ldr	r1, [pc, #16]	; (8004cbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004caa:	5ccb      	ldrb	r3, [r1, r3]
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	08017614 	.word	0x08017614

08004cc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cc8:	4ba1      	ldr	r3, [pc, #644]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004cd2:	4b9f      	ldr	r3, [pc, #636]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	0b1b      	lsrs	r3, r3, #12
 8004cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cde:	4b9c      	ldr	r3, [pc, #624]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004cea:	4b99      	ldr	r3, [pc, #612]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8111 	beq.w	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f000 8083 	beq.w	8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f200 80a1 	bhi.w	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d056      	beq.n	8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d2a:	e099      	b.n	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d2c:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02d      	beq.n	8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d38:	4b85      	ldr	r3, [pc, #532]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	4a84      	ldr	r2, [pc, #528]	; (8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d62:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d92:	e087      	b.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dd6:	e065      	b.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e1a:	e043      	b.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5e:	e021      	b.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ea4:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	0a5b      	lsrs	r3, r3, #9
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eca:	ee17 2a90 	vmov	r2, s15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef8:	ee17 2a90 	vmov	r2, s15
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f00:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	0e1b      	lsrs	r3, r3, #24
 8004f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f26:	ee17 2a90 	vmov	r2, s15
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f2e:	e008      	b.n	8004f42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	609a      	str	r2, [r3, #8]
}
 8004f42:	bf00      	nop
 8004f44:	3724      	adds	r7, #36	; 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400
 8004f54:	03d09000 	.word	0x03d09000
 8004f58:	46000000 	.word	0x46000000
 8004f5c:	4c742400 	.word	0x4c742400
 8004f60:	4a742400 	.word	0x4a742400
 8004f64:	4bbebc20 	.word	0x4bbebc20

08004f68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f70:	4ba1      	ldr	r3, [pc, #644]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f7a:	4b9f      	ldr	r3, [pc, #636]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	0d1b      	lsrs	r3, r3, #20
 8004f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f86:	4b9c      	ldr	r3, [pc, #624]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f92:	4b99      	ldr	r3, [pc, #612]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	08db      	lsrs	r3, r3, #3
 8004f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8111 	beq.w	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f000 8083 	beq.w	80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f200 80a1 	bhi.w	8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d056      	beq.n	8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fd2:	e099      	b.n	8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd4:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d02d      	beq.n	800503c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe0:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a84      	ldr	r2, [pc, #528]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500a:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501a:	ed97 6a03 	vldr	s12, [r7, #12]
 800501e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800503a:	e087      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b6a      	ldr	r3, [pc, #424]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800507e:	e065      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c2:	e043      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b48      	ldr	r3, [pc, #288]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e021      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b37      	ldr	r3, [pc, #220]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005166:	edd7 6a07 	vldr	s13, [r7, #28]
 800516a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005172:	ee17 2a90 	vmov	r2, s15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005194:	edd7 6a07 	vldr	s13, [r7, #28]
 8005198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a0:	ee17 2a90 	vmov	r2, s15
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	0e1b      	lsrs	r3, r3, #24
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ce:	ee17 2a90 	vmov	r2, s15
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051d6:	e008      	b.n	80051ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
}
 80051ea:	bf00      	nop
 80051ec:	3724      	adds	r7, #36	; 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	03d09000 	.word	0x03d09000
 8005200:	46000000 	.word	0x46000000
 8005204:	4c742400 	.word	0x4c742400
 8005208:	4a742400 	.word	0x4a742400
 800520c:	4bbebc20 	.word	0x4bbebc20

08005210 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005218:	4ba0      	ldr	r3, [pc, #640]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005222:	4b9e      	ldr	r3, [pc, #632]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800522c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800522e:	4b9b      	ldr	r3, [pc, #620]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005238:	4b98      	ldr	r3, [pc, #608]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8111 	beq.w	800547e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b02      	cmp	r3, #2
 8005260:	f000 8083 	beq.w	800536a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b02      	cmp	r3, #2
 8005268:	f200 80a1 	bhi.w	80053ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d056      	beq.n	8005326 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005278:	e099      	b.n	80053ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800527a:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02d      	beq.n	80052e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005286:	4b85      	ldr	r3, [pc, #532]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	08db      	lsrs	r3, r3, #3
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	4a83      	ldr	r2, [pc, #524]	; (80054a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b0:	4b7a      	ldr	r3, [pc, #488]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052e0:	e087      	b.n	80053f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80052f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f4:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005304:	ed97 6a03 	vldr	s12, [r7, #12]
 8005308:	eddf 5a66 	vldr	s11, [pc, #408]	; 80054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800530c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005324:	e065      	b.n	80053f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005330:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80054ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005338:	4b58      	ldr	r3, [pc, #352]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005348:	ed97 6a03 	vldr	s12, [r7, #12]
 800534c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005364:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005368:	e043      	b.n	80053f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005374:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80054b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537c:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005390:	eddf 5a44 	vldr	s11, [pc, #272]	; 80054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ac:	e021      	b.n	80053f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80054a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80053bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80054a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80053f2:	4b2a      	ldr	r3, [pc, #168]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	0a5b      	lsrs	r3, r3, #9
 80053f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800540c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005418:	ee17 2a90 	vmov	r2, s15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800543a:	edd7 6a07 	vldr	s13, [r7, #28]
 800543e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005446:	ee17 2a90 	vmov	r2, s15
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	0e1b      	lsrs	r3, r3, #24
 8005454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005468:	edd7 6a07 	vldr	s13, [r7, #28]
 800546c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005474:	ee17 2a90 	vmov	r2, s15
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800547c:	e008      	b.n	8005490 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3724      	adds	r7, #36	; 0x24
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	58024400 	.word	0x58024400
 80054a0:	03d09000 	.word	0x03d09000
 80054a4:	46000000 	.word	0x46000000
 80054a8:	4c742400 	.word	0x4c742400
 80054ac:	4a742400 	.word	0x4a742400
 80054b0:	4bbebc20 	.word	0x4bbebc20

080054b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054c2:	4b53      	ldr	r3, [pc, #332]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d101      	bne.n	80054d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e099      	b.n	8005606 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054d2:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a4e      	ldr	r2, [pc, #312]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054de:	f7fb ffc3 	bl	8001468 <HAL_GetTick>
 80054e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054e4:	e008      	b.n	80054f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054e6:	f7fb ffbf 	bl	8001468 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e086      	b.n	8005606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054f8:	4b45      	ldr	r3, [pc, #276]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	493f      	ldr	r1, [pc, #252]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005514:	4313      	orrs	r3, r2
 8005516:	628b      	str	r3, [r1, #40]	; 0x28
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	3b01      	subs	r3, #1
 800551e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	3b01      	subs	r3, #1
 8005528:	025b      	lsls	r3, r3, #9
 800552a:	b29b      	uxth	r3, r3
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	3b01      	subs	r3, #1
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	3b01      	subs	r3, #1
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005548:	4931      	ldr	r1, [pc, #196]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800554e:	4b30      	ldr	r3, [pc, #192]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	492d      	ldr	r1, [pc, #180]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005560:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f023 0220 	bic.w	r2, r3, #32
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	4928      	ldr	r1, [pc, #160]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005572:	4b27      	ldr	r3, [pc, #156]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4a26      	ldr	r2, [pc, #152]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005578:	f023 0310 	bic.w	r3, r3, #16
 800557c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800557e:	4b24      	ldr	r3, [pc, #144]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <RCCEx_PLL2_Config+0x160>)
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	69d2      	ldr	r2, [r2, #28]
 800558a:	00d2      	lsls	r2, r2, #3
 800558c:	4920      	ldr	r1, [pc, #128]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 8005598:	f043 0310 	orr.w	r3, r3, #16
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055b0:	e00f      	b.n	80055d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d106      	bne.n	80055c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4a14      	ldr	r2, [pc, #80]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055c4:	e005      	b.n	80055d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4a11      	ldr	r2, [pc, #68]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055de:	f7fb ff43 	bl	8001468 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055e4:	e008      	b.n	80055f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055e6:	f7fb ff3f 	bl	8001468 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e006      	b.n	8005606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <RCCEx_PLL2_Config+0x15c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
 8005614:	ffff0007 	.word	0xffff0007

08005618 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005626:	4b53      	ldr	r3, [pc, #332]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b03      	cmp	r3, #3
 8005630:	d101      	bne.n	8005636 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e099      	b.n	800576a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005636:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4e      	ldr	r2, [pc, #312]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800563c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005642:	f7fb ff11 	bl	8001468 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005648:	e008      	b.n	800565c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800564a:	f7fb ff0d 	bl	8001468 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e086      	b.n	800576a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800565c:	4b45      	ldr	r3, [pc, #276]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	051b      	lsls	r3, r3, #20
 8005676:	493f      	ldr	r1, [pc, #252]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005678:	4313      	orrs	r3, r2
 800567a:	628b      	str	r3, [r1, #40]	; 0x28
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	3b01      	subs	r3, #1
 8005682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	3b01      	subs	r3, #1
 800568c:	025b      	lsls	r3, r3, #9
 800568e:	b29b      	uxth	r3, r3
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	3b01      	subs	r3, #1
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056ac:	4931      	ldr	r1, [pc, #196]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	492d      	ldr	r1, [pc, #180]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056c4:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	4928      	ldr	r1, [pc, #160]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	4a26      	ldr	r2, [pc, #152]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <RCCEx_PLL3_Config+0x160>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	69d2      	ldr	r2, [r2, #28]
 80056ee:	00d2      	lsls	r2, r2, #3
 80056f0:	4920      	ldr	r1, [pc, #128]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056f6:	4b1f      	ldr	r3, [pc, #124]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800570e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005714:	e00f      	b.n	8005736 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d106      	bne.n	800572a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005728:	e005      	b.n	8005736 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	4a11      	ldr	r2, [pc, #68]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005734:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800573c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005742:	f7fb fe91 	bl	8001468 <HAL_GetTick>
 8005746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005748:	e008      	b.n	800575c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800574a:	f7fb fe8d 	bl	8001468 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e006      	b.n	800576a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <RCCEx_PLL3_Config+0x15c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	ffff0007 	.word	0xffff0007

0800577c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e075      	b.n	800587a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fb fba5 	bl	8000ef0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f868 	bl	8005884 <HAL_SD_InitCard>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e05d      	b.n	800587a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fdaf 	bl	8006328 <HAL_SD_GetCardStatus>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e052      	b.n	800587a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80057d4:	7e3b      	ldrb	r3, [r7, #24]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80057da:	7e7b      	ldrb	r3, [r7, #25]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10a      	bne.n	80057fe <HAL_SD_Init+0x82>
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <HAL_SD_Init+0x78>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	659a      	str	r2, [r3, #88]	; 0x58
 80057fc:	e00b      	b.n	8005816 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	2b01      	cmp	r3, #1
 8005804:	d104      	bne.n	8005810 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580c:	659a      	str	r2, [r3, #88]	; 0x58
 800580e:	e002      	b.n	8005816 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fe41 	bl	80064a4 <HAL_SD_ConfigWideBusOperation>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e026      	b.n	800587a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800582c:	f7fb fe1c 	bl	8001468 <HAL_GetTick>
 8005830:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005832:	e011      	b.n	8005858 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005834:	f7fb fe18 	bl	8001468 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d109      	bne.n	8005858 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800584a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e010      	b.n	800587a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 ff35 	bl	80066c8 <HAL_SD_GetCardState>
 800585e:	4603      	mov	r3, r0
 8005860:	2b04      	cmp	r3, #4
 8005862:	d1e7      	bne.n	8005834 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3728      	adds	r7, #40	; 0x28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b08d      	sub	sp, #52	; 0x34
 8005888:	af02      	add	r7, sp, #8
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800589c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f7fe fc76 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058be:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e070      	b.n	80059a6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	4a39      	ldr	r2, [pc, #228]	; (80059b0 <HAL_SD_InitCard+0x12c>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	466a      	mov	r2, sp
 80058d8:	f107 0318 	add.w	r3, r7, #24
 80058dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80058e4:	f107 030c 	add.w	r3, r7, #12
 80058e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ea:	4620      	mov	r0, r4
 80058ec:	f002 ffbc 	bl	8008868 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f002 ffff 	bl	80088f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005912:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <HAL_SD_InitCard+0x130>)
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	3301      	adds	r3, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f7fb fdaf 	bl	8001480 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ffbe 	bl	80068a4 <SD_PowerON>
 8005928:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e02e      	b.n	80059a6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fedd 	bl	8006708 <SD_InitCard>
 800594e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00b      	beq.n	800596e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e01b      	b.n	80059a6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005976:	4618      	mov	r0, r3
 8005978:	f003 f854 	bl	8008a24 <SDMMC_CmdBlockLength>
 800597c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00f      	beq.n	80059a4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <HAL_SD_InitCard+0x134>)
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	372c      	adds	r7, #44	; 0x2c
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	014f8b59 	.word	0x014f8b59
 80059b4:	00012110 	.word	0x00012110
 80059b8:	1fe00fff 	.word	0x1fe00fff

080059bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d107      	bne.n	80059e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e08d      	b.n	8005b00 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	f040 8086 	bne.w	8005afe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80059f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d907      	bls.n	8005a16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e074      	b.n	8005b00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	025a      	lsls	r2, r3, #9
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d002      	beq.n	8005a42 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	025b      	lsls	r3, r3, #9
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	025b      	lsls	r3, r3, #9
 8005a4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a4e:	2390      	movs	r3, #144	; 0x90
 8005a50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a52:	2302      	movs	r3, #2
 8005a54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f107 0210 	add.w	r2, r7, #16
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 ffaf 	bl	80089cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a7c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d90a      	bls.n	8005aaa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2282      	movs	r2, #130	; 0x82
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f003 f805 	bl	8008ab0 <SDMMC_CmdReadMultiBlock>
 8005aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005aa8:	e009      	b.n	8005abe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2281      	movs	r2, #129	; 0x81
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f002 ffd7 	bl	8008a6a <SDMMC_CmdReadSingleBlock>
 8005abc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e00a      	b.n	8005b00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005af8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005afe:	2302      	movs	r3, #2
  }
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3730      	adds	r7, #48	; 0x30
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	1fe00fff 	.word	0x1fe00fff

08005b0c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e08d      	b.n	8005c50 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f040 8086 	bne.w	8005c4e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d907      	bls.n	8005b66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e074      	b.n	8005c50 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	025a      	lsls	r2, r3, #9
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d002      	beq.n	8005b92 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	025b      	lsls	r3, r3, #9
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	025b      	lsls	r3, r3, #9
 8005b9c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b9e:	2390      	movs	r3, #144	; 0x90
 8005ba0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f107 0210 	add.w	r2, r7, #16
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f002 ff07 	bl	80089cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d90a      	bls.n	8005bfa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	22a0      	movs	r2, #160	; 0xa0
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f002 ffa3 	bl	8008b3c <SDMMC_CmdWriteMultiBlock>
 8005bf6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005bf8:	e009      	b.n	8005c0e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2290      	movs	r2, #144	; 0x90
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 ff75 	bl	8008af6 <SDMMC_CmdWriteSingleBlock>
 8005c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d012      	beq.n	8005c3a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0f      	ldr	r2, [pc, #60]	; (8005c58 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e00a      	b.n	8005c50 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3730      	adds	r7, #48	; 0x30
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	1fe00fff 	.word	0x1fe00fff

08005c5c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_SD_IRQHandler+0x2e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 f8fa 	bl	8006e7c <SD_Read_IT>
 8005c88:	e19a      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80ac 	beq.w	8005df2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b59      	ldr	r3, [pc, #356]	; (8005e14 <HAL_SD_IRQHandler+0x1b8>)
 8005cb0:	400b      	ands	r3, r1
 8005cb2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d038      	beq.n	8005d50 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_SD_IRQHandler+0x96>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d011      	beq.n	8005d16 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f002 ff44 	bl	8008b84 <SDMMC_CmdStopTransfer>
 8005cfc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f95b 	bl	8005fcc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	; (8005e18 <HAL_SD_IRQHandler+0x1bc>)
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <HAL_SD_IRQHandler+0xe4>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f003 fd47 	bl	80097d4 <HAL_SD_RxCpltCallback>
 8005d46:	e13b      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f003 fd35 	bl	80097b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d4e:	e137      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8132 	beq.w	8005fc0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <HAL_SD_IRQHandler+0x12c>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d011      	beq.n	8005dac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 fef9 	bl	8008b84 <SDMMC_CmdStopTransfer>
 8005d92:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f910 	bl	8005fcc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <HAL_SD_IRQHandler+0x172>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f003 fcf2 	bl	80097b8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <HAL_SD_IRQHandler+0x18e>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80eb 	beq.w	8005fc0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f003 fcf2 	bl	80097d4 <HAL_SD_RxCpltCallback>
}
 8005df0:	e0e6      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <HAL_SD_IRQHandler+0x1c0>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f87c 	bl	8006f08 <SD_Write_IT>
 8005e10:	e0d6      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
 8005e12:	bf00      	nop
 8005e14:	ffff3ec5 	.word	0xffff3ec5
 8005e18:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 809d 	beq.w	8005f66 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	f043 0208 	orr.w	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	f043 0210 	orr.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a4b      	ldr	r2, [pc, #300]	; (8005fc8 <HAL_SD_IRQHandler+0x36c>)
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eda:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f002 fe4f 	bl	8008b84 <SDMMC_CmdStopTransfer>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f00:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f851 	bl	8005fcc <HAL_SD_ErrorCallback>
}
 8005f2a:	e049      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d044      	beq.n	8005fc0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d040      	beq.n	8005fc0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f834 	bl	8005fcc <HAL_SD_ErrorCallback>
}
 8005f64:	e02c      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d025      	beq.n	8005fc0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10c      	bne.n	8005fa6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 f81e 	bl	8006fd8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005f9c:	e010      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 f806 	bl	8006fb0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005fa4:	e00c      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 f807 	bl	8006fc4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005fb6:	e003      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 ffef 	bl	8006f9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005fbe:	e7ff      	b.n	8005fc0 <HAL_SD_IRQHandler+0x364>
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	18000f3a 	.word	0x18000f3a

08005fcc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	0f9b      	lsrs	r3, r3, #30
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	0e9b      	lsrs	r3, r3, #26
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	b2da      	uxtb	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	b2da      	uxtb	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601e:	0c1b      	lsrs	r3, r3, #16
 8006020:	b2da      	uxtb	r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	b2da      	uxtb	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	b2da      	uxtb	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	0d1b      	lsrs	r3, r3, #20
 8006042:	b29a      	uxth	r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	b2da      	uxtb	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605e:	0bdb      	lsrs	r3, r3, #15
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	0b9b      	lsrs	r3, r3, #14
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006082:	0b5b      	lsrs	r3, r3, #13
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	0b1b      	lsrs	r3, r3, #12
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2200      	movs	r2, #0
 80060a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d163      	bne.n	8006178 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	009a      	lsls	r2, r3, #2
 80060b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060ba:	4013      	ands	r3, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80060c0:	0f92      	lsrs	r2, r2, #30
 80060c2:	431a      	orrs	r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060cc:	0edb      	lsrs	r3, r3, #27
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060de:	0e1b      	lsrs	r3, r3, #24
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	0d5b      	lsrs	r3, r3, #21
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006102:	0c9b      	lsrs	r3, r3, #18
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	b2da      	uxtb	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006114:	0bdb      	lsrs	r3, r3, #15
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	b2da      	uxtb	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	7e1b      	ldrb	r3, [r3, #24]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	3302      	adds	r3, #2
 8006138:	2201      	movs	r2, #1
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006142:	fb03 f202 	mul.w	r2, r3, r2
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	7a1b      	ldrb	r3, [r3, #8]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	2201      	movs	r2, #1
 8006156:	409a      	lsls	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006164:	0a52      	lsrs	r2, r2, #9
 8006166:	fb03 f202 	mul.w	r2, r3, r2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006174:	655a      	str	r2, [r3, #84]	; 0x54
 8006176:	e031      	b.n	80061dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	2b01      	cmp	r3, #1
 800617e:	d11d      	bne.n	80061bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	431a      	orrs	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	029a      	lsls	r2, r3, #10
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
 80061ba:	e00f      	b.n	80061dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_SD_GetCardCSD+0x344>)
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e09d      	b.n	8006318 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e0:	0b9b      	lsrs	r3, r3, #14
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f2:	09db      	lsrs	r3, r3, #7
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800620a:	b2da      	uxtb	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006214:	0fdb      	lsrs	r3, r3, #31
 8006216:	b2da      	uxtb	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	0f5b      	lsrs	r3, r3, #29
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	b2da      	uxtb	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006232:	0e9b      	lsrs	r3, r3, #26
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	b2da      	uxtb	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006244:	0d9b      	lsrs	r3, r3, #22
 8006246:	b2db      	uxtb	r3, r3
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	b2da      	uxtb	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006256:	0d5b      	lsrs	r3, r3, #21
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006286:	0bdb      	lsrs	r3, r3, #15
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	b2da      	uxtb	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629a:	0b9b      	lsrs	r3, r3, #14
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ae:	0b5b      	lsrs	r3, r3, #13
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c2:	0b1b      	lsrs	r3, r3, #12
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d6:	0a9b      	lsrs	r3, r3, #10
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006306:	b2da      	uxtb	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	1fe00fff 	.word	0x1fe00fff

08006328 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b094      	sub	sp, #80	; 0x50
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d101      	bne.n	8006348 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0a7      	b.n	8006498 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fb36 	bl	80069c0 <SD_SendSDStatus>
 8006354:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006358:	2b00      	cmp	r3, #0
 800635a:	d011      	beq.n	8006380 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <HAL_SD_GetCardStatus+0x178>)
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800637e:	e070      	b.n	8006462 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	099b      	lsrs	r3, r3, #6
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	b2da      	uxtb	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0e1b      	lsrs	r3, r3, #24
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	061a      	lsls	r2, r3, #24
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063d0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	0e1b      	lsrs	r3, r3, #24
 80063d6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	0d1b      	lsrs	r3, r3, #20
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006408:	b29a      	uxth	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	b29b      	uxth	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	b29b      	uxth	r3, r3
 8006412:	4313      	orrs	r3, r2
 8006414:	b29a      	uxth	r2, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	0a9b      	lsrs	r3, r3, #10
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	b2da      	uxtb	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	b2da      	uxtb	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	0e1b      	lsrs	r3, r3, #24
 800645c:	b2da      	uxtb	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800646a:	4618      	mov	r0, r3
 800646c:	f002 fada 	bl	8008a24 <SDMMC_CmdBlockLength>
 8006470:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <HAL_SD_GetCardStatus+0x178>)
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006484:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006494:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006498:	4618      	mov	r0, r3
 800649a:	3750      	adds	r7, #80	; 0x50
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	1fe00fff 	.word	0x1fe00fff

080064a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b08d      	sub	sp, #52	; 0x34
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2203      	movs	r2, #3
 80064b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d02e      	beq.n	8006522 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ca:	d106      	bne.n	80064da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34
 80064d8:	e029      	b.n	800652e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e0:	d10a      	bne.n	80064f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb64 	bl	8006bb0 <SD_WideBus_Enable>
 80064e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34
 80064f6:	e01a      	b.n	800652e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fba1 	bl	8006c46 <SD_WideBus_Disable>
 8006504:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	635a      	str	r2, [r3, #52]	; 0x34
 8006512:	e00c      	b.n	800652e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	635a      	str	r2, [r3, #52]	; 0x34
 8006520:	e005      	b.n	800652e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a5f      	ldr	r2, [pc, #380]	; (80066b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006544:	e096      	b.n	8006674 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006546:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	f7fd fe21 	bl	8004194 <HAL_RCCEx_GetPeriphCLKFreq>
 8006552:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8083 	beq.w	8006662 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4950      	ldr	r1, [pc, #320]	; (80066bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800657a:	fba1 1303 	umull	r1, r3, r1, r3
 800657e:	0e1b      	lsrs	r3, r3, #24
 8006580:	429a      	cmp	r2, r3
 8006582:	d303      	bcc.n	800658c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	e05a      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d103      	bne.n	800659e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	e051      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a6:	d126      	bne.n	80065f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10e      	bne.n	80065ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4a43      	ldr	r2, [pc, #268]	; (80066c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d906      	bls.n	80065c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4a40      	ldr	r2, [pc, #256]	; (80066bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	0e5b      	lsrs	r3, r3, #25
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e03d      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e039      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	4a39      	ldr	r2, [pc, #228]	; (80066c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d906      	bls.n	80065ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4a36      	ldr	r2, [pc, #216]	; (80066bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	0e5b      	lsrs	r3, r3, #25
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e029      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e025      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10e      	bne.n	800661c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4a30      	ldr	r2, [pc, #192]	; (80066c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d906      	bls.n	8006614 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4a2c      	ldr	r2, [pc, #176]	; (80066bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	0e1b      	lsrs	r3, r3, #24
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e016      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e012      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	4a26      	ldr	r2, [pc, #152]	; (80066c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d906      	bls.n	800663c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4a22      	ldr	r2, [pc, #136]	; (80066bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	0e1b      	lsrs	r3, r3, #24
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e002      	b.n	8006642 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681c      	ldr	r4, [r3, #0]
 8006646:	466a      	mov	r2, sp
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006650:	e882 0003 	stmia.w	r2, {r0, r1}
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800665a:	4620      	mov	r0, r4
 800665c:	f002 f904 	bl	8008868 <SDMMC_Init>
 8006660:	e008      	b.n	8006674 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800667c:	4618      	mov	r0, r3
 800667e:	f002 f9d1 	bl	8008a24 <SDMMC_CmdBlockLength>
 8006682:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	372c      	adds	r7, #44	; 0x2c
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	1fe00fff 	.word	0x1fe00fff
 80066bc:	55e63b89 	.word	0x55e63b89
 80066c0:	02faf080 	.word	0x02faf080
 80066c4:	017d7840 	.word	0x017d7840

080066c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80066d4:	f107 030c 	add.w	r3, r7, #12
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa40 	bl	8006b60 <SD_SendStatus>
 80066e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80066fe:	693b      	ldr	r3, [r7, #16]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b090      	sub	sp, #64	; 0x40
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006714:	f7fa fea8 	bl	8001468 <HAL_GetTick>
 8006718:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f002 f8fb 	bl	800891a <SDMMC_GetPowerState>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800672a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800672e:	e0b5      	b.n	800689c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	2b03      	cmp	r3, #3
 8006736:	d02e      	beq.n	8006796 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f002 fb46 	bl	8008dce <SDMMC_CmdSendCID>
 8006742:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <SD_InitCard+0x46>
    {
      return errorstate;
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	e0a6      	b.n	800689c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f002 f926 	bl	80089a6 <SDMMC_GetResponse>
 800675a:	4602      	mov	r2, r0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2104      	movs	r1, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f002 f91d 	bl	80089a6 <SDMMC_GetResponse>
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2108      	movs	r1, #8
 8006778:	4618      	mov	r0, r3
 800677a:	f002 f914 	bl	80089a6 <SDMMC_GetResponse>
 800677e:	4602      	mov	r2, r0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	210c      	movs	r1, #12
 800678a:	4618      	mov	r0, r3
 800678c:	f002 f90b 	bl	80089a6 <SDMMC_GetResponse>
 8006790:	4602      	mov	r2, r0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	2b03      	cmp	r3, #3
 800679c:	d01d      	beq.n	80067da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800679e:	e019      	b.n	80067d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f107 020a 	add.w	r2, r7, #10
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 fb4e 	bl	8008e4c <SDMMC_CmdSetRelAdd>
 80067b0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <SD_InitCard+0xb4>
      {
        return errorstate;
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	e06f      	b.n	800689c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80067bc:	f7fa fe54 	bl	8001468 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d902      	bls.n	80067d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80067ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067d2:	e063      	b.n	800689c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80067d4:	897b      	ldrh	r3, [r7, #10]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0e2      	beq.n	80067a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d036      	beq.n	8006850 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067e2:	897b      	ldrh	r3, [r7, #10]
 80067e4:	461a      	mov	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f002 fb08 	bl	8008e0c <SDMMC_CmdSendCSD>
 80067fc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <SD_InitCard+0x100>
    {
      return errorstate;
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	e049      	b.n	800689c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f002 f8c9 	bl	80089a6 <SDMMC_GetResponse>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2104      	movs	r1, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f002 f8c0 	bl	80089a6 <SDMMC_GetResponse>
 8006826:	4602      	mov	r2, r0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2108      	movs	r1, #8
 8006832:	4618      	mov	r0, r3
 8006834:	f002 f8b7 	bl	80089a6 <SDMMC_GetResponse>
 8006838:	4602      	mov	r2, r0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	210c      	movs	r1, #12
 8006844:	4618      	mov	r0, r3
 8006846:	f002 f8ae 	bl	80089a6 <SDMMC_GetResponse>
 800684a:	4602      	mov	r2, r0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2104      	movs	r1, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f002 f8a5 	bl	80089a6 <SDMMC_GetResponse>
 800685c:	4603      	mov	r3, r0
 800685e:	0d1a      	lsrs	r2, r3, #20
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fbb8 	bl	8005fe0 <HAL_SD_GetCardCSD>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800687a:	e00f      	b.n	800689c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f002 f9b7 	bl	8008bfc <SDMMC_CmdSelDesel>
 800688e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <SD_InitCard+0x192>
  {
    return errorstate;
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	e000      	b.n	800689c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3740      	adds	r7, #64	; 0x40
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f002 f9c0 	bl	8008c42 <SDMMC_CmdGoIdleState>
 80068c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	e072      	b.n	80069b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f002 f9d3 	bl	8008c7e <SDMMC_CmdOperCond>
 80068d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e0:	d10d      	bne.n	80068fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f002 f9a8 	bl	8008c42 <SDMMC_CmdGoIdleState>
 80068f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <SD_PowerON+0x60>
    {
      return errorstate;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	e05a      	b.n	80069b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d137      	bne.n	800697c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f002 f9d3 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006918:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d02d      	beq.n	800697c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006924:	e046      	b.n	80069b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f002 f9c6 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006932:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <SD_PowerON+0x9a>
    {
      return errorstate;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	e03a      	b.n	80069b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	491e      	ldr	r1, [pc, #120]	; (80069bc <SD_PowerON+0x118>)
 8006944:	4618      	mov	r0, r3
 8006946:	f002 f9dd 	bl	8008d04 <SDMMC_CmdAppOperCommand>
 800694a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006956:	e02d      	b.n	80069b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f002 f821 	bl	80089a6 <SDMMC_GetResponse>
 8006964:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	0fdb      	lsrs	r3, r3, #31
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <SD_PowerON+0xce>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <SD_PowerON+0xd0>
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]

    count++;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3301      	adds	r3, #1
 800697a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006982:	4293      	cmp	r3, r2
 8006984:	d802      	bhi.n	800698c <SD_PowerON+0xe8>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0cc      	beq.n	8006926 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006992:	4293      	cmp	r3, r2
 8006994:	d902      	bls.n	800699c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699a:	e00b      	b.n	80069b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	c1100000 	.word	0xc1100000

080069c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08c      	sub	sp, #48	; 0x30
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069ca:	f7fa fd4d 	bl	8001468 <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 ffe3 	bl	80089a6 <SDMMC_GetResponse>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ea:	d102      	bne.n	80069f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f0:	e0b0      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2140      	movs	r1, #64	; 0x40
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f813 	bl	8008a24 <SDMMC_CmdBlockLength>
 80069fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	e0a0      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f002 f94d 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006a24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	e08d      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006a3e:	2340      	movs	r3, #64	; 0x40
 8006a40:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006a42:	2360      	movs	r3, #96	; 0x60
 8006a44:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a46:	2302      	movs	r3, #2
 8006a48:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f107 0208 	add.w	r2, r7, #8
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 ffb5 	bl	80089cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 fa35 	bl	8008ed6 <SDMMC_CmdStatusRegister>
 8006a6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d02b      	beq.n	8006acc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	e069      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d013      	beq.n	8006ab6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a92:	e00d      	b.n	8006ab0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 ff0f 	bl	80088bc <SDMMC_ReadFIFO>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	601a      	str	r2, [r3, #0]
        pData++;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	3301      	adds	r3, #1
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b07      	cmp	r3, #7
 8006ab4:	d9ee      	bls.n	8006a94 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ab6:	f7fa fcd7 	bl	8001468 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d102      	bne.n	8006acc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ac6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aca:	e043      	b.n	8006b54 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0d2      	beq.n	8006a80 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006ae8:	2308      	movs	r3, #8
 8006aea:	e033      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	e02a      	b.n	8006b54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d017      	beq.n	8006b3c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	e021      	b.n	8006b54 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fed1 	bl	80088bc <SDMMC_ReadFIFO>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	601a      	str	r2, [r3, #0]
    pData++;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	3304      	adds	r3, #4
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b26:	f7fa fc9f 	bl	8001468 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d102      	bne.n	8006b3c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b3a:	e00b      	b.n	8006b54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e2      	bne.n	8006b10 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <SD_SendSDStatus+0x19c>)
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3730      	adds	r7, #48	; 0x30
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	18000f3a 	.word	0x18000f3a

08006b60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b74:	e018      	b.n	8006ba8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f002 f984 	bl	8008e90 <SDMMC_CmdSendStatus>
 8006b88:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	e009      	b.n	8006ba8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 ff03 	bl	80089a6 <SDMMC_GetResponse>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 feed 	bl	80089a6 <SDMMC_GetResponse>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd6:	d102      	bne.n	8006bde <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bdc:	e02f      	b.n	8006c3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f879 	bl	8006cdc <SD_FindSCR>
 8006bea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	e023      	b.n	8006c3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01c      	beq.n	8006c3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f002 f856 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006c12:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	e00f      	b.n	8006c3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2102      	movs	r1, #2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 f88d 	bl	8008d44 <SDMMC_CmdBusWidth>
 8006c2a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	e003      	b.n	8006c3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e001      	b.n	8006c3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	2300      	movs	r3, #0
 8006c54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 fea2 	bl	80089a6 <SDMMC_GetResponse>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c6c:	d102      	bne.n	8006c74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c72:	e02f      	b.n	8006cd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c74:	f107 030c 	add.w	r3, r7, #12
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f82e 	bl	8006cdc <SD_FindSCR>
 8006c80:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	e023      	b.n	8006cd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01c      	beq.n	8006cd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f002 f80b 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006ca8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	e00f      	b.n	8006cd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f002 f842 	bl	8008d44 <SDMMC_CmdBusWidth>
 8006cc0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	e003      	b.n	8006cd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e001      	b.n	8006cd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08e      	sub	sp, #56	; 0x38
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ce6:	f7fa fbbf 	bl	8001468 <HAL_GetTick>
 8006cea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2108      	movs	r1, #8
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fe8e 	bl	8008a24 <SDMMC_CmdBlockLength>
 8006d08:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	e0ad      	b.n	8006e70 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f001 ffcc 	bl	8008cbe <SDMMC_CmdAppCommand>
 8006d26:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	e09e      	b.n	8006e70 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295
 8006d36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d38:	2308      	movs	r3, #8
 8006d3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d40:	2302      	movs	r3, #2
 8006d42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f107 0210 	add.w	r2, r7, #16
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fe38 	bl	80089cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 f812 	bl	8008d8a <SDMMC_CmdSendSCR>
 8006d66:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d027      	beq.n	8006dbe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	e07e      	b.n	8006e70 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d113      	bne.n	8006da8 <SD_FindSCR+0xcc>
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fd96 	bl	80088bc <SDMMC_ReadFIFO>
 8006d90:	4603      	mov	r3, r0
 8006d92:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 fd8f 	bl	80088bc <SDMMC_ReadFIFO>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	60fb      	str	r3, [r7, #12]
      index++;
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	3301      	adds	r3, #1
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006da8:	f7fa fb5e 	bl	8001468 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d102      	bne.n	8006dbe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dbc:	e058      	b.n	8006e70 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc4:	f240 532a 	movw	r3, #1322	; 0x52a
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0d1      	beq.n	8006d72 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2208      	movs	r2, #8
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006de4:	2308      	movs	r3, #8
 8006de6:	e043      	b.n	8006e70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e036      	b.n	8006e70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2220      	movs	r2, #32
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e18:	2320      	movs	r3, #32
 8006e1a:	e029      	b.n	8006e70 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <SD_FindSCR+0x19c>)
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	061a      	lsls	r2, r3, #24
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	601a      	str	r2, [r3, #0]
    scr++;
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	3304      	adds	r3, #4
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	061a      	lsls	r2, r3, #24
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	0e1b      	lsrs	r3, r3, #24
 8006e68:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3738      	adds	r7, #56	; 0x38
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	18000f3a 	.word	0x18000f3a

08006e7c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	2b1f      	cmp	r3, #31
 8006e90:	d936      	bls.n	8006f00 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e027      	b.n	8006ee8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fd0d 	bl	80088bc <SDMMC_ReadFIFO>
 8006ea2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	0a1b      	lsrs	r3, r3, #8
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d9d4      	bls.n	8006e98 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	f1a3 0220 	sub.w	r2, r3, #32
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	2b1f      	cmp	r3, #31
 8006f1c:	d93a      	bls.n	8006f94 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e02b      	b.n	8006f7c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	021a      	lsls	r2, r3, #8
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	041a      	lsls	r2, r3, #16
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	061a      	lsls	r2, r3, #24
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	3301      	adds	r3, #1
 8006f64:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f107 020c 	add.w	r2, r7, #12
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fcb0 	bl	80088d6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b07      	cmp	r3, #7
 8006f80:	d9d0      	bls.n	8006f24 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f1a3 0220 	sub.w	r2, r3, #32
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]
  }
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e049      	b.n	8007092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f841 	bl	800709a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f000 fa00 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e054      	b.n	8007172 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a26      	ldr	r2, [pc, #152]	; (8007180 <HAL_TIM_Base_Start_IT+0xd0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d022      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f2:	d01d      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a22      	ldr	r2, [pc, #136]	; (8007184 <HAL_TIM_Base_Start_IT+0xd4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <HAL_TIM_Base_Start_IT+0xd8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1f      	ldr	r2, [pc, #124]	; (800718c <HAL_TIM_Base_Start_IT+0xdc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <HAL_TIM_Base_Start_IT+0xe0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <HAL_TIM_Base_Start_IT+0xe4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0x80>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <HAL_TIM_Base_Start_IT+0xe8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d115      	bne.n	800715c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <HAL_TIM_Base_Start_IT+0xec>)
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b06      	cmp	r3, #6
 8007140:	d015      	beq.n	800716e <HAL_TIM_Base_Start_IT+0xbe>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007148:	d011      	beq.n	800716e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715a:	e008      	b.n	800716e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e000      	b.n	8007170 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40010400 	.word	0x40010400
 8007194:	40001800 	.word	0x40001800
 8007198:	40014000 	.word	0x40014000
 800719c:	00010007 	.word	0x00010007

080071a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d122      	bne.n	80071fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d11b      	bne.n	80071fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0202 	mvn.w	r2, #2
 80071cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f905 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 80071e8:	e005      	b.n	80071f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8f7 	bl	80073de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f908 	bl	8007406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b04      	cmp	r3, #4
 8007208:	d122      	bne.n	8007250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d11b      	bne.n	8007250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0204 	mvn.w	r2, #4
 8007220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f8db 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 800723c:	e005      	b.n	800724a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8cd 	bl	80073de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8de 	bl	8007406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b08      	cmp	r3, #8
 800725c:	d122      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b08      	cmp	r3, #8
 800726a:	d11b      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0208 	mvn.w	r2, #8
 8007274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2204      	movs	r2, #4
 800727a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8b1 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8a3 	bl	80073de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f8b4 	bl	8007406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0210 	mvn.w	r2, #16
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2208      	movs	r2, #8
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f887 	bl	80073f2 <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f879 	bl	80073de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f88a 	bl	8007406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10e      	bne.n	8007324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d107      	bne.n	8007324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0201 	mvn.w	r2, #1
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7f9 fdb4 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732e:	2b80      	cmp	r3, #128	; 0x80
 8007330:	d10e      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d107      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f914 	bl	8007578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735e:	d10e      	bne.n	800737e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	2b80      	cmp	r3, #128	; 0x80
 800736c:	d107      	bne.n	800737e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f907 	bl	800758c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d10e      	bne.n	80073aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d107      	bne.n	80073aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f838 	bl	800741a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d10e      	bne.n	80073d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d107      	bne.n	80073d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f06f 0220 	mvn.w	r2, #32
 80073ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f8c7 	bl	8007564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a40      	ldr	r2, [pc, #256]	; (8007544 <TIM_Base_SetConfig+0x114>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d00f      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3d      	ldr	r2, [pc, #244]	; (8007548 <TIM_Base_SetConfig+0x118>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a3c      	ldr	r2, [pc, #240]	; (800754c <TIM_Base_SetConfig+0x11c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3b      	ldr	r2, [pc, #236]	; (8007550 <TIM_Base_SetConfig+0x120>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a3a      	ldr	r2, [pc, #232]	; (8007554 <TIM_Base_SetConfig+0x124>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d108      	bne.n	8007482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <TIM_Base_SetConfig+0x114>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01f      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007490:	d01b      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <TIM_Base_SetConfig+0x118>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d017      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2b      	ldr	r2, [pc, #172]	; (800754c <TIM_Base_SetConfig+0x11c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <TIM_Base_SetConfig+0x120>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00f      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a29      	ldr	r2, [pc, #164]	; (8007554 <TIM_Base_SetConfig+0x124>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00b      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a28      	ldr	r2, [pc, #160]	; (8007558 <TIM_Base_SetConfig+0x128>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a27      	ldr	r2, [pc, #156]	; (800755c <TIM_Base_SetConfig+0x12c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_Base_SetConfig+0x9a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a26      	ldr	r2, [pc, #152]	; (8007560 <TIM_Base_SetConfig+0x130>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a10      	ldr	r2, [pc, #64]	; (8007544 <TIM_Base_SetConfig+0x114>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00f      	beq.n	8007528 <TIM_Base_SetConfig+0xf8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a12      	ldr	r2, [pc, #72]	; (8007554 <TIM_Base_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00b      	beq.n	8007528 <TIM_Base_SetConfig+0xf8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a11      	ldr	r2, [pc, #68]	; (8007558 <TIM_Base_SetConfig+0x128>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_Base_SetConfig+0xf8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a10      	ldr	r2, [pc, #64]	; (800755c <TIM_Base_SetConfig+0x12c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_Base_SetConfig+0xf8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a0f      	ldr	r2, [pc, #60]	; (8007560 <TIM_Base_SetConfig+0x130>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d103      	bne.n	8007530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	615a      	str	r2, [r3, #20]
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40010000 	.word	0x40010000
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40010400 	.word	0x40010400
 8007558:	40014000 	.word	0x40014000
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800

08007564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e042      	b.n	8007638 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7f9 fd29 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2224      	movs	r2, #36	; 0x24
 80075ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0201 	bic.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8ba 	bl	800775c <UART_SetConfig>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e022      	b.n	8007638 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fe16 	bl	800822c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800760e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800761e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fe9d 	bl	8008370 <UART_CheckIdleState>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007656:	2b20      	cmp	r3, #32
 8007658:	d17b      	bne.n	8007752 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_UART_Transmit+0x26>
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e074      	b.n	8007754 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800767a:	f7f9 fef5 	bl	8001468 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007698:	d108      	bne.n	80076ac <HAL_UART_Transmit+0x6c>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e003      	b.n	80076b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076b4:	e030      	b.n	8007718 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 feff 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e03d      	b.n	8007754 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	3302      	adds	r3, #2
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e007      	b.n	8007706 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1c8      	bne.n	80076b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2200      	movs	r2, #0
 800772c:	2140      	movs	r1, #64	; 0x40
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fec8 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e006      	b.n	8007754 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800775c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007760:	b092      	sub	sp, #72	; 0x48
 8007762:	af00      	add	r7, sp, #0
 8007764:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	431a      	orrs	r2, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	431a      	orrs	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	4313      	orrs	r3, r2
 8007782:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4bbe      	ldr	r3, [pc, #760]	; (8007a84 <UART_SetConfig+0x328>)
 800778c:	4013      	ands	r3, r2
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007794:	430b      	orrs	r3, r1
 8007796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4ab3      	ldr	r2, [pc, #716]	; (8007a88 <UART_SetConfig+0x32c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077c4:	4313      	orrs	r3, r2
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	4baf      	ldr	r3, [pc, #700]	; (8007a8c <UART_SetConfig+0x330>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d8:	430b      	orrs	r3, r1
 80077da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f023 010f 	bic.w	r1, r3, #15
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4aa6      	ldr	r2, [pc, #664]	; (8007a90 <UART_SetConfig+0x334>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d177      	bne.n	80078ec <UART_SetConfig+0x190>
 80077fc:	4ba5      	ldr	r3, [pc, #660]	; (8007a94 <UART_SetConfig+0x338>)
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007804:	2b28      	cmp	r3, #40	; 0x28
 8007806:	d86d      	bhi.n	80078e4 <UART_SetConfig+0x188>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0xb4>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	080078b5 	.word	0x080078b5
 8007814:	080078e5 	.word	0x080078e5
 8007818:	080078e5 	.word	0x080078e5
 800781c:	080078e5 	.word	0x080078e5
 8007820:	080078e5 	.word	0x080078e5
 8007824:	080078e5 	.word	0x080078e5
 8007828:	080078e5 	.word	0x080078e5
 800782c:	080078e5 	.word	0x080078e5
 8007830:	080078bd 	.word	0x080078bd
 8007834:	080078e5 	.word	0x080078e5
 8007838:	080078e5 	.word	0x080078e5
 800783c:	080078e5 	.word	0x080078e5
 8007840:	080078e5 	.word	0x080078e5
 8007844:	080078e5 	.word	0x080078e5
 8007848:	080078e5 	.word	0x080078e5
 800784c:	080078e5 	.word	0x080078e5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078e5 	.word	0x080078e5
 8007858:	080078e5 	.word	0x080078e5
 800785c:	080078e5 	.word	0x080078e5
 8007860:	080078e5 	.word	0x080078e5
 8007864:	080078e5 	.word	0x080078e5
 8007868:	080078e5 	.word	0x080078e5
 800786c:	080078e5 	.word	0x080078e5
 8007870:	080078cd 	.word	0x080078cd
 8007874:	080078e5 	.word	0x080078e5
 8007878:	080078e5 	.word	0x080078e5
 800787c:	080078e5 	.word	0x080078e5
 8007880:	080078e5 	.word	0x080078e5
 8007884:	080078e5 	.word	0x080078e5
 8007888:	080078e5 	.word	0x080078e5
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078d5 	.word	0x080078d5
 8007894:	080078e5 	.word	0x080078e5
 8007898:	080078e5 	.word	0x080078e5
 800789c:	080078e5 	.word	0x080078e5
 80078a0:	080078e5 	.word	0x080078e5
 80078a4:	080078e5 	.word	0x080078e5
 80078a8:	080078e5 	.word	0x080078e5
 80078ac:	080078e5 	.word	0x080078e5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e222      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078bc:	2304      	movs	r3, #4
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e21e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078c4:	2308      	movs	r3, #8
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e21a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078cc:	2310      	movs	r3, #16
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e216      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078d4:	2320      	movs	r3, #32
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e212      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e2:	e20e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e20a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a69      	ldr	r2, [pc, #420]	; (8007a98 <UART_SetConfig+0x33c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d130      	bne.n	8007958 <UART_SetConfig+0x1fc>
 80078f6:	4b67      	ldr	r3, [pc, #412]	; (8007a94 <UART_SetConfig+0x338>)
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d826      	bhi.n	8007950 <UART_SetConfig+0x1f4>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x1ac>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007921 	.word	0x08007921
 800790c:	08007929 	.word	0x08007929
 8007910:	08007931 	.word	0x08007931
 8007914:	08007939 	.word	0x08007939
 8007918:	08007941 	.word	0x08007941
 800791c:	08007949 	.word	0x08007949
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e1ec      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e1e8      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e1e4      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e1e0      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007940:	2320      	movs	r3, #32
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e1dc      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794e:	e1d8      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e1d4      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a4f      	ldr	r2, [pc, #316]	; (8007a9c <UART_SetConfig+0x340>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d130      	bne.n	80079c4 <UART_SetConfig+0x268>
 8007962:	4b4c      	ldr	r3, [pc, #304]	; (8007a94 <UART_SetConfig+0x338>)
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b05      	cmp	r3, #5
 800796c:	d826      	bhi.n	80079bc <UART_SetConfig+0x260>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x218>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007995 	.word	0x08007995
 800797c:	0800799d 	.word	0x0800799d
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079ad 	.word	0x080079ad
 8007988:	080079b5 	.word	0x080079b5
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e1b6      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e1b2      	b.n	8007d02 <UART_SetConfig+0x5a6>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e1ae      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e1aa      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80079ac:	2320      	movs	r3, #32
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e1a6      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e1a2      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80079bc:	2380      	movs	r3, #128	; 0x80
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e19e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a35      	ldr	r2, [pc, #212]	; (8007aa0 <UART_SetConfig+0x344>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d130      	bne.n	8007a30 <UART_SetConfig+0x2d4>
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <UART_SetConfig+0x338>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d826      	bhi.n	8007a28 <UART_SetConfig+0x2cc>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x284>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e180      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e17c      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e178      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e174      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1e:	e170      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e16c      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e168      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <UART_SetConfig+0x348>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d142      	bne.n	8007ac0 <UART_SetConfig+0x364>
 8007a3a:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <UART_SetConfig+0x338>)
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d838      	bhi.n	8007ab8 <UART_SetConfig+0x35c>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x2f0>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a65 	.word	0x08007a65
 8007a50:	08007a6d 	.word	0x08007a6d
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e14a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e146      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e142      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e13e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007a84:	cfff69f3 	.word	0xcfff69f3
 8007a88:	58000c00 	.word	0x58000c00
 8007a8c:	11fff4ff 	.word	0x11fff4ff
 8007a90:	40011000 	.word	0x40011000
 8007a94:	58024400 	.word	0x58024400
 8007a98:	40004400 	.word	0x40004400
 8007a9c:	40004800 	.word	0x40004800
 8007aa0:	40004c00 	.word	0x40004c00
 8007aa4:	40005000 	.word	0x40005000
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e128      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ab0:	2340      	movs	r3, #64	; 0x40
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e124      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ab8:	2380      	movs	r3, #128	; 0x80
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e120      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4acb      	ldr	r2, [pc, #812]	; (8007df4 <UART_SetConfig+0x698>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d176      	bne.n	8007bb8 <UART_SetConfig+0x45c>
 8007aca:	4bcb      	ldr	r3, [pc, #812]	; (8007df8 <UART_SetConfig+0x69c>)
 8007acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ad2:	2b28      	cmp	r3, #40	; 0x28
 8007ad4:	d86c      	bhi.n	8007bb0 <UART_SetConfig+0x454>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0x380>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007bb1 	.word	0x08007bb1
 8007ae4:	08007bb1 	.word	0x08007bb1
 8007ae8:	08007bb1 	.word	0x08007bb1
 8007aec:	08007bb1 	.word	0x08007bb1
 8007af0:	08007bb1 	.word	0x08007bb1
 8007af4:	08007bb1 	.word	0x08007bb1
 8007af8:	08007bb1 	.word	0x08007bb1
 8007afc:	08007b89 	.word	0x08007b89
 8007b00:	08007bb1 	.word	0x08007bb1
 8007b04:	08007bb1 	.word	0x08007bb1
 8007b08:	08007bb1 	.word	0x08007bb1
 8007b0c:	08007bb1 	.word	0x08007bb1
 8007b10:	08007bb1 	.word	0x08007bb1
 8007b14:	08007bb1 	.word	0x08007bb1
 8007b18:	08007bb1 	.word	0x08007bb1
 8007b1c:	08007b91 	.word	0x08007b91
 8007b20:	08007bb1 	.word	0x08007bb1
 8007b24:	08007bb1 	.word	0x08007bb1
 8007b28:	08007bb1 	.word	0x08007bb1
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007bb1 	.word	0x08007bb1
 8007b34:	08007bb1 	.word	0x08007bb1
 8007b38:	08007bb1 	.word	0x08007bb1
 8007b3c:	08007b99 	.word	0x08007b99
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007bb1 	.word	0x08007bb1
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007bb1 	.word	0x08007bb1
 8007b54:	08007bb1 	.word	0x08007bb1
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007ba1 	.word	0x08007ba1
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb1 	.word	0x08007bb1
 8007b6c:	08007bb1 	.word	0x08007bb1
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007bb1 	.word	0x08007bb1
 8007b78:	08007bb1 	.word	0x08007bb1
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	2301      	movs	r3, #1
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e0bc      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e0b8      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007b90:	2308      	movs	r3, #8
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e0b4      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e0b0      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e0ac      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e0a8      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007bb0:	2380      	movs	r3, #128	; 0x80
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e0a4      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a8f      	ldr	r2, [pc, #572]	; (8007dfc <UART_SetConfig+0x6a0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d130      	bne.n	8007c24 <UART_SetConfig+0x4c8>
 8007bc2:	4b8d      	ldr	r3, [pc, #564]	; (8007df8 <UART_SetConfig+0x69c>)
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	d826      	bhi.n	8007c1c <UART_SetConfig+0x4c0>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <UART_SetConfig+0x478>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007bf5 	.word	0x08007bf5
 8007bdc:	08007bfd 	.word	0x08007bfd
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e086      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e082      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e07e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c04:	2310      	movs	r3, #16
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e07a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e076      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e072      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c1c:	2380      	movs	r3, #128	; 0x80
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e06e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a75      	ldr	r2, [pc, #468]	; (8007e00 <UART_SetConfig+0x6a4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d130      	bne.n	8007c90 <UART_SetConfig+0x534>
 8007c2e:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <UART_SetConfig+0x69c>)
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d826      	bhi.n	8007c88 <UART_SetConfig+0x52c>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <UART_SetConfig+0x4e4>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c59 	.word	0x08007c59
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e050      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e04c      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e048      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e044      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e040      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e03c      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e038      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a5b      	ldr	r2, [pc, #364]	; (8007e04 <UART_SetConfig+0x6a8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d130      	bne.n	8007cfc <UART_SetConfig+0x5a0>
 8007c9a:	4b57      	ldr	r3, [pc, #348]	; (8007df8 <UART_SetConfig+0x69c>)
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d826      	bhi.n	8007cf4 <UART_SetConfig+0x598>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UART_SetConfig+0x550>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e01a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e016      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e012      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e00e      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e00a      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e006      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	; 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e002      	b.n	8007d02 <UART_SetConfig+0x5a6>
 8007cfc:	2380      	movs	r3, #128	; 0x80
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a3f      	ldr	r2, [pc, #252]	; (8007e04 <UART_SetConfig+0x6a8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	f040 80f8 	bne.w	8007efe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	dc46      	bgt.n	8007da4 <UART_SetConfig+0x648>
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	f2c0 8082 	blt.w	8007e20 <UART_SetConfig+0x6c4>
 8007d1c:	3b02      	subs	r3, #2
 8007d1e:	2b1e      	cmp	r3, #30
 8007d20:	d87e      	bhi.n	8007e20 <UART_SetConfig+0x6c4>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x5cc>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007dab 	.word	0x08007dab
 8007d2c:	08007e21 	.word	0x08007e21
 8007d30:	08007db3 	.word	0x08007db3
 8007d34:	08007e21 	.word	0x08007e21
 8007d38:	08007e21 	.word	0x08007e21
 8007d3c:	08007e21 	.word	0x08007e21
 8007d40:	08007dc3 	.word	0x08007dc3
 8007d44:	08007e21 	.word	0x08007e21
 8007d48:	08007e21 	.word	0x08007e21
 8007d4c:	08007e21 	.word	0x08007e21
 8007d50:	08007e21 	.word	0x08007e21
 8007d54:	08007e21 	.word	0x08007e21
 8007d58:	08007e21 	.word	0x08007e21
 8007d5c:	08007e21 	.word	0x08007e21
 8007d60:	08007dd3 	.word	0x08007dd3
 8007d64:	08007e21 	.word	0x08007e21
 8007d68:	08007e21 	.word	0x08007e21
 8007d6c:	08007e21 	.word	0x08007e21
 8007d70:	08007e21 	.word	0x08007e21
 8007d74:	08007e21 	.word	0x08007e21
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e21 	.word	0x08007e21
 8007d8c:	08007e21 	.word	0x08007e21
 8007d90:	08007e21 	.word	0x08007e21
 8007d94:	08007e21 	.word	0x08007e21
 8007d98:	08007e21 	.word	0x08007e21
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e13 	.word	0x08007e13
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d037      	beq.n	8007e18 <UART_SetConfig+0x6bc>
 8007da8:	e03a      	b.n	8007e20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007daa:	f7fc ff73 	bl	8004c94 <HAL_RCCEx_GetD3PCLK1Freq>
 8007dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007db0:	e03c      	b.n	8007e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fc ff82 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc0:	e034      	b.n	8007e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd f8ce 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd0:	e02c      	b.n	8007e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <UART_SetConfig+0x69c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d016      	beq.n	8007e0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <UART_SetConfig+0x69c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <UART_SetConfig+0x6ac>)
 8007dea:	fa22 f303 	lsr.w	r3, r2, r3
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df0:	e01c      	b.n	8007e2c <UART_SetConfig+0x6d0>
 8007df2:	bf00      	nop
 8007df4:	40011400 	.word	0x40011400
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	40007800 	.word	0x40007800
 8007e00:	40007c00 	.word	0x40007c00
 8007e04:	58000c00 	.word	0x58000c00
 8007e08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b9d      	ldr	r3, [pc, #628]	; (8008084 <UART_SetConfig+0x928>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e10:	e00c      	b.n	8007e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e12:	4b9d      	ldr	r3, [pc, #628]	; (8008088 <UART_SetConfig+0x92c>)
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e16:	e009      	b.n	8007e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1e:	e005      	b.n	8007e2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007e2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 81de 	beq.w	80081f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	4a94      	ldr	r2, [pc, #592]	; (800808c <UART_SetConfig+0x930>)
 8007e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	4413      	add	r3, r2
 8007e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d305      	bcc.n	8007e64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d903      	bls.n	8007e6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e6a:	e1c1      	b.n	80081f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6e:	2200      	movs	r2, #0
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	60fa      	str	r2, [r7, #12]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	4a84      	ldr	r2, [pc, #528]	; (800808c <UART_SetConfig+0x930>)
 8007e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2200      	movs	r2, #0
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e8e:	f7f8 fb97 	bl	80005c0 <__aeabi_uldivmod>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4610      	mov	r0, r2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	020b      	lsls	r3, r1, #8
 8007ea4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ea8:	0202      	lsls	r2, r0, #8
 8007eaa:	6979      	ldr	r1, [r7, #20]
 8007eac:	6849      	ldr	r1, [r1, #4]
 8007eae:	0849      	lsrs	r1, r1, #1
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	eb12 0804 	adds.w	r8, r2, r4
 8007eba:	eb43 0905 	adc.w	r9, r3, r5
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	469a      	mov	sl, r3
 8007ec6:	4693      	mov	fp, r2
 8007ec8:	4652      	mov	r2, sl
 8007eca:	465b      	mov	r3, fp
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 fb76 	bl	80005c0 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4613      	mov	r3, r2
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee2:	d308      	bcc.n	8007ef6 <UART_SetConfig+0x79a>
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eea:	d204      	bcs.n	8007ef6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef2:	60da      	str	r2, [r3, #12]
 8007ef4:	e17c      	b.n	80081f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007efc:	e178      	b.n	80081f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f06:	f040 80c5 	bne.w	8008094 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	dc48      	bgt.n	8007fa4 <UART_SetConfig+0x848>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db7b      	blt.n	800800e <UART_SetConfig+0x8b2>
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d879      	bhi.n	800800e <UART_SetConfig+0x8b2>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x7c4>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007fab 	.word	0x08007fab
 8007f24:	08007fb3 	.word	0x08007fb3
 8007f28:	0800800f 	.word	0x0800800f
 8007f2c:	0800800f 	.word	0x0800800f
 8007f30:	08007fbb 	.word	0x08007fbb
 8007f34:	0800800f 	.word	0x0800800f
 8007f38:	0800800f 	.word	0x0800800f
 8007f3c:	0800800f 	.word	0x0800800f
 8007f40:	08007fcb 	.word	0x08007fcb
 8007f44:	0800800f 	.word	0x0800800f
 8007f48:	0800800f 	.word	0x0800800f
 8007f4c:	0800800f 	.word	0x0800800f
 8007f50:	0800800f 	.word	0x0800800f
 8007f54:	0800800f 	.word	0x0800800f
 8007f58:	0800800f 	.word	0x0800800f
 8007f5c:	0800800f 	.word	0x0800800f
 8007f60:	08007fdb 	.word	0x08007fdb
 8007f64:	0800800f 	.word	0x0800800f
 8007f68:	0800800f 	.word	0x0800800f
 8007f6c:	0800800f 	.word	0x0800800f
 8007f70:	0800800f 	.word	0x0800800f
 8007f74:	0800800f 	.word	0x0800800f
 8007f78:	0800800f 	.word	0x0800800f
 8007f7c:	0800800f 	.word	0x0800800f
 8007f80:	0800800f 	.word	0x0800800f
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	0800800f 	.word	0x0800800f
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	0800800f 	.word	0x0800800f
 8007f94:	0800800f 	.word	0x0800800f
 8007f98:	0800800f 	.word	0x0800800f
 8007f9c:	0800800f 	.word	0x0800800f
 8007fa0:	08008001 	.word	0x08008001
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d02e      	beq.n	8008006 <UART_SetConfig+0x8aa>
 8007fa8:	e031      	b.n	800800e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007faa:	f7fa fe3b 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 8007fae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fb0:	e033      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb2:	f7fa fe4d 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8007fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007fb8:	e02f      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fc fe7e 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc8:	e027      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fca:	f107 0318 	add.w	r3, r7, #24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fc ffca 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd8:	e01f      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fda:	4b2d      	ldr	r3, [pc, #180]	; (8008090 <UART_SetConfig+0x934>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fe6:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <UART_SetConfig+0x934>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	08db      	lsrs	r3, r3, #3
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	4a24      	ldr	r2, [pc, #144]	; (8008084 <UART_SetConfig+0x928>)
 8007ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ff8:	e00f      	b.n	800801a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ffa:	4b22      	ldr	r3, [pc, #136]	; (8008084 <UART_SetConfig+0x928>)
 8007ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffe:	e00c      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008000:	4b21      	ldr	r3, [pc, #132]	; (8008088 <UART_SetConfig+0x92c>)
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008004:	e009      	b.n	800801a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800800c:	e005      	b.n	800801a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800801a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80e7 	beq.w	80081f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	4a19      	ldr	r2, [pc, #100]	; (800808c <UART_SetConfig+0x930>)
 8008028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800802c:	461a      	mov	r2, r3
 800802e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008030:	fbb3 f3f2 	udiv	r3, r3, r2
 8008034:	005a      	lsls	r2, r3, #1
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	441a      	add	r2, r3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	2b0f      	cmp	r3, #15
 800804c:	d916      	bls.n	800807c <UART_SetConfig+0x920>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d212      	bcs.n	800807c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	b29b      	uxth	r3, r3
 800805a:	f023 030f 	bic.w	r3, r3, #15
 800805e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	085b      	lsrs	r3, r3, #1
 8008064:	b29b      	uxth	r3, r3
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	b29a      	uxth	r2, r3
 800806c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800806e:	4313      	orrs	r3, r2
 8008070:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e0b9      	b.n	80081f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008082:	e0b5      	b.n	80081f0 <UART_SetConfig+0xa94>
 8008084:	03d09000 	.word	0x03d09000
 8008088:	003d0900 	.word	0x003d0900
 800808c:	08017624 	.word	0x08017624
 8008090:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008094:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008098:	2b20      	cmp	r3, #32
 800809a:	dc49      	bgt.n	8008130 <UART_SetConfig+0x9d4>
 800809c:	2b00      	cmp	r3, #0
 800809e:	db7c      	blt.n	800819a <UART_SetConfig+0xa3e>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d87a      	bhi.n	800819a <UART_SetConfig+0xa3e>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0x950>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	08008137 	.word	0x08008137
 80080b0:	0800813f 	.word	0x0800813f
 80080b4:	0800819b 	.word	0x0800819b
 80080b8:	0800819b 	.word	0x0800819b
 80080bc:	08008147 	.word	0x08008147
 80080c0:	0800819b 	.word	0x0800819b
 80080c4:	0800819b 	.word	0x0800819b
 80080c8:	0800819b 	.word	0x0800819b
 80080cc:	08008157 	.word	0x08008157
 80080d0:	0800819b 	.word	0x0800819b
 80080d4:	0800819b 	.word	0x0800819b
 80080d8:	0800819b 	.word	0x0800819b
 80080dc:	0800819b 	.word	0x0800819b
 80080e0:	0800819b 	.word	0x0800819b
 80080e4:	0800819b 	.word	0x0800819b
 80080e8:	0800819b 	.word	0x0800819b
 80080ec:	08008167 	.word	0x08008167
 80080f0:	0800819b 	.word	0x0800819b
 80080f4:	0800819b 	.word	0x0800819b
 80080f8:	0800819b 	.word	0x0800819b
 80080fc:	0800819b 	.word	0x0800819b
 8008100:	0800819b 	.word	0x0800819b
 8008104:	0800819b 	.word	0x0800819b
 8008108:	0800819b 	.word	0x0800819b
 800810c:	0800819b 	.word	0x0800819b
 8008110:	0800819b 	.word	0x0800819b
 8008114:	0800819b 	.word	0x0800819b
 8008118:	0800819b 	.word	0x0800819b
 800811c:	0800819b 	.word	0x0800819b
 8008120:	0800819b 	.word	0x0800819b
 8008124:	0800819b 	.word	0x0800819b
 8008128:	0800819b 	.word	0x0800819b
 800812c:	0800818d 	.word	0x0800818d
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d02e      	beq.n	8008192 <UART_SetConfig+0xa36>
 8008134:	e031      	b.n	800819a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008136:	f7fa fd75 	bl	8002c24 <HAL_RCC_GetPCLK1Freq>
 800813a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800813c:	e033      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800813e:	f7fa fd87 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8008142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008144:	e02f      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fc fdb8 	bl	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008154:	e027      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008156:	f107 0318 	add.w	r3, r7, #24
 800815a:	4618      	mov	r0, r3
 800815c:	f7fc ff04 	bl	8004f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008164:	e01f      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008166:	4b2d      	ldr	r3, [pc, #180]	; (800821c <UART_SetConfig+0xac0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008172:	4b2a      	ldr	r3, [pc, #168]	; (800821c <UART_SetConfig+0xac0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <UART_SetConfig+0xac4>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008184:	e00f      	b.n	80081a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008186:	4b26      	ldr	r3, [pc, #152]	; (8008220 <UART_SetConfig+0xac4>)
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800818a:	e00c      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800818c:	4b25      	ldr	r3, [pc, #148]	; (8008224 <UART_SetConfig+0xac8>)
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e009      	b.n	80081a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008198:	e005      	b.n	80081a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081a4:	bf00      	nop
    }

    if (pclk != 0U)
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d021      	beq.n	80081f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <UART_SetConfig+0xacc>)
 80081b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	441a      	add	r2, r3
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	2b0f      	cmp	r3, #15
 80081d4:	d909      	bls.n	80081ea <UART_SetConfig+0xa8e>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081dc:	d205      	bcs.n	80081ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60da      	str	r2, [r3, #12]
 80081e8:	e002      	b.n	80081f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800820c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008210:	4618      	mov	r0, r3
 8008212:	3748      	adds	r7, #72	; 0x48
 8008214:	46bd      	mov	sp, r7
 8008216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800821a:	bf00      	nop
 800821c:	58024400 	.word	0x58024400
 8008220:	03d09000 	.word	0x03d09000
 8008224:	003d0900 	.word	0x003d0900
 8008228:	08017624 	.word	0x08017624

0800822c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01a      	beq.n	8008342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800832a:	d10a      	bne.n	8008342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b098      	sub	sp, #96	; 0x60
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008380:	f7f9 f872 	bl	8001468 <HAL_GetTick>
 8008384:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b08      	cmp	r3, #8
 8008392:	d12f      	bne.n	80083f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839c:	2200      	movs	r2, #0
 800839e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f88e 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d022      	beq.n	80083f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c2:	653b      	str	r3, [r7, #80]	; 0x50
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083cc:	647b      	str	r3, [r7, #68]	; 0x44
 80083ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e063      	b.n	80084bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d149      	bne.n	8008496 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008402:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800840a:	2200      	movs	r2, #0
 800840c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f857 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d03c      	beq.n	8008496 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	623b      	str	r3, [r7, #32]
   return(result);
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843a:	633b      	str	r3, [r7, #48]	; 0x30
 800843c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e6      	bne.n	800841c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	60fb      	str	r3, [r7, #12]
   return(result);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	64bb      	str	r3, [r7, #72]	; 0x48
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846e:	61fa      	str	r2, [r7, #28]
 8008470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	69b9      	ldr	r1, [r7, #24]
 8008474:	69fa      	ldr	r2, [r7, #28]
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	617b      	str	r3, [r7, #20]
   return(result);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e5      	bne.n	800844e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e012      	b.n	80084bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3758      	adds	r7, #88	; 0x58
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d4:	e049      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d045      	beq.n	800856a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084de:	f7f8 ffc3 	bl	8001468 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d302      	bcc.n	80084f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e048      	b.n	800858a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0304 	and.w	r3, r3, #4
 8008502:	2b00      	cmp	r3, #0
 8008504:	d031      	beq.n	800856a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b08      	cmp	r3, #8
 8008512:	d110      	bne.n	8008536 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2208      	movs	r2, #8
 800851a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f839 	bl	8008594 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2208      	movs	r2, #8
 8008526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e029      	b.n	800858a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008544:	d111      	bne.n	800856a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800854e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f81f 	bl	8008594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e00f      	b.n	800858a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69da      	ldr	r2, [r3, #28]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4013      	ands	r3, r2
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	bf0c      	ite	eq
 800857a:	2301      	moveq	r3, #1
 800857c:	2300      	movne	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	429a      	cmp	r2, r3
 8008586:	d0a6      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b095      	sub	sp, #84	; 0x54
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ba:	643b      	str	r3, [r7, #64]	; 0x40
 80085bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e6      	bne.n	800859c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	4b1e      	ldr	r3, [pc, #120]	; (800865c <UART_EndRxTransfer+0xc8>)
 80085e2:	4013      	ands	r3, r2
 80085e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008606:	2b01      	cmp	r3, #1
 8008608:	d118      	bne.n	800863c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	60bb      	str	r3, [r7, #8]
   return(result);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f023 0310 	bic.w	r3, r3, #16
 800861e:	647b      	str	r3, [r7, #68]	; 0x44
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6979      	ldr	r1, [r7, #20]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	613b      	str	r3, [r7, #16]
   return(result);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e6      	bne.n	800860a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008650:	bf00      	nop
 8008652:	3754      	adds	r7, #84	; 0x54
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	effffffe 	.word	0xeffffffe

08008660 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <HAL_UARTEx_DisableFifoMode+0x16>
 8008672:	2302      	movs	r3, #2
 8008674:	e027      	b.n	80086c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2224      	movs	r2, #36	; 0x24
 8008682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0201 	bic.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d101      	bne.n	80086ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086e6:	2302      	movs	r3, #2
 80086e8:	e02d      	b.n	8008746 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2224      	movs	r2, #36	; 0x24
 80086f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f850 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008762:	2302      	movs	r3, #2
 8008764:	e02d      	b.n	80087c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2224      	movs	r2, #36	; 0x24
 8008772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0201 	bic.w	r2, r2, #1
 800878c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f812 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d108      	bne.n	80087ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087ec:	e031      	b.n	8008852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ee:	2310      	movs	r3, #16
 80087f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087f2:	2310      	movs	r3, #16
 80087f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	0e5b      	lsrs	r3, r3, #25
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	0f5b      	lsrs	r3, r3, #29
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	7b3a      	ldrb	r2, [r7, #12]
 800881a:	4911      	ldr	r1, [pc, #68]	; (8008860 <UARTEx_SetNbDataToProcess+0x94>)
 800881c:	5c8a      	ldrb	r2, [r1, r2]
 800881e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008822:	7b3a      	ldrb	r2, [r7, #12]
 8008824:	490f      	ldr	r1, [pc, #60]	; (8008864 <UARTEx_SetNbDataToProcess+0x98>)
 8008826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008828:	fb93 f3f2 	sdiv	r3, r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	7b7a      	ldrb	r2, [r7, #13]
 8008838:	4909      	ldr	r1, [pc, #36]	; (8008860 <UARTEx_SetNbDataToProcess+0x94>)
 800883a:	5c8a      	ldrb	r2, [r1, r2]
 800883c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008840:	7b7a      	ldrb	r2, [r7, #13]
 8008842:	4908      	ldr	r1, [pc, #32]	; (8008864 <UARTEx_SetNbDataToProcess+0x98>)
 8008844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008846:	fb93 f3f2 	sdiv	r3, r3, r2
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	0801763c 	.word	0x0801763c
 8008864:	08017644 	.word	0x08017644

08008868 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008868:	b084      	sub	sp, #16
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	f107 001c 	add.w	r0, r7, #28
 8008876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800887e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008880:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008882:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008886:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800888a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800888e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <SDMMC_Init+0x50>)
 800889c:	4013      	ands	r3, r2
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	b004      	add	sp, #16
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	ffc02c00 	.word	0xffc02c00

080088bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f043 0203 	orr.w	r2, r3, #3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0303 	and.w	r3, r3, #3
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
	...

08008938 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008956:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800895c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008962:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <SDMMC_SendCommand+0x50>)
 8008970:	4013      	ands	r3, r2
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	fffee0c0 	.word	0xfffee0c0

0800898c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	b2db      	uxtb	r3, r3
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3314      	adds	r3, #20
 80089b4:	461a      	mov	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	4413      	add	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80089f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80089f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80089fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0

}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a32:	2310      	movs	r3, #16
 8008a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a46:	f107 0308 	add.w	r3, r7, #8
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff73 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a56:	2110      	movs	r1, #16
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fa5f 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a60:	69fb      	ldr	r3, [r7, #28]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b088      	sub	sp, #32
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a78:	2311      	movs	r3, #17
 8008a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a8c:	f107 0308 	add.w	r3, r7, #8
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ff50 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a9c:	2111      	movs	r1, #17
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa3c 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008abe:	2312      	movs	r3, #18
 8008ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff ff2d 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae2:	2112      	movs	r1, #18
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa19 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aec:	69fb      	ldr	r3, [r7, #28]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b088      	sub	sp, #32
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b04:	2318      	movs	r3, #24
 8008b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b18:	f107 0308 	add.w	r3, r7, #8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7ff ff0a 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b28:	2118      	movs	r1, #24
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f9f6 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b32:	69fb      	ldr	r3, [r7, #28]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b4a:	2319      	movs	r3, #25
 8008b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b54:	2300      	movs	r3, #0
 8008b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b5e:	f107 0308 	add.w	r3, r7, #8
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff fee7 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6e:	2119      	movs	r1, #25
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9d3 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b78:	69fb      	ldr	r3, [r7, #28]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b90:	230c      	movs	r3, #12
 8008b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bbc:	f107 0308 	add.w	r3, r7, #8
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff feb8 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008bc8:	4a0b      	ldr	r2, [pc, #44]	; (8008bf8 <SDMMC_CmdStopTransfer+0x74>)
 8008bca:	210c      	movs	r1, #12
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f9a5 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008bd2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008be6:	d101      	bne.n	8008bec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008bec:	69fb      	ldr	r3, [r7, #28]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	05f5e100 	.word	0x05f5e100

08008bfc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c0a:	2307      	movs	r3, #7
 8008c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fe87 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2e:	2107      	movs	r1, #7
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f973 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c38:	69fb      	ldr	r3, [r7, #28]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fe66 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb97 	bl	80093a0 <SDMMC_GetCmdError>
 8008c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c74:	69fb      	ldr	r3, [r7, #28]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c86:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff fe46 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fb29 	bl	8009304 <SDMMC_GetCmdResp7>
 8008cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008ccc:	2337      	movs	r3, #55	; 0x37
 8008cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fe26 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	2137      	movs	r1, #55	; 0x37
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f912 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d12:	2329      	movs	r3, #41	; 0x29
 8008d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d26:	f107 0308 	add.w	r3, r7, #8
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fe03 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa2e 	bl	8009194 <SDMMC_GetCmdResp3>
 8008d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d52:	2306      	movs	r3, #6
 8008d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fde3 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d76:	2106      	movs	r1, #6
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8cf 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d80:	69fb      	ldr	r3, [r7, #28]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b088      	sub	sp, #32
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d96:	2333      	movs	r3, #51	; 0x33
 8008d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da0:	2300      	movs	r3, #0
 8008da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff fdc1 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dba:	2133      	movs	r1, #51	; 0x33
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8ad 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b088      	sub	sp, #32
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fd9f 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f980 	bl	8009100 <SDMMC_GetCmdResp2>
 8008e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e02:	69fb      	ldr	r3, [r7, #28]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3720      	adds	r7, #32
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e1a:	2309      	movs	r3, #9
 8008e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fd7f 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f960 	bl	8009100 <SDMMC_GetCmdResp2>
 8008e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e6e:	f107 0308 	add.w	r3, r7, #8
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff fd5f 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	2103      	movs	r1, #3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9c8 	bl	8009214 <SDMMC_GetCmdResp6>
 8008e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e9e:	230d      	movs	r3, #13
 8008ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff fd3d 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec2:	210d      	movs	r1, #13
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f829 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b088      	sub	sp, #32
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008ee2:	230d      	movs	r3, #13
 8008ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fd1b 	bl	8008938 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	210d      	movs	r1, #13
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f807 	bl	8008f1c <SDMMC_GetCmdResp1>
 8008f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f10:	69fb      	ldr	r3, [r7, #28]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	460b      	mov	r3, r1
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008f2a:	4b70      	ldr	r3, [pc, #448]	; (80090ec <SDMMC_GetCmdResp1+0x1d0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a70      	ldr	r2, [pc, #448]	; (80090f0 <SDMMC_GetCmdResp1+0x1d4>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	0a5a      	lsrs	r2, r3, #9
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	fb02 f303 	mul.w	r3, r2, r3
 8008f3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	61fa      	str	r2, [r7, #28]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f4c:	e0c9      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f52:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4b67      	ldr	r3, [pc, #412]	; (80090f4 <SDMMC_GetCmdResp1+0x1d8>)
 8008f58:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0ef      	beq.n	8008f3e <SDMMC_GetCmdResp1+0x22>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1ea      	bne.n	8008f3e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2204      	movs	r2, #4
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e0b1      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0a6      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a58      	ldr	r2, [pc, #352]	; (80090f8 <SDMMC_GetCmdResp1+0x1dc>)
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fcf6 	bl	800898c <SDMMC_GetCommandResponse>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d001      	beq.n	8008fae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e099      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008fae:	2100      	movs	r1, #0
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fcf8 	bl	80089a6 <SDMMC_GetResponse>
 8008fb6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4b50      	ldr	r3, [pc, #320]	; (80090fc <SDMMC_GetCmdResp1+0x1e0>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e08d      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da02      	bge.n	8008fd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fd0:	e087      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008fdc:	2340      	movs	r3, #64	; 0x40
 8008fde:	e080      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	e079      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ffc:	e071      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800900c:	e069      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901c:	e061      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800902c:	e059      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800903c:	e051      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800904c:	e049      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800905c:	e041      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800906c:	e039      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800907c:	e031      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800908c:	e029      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800909c:	e021      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090ac:	e019      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80090b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80090bc:	e011      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80090c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090cc:	e009      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80090d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80090dc:	e001      	b.n	80090e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80090de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3720      	adds	r7, #32
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	24000000 	.word	0x24000000
 80090f0:	10624dd3 	.word	0x10624dd3
 80090f4:	00200045 	.word	0x00200045
 80090f8:	002000c5 	.word	0x002000c5
 80090fc:	fdffe008 	.word	0xfdffe008

08009100 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009108:	4b1f      	ldr	r3, [pc, #124]	; (8009188 <SDMMC_GetCmdResp2+0x88>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <SDMMC_GetCmdResp2+0x8c>)
 800910e:	fba2 2303 	umull	r2, r3, r2, r3
 8009112:	0a5b      	lsrs	r3, r3, #9
 8009114:	f241 3288 	movw	r2, #5000	; 0x1388
 8009118:	fb02 f303 	mul.w	r3, r2, r3
 800911c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	1e5a      	subs	r2, r3, #1
 8009122:	60fa      	str	r2, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800912c:	e026      	b.n	800917c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0ef      	beq.n	800911e <SDMMC_GetCmdResp2+0x1e>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1ea      	bne.n	800911e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d004      	beq.n	800915e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2204      	movs	r2, #4
 8009158:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800915a:	2304      	movs	r3, #4
 800915c:	e00e      	b.n	800917c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009170:	2301      	movs	r3, #1
 8009172:	e003      	b.n	800917c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a06      	ldr	r2, [pc, #24]	; (8009190 <SDMMC_GetCmdResp2+0x90>)
 8009178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	24000000 	.word	0x24000000
 800918c:	10624dd3 	.word	0x10624dd3
 8009190:	002000c5 	.word	0x002000c5

08009194 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800919c:	4b1a      	ldr	r3, [pc, #104]	; (8009208 <SDMMC_GetCmdResp3+0x74>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1a      	ldr	r2, [pc, #104]	; (800920c <SDMMC_GetCmdResp3+0x78>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	0a5b      	lsrs	r3, r3, #9
 80091a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ac:	fb02 f303 	mul.w	r3, r2, r3
 80091b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1e5a      	subs	r2, r3, #1
 80091b6:	60fa      	str	r2, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091c0:	e01b      	b.n	80091fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0ef      	beq.n	80091b2 <SDMMC_GetCmdResp3+0x1e>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1ea      	bne.n	80091b2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2204      	movs	r2, #4
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091ee:	2304      	movs	r3, #4
 80091f0:	e003      	b.n	80091fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a06      	ldr	r2, [pc, #24]	; (8009210 <SDMMC_GetCmdResp3+0x7c>)
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	24000000 	.word	0x24000000
 800920c:	10624dd3 	.word	0x10624dd3
 8009210:	002000c5 	.word	0x002000c5

08009214 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	460b      	mov	r3, r1
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009222:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <SDMMC_GetCmdResp6+0xe4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a35      	ldr	r2, [pc, #212]	; (80092fc <SDMMC_GetCmdResp6+0xe8>)
 8009228:	fba2 2303 	umull	r2, r3, r2, r3
 800922c:	0a5b      	lsrs	r3, r3, #9
 800922e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1e5a      	subs	r2, r3, #1
 800923c:	61fa      	str	r2, [r7, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d102      	bne.n	8009248 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009246:	e052      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0ef      	beq.n	8009238 <SDMMC_GetCmdResp6+0x24>
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1ea      	bne.n	8009238 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2204      	movs	r2, #4
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009274:	2304      	movs	r3, #4
 8009276:	e03a      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800928a:	2301      	movs	r3, #1
 800928c:	e02f      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fb7c 	bl	800898c <SDMMC_GetCommandResponse>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	7afb      	ldrb	r3, [r7, #11]
 800929a:	4293      	cmp	r3, r2
 800929c:	d001      	beq.n	80092a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800929e:	2301      	movs	r3, #1
 80092a0:	e025      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a16      	ldr	r2, [pc, #88]	; (8009300 <SDMMC_GetCmdResp6+0xec>)
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092a8:	2100      	movs	r1, #0
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fb7b 	bl	80089a6 <SDMMC_GetResponse>
 80092b0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d106      	bne.n	80092ca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	0c1b      	lsrs	r3, r3, #16
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e011      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092d8:	e009      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092e8:	e001      	b.n	80092ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	24000000 	.word	0x24000000
 80092fc:	10624dd3 	.word	0x10624dd3
 8009300:	002000c5 	.word	0x002000c5

08009304 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800930c:	4b22      	ldr	r3, [pc, #136]	; (8009398 <SDMMC_GetCmdResp7+0x94>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a22      	ldr	r2, [pc, #136]	; (800939c <SDMMC_GetCmdResp7+0x98>)
 8009312:	fba2 2303 	umull	r2, r3, r2, r3
 8009316:	0a5b      	lsrs	r3, r3, #9
 8009318:	f241 3288 	movw	r2, #5000	; 0x1388
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1e5a      	subs	r2, r3, #1
 8009326:	60fa      	str	r2, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800932c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009330:	e02c      	b.n	800938c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0ef      	beq.n	8009322 <SDMMC_GetCmdResp7+0x1e>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1ea      	bne.n	8009322 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2204      	movs	r2, #4
 800935c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800935e:	2304      	movs	r3, #4
 8009360:	e014      	b.n	800938c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009374:	2301      	movs	r3, #1
 8009376:	e009      	b.n	800938c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2240      	movs	r2, #64	; 0x40
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800938a:	2300      	movs	r3, #0

}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr
 8009398:	24000000 	.word	0x24000000
 800939c:	10624dd3 	.word	0x10624dd3

080093a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093a8:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <SDMMC_GetCmdError+0x50>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a11      	ldr	r2, [pc, #68]	; (80093f4 <SDMMC_GetCmdError+0x54>)
 80093ae:	fba2 2303 	umull	r2, r3, r2, r3
 80093b2:	0a5b      	lsrs	r3, r3, #9
 80093b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1e5a      	subs	r2, r3, #1
 80093c2:	60fa      	str	r2, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093cc:	e009      	b.n	80093e2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f1      	beq.n	80093be <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a06      	ldr	r2, [pc, #24]	; (80093f8 <SDMMC_GetCmdError+0x58>)
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	24000000 	.word	0x24000000
 80093f4:	10624dd3 	.word	0x10624dd3
 80093f8:	002000c5 	.word	0x002000c5

080093fc <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08e      	sub	sp, #56	; 0x38
 8009400:	af08      	add	r7, sp, #32
 8009402:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 800940c:	f107 010c 	add.w	r1, r7, #12
 8009410:	2300      	movs	r3, #0
 8009412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	f00c fc08 	bl	8015c2c <_txe_byte_allocate>
 800941c:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8009424:	2302      	movs	r3, #2
 8009426:	e027      	b.n	8009478 <MX_FileX_Init+0x7c>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	22b0      	movs	r2, #176	; 0xb0
 800942c:	9206      	str	r2, [sp, #24]
 800942e:	2201      	movs	r2, #1
 8009430:	9205      	str	r2, [sp, #20]
 8009432:	2200      	movs	r2, #0
 8009434:	9204      	str	r2, [sp, #16]
 8009436:	220a      	movs	r2, #10
 8009438:	9203      	str	r2, [sp, #12]
 800943a:	220a      	movs	r2, #10
 800943c:	9202      	str	r2, [sp, #8]
 800943e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009442:	9201      	str	r2, [sp, #4]
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <MX_FileX_Init+0x84>)
 800944a:	490e      	ldr	r1, [pc, #56]	; (8009484 <MX_FileX_Init+0x88>)
 800944c:	480e      	ldr	r0, [pc, #56]	; (8009488 <MX_FileX_Init+0x8c>)
 800944e:	f00c ff79 	bl	8016344 <_txe_thread_create>
 8009452:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800945a:	230e      	movs	r3, #14
 800945c:	e00c      	b.n	8009478 <MX_FileX_Init+0x7c>
  }
  /* USER CODE BEGIN MX_FileX_Init */
  /* Create the message queue */
    tx_queue_create(&tx_msg_queue, "sd_event_queue", 1, pointer, DEFAULT_QUEUE_LENGTH * sizeof(ULONG));
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2238      	movs	r2, #56	; 0x38
 8009462:	9201      	str	r2, [sp, #4]
 8009464:	2240      	movs	r2, #64	; 0x40
 8009466:	9200      	str	r2, [sp, #0]
 8009468:	2201      	movs	r2, #1
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <MX_FileX_Init+0x90>)
 800946c:	4808      	ldr	r0, [pc, #32]	; (8009490 <MX_FileX_Init+0x94>)
 800946e:	f00c fcf1 	bl	8015e54 <_txe_queue_create>

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 8009472:	f006 fc85 	bl	800fd80 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 8009476:	697b      	ldr	r3, [r7, #20]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	08009495 	.word	0x08009495
 8009484:	08017540 	.word	0x08017540
 8009488:	240122c8 	.word	0x240122c8
 800948c:	08017554 	.word	0x08017554
 8009490:	24014c18 	.word	0x24014c18

08009494 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 8009494:	b5b0      	push	{r4, r5, r7, lr}
 8009496:	b09c      	sub	sp, #112	; 0x70
 8009498:	af04      	add	r7, sp, #16
 800949a:	6078      	str	r0, [r7, #4]
  UINT sd_status = FX_SUCCESS;
 800949c:	2300      	movs	r3, #0
 800949e:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN fx_app_thread_entry 0 */
  ULONG r_msg;
  ULONG s_msg = CARD_STATUS_CHANGED;
 80094a0:	2363      	movs	r3, #99	; 0x63
 80094a2:	653b      	str	r3, [r7, #80]	; 0x50
  ULONG last_status = CARD_STATUS_DISCONNECTED;
 80094a4:	2358      	movs	r3, #88	; 0x58
 80094a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 80094a8:	4b78      	ldr	r3, [pc, #480]	; (800968c <fx_app_thread_entry+0x1f8>)
 80094aa:	f107 040c 	add.w	r4, r7, #12
 80094ae:	461d      	mov	r5, r3
 80094b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094b8:	c407      	stmia	r4!, {r0, r1, r2}
 80094ba:	8023      	strh	r3, [r4, #0]
 80094bc:	3402      	adds	r4, #2
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END fx_app_thread_entry 0 */

  /* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 80094c2:	f242 43b8 	movw	r3, #9400	; 0x24b8
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	4b70      	ldr	r3, [pc, #448]	; (8009690 <fx_app_thread_entry+0x1fc>)
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	4a6f      	ldr	r2, [pc, #444]	; (8009694 <fx_app_thread_entry+0x200>)
 80094d6:	4970      	ldr	r1, [pc, #448]	; (8009698 <fx_app_thread_entry+0x204>)
 80094d8:	4870      	ldr	r0, [pc, #448]	; (800969c <fx_app_thread_entry+0x208>)
 80094da:	f009 f853 	bl	8012584 <_fxe_media_open>
 80094de:	65b8      	str	r0, [r7, #88]	; 0x58

  /* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 80094e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d000      	beq.n	80094e8 <fx_app_thread_entry+0x54>
  {
    /* USER CODE BEGIN SD open error */
    while(1);
 80094e6:	e7fe      	b.n	80094e6 <fx_app_thread_entry+0x52>
    /* USER CODE END SD open error */
  }

  /* USER CODE BEGIN fx_app_thread_entry 1 */
  if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 80094e8:	2000      	movs	r0, #0
 80094ea:	f000 f8e1 	bl	80096b0 <SD_IsDetected>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d107      	bne.n	8009504 <fx_app_thread_entry+0x70>
  {
    /* SD card is already inserted, place the info into the queue */
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 80094f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094f8:	2200      	movs	r2, #0
 80094fa:	4619      	mov	r1, r3
 80094fc:	4868      	ldr	r0, [pc, #416]	; (80096a0 <fx_app_thread_entry+0x20c>)
 80094fe:	f00c fda3 	bl	8016048 <_txe_queue_send>
 8009502:	e00e      	b.n	8009522 <fx_app_thread_entry+0x8e>
  }
  else
  {
    /* Indicate that SD card is not inserted from start */
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8009504:	2200      	movs	r2, #0
 8009506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800950a:	4866      	ldr	r0, [pc, #408]	; (80096a4 <fx_app_thread_entry+0x210>)
 800950c:	f7f8 fa90 	bl	8001a30 <HAL_GPIO_WritePin>

    /* We wait here for a valid SD card insertion event, if it is not inserted already */
    while(1)
    {

      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009510:	e007      	b.n	8009522 <fx_app_thread_entry+0x8e>
      {
        /* Toggle GREEN LED to indicate idle state after a successful operation */
        if(last_status == CARD_STATUS_CONNECTED)
 8009512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009514:	2b4d      	cmp	r3, #77	; 0x4d
 8009516:	d104      	bne.n	8009522 <fx_app_thread_entry+0x8e>
        {
          HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800951c:	4861      	ldr	r0, [pc, #388]	; (80096a4 <fx_app_thread_entry+0x210>)
 800951e:	f7f8 faa0 	bl	8001a62 <HAL_GPIO_TogglePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009522:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009526:	2232      	movs	r2, #50	; 0x32
 8009528:	4619      	mov	r1, r3
 800952a:	485d      	ldr	r0, [pc, #372]	; (80096a0 <fx_app_thread_entry+0x20c>)
 800952c:	f00c fd42 	bl	8015fb4 <_txe_queue_receive>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ed      	bne.n	8009512 <fx_app_thread_entry+0x7e>
        }
      }

      /* check if we received the correct event message */
      if(r_msg == CARD_STATUS_CHANGED)
 8009536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009538:	2b63      	cmp	r3, #99	; 0x63
 800953a:	d1f2      	bne.n	8009522 <fx_app_thread_entry+0x8e>
      {
        /* reset the status */
        r_msg = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	657b      	str	r3, [r7, #84]	; 0x54

        /* for debouncing purpose we wait a bit till it settles down */
        tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8009540:	2032      	movs	r0, #50	; 0x32
 8009542:	f00b fd5b 	bl	8014ffc <_tx_thread_sleep>

        if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 8009546:	2000      	movs	r0, #0
 8009548:	f000 f8b2 	bl	80096b0 <SD_IsDetected>
 800954c:	4603      	mov	r3, r0
 800954e:	2b01      	cmp	r3, #1
 8009550:	d111      	bne.n	8009576 <fx_app_thread_entry+0xe2>
        {
          /* We have a valid SD insertion event, start processing.. */
          /* Update last known status */
          last_status = CARD_STATUS_CONNECTED;
 8009552:	234d      	movs	r3, #77	; 0x4d
 8009554:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /*LED_RED Off*/
 8009556:	2201      	movs	r2, #1
 8009558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800955c:	4851      	ldr	r0, [pc, #324]	; (80096a4 <fx_app_thread_entry+0x210>)
 800955e:	f7f8 fa67 	bl	8001a30 <HAL_GPIO_WritePin>
          break;
 8009562:	bf00      	nop
        }
      }
    }

    /* Create a file called STM32.TXT in the root directory.  */
    sd_status =  fx_file_create(&sdio_disk, "STM32.TXT");
 8009564:	4950      	ldr	r1, [pc, #320]	; (80096a8 <fx_app_thread_entry+0x214>)
 8009566:	484d      	ldr	r0, [pc, #308]	; (800969c <fx_app_thread_entry+0x208>)
 8009568:	f008 fe6a 	bl	8012240 <_fxe_file_create>
 800956c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the create status.  */
    if (sd_status != FX_SUCCESS)
 800956e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009570:	2b00      	cmp	r3, #0
 8009572:	d014      	beq.n	800959e <fx_app_thread_entry+0x10a>
 8009574:	e00e      	b.n	8009594 <fx_app_thread_entry+0x100>
          last_status = CARD_STATUS_DISCONNECTED;
 8009576:	2358      	movs	r3, #88	; 0x58
 8009578:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);  /*LED_GREEN Off*/
 800957a:	2201      	movs	r2, #1
 800957c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009580:	4848      	ldr	r0, [pc, #288]	; (80096a4 <fx_app_thread_entry+0x210>)
 8009582:	f7f8 fa55 	bl	8001a30 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /*LED_GREEN On*/
 8009586:	2200      	movs	r2, #0
 8009588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800958c:	4845      	ldr	r0, [pc, #276]	; (80096a4 <fx_app_thread_entry+0x210>)
 800958e:	f7f8 fa4f 	bl	8001a30 <HAL_GPIO_WritePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009592:	e7c6      	b.n	8009522 <fx_app_thread_entry+0x8e>
    {
      /* Check for an already created status. This is expected on the
      second pass of this loop!  */
      if (sd_status != FX_ALREADY_CREATED)
 8009594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009596:	2b0b      	cmp	r3, #11
 8009598:	d001      	beq.n	800959e <fx_app_thread_entry+0x10a>
      {
        /* Create error, call error handler.  */
        Error_Handler();
 800959a:	f7f7 fc89 	bl	8000eb0 <Error_Handler>
      }
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 800959e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2301      	movs	r3, #1
 80095a6:	4a40      	ldr	r2, [pc, #256]	; (80096a8 <fx_app_thread_entry+0x214>)
 80095a8:	4940      	ldr	r1, [pc, #256]	; (80096ac <fx_app_thread_entry+0x218>)
 80095aa:	483c      	ldr	r0, [pc, #240]	; (800969c <fx_app_thread_entry+0x208>)
 80095ac:	f008 fe76 	bl	801229c <_fxe_file_open>
 80095b0:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 80095b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <fx_app_thread_entry+0x128>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 80095b8:	f7f7 fc7a 	bl	8000eb0 <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 80095bc:	2100      	movs	r1, #0
 80095be:	483b      	ldr	r0, [pc, #236]	; (80096ac <fx_app_thread_entry+0x218>)
 80095c0:	f008 ff26 	bl	8012410 <_fxe_file_seek>
 80095c4:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 80095c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <fx_app_thread_entry+0x13c>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 80095cc:	f7f7 fc70 	bl	8000eb0 <Error_Handler>
    }

    /* Write a string to the test file.  */
    sd_status =  fx_file_write(&fx_file, data, sizeof(data));
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	221f      	movs	r2, #31
 80095d6:	4619      	mov	r1, r3
 80095d8:	4834      	ldr	r0, [pc, #208]	; (80096ac <fx_app_thread_entry+0x218>)
 80095da:	f008 ff47 	bl	801246c <_fxe_file_write>
 80095de:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file write status.  */
    if (sd_status != FX_SUCCESS)
 80095e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <fx_app_thread_entry+0x156>
    {
      /* Error writing to a file, call error handler.  */
      Error_Handler();
 80095e6:	f7f7 fc63 	bl	8000eb0 <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 80095ea:	4830      	ldr	r0, [pc, #192]	; (80096ac <fx_app_thread_entry+0x218>)
 80095ec:	f008 fdfc 	bl	80121e8 <_fxe_file_close>
 80095f0:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 80095f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <fx_app_thread_entry+0x168>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 80095f8:	f7f7 fc5a 	bl	8000eb0 <Error_Handler>
    }

    sd_status = fx_media_flush(&sdio_disk);
 80095fc:	4827      	ldr	r0, [pc, #156]	; (800969c <fx_app_thread_entry+0x208>)
 80095fe:	f008 ff95 	bl	801252c <_fxe_media_flush>
 8009602:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media flush  status.  */
    if (sd_status != FX_SUCCESS)
 8009604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <fx_app_thread_entry+0x17a>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 800960a:	f7f7 fc51 	bl	8000eb0 <Error_Handler>
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 800960e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	4a24      	ldr	r2, [pc, #144]	; (80096a8 <fx_app_thread_entry+0x214>)
 8009618:	4924      	ldr	r1, [pc, #144]	; (80096ac <fx_app_thread_entry+0x218>)
 800961a:	4820      	ldr	r0, [pc, #128]	; (800969c <fx_app_thread_entry+0x208>)
 800961c:	f008 fe3e 	bl	801229c <_fxe_file_open>
 8009620:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 8009622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <fx_app_thread_entry+0x198>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8009628:	f7f7 fc42 	bl	8000eb0 <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 800962c:	2100      	movs	r1, #0
 800962e:	481f      	ldr	r0, [pc, #124]	; (80096ac <fx_app_thread_entry+0x218>)
 8009630:	f008 feee 	bl	8012410 <_fxe_file_seek>
 8009634:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 8009636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <fx_app_thread_entry+0x1ac>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 800963c:	f7f7 fc38 	bl	8000eb0 <Error_Handler>
    }

    /* Read the first 28 bytes of the test file.  */
    sd_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 8009640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009644:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009648:	221f      	movs	r2, #31
 800964a:	4818      	ldr	r0, [pc, #96]	; (80096ac <fx_app_thread_entry+0x218>)
 800964c:	f008 fea8 	bl	80123a0 <_fxe_file_read>
 8009650:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file read status.  */
    if ((sd_status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 8009652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <fx_app_thread_entry+0x1ca>
 8009658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965a:	2b1f      	cmp	r3, #31
 800965c:	d001      	beq.n	8009662 <fx_app_thread_entry+0x1ce>
    {
      /* Error reading file, call error handler.  */
      Error_Handler();
 800965e:	f7f7 fc27 	bl	8000eb0 <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 8009662:	4812      	ldr	r0, [pc, #72]	; (80096ac <fx_app_thread_entry+0x218>)
 8009664:	f008 fdc0 	bl	80121e8 <_fxe_file_close>
 8009668:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 800966a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <fx_app_thread_entry+0x1e0>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009670:	f7f7 fc1e 	bl	8000eb0 <Error_Handler>
    }

    /* Close the media.  */
    sd_status =  fx_media_close(&sdio_disk);
 8009674:	4809      	ldr	r0, [pc, #36]	; (800969c <fx_app_thread_entry+0x208>)
 8009676:	f008 ff2d 	bl	80124d4 <_fxe_media_close>
 800967a:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media close status.  */
    if (sd_status != FX_SUCCESS)
 800967c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800967e:	2b00      	cmp	r3, #0
 8009680:	f43f af46 	beq.w	8009510 <fx_app_thread_entry+0x7c>
    {
      /* Error closing the media, call error handler.  */
      Error_Handler();
 8009684:	f7f7 fc14 	bl	8000eb0 <Error_Handler>
  for( ;; )
 8009688:	e742      	b.n	8009510 <fx_app_thread_entry+0x7c>
 800968a:	bf00      	nop
 800968c:	08017580 	.word	0x08017580
 8009690:	24012380 	.word	0x24012380
 8009694:	080126f9 	.word	0x080126f9
 8009698:	08017564 	.word	0x08017564
 800969c:	24012580 	.word	0x24012580
 80096a0:	24014c18 	.word	0x24014c18
 80096a4:	58022000 	.word	0x58022000
 80096a8:	08017574 	.word	0x08017574
 80096ac:	24014a38 	.word	0x24014a38

080096b0 <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <SD_IsDetected+0x14>
  {
    ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e00c      	b.n	80096de <SD_IsDetected+0x2e>
  }
  else
  {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET)
 80096c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80096c8:	4807      	ldr	r0, [pc, #28]	; (80096e8 <SD_IsDetected+0x38>)
 80096ca:	f7f8 f999 	bl	8001a00 <HAL_GPIO_ReadPin>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d102      	bne.n	80096da <SD_IsDetected+0x2a>
    {
      ret = SD_NOT_PRESENT;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	e001      	b.n	80096de <SD_IsDetected+0x2e>
    }
    else
    {
      ret = SD_PRESENT;
 80096da:	2301      	movs	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 80096de:	68fb      	ldr	r3, [r7, #12]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	58022000 	.word	0x58022000

080096ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	80fb      	strh	r3, [r7, #6]
  ULONG s_msg = CARD_STATUS_CHANGED;
 80096f6:	2363      	movs	r3, #99	; 0x63
 80096f8:	60fb      	str	r3, [r7, #12]

  if(GPIO_Pin == SD_DETECT_Pin)
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009700:	d106      	bne.n	8009710 <HAL_GPIO_EXTI_Callback+0x24>
  {
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	2200      	movs	r2, #0
 8009708:	4619      	mov	r1, r3
 800970a:	4803      	ldr	r0, [pc, #12]	; (8009718 <HAL_GPIO_EXTI_Callback+0x2c>)
 800970c:	f00c fc9c 	bl	8016048 <_txe_queue_send>
  }
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	24014c18 	.word	0x24014c18

0800971c <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8009728:	4806      	ldr	r0, [pc, #24]	; (8009744 <fx_stm32_sd_get_status+0x28>)
 800972a:	f7fc ffcd 	bl	80066c8 <HAL_SD_GetCardState>
 800972e:	4603      	mov	r3, r0
 8009730:	2b04      	cmp	r3, #4
 8009732:	d001      	beq.n	8009738 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8009738:	68fb      	ldr	r3, [r7, #12]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	24012164 	.word	0x24012164

08009748 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4806      	ldr	r0, [pc, #24]	; (800977c <fx_stm32_sd_read_blocks+0x34>)
 8009762:	f7fc f92b 	bl	80059bc <HAL_SD_ReadBlocks_DMA>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009770:	697b      	ldr	r3, [r7, #20]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	24012164 	.word	0x24012164

08009780 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	4806      	ldr	r0, [pc, #24]	; (80097b4 <fx_stm32_sd_write_blocks+0x34>)
 800979a:	f7fc f9b7 	bl	8005b0c <HAL_SD_WriteBlocks_DMA>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 80097a4:	2301      	movs	r3, #1
 80097a6:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 80097a8:	697b      	ldr	r3, [r7, #20]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	24012164 	.word	0x24012164

080097b8 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 80097c0:	4803      	ldr	r0, [pc, #12]	; (80097d0 <HAL_SD_TxCpltCallback+0x18>)
 80097c2:	f00c fda1 	bl	8016308 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	24014c50 	.word	0x24014c50

080097d4 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 80097dc:	4803      	ldr	r0, [pc, #12]	; (80097ec <HAL_SD_RxCpltCallback+0x18>)
 80097de:	f00c fd93 	bl	8016308 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	24014c6c 	.word	0x24014c6c

080097f0 <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 80097f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097f4:	b09e      	sub	sp, #120	; 0x78
 80097f6:	af04      	add	r7, sp, #16
 80097f8:	61f8      	str	r0, [r7, #28]
 80097fa:	61b9      	str	r1, [r7, #24]
 80097fc:	617a      	str	r2, [r7, #20]
 80097fe:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	015b      	lsls	r3, r3, #5
 800981c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <_fx_directory_entry_read+0x3e>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a1 	beq.w	8009970 <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 8009842:	2302      	movs	r3, #2
 8009844:	e355      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 8009846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	fbb2 f3f3 	udiv	r3, r2, r3
 800984e:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 8009850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009854:	fbb3 f2f2 	udiv	r2, r3, r2
 8009858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800985a:	fb01 f202 	mul.w	r2, r1, r2
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d028      	beq.n	80098c6 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01e      	beq.n	80098ba <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 8009880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009882:	429a      	cmp	r2, r3
 8009884:	d319      	bcc.n	80098ba <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 8009892:	4299      	cmp	r1, r3
 8009894:	bf08      	it	eq
 8009896:	4290      	cmpeq	r0, r2
 8009898:	d10f      	bne.n	80098ba <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d109      	bne.n	80098ba <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098aa:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b0:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2200      	movs	r2, #0
 80098b6:	651a      	str	r2, [r3, #80]	; 0x50
 80098b8:	e00a      	b.n	80098d0 <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	667b      	str	r3, [r7, #100]	; 0x64
 80098c4:	e024      	b.n	8009910 <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ca:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 80098d0:	e01e      	b.n	8009910 <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 80098d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d907      	bls.n	80098e8 <_fx_directory_entry_read+0xf8>
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80098de:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80098e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d301      	bcc.n	80098ec <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 80098e8:	2308      	movs	r3, #8
 80098ea:	e302      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 80098ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f0:	461a      	mov	r2, r3
 80098f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098f4:	69f8      	ldr	r0, [r7, #28]
 80098f6:	f006 fc5d 	bl	80101b4 <_fx_utility_FAT_entry_read>
 80098fa:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 80098fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 8009902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009904:	e2f5      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800990a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990c:	3301      	adds	r3, #1
 800990e:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 8009910:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009914:	429a      	cmp	r2, r3
 8009916:	d3dc      	bcc.n	80098d2 <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800991c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991e:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 8009920:	69f9      	ldr	r1, [r7, #28]
 8009922:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009924:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009928:	4413      	add	r3, r2
 800992a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800992c:	4413      	add	r3, r2
 800992e:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009932:	2200      	movs	r2, #0
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800993c:	2203      	movs	r2, #3
 800993e:	9202      	str	r2, [sp, #8]
 8009940:	2201      	movs	r2, #1
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800994a:	69f8      	ldr	r0, [r7, #28]
 800994c:	f008 f840 	bl	80119d0 <_fx_utility_logical_sector_read>
 8009950:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	e2ca      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009962:	fbb3 f1f2 	udiv	r1, r3, r2
 8009966:	fb01 f202 	mul.w	r2, r1, r2
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	647b      	str	r3, [r7, #68]	; 0x44
 800996e:	e02f      	b.n	80099d0 <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009976:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800997e:	4413      	add	r3, r2
 8009980:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009984:	2200      	movs	r2, #0
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800998e:	2203      	movs	r2, #3
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	2201      	movs	r2, #1
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800999c:	69f8      	ldr	r0, [r7, #28]
 800999e:	f008 f817 	bl	80119d0 <_fx_utility_logical_sector_read>
 80099a2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80099a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	e2a1      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	657b      	str	r3, [r7, #84]	; 0x54
 80099b2:	2300      	movs	r3, #0
 80099b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b8:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099c0:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80099ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d6:	4413      	add	r3, r2
 80099d8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 80099da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099dc:	2200      	movs	r2, #0
 80099de:	4698      	mov	r8, r3
 80099e0:	4691      	mov	r9, r2
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ec:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2200      	movs	r2, #0
 80099f2:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2200      	movs	r2, #0
 80099f8:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 8009a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a06:	330b      	adds	r3, #11
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b0f      	cmp	r3, #15
 8009a0c:	f040 8129 	bne.w	8009c62 <_fx_directory_entry_read+0x472>
 8009a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2be5      	cmp	r3, #229	; 0xe5
 8009a16:	f000 8124 	beq.w	8009c62 <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	f003 021f 	and.w	r2, r3, #31
 8009a22:	4613      	mov	r3, r2
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	3b0d      	subs	r3, #13
 8009a2e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 031f 	and.w	r3, r3, #31
 8009a38:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 8009a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8009a3e:	d908      	bls.n	8009a52 <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 8009a40:	2301      	movs	r3, #1
 8009a42:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 8009a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	f003 021f 	and.w	r2, r3, #31
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	619a      	str	r2, [r3, #24]
 8009a50:	e015      	b.n	8009a7e <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	3304      	adds	r3, #4
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 8009a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a5a:	330e      	adds	r3, #14
 8009a5c:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a64:	4413      	add	r3, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 8009a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 8009a70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d202      	bcs.n	8009a7e <_fx_directory_entry_read+0x28e>
 8009a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a7a:	2bff      	cmp	r3, #255	; 0xff
 8009a7c:	d9ef      	bls.n	8009a5e <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 8009a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	3b01      	subs	r3, #1
 8009a88:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 8009a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d168      	bne.n	8009b62 <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009a90:	2301      	movs	r3, #1
 8009a92:	667b      	str	r3, [r7, #100]	; 0x64
 8009a94:	2300      	movs	r3, #0
 8009a96:	663b      	str	r3, [r7, #96]	; 0x60
 8009a98:	e060      	b.n	8009b5c <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 8009a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a9c:	2b0b      	cmp	r3, #11
 8009a9e:	d057      	beq.n	8009b50 <_fx_directory_entry_read+0x360>
 8009aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa2:	2b1a      	cmp	r3, #26
 8009aa4:	d054      	beq.n	8009b50 <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 8009aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa8:	2b0d      	cmp	r3, #13
 8009aaa:	d102      	bne.n	8009ab2 <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 8009aac:	230c      	movs	r3, #12
 8009aae:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 8009ab0:	e051      	b.n	8009b56 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 8009ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ab8:	4413      	add	r3, r2
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d014      	beq.n	8009aea <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 8009ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ac6:	4413      	add	r3, r2
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2bff      	cmp	r3, #255	; 0xff
 8009acc:	d105      	bne.n	8009ada <_fx_directory_entry_read+0x2ea>
 8009ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ad2:	4413      	add	r3, r2
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2bff      	cmp	r3, #255	; 0xff
 8009ad8:	d007      	beq.n	8009aea <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 8009ada:	2301      	movs	r3, #1
 8009adc:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae2:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 8009aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aee:	4413      	add	r3, r2
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d02e      	beq.n	8009b54 <_fx_directory_entry_read+0x364>
 8009af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009afa:	4413      	add	r3, r2
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2bff      	cmp	r3, #255	; 0xff
 8009b00:	d028      	beq.n	8009b54 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 8009b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b04:	4613      	mov	r3, r2
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b10:	4413      	add	r3, r2
 8009b12:	2bfe      	cmp	r3, #254	; 0xfe
 8009b14:	d908      	bls.n	8009b28 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 8009b16:	2301      	movs	r3, #1
 8009b18:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b1e:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 8009b26:	e01c      	b.n	8009b62 <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 8009b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b2c:	18d1      	adds	r1, r2, r3
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b34:	4613      	mov	r3, r2
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	441a      	add	r2, r3
 8009b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b40:	4413      	add	r3, r2
 8009b42:	4403      	add	r3, r0
 8009b44:	780a      	ldrb	r2, [r1, #0]
 8009b46:	701a      	strb	r2, [r3, #0]

                    j++;
 8009b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8009b4e:	e002      	b.n	8009b56 <_fx_directory_entry_read+0x366>
                        continue;
 8009b50:	bf00      	nop
 8009b52:	e000      	b.n	8009b56 <_fx_directory_entry_read+0x366>
                        continue;
 8009b54:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 8009b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b58:	3302      	adds	r3, #2
 8009b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8009b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b5e:	2b1f      	cmp	r3, #31
 8009b60:	d99b      	bls.n	8009a9a <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 8009b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b64:	f103 0220 	add.w	r2, r3, #32
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d365      	bcc.n	8009c3c <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d103      	bne.n	8009b7e <_fx_directory_entry_read+0x38e>
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d038      	beq.n	8009bf0 <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b82:	3b01      	subs	r3, #1
 8009b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d206      	bcs.n	8009b98 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 8009b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 8009b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b92:	3301      	adds	r3, #1
 8009b94:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009b96:	e038      	b.n	8009c0a <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 8009b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ba0:	69f8      	ldr	r0, [r7, #28]
 8009ba2:	f006 fb07 	bl	80101b4 <_fx_utility_FAT_entry_read>
 8009ba6:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	e19f      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 8009bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d907      	bls.n	8009bcc <_fx_directory_entry_read+0x3dc>
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009bc2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d301      	bcc.n	8009bd0 <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 8009bcc:	2308      	movs	r3, #8
 8009bce:	e190      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 8009bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be0:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 8009be2:	69f9      	ldr	r1, [r7, #28]
 8009be4:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009be6:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009bea:	4413      	add	r3, r2
 8009bec:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 8009bee:	e00c      	b.n	8009c0a <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 8009bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	4413      	add	r3, r2
 8009c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d301      	bcc.n	8009c0a <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 8009c06:	2308      	movs	r3, #8
 8009c08:	e173      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	469a      	mov	sl, r3
 8009c10:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 8009c16:	2203      	movs	r2, #3
 8009c18:	9202      	str	r2, [sp, #8]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	9201      	str	r2, [sp, #4]
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	69f8      	ldr	r0, [r7, #28]
 8009c26:	f007 fed3 	bl	80119d0 <_fx_utility_logical_sector_read>
 8009c2a:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 8009c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c34:	e15d      	b.n	8009ef2 <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	647b      	str	r3, [r7, #68]	; 0x44
 8009c3a:	e002      	b.n	8009c42 <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 8009c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3e:	3320      	adds	r3, #32
 8009c40:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c48:	4413      	add	r3, r2
 8009c4a:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	3301      	adds	r3, #1
 8009c50:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f47f af12 	bne.w	8009a7e <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	615a      	str	r2, [r3, #20]
 8009c60:	e001      	b.n	8009c66 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 8009c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d102      	bne.n	8009c72 <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 8009c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	667b      	str	r3, [r7, #100]	; 0x64
 8009c80:	2300      	movs	r3, #0
 8009c82:	663b      	str	r3, [r7, #96]	; 0x60
 8009c84:	e03d      	b.n	8009d02 <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 8009c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8a:	4413      	add	r3, r2
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d03b      	beq.n	8009d0a <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 8009c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c96:	4413      	add	r3, r2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009c9c:	d101      	bne.n	8009ca2 <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 8009ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ca6:	4413      	add	r3, r2
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d105      	bne.n	8009cba <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 8009cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d122      	bne.n	8009cfa <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 8009cb8:	e01f      	b.n	8009cfa <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 8009cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d104      	bne.n	8009cca <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 8009cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 8009cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d108      	bne.n	8009ce2 <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 8009cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	663a      	str	r2, [r7, #96]	; 0x60
 8009cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cd8:	4413      	add	r3, r2
 8009cda:	222e      	movs	r2, #46	; 0x2e
 8009cdc:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 8009cde:	2302      	movs	r3, #2
 8009ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 8009ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce6:	441a      	add	r2, r3
 8009ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cec:	440b      	add	r3, r1
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 8009cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8009cf8:	e000      	b.n	8009cfc <_fx_directory_entry_read+0x50c>
            continue;
 8009cfa:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 8009cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cfe:	3301      	adds	r3, #1
 8009d00:	667b      	str	r3, [r7, #100]	; 0x64
 8009d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d04:	2b0a      	cmp	r3, #10
 8009d06:	d9be      	bls.n	8009c86 <_fx_directory_entry_read+0x496>
 8009d08:	e000      	b.n	8009d0c <_fx_directory_entry_read+0x51c>
            break;
 8009d0a:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <_fx_directory_entry_read+0x53a>
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2be5      	cmp	r3, #229	; 0xe5
 8009d1a:	d106      	bne.n	8009d2a <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	22e5      	movs	r2, #229	; 0xe5
 8009d22:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 8009d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d114      	bne.n	8009d5c <_fx_directory_entry_read+0x56c>
 8009d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	d110      	bne.n	8009d5c <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8009d3e:	e00a      	b.n	8009d56 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 8009d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d44:	441a      	add	r2, r3
 8009d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d4a:	440b      	add	r3, r1
 8009d4c:	7812      	ldrb	r2, [r2, #0]
 8009d4e:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 8009d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d52:	3301      	adds	r3, #1
 8009d54:	663b      	str	r3, [r7, #96]	; 0x60
 8009d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d58:	2b0a      	cmp	r3, #10
 8009d5a:	d9f1      	bls.n	8009d40 <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 8009d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 8009d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d68:	330b      	adds	r3, #11
 8009d6a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 8009d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	643a      	str	r2, [r7, #64]	; 0x40
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 8009d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 8009d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d02a      	beq.n	8009de0 <_fx_directory_entry_read+0x5f0>
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	7f5b      	ldrb	r3, [r3, #29]
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d024      	beq.n	8009de0 <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009d96:	2300      	movs	r3, #0
 8009d98:	663b      	str	r3, [r7, #96]	; 0x60
 8009d9a:	e018      	b.n	8009dce <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 8009d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009da0:	4413      	add	r3, r2
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	d90f      	bls.n	8009dc8 <_fx_directory_entry_read+0x5d8>
 8009da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dac:	4413      	add	r3, r2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b5a      	cmp	r3, #90	; 0x5a
 8009db2:	d809      	bhi.n	8009dc8 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 8009db4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009db8:	4413      	add	r3, r2
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3220      	adds	r2, #32
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 8009dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dca:	3301      	adds	r3, #1
 8009dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8009dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd0:	2b0b      	cmp	r3, #11
 8009dd2:	d805      	bhi.n	8009de0 <_fx_directory_entry_read+0x5f0>
 8009dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd8:	4413      	add	r3, r2
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1dd      	bne.n	8009d9c <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 8009de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	643a      	str	r2, [r7, #64]	; 0x40
 8009de6:	781a      	ldrb	r2, [r3, #0]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009dec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009dee:	f006 f97b 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009df2:	4602      	mov	r2, r0
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009dfe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e00:	f006 f972 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e12:	f006 f969 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e16:	4602      	mov	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1e:	3302      	adds	r3, #2
 8009e20:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00b      	beq.n	8009e42 <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 8009e2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e2c:	f006 f95c 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e30:	4602      	mov	r2, r0
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	041a      	lsls	r2, r3, #16
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8009e40:	e002      	b.n	8009e48 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2200      	movs	r2, #0
 8009e46:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4a:	3302      	adds	r3, #2
 8009e4c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 8009e4e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e50:	f006 f94a 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e54:	4602      	mov	r2, r0
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 8009e60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e62:	f006 f941 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e66:	4602      	mov	r2, r0
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6e:	3302      	adds	r3, #2
 8009e70:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 8009e72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e74:	f006 f938 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7e:	441a      	add	r2, r3
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 8009e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e86:	3302      	adds	r3, #2
 8009e88:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 8009e8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009e8c:	f006 f954 	bl	8010138 <_fx_utility_32_unsigned_read>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2200      	movs	r2, #0
 8009e94:	461c      	mov	r4, r3
 8009e96:	4615      	mov	r5, r2
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 8009eaa:	6939      	ldr	r1, [r7, #16]
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec8:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00f      	beq.n	8009ef0 <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ed4:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009eda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009ee2:	69b9      	ldr	r1, [r7, #24]
 8009ee4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3768      	adds	r7, #104	; 0x68
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009efc <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 8009efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f00:	b0a2      	sub	sp, #136	; 0x88
 8009f02:	af04      	add	r7, sp, #16
 8009f04:	6178      	str	r0, [r7, #20]
 8009f06:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2be5      	cmp	r3, #229	; 0xe5
 8009f1e:	d109      	bne.n	8009f34 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 8009f24:	2be5      	cmp	r3, #229	; 0xe5
 8009f26:	d105      	bne.n	8009f34 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	711a      	strb	r2, [r3, #4]
 8009f32:	e001      	b.n	8009f38 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009f44:	4613      	mov	r3, r2
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d316      	bcc.n	8009f80 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f58:	1ad2      	subs	r2, r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f62:	3302      	adds	r3, #2
 8009f64:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 8009f6e:	6979      	ldr	r1, [r7, #20]
 8009f70:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 8009f76:	4413      	add	r3, r2
 8009f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f7e:	e003      	b.n	8009f88 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 8009f92:	2303      	movs	r3, #3
 8009f94:	9302      	str	r3, [sp, #8]
 8009f96:	2301      	movs	r3, #1
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	9200      	str	r2, [sp, #0]
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	6978      	ldr	r0, [r7, #20]
 8009fa2:	f007 fd15 	bl	80119d0 <_fx_utility_logical_sector_read>
 8009fa6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	f000 bdda 	b.w	800ab68 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009fc0:	4413      	add	r3, r2
 8009fc2:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 83cc 	beq.w	800a766 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 8009fce:	2300      	movs	r3, #0
 8009fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fda:	2300      	movs	r3, #0
 8009fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fde:	e02c      	b.n	800a03a <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe6:	4413      	add	r3, r2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b2e      	cmp	r3, #46	; 0x2e
 8009fec:	d108      	bne.n	800a000 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 8009fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01e      	beq.n	800a032 <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 8009ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 8009ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 8009ffe:	e019      	b.n	800a034 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a006:	4413      	add	r3, r2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d012      	beq.n	800a034 <_fx_directory_entry_write+0x138>
 800a00e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a010:	2b07      	cmp	r3, #7
 800a012:	d80f      	bhi.n	800a034 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01a:	4413      	add	r3, r2
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	f107 021c 	add.w	r2, r7, #28
 800a022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a024:	4413      	add	r3, r2
 800a026:	460a      	mov	r2, r1
 800a028:	701a      	strb	r2, [r3, #0]
                i++;
 800a02a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a02c:	3301      	adds	r3, #1
 800a02e:	667b      	str	r3, [r7, #100]	; 0x64
 800a030:	e000      	b.n	800a034 <_fx_directory_entry_write+0x138>
                    continue;
 800a032:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a036:	3301      	adds	r3, #1
 800a038:	653b      	str	r3, [r7, #80]	; 0x50
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a040:	4413      	add	r3, r2
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1cb      	bne.n	8009fe0 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a04a:	663b      	str	r3, [r7, #96]	; 0x60
 800a04c:	e008      	b.n	800a060 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a04e:	f107 021c 	add.w	r2, r7, #28
 800a052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a054:	4413      	add	r3, r2
 800a056:	2220      	movs	r2, #32
 800a058:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a05a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a05c:	3301      	adds	r3, #1
 800a05e:	663b      	str	r3, [r7, #96]	; 0x60
 800a060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a062:	2b0a      	cmp	r3, #10
 800a064:	d9f3      	bls.n	800a04e <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03e      	beq.n	800a0ea <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a072:	4413      	add	r3, r2
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d008      	beq.n	800a08c <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a080:	1c59      	adds	r1, r3, #1
 800a082:	64b9      	str	r1, [r7, #72]	; 0x48
 800a084:	4413      	add	r3, r2
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a092:	4413      	add	r3, r2
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d008      	beq.n	800a0ac <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a0:	1c59      	adds	r1, r3, #1
 800a0a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0a4:	4413      	add	r3, r2
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b2:	4413      	add	r3, r2
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c0:	1c59      	adds	r1, r3, #1
 800a0c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0c4:	4413      	add	r3, r2
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ce:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a0d0:	e008      	b.n	800a0e4 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a0d2:	f107 021c 	add.w	r2, r7, #28
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d8:	4413      	add	r3, r2
 800a0da:	2220      	movs	r2, #32
 800a0dc:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	d9f3      	bls.n	800a0d2 <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a0ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0ec:	4b8e      	ldr	r3, [pc, #568]	; (800a328 <_fx_directory_entry_write+0x42c>)
 800a0ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a0f2:	089a      	lsrs	r2, r3, #2
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	1aca      	subs	r2, r1, r3
 800a100:	2a00      	cmp	r2, #0
 800a102:	d106      	bne.n	800a112 <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a106:	4a88      	ldr	r2, [pc, #544]	; (800a328 <_fx_directory_entry_write+0x42c>)
 800a108:	fba2 2303 	umull	r2, r3, r2, r3
 800a10c:	089b      	lsrs	r3, r3, #2
 800a10e:	657b      	str	r3, [r7, #84]	; 0x54
 800a110:	e006      	b.n	800a120 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a114:	4a84      	ldr	r2, [pc, #528]	; (800a328 <_fx_directory_entry_write+0x42c>)
 800a116:	fba2 2303 	umull	r2, r3, r2, r3
 800a11a:	089b      	lsrs	r3, r3, #2
 800a11c:	3301      	adds	r3, #1
 800a11e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a124:	2300      	movs	r3, #0
 800a126:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a128:	2300      	movs	r3, #0
 800a12a:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a12c:	e03f      	b.n	800a1ae <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a12e:	f107 021c 	add.w	r2, r7, #28
 800a132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b20      	cmp	r3, #32
 800a13a:	d116      	bne.n	800a16a <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a142:	4413      	add	r3, r2
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d035      	beq.n	800a1b6 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a150:	4413      	add	r3, r2
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b2e      	cmp	r3, #46	; 0x2e
 800a156:	d002      	beq.n	800a15e <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a158:	2300      	movs	r3, #0
 800a15a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a15c:	e02c      	b.n	800a1b8 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a15e:	2308      	movs	r3, #8
 800a160:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a164:	3301      	adds	r3, #1
 800a166:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a168:	e021      	b.n	800a1ae <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a16a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d109      	bne.n	800a184 <_fx_directory_entry_write+0x288>
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a176:	4413      	add	r3, r2
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b2e      	cmp	r3, #46	; 0x2e
 800a17c:	d102      	bne.n	800a184 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a17e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a180:	3301      	adds	r3, #1
 800a182:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800a184:	f107 021c 	add.w	r2, r7, #28
 800a188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a18a:	4413      	add	r3, r2
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6819      	ldr	r1, [r3, #0]
 800a192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a194:	440b      	add	r3, r1
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d002      	beq.n	800a1a2 <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800a19c:	2300      	movs	r3, #0
 800a19e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800a1a0:	e00a      	b.n	800a1b8 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800a1a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800a1a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b0:	2b0a      	cmp	r3, #10
 800a1b2:	d9bc      	bls.n	800a12e <_fx_directory_entry_write+0x232>
 800a1b4:	e000      	b.n	800a1b8 <_fx_directory_entry_write+0x2bc>
                    break;
 800a1b6:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800a1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <_fx_directory_entry_write+0x2ce>
 800a1be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d101      	bne.n	800a1ca <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1d0:	4413      	add	r3, r2
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800a1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d15a      	bne.n	800a298 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800a1ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d901      	bls.n	800a1f8 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800a1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	667a      	str	r2, [r7, #100]	; 0x64
 800a1fe:	3368      	adds	r3, #104	; 0x68
 800a200:	f107 0210 	add.w	r2, r7, #16
 800a204:	4413      	add	r3, r2
 800a206:	227e      	movs	r2, #126	; 0x7e
 800a208:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a210:	e03f      	b.n	800a292 <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800a212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a214:	2b00      	cmp	r3, #0
 800a216:	d105      	bne.n	800a224 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	0b1b      	lsrs	r3, r3, #12
 800a21c:	f003 030f 	and.w	r3, r3, #15
 800a220:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a222:	e015      	b.n	800a250 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800a224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a226:	2b01      	cmp	r3, #1
 800a228:	d105      	bne.n	800a236 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	0a1b      	lsrs	r3, r3, #8
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a234:	e00c      	b.n	800a250 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800a236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d105      	bne.n	800a248 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	091b      	lsrs	r3, r3, #4
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a246:	e003      	b.n	800a250 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	f003 030f 	and.w	r3, r3, #15
 800a24e:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800a250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a252:	2b09      	cmp	r3, #9
 800a254:	d90d      	bls.n	800a272 <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800a256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a25c:	1c59      	adds	r1, r3, #1
 800a25e:	6679      	str	r1, [r7, #100]	; 0x64
 800a260:	3237      	adds	r2, #55	; 0x37
 800a262:	b2d2      	uxtb	r2, r2
 800a264:	3368      	adds	r3, #104	; 0x68
 800a266:	f107 0110 	add.w	r1, r7, #16
 800a26a:	440b      	add	r3, r1
 800a26c:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800a270:	e00c      	b.n	800a28c <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800a272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a274:	b2da      	uxtb	r2, r3
 800a276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a278:	1c59      	adds	r1, r3, #1
 800a27a:	6679      	str	r1, [r7, #100]	; 0x64
 800a27c:	3230      	adds	r2, #48	; 0x30
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	3368      	adds	r3, #104	; 0x68
 800a282:	f107 0110 	add.w	r1, r7, #16
 800a286:	440b      	add	r3, r1
 800a288:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800a28c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a28e:	3301      	adds	r3, #1
 800a290:	65bb      	str	r3, [r7, #88]	; 0x58
 800a292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a294:	2b03      	cmp	r3, #3
 800a296:	d9bc      	bls.n	800a212 <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800a29e:	7f3b      	ldrb	r3, [r7, #28]
 800a2a0:	2be5      	cmp	r3, #229	; 0xe5
 800a2a2:	d104      	bne.n	800a2ae <_fx_directory_entry_write+0x3b2>
 800a2a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800a2aa:	238f      	movs	r3, #143	; 0x8f
 800a2ac:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	667b      	str	r3, [r7, #100]	; 0x64
 800a2b2:	e01d      	b.n	800a2f0 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800a2b4:	f107 021c 	add.w	r2, r7, #28
 800a2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ba:	4413      	add	r3, r2
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800a2c2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a2c6:	2b60      	cmp	r3, #96	; 0x60
 800a2c8:	d908      	bls.n	800a2dc <_fx_directory_entry_write+0x3e0>
 800a2ca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a2ce:	2b7a      	cmp	r3, #122	; 0x7a
 800a2d0:	d804      	bhi.n	800a2dc <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a2d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a2d6:	3b20      	subs	r3, #32
 800a2d8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800a2dc:	f107 021c 	add.w	r2, r7, #28
 800a2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a2e8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a2ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a2f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f2:	2b0a      	cmp	r3, #10
 800a2f4:	d9de      	bls.n	800a2b4 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8095 	beq.w	800a42a <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a300:	2300      	movs	r3, #0
 800a302:	667b      	str	r3, [r7, #100]	; 0x64
 800a304:	e008      	b.n	800a318 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800a306:	f107 021c 	add.w	r2, r7, #28
 800a30a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a30c:	4413      	add	r3, r2
 800a30e:	2220      	movs	r2, #32
 800a310:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a314:	3301      	adds	r3, #1
 800a316:	667b      	str	r3, [r7, #100]	; 0x64
 800a318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a31a:	2b0a      	cmp	r3, #10
 800a31c:	d9f3      	bls.n	800a306 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a31e:	2300      	movs	r3, #0
 800a320:	667b      	str	r3, [r7, #100]	; 0x64
 800a322:	2300      	movs	r3, #0
 800a324:	663b      	str	r3, [r7, #96]	; 0x60
 800a326:	e023      	b.n	800a370 <_fx_directory_entry_write+0x474>
 800a328:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a330:	4413      	add	r3, r2
 800a332:	3304      	adds	r3, #4
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b2e      	cmp	r3, #46	; 0x2e
 800a338:	d01e      	beq.n	800a378 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a33e:	4413      	add	r3, r2
 800a340:	3304      	adds	r3, #4
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d019      	beq.n	800a37c <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a34c:	4413      	add	r3, r2
 800a34e:	3304      	adds	r3, #4
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a356:	f107 021c 	add.w	r2, r7, #28
 800a35a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a35c:	4413      	add	r3, r2
 800a35e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a362:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a366:	3301      	adds	r3, #1
 800a368:	667b      	str	r3, [r7, #100]	; 0x64
 800a36a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a36c:	3301      	adds	r3, #1
 800a36e:	663b      	str	r3, [r7, #96]	; 0x60
 800a370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a372:	2b07      	cmp	r3, #7
 800a374:	d9da      	bls.n	800a32c <_fx_directory_entry_write+0x430>
 800a376:	e002      	b.n	800a37e <_fx_directory_entry_write+0x482>
                    break;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <_fx_directory_entry_write+0x482>
                    break;
 800a37c:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a382:	4413      	add	r3, r2
 800a384:	3304      	adds	r3, #4
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d025      	beq.n	800a3d8 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a38e:	3301      	adds	r3, #1
 800a390:	667b      	str	r3, [r7, #100]	; 0x64
 800a392:	2308      	movs	r3, #8
 800a394:	663b      	str	r3, [r7, #96]	; 0x60
 800a396:	e01a      	b.n	800a3ce <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a39c:	4413      	add	r3, r2
 800a39e:	3304      	adds	r3, #4
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d017      	beq.n	800a3d6 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3aa:	4413      	add	r3, r2
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800a3b4:	f107 021c 	add.w	r2, r7, #28
 800a3b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a3c0:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3d0:	2b0a      	cmp	r3, #10
 800a3d2:	d9e1      	bls.n	800a398 <_fx_directory_entry_write+0x49c>
 800a3d4:	e000      	b.n	800a3d8 <_fx_directory_entry_write+0x4dc>
                        break;
 800a3d6:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	663b      	str	r3, [r7, #96]	; 0x60
 800a3dc:	e01d      	b.n	800a41a <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800a3de:	f107 021c 	add.w	r2, r7, #28
 800a3e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3e4:	4413      	add	r3, r2
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a3ec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3f0:	2b60      	cmp	r3, #96	; 0x60
 800a3f2:	d908      	bls.n	800a406 <_fx_directory_entry_write+0x50a>
 800a3f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3f8:	2b7a      	cmp	r3, #122	; 0x7a
 800a3fa:	d804      	bhi.n	800a406 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a3fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a400:	3b20      	subs	r3, #32
 800a402:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a406:	f107 021c 	add.w	r2, r7, #28
 800a40a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a40c:	4413      	add	r3, r2
 800a40e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a412:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a416:	3301      	adds	r3, #1
 800a418:	663b      	str	r3, [r7, #96]	; 0x60
 800a41a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d9de      	bls.n	800a3de <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800a420:	7f3b      	ldrb	r3, [r7, #28]
 800a422:	2be5      	cmp	r3, #229	; 0xe5
 800a424:	d101      	bne.n	800a42a <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800a426:	238f      	movs	r3, #143	; 0x8f
 800a428:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a430:	2300      	movs	r3, #0
 800a432:	667b      	str	r3, [r7, #100]	; 0x64
 800a434:	e016      	b.n	800a464 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800a436:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a43a:	01db      	lsls	r3, r3, #7
 800a43c:	b25a      	sxtb	r2, r3
 800a43e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	b2db      	uxtb	r3, r3
 800a446:	b25b      	sxtb	r3, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	f107 011c 	add.w	r1, r7, #28
 800a452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a454:	440b      	add	r3, r1
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	4413      	add	r3, r2
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a45e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a460:	3301      	adds	r3, #1
 800a462:	667b      	str	r3, [r7, #100]	; 0x64
 800a464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a466:	2b0a      	cmp	r3, #10
 800a468:	d9e5      	bls.n	800a436 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800a46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a472:	b2da      	uxtb	r2, r3
 800a474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a476:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800a478:	e0f3      	b.n	800a662 <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800a47a:	2300      	movs	r3, #0
 800a47c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a480:	7f3b      	ldrb	r3, [r7, #28]
 800a482:	2be5      	cmp	r3, #229	; 0xe5
 800a484:	d102      	bne.n	800a48c <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a488:	22e5      	movs	r2, #229	; 0xe5
 800a48a:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800a48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a48e:	330b      	adds	r3, #11
 800a490:	220f      	movs	r2, #15
 800a492:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800a494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a496:	330c      	adds	r3, #12
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800a49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a49e:	330d      	adds	r3, #13
 800a4a0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a4a4:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800a4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4a8:	331a      	adds	r3, #26
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800a4ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b0:	331b      	adds	r3, #27
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a4ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4bc:	4613      	mov	r3, r2
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3b0d      	subs	r3, #13
 800a4c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a4ca:	e03e      	b.n	800a54a <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800a4cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ce:	2b0b      	cmp	r3, #11
 800a4d0:	d037      	beq.n	800a542 <_fx_directory_entry_write+0x646>
 800a4d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4d4:	2b1a      	cmp	r3, #26
 800a4d6:	d034      	beq.n	800a542 <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800a4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4da:	2b0d      	cmp	r3, #13
 800a4dc:	d102      	bne.n	800a4e4 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800a4de:	230c      	movs	r3, #12
 800a4e0:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800a4e2:	e02f      	b.n	800a544 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800a4e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00d      	beq.n	800a508 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800a4ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a4ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a4f6:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800a4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a4fe:	4413      	add	r3, r2
 800a500:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	e00e      	b.n	800a526 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a50e:	441a      	add	r2, r3
 800a510:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a514:	440b      	add	r3, r1
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800a51a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a51c:	3301      	adds	r3, #1
 800a51e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a520:	4413      	add	r3, r2
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a52c:	4413      	add	r3, r2
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800a534:	23ff      	movs	r3, #255	; 0xff
 800a536:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800a53a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a53c:	3301      	adds	r3, #1
 800a53e:	663b      	str	r3, [r7, #96]	; 0x60
 800a540:	e000      	b.n	800a544 <_fx_directory_entry_write+0x648>
                    continue;
 800a542:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a546:	3302      	adds	r3, #2
 800a548:	667b      	str	r3, [r7, #100]	; 0x64
 800a54a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a54c:	2b1f      	cmp	r3, #31
 800a54e:	d9bd      	bls.n	800a4cc <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800a550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a552:	3320      	adds	r3, #32
 800a554:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a558:	3320      	adds	r3, #32
 800a55a:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a562:	429a      	cmp	r2, r3
 800a564:	d376      	bcc.n	800a654 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a568:	2200      	movs	r2, #0
 800a56a:	60bb      	str	r3, [r7, #8]
 800a56c:	60fa      	str	r2, [r7, #12]
 800a56e:	2303      	movs	r3, #3
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	2301      	movs	r3, #1
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a57e:	6978      	ldr	r0, [r7, #20]
 800a580:	f007 fcba 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800a584:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	e2eb      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a596:	429a      	cmp	r2, r3
 800a598:	d335      	bcc.n	800a606 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d206      	bcs.n	800a5b4 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5b2:	e032      	b.n	800a61a <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a5b4:	f107 0318 	add.w	r3, r7, #24
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5bc:	6978      	ldr	r0, [r7, #20]
 800a5be:	f005 fdf9 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800a5c2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	e2cc      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d907      	bls.n	800a5e8 <_fx_directory_entry_write+0x6ec>
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a5de:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d301      	bcc.n	800a5ec <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	e2bd      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a5f8:	6979      	ldr	r1, [r7, #20]
 800a5fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a5fc:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a600:	4413      	add	r3, r2
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a604:	e009      	b.n	800a61a <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	3301      	adds	r3, #1
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a612:	429a      	cmp	r2, r3
 800a614:	d301      	bcc.n	800a61a <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a616:	2308      	movs	r3, #8
 800a618:	e2a6      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61c:	2200      	movs	r2, #0
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a626:	2203      	movs	r2, #3
 800a628:	9202      	str	r2, [sp, #8]
 800a62a:	2201      	movs	r2, #1
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a634:	6978      	ldr	r0, [r7, #20]
 800a636:	f007 f9cb 	bl	80119d0 <_fx_utility_logical_sector_read>
 800a63a:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	e290      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800a650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a652:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800a654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a656:	3b01      	subs	r3, #1
 800a658:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800a65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a660:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800a662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a664:	2b00      	cmp	r3, #0
 800a666:	f47f af08 	bne.w	800a47a <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d116      	bne.n	800a6a0 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a672:	2300      	movs	r3, #0
 800a674:	667b      	str	r3, [r7, #100]	; 0x64
 800a676:	e00f      	b.n	800a698 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800a678:	f107 021c 	add.w	r2, r7, #28
 800a67c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67e:	4413      	add	r3, r2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800a686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	677a      	str	r2, [r7, #116]	; 0x74
 800a68c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a690:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a694:	3301      	adds	r3, #1
 800a696:	667b      	str	r3, [r7, #100]	; 0x64
 800a698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69a:	2b0a      	cmp	r3, #10
 800a69c:	d9ec      	bls.n	800a678 <_fx_directory_entry_write+0x77c>
 800a69e:	e1a5      	b.n	800a9ec <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	667b      	str	r3, [r7, #100]	; 0x64
 800a6a4:	e007      	b.n	800a6b6 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800a6a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6aa:	4413      	add	r3, r2
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a6b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	667b      	str	r3, [r7, #100]	; 0x64
 800a6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b8:	2b0a      	cmp	r3, #10
 800a6ba:	d9f4      	bls.n	800a6a6 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	667b      	str	r3, [r7, #100]	; 0x64
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	663b      	str	r3, [r7, #96]	; 0x60
 800a6c4:	e01c      	b.n	800a700 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ca:	4413      	add	r3, r2
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d2:	d019      	beq.n	800a708 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d8:	4413      	add	r3, r2
 800a6da:	3304      	adds	r3, #4
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d014      	beq.n	800a70c <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a6e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6e6:	4413      	add	r3, r2
 800a6e8:	6939      	ldr	r1, [r7, #16]
 800a6ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6ec:	440a      	add	r2, r1
 800a6ee:	3204      	adds	r2, #4
 800a6f0:	7812      	ldrb	r2, [r2, #0]
 800a6f2:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	663b      	str	r3, [r7, #96]	; 0x60
 800a700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a702:	2b07      	cmp	r3, #7
 800a704:	d9df      	bls.n	800a6c6 <_fx_directory_entry_write+0x7ca>
 800a706:	e002      	b.n	800a70e <_fx_directory_entry_write+0x812>
                    break;
 800a708:	bf00      	nop
 800a70a:	e000      	b.n	800a70e <_fx_directory_entry_write+0x812>
                    break;
 800a70c:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a712:	4413      	add	r3, r2
 800a714:	3304      	adds	r3, #4
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d020      	beq.n	800a75e <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a71e:	3301      	adds	r3, #1
 800a720:	667b      	str	r3, [r7, #100]	; 0x64
 800a722:	2308      	movs	r3, #8
 800a724:	663b      	str	r3, [r7, #96]	; 0x60
 800a726:	e015      	b.n	800a754 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a72c:	4413      	add	r3, r2
 800a72e:	3304      	adds	r3, #4
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d012      	beq.n	800a75c <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a736:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a73a:	4413      	add	r3, r2
 800a73c:	6939      	ldr	r1, [r7, #16]
 800a73e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a740:	440a      	add	r2, r1
 800a742:	3204      	adds	r2, #4
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74a:	3301      	adds	r3, #1
 800a74c:	667b      	str	r3, [r7, #100]	; 0x64
 800a74e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a750:	3301      	adds	r3, #1
 800a752:	663b      	str	r3, [r7, #96]	; 0x60
 800a754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a756:	2b0a      	cmp	r3, #10
 800a758:	d9e6      	bls.n	800a728 <_fx_directory_entry_write+0x82c>
 800a75a:	e000      	b.n	800a75e <_fx_directory_entry_write+0x862>
                        break;
 800a75c:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a760:	330b      	adds	r3, #11
 800a762:	677b      	str	r3, [r7, #116]	; 0x74
 800a764:	e142      	b.n	800a9ec <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80a1 	beq.w	800a8b2 <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	f040 8096 	bne.w	800a8b2 <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a786:	2300      	movs	r3, #0
 800a788:	663b      	str	r3, [r7, #96]	; 0x60
 800a78a:	e08c      	b.n	800a8a6 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2be5      	cmp	r3, #229	; 0xe5
 800a794:	d102      	bne.n	800a79c <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a798:	22e5      	movs	r2, #229	; 0xe5
 800a79a:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a79e:	3320      	adds	r3, #32
 800a7a0:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	3320      	adds	r3, #32
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d376      	bcc.n	800a8a0 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4698      	mov	r8, r3
 800a7b8:	4691      	mov	r9, r2
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	2301      	movs	r3, #1
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	6978      	ldr	r0, [r7, #20]
 800a7cc:	f007 fb94 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800a7d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	e1c5      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d335      	bcc.n	800a852 <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d206      	bcs.n	800a800 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7fe:	e032      	b.n	800a866 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a800:	f107 0318 	add.w	r3, r7, #24
 800a804:	461a      	mov	r2, r3
 800a806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a808:	6978      	ldr	r0, [r7, #20]
 800a80a:	f005 fcd3 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800a80e:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	e1a6      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	2b01      	cmp	r3, #1
 800a822:	d907      	bls.n	800a834 <_fx_directory_entry_write+0x938>
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a82a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a830:	429a      	cmp	r2, r3
 800a832:	d301      	bcc.n	800a838 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a834:	2308      	movs	r3, #8
 800a836:	e197      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a844:	6979      	ldr	r1, [r7, #20]
 800a846:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a848:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a84c:	4413      	add	r3, r2
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a850:	e009      	b.n	800a866 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a854:	3301      	adds	r3, #1
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a85e:	429a      	cmp	r2, r3
 800a860:	d301      	bcc.n	800a866 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a862:	2308      	movs	r3, #8
 800a864:	e180      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a868:	2200      	movs	r2, #0
 800a86a:	469a      	mov	sl, r3
 800a86c:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a872:	2203      	movs	r2, #3
 800a874:	9202      	str	r2, [sp, #8]
 800a876:	2201      	movs	r2, #1
 800a878:	9201      	str	r2, [sp, #4]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4652      	mov	r2, sl
 800a87e:	465b      	mov	r3, fp
 800a880:	6978      	ldr	r0, [r7, #20]
 800a882:	f007 f8a5 	bl	80119d0 <_fx_utility_logical_sector_read>
 800a886:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	e16a      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a898:	2300      	movs	r3, #0
 800a89a:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a89c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a89e:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	f4ff af6d 	bcc.w	800a78c <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b6:	e007      	b.n	800a8c8 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a8ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8bc:	4413      	add	r3, r2
 800a8be:	2220      	movs	r2, #32
 800a8c0:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a8c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8ca:	2b0a      	cmp	r3, #10
 800a8cc:	d9f4      	bls.n	800a8b8 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	667b      	str	r3, [r7, #100]	; 0x64
 800a8d2:	e007      	b.n	800a8e4 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a8d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a8d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8d8:	4413      	add	r3, r2
 800a8da:	222e      	movs	r2, #46	; 0x2e
 800a8dc:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a8de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	667b      	str	r3, [r7, #100]	; 0x64
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ea:	4413      	add	r3, r2
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f0:	d0f0      	beq.n	800a8d4 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f8:	4413      	add	r3, r2
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d039      	beq.n	800a974 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a900:	2300      	movs	r3, #0
 800a902:	667b      	str	r3, [r7, #100]	; 0x64
 800a904:	2300      	movs	r3, #0
 800a906:	663b      	str	r3, [r7, #96]	; 0x60
 800a908:	e02d      	b.n	800a966 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a910:	4413      	add	r3, r2
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b2e      	cmp	r3, #46	; 0x2e
 800a916:	d02a      	beq.n	800a96e <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a91e:	4413      	add	r3, r2
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d025      	beq.n	800a972 <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92c:	4413      	add	r3, r2
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a934:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a938:	2b60      	cmp	r3, #96	; 0x60
 800a93a:	d908      	bls.n	800a94e <_fx_directory_entry_write+0xa52>
 800a93c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a940:	2b7a      	cmp	r3, #122	; 0x7a
 800a942:	d804      	bhi.n	800a94e <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a944:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a948:	3b20      	subs	r3, #32
 800a94a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a94e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a952:	4413      	add	r3, r2
 800a954:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a958:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a95a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a95c:	3301      	adds	r3, #1
 800a95e:	667b      	str	r3, [r7, #100]	; 0x64
 800a960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a962:	3301      	adds	r3, #1
 800a964:	663b      	str	r3, [r7, #96]	; 0x60
 800a966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a968:	2b07      	cmp	r3, #7
 800a96a:	d9ce      	bls.n	800a90a <_fx_directory_entry_write+0xa0e>
 800a96c:	e002      	b.n	800a974 <_fx_directory_entry_write+0xa78>
                    break;
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <_fx_directory_entry_write+0xa78>
                    break;
 800a972:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a97a:	4413      	add	r3, r2
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d031      	beq.n	800a9e6 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a984:	3301      	adds	r3, #1
 800a986:	667b      	str	r3, [r7, #100]	; 0x64
 800a988:	2308      	movs	r3, #8
 800a98a:	663b      	str	r3, [r7, #96]	; 0x60
 800a98c:	e026      	b.n	800a9dc <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a994:	4413      	add	r3, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d023      	beq.n	800a9e4 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9a2:	4413      	add	r3, r2
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a9aa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9ae:	2b60      	cmp	r3, #96	; 0x60
 800a9b0:	d908      	bls.n	800a9c4 <_fx_directory_entry_write+0xac8>
 800a9b2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9b6:	2b7a      	cmp	r3, #122	; 0x7a
 800a9b8:	d804      	bhi.n	800a9c4 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a9ba:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a9be:	3b20      	subs	r3, #32
 800a9c0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800a9c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a9ce:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a9d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a9d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d8:	3301      	adds	r3, #1
 800a9da:	663b      	str	r3, [r7, #96]	; 0x60
 800a9dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9de:	2b0a      	cmp	r3, #10
 800a9e0:	d9d5      	bls.n	800a98e <_fx_directory_entry_write+0xa92>
 800a9e2:	e000      	b.n	800a9e6 <_fx_directory_entry_write+0xaea>
                    break;
 800a9e4:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9e8:	330b      	adds	r3, #11
 800a9ea:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800a9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	677a      	str	r2, [r7, #116]	; 0x74
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	7f12      	ldrb	r2, [r2, #28]
 800a9f6:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800a9f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	677a      	str	r2, [r7, #116]	; 0x74
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	7f52      	ldrb	r2, [r2, #29]
 800aa02:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800aa04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	677a      	str	r2, [r7, #116]	; 0x74
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	7f92      	ldrb	r2, [r2, #30]
 800aa0e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa18:	f005 fb79 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa1e:	3302      	adds	r3, #2
 800aa20:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	4619      	mov	r1, r3
 800aa28:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa2a:	f005 fb70 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa30:	3302      	adds	r3, #2
 800aa32:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa3c:	f005 fb67 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa42:	3302      	adds	r3, #2
 800aa44:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d008      	beq.n	800aa60 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800aa56:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa5a:	f005 fb58 	bl	801010e <_fx_utility_16_unsigned_write>
 800aa5e:	e003      	b.n	800aa68 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800aa60:	2100      	movs	r1, #0
 800aa62:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa64:	f005 fb53 	bl	801010e <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa6a:	3302      	adds	r3, #2
 800aa6c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa72:	4619      	mov	r1, r3
 800aa74:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa76:	f005 fb4a 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	4619      	mov	r1, r3
 800aa86:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa88:	f005 fb41 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa8e:	3302      	adds	r3, #2
 800aa90:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	4619      	mov	r1, r3
 800aa98:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa9a:	f005 fb38 	bl	801010e <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aa9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800aaaa:	4613      	mov	r3, r2
 800aaac:	4619      	mov	r1, r3
 800aaae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aab0:	f005 fb5f 	bl	8010172 <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800aab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab6:	2200      	movs	r2, #0
 800aab8:	461c      	mov	r4, r3
 800aaba:	4615      	mov	r5, r2
 800aabc:	2303      	movs	r3, #3
 800aabe:	9302      	str	r3, [sp, #8]
 800aac0:	2301      	movs	r3, #1
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	4622      	mov	r2, r4
 800aaca:	462b      	mov	r3, r5
 800aacc:	6978      	ldr	r0, [r7, #20]
 800aace:	f007 fa13 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800aad2:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	e044      	b.n	800ab68 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d03e      	beq.n	800ab66 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	bf08      	it	eq
 800aaf8:	4290      	cmpeq	r0, r2
 800aafa:	d134      	bne.n	800ab66 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d12d      	bne.n	800ab66 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ab1a:	6979      	ldr	r1, [r7, #20]
 800ab1c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	7f1a      	ldrb	r2, [r3, #28]
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	7f5a      	ldrb	r2, [r3, #29]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	7f9a      	ldrb	r2, [r3, #30]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	6a1a      	ldr	r2, [r3, #32]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3778      	adds	r7, #120	; 0x78
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop

0800ab74 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800ab74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab78:	b0a8      	sub	sp, #160	; 0xa0
 800ab7a:	af04      	add	r7, sp, #16
 800ab7c:	6278      	str	r0, [r7, #36]	; 0x24
 800ab7e:	6239      	str	r1, [r7, #32]
 800ab80:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab96:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b2e      	cmp	r3, #46	; 0x2e
 800aba6:	d108      	bne.n	800abba <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b2e      	cmp	r3, #46	; 0x2e
 800abb2:	d102      	bne.n	800abba <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800abb4:	230c      	movs	r3, #12
 800abb6:	f000 bc17 	b.w	800b3e8 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800abc6:	e13d      	b.n	800ae44 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abd0:	4413      	add	r3, r2
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	d908      	bls.n	800abea <_fx_directory_free_search+0x76>
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abe0:	4413      	add	r3, r2
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b5a      	cmp	r3, #90	; 0x5a
 800abe6:	f240 8121 	bls.w	800ae2c <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abf2:	4413      	add	r3, r2
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b2f      	cmp	r3, #47	; 0x2f
 800abf8:	d908      	bls.n	800ac0c <_fx_directory_free_search+0x98>
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac02:	4413      	add	r3, r2
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b39      	cmp	r3, #57	; 0x39
 800ac08:	f240 8112 	bls.w	800ae30 <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac14:	4413      	add	r3, r2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b60      	cmp	r3, #96	; 0x60
 800ac1a:	d90b      	bls.n	800ac34 <_fx_directory_free_search+0xc0>
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b7a      	cmp	r3, #122	; 0x7a
 800ac2a:	d803      	bhi.n	800ac34 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	615a      	str	r2, [r3, #20]
 800ac32:	e102      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac3c:	4413      	add	r3, r2
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d103      	bne.n	800ac4c <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	2201      	movs	r2, #1
 800ac48:	615a      	str	r2, [r3, #20]
 800ac4a:	e0f6      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac54:	4413      	add	r3, r2
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b2e      	cmp	r3, #46	; 0x2e
 800ac5a:	d114      	bne.n	800ac86 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800ac5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10c      	bne.n	800ac7e <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800ac64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800ac6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f040 80e2 	bne.w	800ae3a <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	615a      	str	r2, [r3, #20]
 800ac7c:	e0dd      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	2201      	movs	r2, #1
 800ac82:	615a      	str	r2, [r3, #20]
 800ac84:	e0d9      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2be5      	cmp	r3, #229	; 0xe5
 800ac94:	d103      	bne.n	800ac9e <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	615a      	str	r2, [r3, #20]
 800ac9c:	e0cd      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aca6:	4413      	add	r3, r2
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	b25b      	sxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	f2c0 80c1 	blt.w	800ae34 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acba:	4413      	add	r3, r2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b7e      	cmp	r3, #126	; 0x7e
 800acc0:	f000 80ba 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800accc:	4413      	add	r3, r2
 800acce:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800acd0:	2b2d      	cmp	r3, #45	; 0x2d
 800acd2:	f000 80b1 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acde:	4413      	add	r3, r2
 800ace0:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800ace2:	2b5f      	cmp	r3, #95	; 0x5f
 800ace4:	f000 80a8 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acf0:	4413      	add	r3, r2
 800acf2:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800acf4:	2b7d      	cmp	r3, #125	; 0x7d
 800acf6:	f000 809f 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad02:	4413      	add	r3, r2
 800ad04:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800ad06:	2b7b      	cmp	r3, #123	; 0x7b
 800ad08:	f000 8096 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad14:	4413      	add	r3, r2
 800ad16:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800ad18:	2b28      	cmp	r3, #40	; 0x28
 800ad1a:	f000 808d 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad26:	4413      	add	r3, r2
 800ad28:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800ad2a:	2b29      	cmp	r3, #41	; 0x29
 800ad2c:	f000 8084 	beq.w	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad38:	4413      	add	r3, r2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800ad3c:	2b60      	cmp	r3, #96	; 0x60
 800ad3e:	d07b      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800ad4c:	2b27      	cmp	r3, #39	; 0x27
 800ad4e:	d073      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad58:	4413      	add	r3, r2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800ad5c:	2b21      	cmp	r3, #33	; 0x21
 800ad5e:	d06b      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad68:	4413      	add	r3, r2
 800ad6a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800ad6c:	2b23      	cmp	r3, #35	; 0x23
 800ad6e:	d063      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad78:	4413      	add	r3, r2
 800ad7a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800ad7c:	2b24      	cmp	r3, #36	; 0x24
 800ad7e:	d05b      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad88:	4413      	add	r3, r2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800ad8c:	2b26      	cmp	r3, #38	; 0x26
 800ad8e:	d053      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad98:	4413      	add	r3, r2
 800ad9a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800ad9c:	2b40      	cmp	r3, #64	; 0x40
 800ad9e:	d04b      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ada8:	4413      	add	r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800adac:	2b5e      	cmp	r3, #94	; 0x5e
 800adae:	d043      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb8:	4413      	add	r3, r2
 800adba:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800adbc:	2b25      	cmp	r3, #37	; 0x25
 800adbe:	d03b      	beq.n	800ae38 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc8:	4413      	add	r3, r2
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b2b      	cmp	r3, #43	; 0x2b
 800adce:	d027      	beq.n	800ae20 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800add8:	4413      	add	r3, r2
 800adda:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800addc:	2b2c      	cmp	r3, #44	; 0x2c
 800adde:	d01f      	beq.n	800ae20 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ade8:	4413      	add	r3, r2
 800adea:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800adec:	2b3b      	cmp	r3, #59	; 0x3b
 800adee:	d017      	beq.n	800ae20 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf8:	4413      	add	r3, r2
 800adfa:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800adfc:	2b3d      	cmp	r3, #61	; 0x3d
 800adfe:	d00f      	beq.n	800ae20 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae08:	4413      	add	r3, r2
 800ae0a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800ae0c:	2b5b      	cmp	r3, #91	; 0x5b
 800ae0e:	d007      	beq.n	800ae20 <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae18:	4413      	add	r3, r2
 800ae1a:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800ae1c:	2b5d      	cmp	r3, #93	; 0x5d
 800ae1e:	d103      	bne.n	800ae28 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	2201      	movs	r2, #1
 800ae24:	615a      	str	r2, [r3, #20]
 800ae26:	e008      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800ae28:	230c      	movs	r3, #12
 800ae2a:	e2dd      	b.n	800b3e8 <_fx_directory_free_search+0x874>
            continue;
 800ae2c:	bf00      	nop
 800ae2e:	e004      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
            continue;
 800ae30:	bf00      	nop
 800ae32:	e002      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
            continue;
 800ae34:	bf00      	nop
 800ae36:	e000      	b.n	800ae3a <_fx_directory_free_search+0x2c6>
            continue;
 800ae38:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800ae3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae4c:	4413      	add	r3, r2
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f47f aeb9 	bne.w	800abc8 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800ae56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800ae5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ae62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d902      	bls.n	800ae72 <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800ae72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae76:	2b0c      	cmp	r3, #12
 800ae78:	d818      	bhi.n	800aeac <_fx_directory_free_search+0x338>
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d114      	bne.n	800aeac <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800ae88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d806      	bhi.n	800ae9e <_fx_directory_free_search+0x32a>
 800ae90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ae94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d928      	bls.n	800aef0 <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	2201      	movs	r2, #1
 800aea2:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800aea4:	2302      	movs	r3, #2
 800aea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800aeaa:	e021      	b.n	800aef0 <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800aeac:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800aeb0:	4b95      	ldr	r3, [pc, #596]	; (800b108 <_fx_directory_free_search+0x594>)
 800aeb2:	fba3 2301 	umull	r2, r3, r3, r1
 800aeb6:	089a      	lsrs	r2, r3, #2
 800aeb8:	4613      	mov	r3, r2
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	1aca      	subs	r2, r1, r3
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d109      	bne.n	800aedc <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800aec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aecc:	4a8e      	ldr	r2, [pc, #568]	; (800b108 <_fx_directory_free_search+0x594>)
 800aece:	fba2 2303 	umull	r2, r3, r2, r3
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	3301      	adds	r3, #1
 800aed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeda:	e00a      	b.n	800aef2 <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800aedc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aee0:	4a89      	ldr	r2, [pc, #548]	; (800b108 <_fx_directory_free_search+0x594>)
 800aee2:	fba2 2303 	umull	r2, r3, r2, r3
 800aee6:	089b      	lsrs	r3, r3, #2
 800aee8:	3302      	adds	r3, #2
 800aeea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeee:	e000      	b.n	800aef2 <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800aef0:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00c      	beq.n	800af16 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800af02:	4613      	mov	r3, r2
 800af04:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800af0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af0c:	2200      	movs	r2, #0
 800af0e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800af10:	2302      	movs	r3, #2
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af14:	e006      	b.n	800af24 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af1a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800af20:	2300      	movs	r3, #0
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800af24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af26:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800af28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af32:	f7fe fc5d 	bl	80097f0 <_fx_directory_entry_read>
 800af36:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800af38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800af3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af40:	e252      	b.n	800b3e8 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2be5      	cmp	r3, #229	; 0xe5
 800af4a:	d103      	bne.n	800af54 <_fx_directory_free_search+0x3e0>
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	791b      	ldrb	r3, [r3, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d16b      	bne.n	800b036 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800af5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af62:	2b01      	cmp	r3, #1
 800af64:	d91a      	bls.n	800af9c <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d115      	bne.n	800af9c <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	2200      	movs	r2, #0
 800af74:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	23e5      	movs	r3, #229	; 0xe5
 800af7c:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	2300      	movs	r3, #0
 800af86:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af8c:	f7fe ffb6 	bl	8009efc <_fx_directory_entry_write>
 800af90:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800af98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9a:	e225      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800af9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d109      	bne.n	800afb8 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa6:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800afae:	4613      	mov	r3, r2
 800afb0:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb6:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800afb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	3301      	adds	r3, #1
 800afc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d838      	bhi.n	800b03a <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800afc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afca:	2200      	movs	r2, #0
 800afcc:	461c      	mov	r4, r3
 800afce:	4615      	mov	r5, r2
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800afda:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2200      	movs	r2, #0
 800afe0:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	2200      	movs	r2, #0
 800afe6:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afe8:	f3ef 8310 	mrs	r3, PRIMASK
 800afec:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800aff0:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800aff2:	b672      	cpsid	i
#endif
    return(int_posture);
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800aff6:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800aff8:	4b44      	ldr	r3, [pc, #272]	; (800b10c <_fx_directory_free_search+0x598>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800b000:	4b43      	ldr	r3, [pc, #268]	; (800b110 <_fx_directory_free_search+0x59c>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b008:	4b41      	ldr	r3, [pc, #260]	; (800b110 <_fx_directory_free_search+0x59c>)
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	629a      	str	r2, [r3, #40]	; 0x28
 800b010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b016:	f383 8810 	msr	PRIMASK, r3
}
 800b01a:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800b01c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b020:	2b01      	cmp	r3, #1
 800b022:	d103      	bne.n	800b02c <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	2200      	movs	r2, #0
 800b028:	615a      	str	r2, [r3, #20]
 800b02a:	e002      	b.n	800b032 <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2201      	movs	r2, #1
 800b030:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800b032:	2300      	movs	r3, #0
 800b034:	e1d8      	b.n	800b3e8 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800b036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b038:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	3301      	adds	r3, #1
 800b03e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b044:	429a      	cmp	r2, r3
 800b046:	f200 81c9 	bhi.w	800b3dc <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b04a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b054:	4413      	add	r3, r2
 800b056:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b068:	4413      	add	r3, r2
 800b06a:	1e5a      	subs	r2, r3, #1
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b070:	fbb2 f3f3 	udiv	r3, r2, r3
 800b074:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800b076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <_fx_directory_free_search+0x512>
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 81ab 	beq.w	800b3dc <_fx_directory_free_search+0x868>
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b08a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08c:	429a      	cmp	r2, r3
 800b08e:	f200 81a5 	bhi.w	800b3dc <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800b092:	2300      	movs	r3, #0
 800b094:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a6:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800b0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0aa:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800b0ac:	e10b      	b.n	800b2c6 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800b0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800b0ba:	230a      	movs	r3, #10
 800b0bc:	e194      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800b0be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b0c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c8:	f005 f874 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800b0cc:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d6:	e187      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800b0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d117      	bne.n	800b114 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800b0e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d316      	bcc.n	800b12c <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2202      	movs	r2, #2
 800b102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800b106:	e011      	b.n	800b12c <_fx_directory_free_search+0x5b8>
 800b108:	4ec4ec4f 	.word	0x4ec4ec4f
 800b10c:	24014c94 	.word	0x24014c94
 800b110:	24014c90 	.word	0x24014c90
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800b114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b116:	3301      	adds	r3, #1
 800b118:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	3302      	adds	r3, #2
 800b120:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b122:	429a      	cmp	r2, r3
 800b124:	d3c6      	bcc.n	800b0b4 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800b126:	2302      	movs	r3, #2
 800b128:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800b12a:	e7c3      	b.n	800b0b4 <_fx_directory_free_search+0x540>
                            break;
 800b12c:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b134:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b13a:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b13e:	440b      	add	r3, r1
 800b140:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b146:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14a:	2200      	movs	r2, #0
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b154:	2303      	movs	r3, #3
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	2301      	movs	r3, #1
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	9200      	str	r2, [sp, #0]
 800b15e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b164:	f006 fc34 	bl	80119d0 <_fx_utility_logical_sector_read>
 800b168:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800b170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b172:	e139      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b182:	e00d      	b.n	800b1a0 <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800b184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800b18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b190:	3304      	adds	r3, #4
 800b192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800b196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b19a:	3304      	adds	r3, #4
 800b19c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3eb      	bcc.n	800b184 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	9200      	str	r2, [sp, #0]
 800b1c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1c8:	f006 fe96 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800b1cc:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800b1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d6:	e107      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800b1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d95a      	bls.n	800b294 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800b1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4698      	mov	r8, r3
 800b1f0:	4691      	mov	r9, r2
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9302      	str	r3, [sp, #8]
 800b1f6:	e9cd 8900 	strd	r8, r9, [sp]
 800b1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b200:	f006 f9d0 	bl	80115a4 <_fx_utility_logical_sector_flush>
 800b204:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800b206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800b20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20e:	e0eb      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800b210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b212:	3b01      	subs	r3, #1
 800b214:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b216:	e03a      	b.n	800b28e <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	2201      	movs	r2, #1
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	2290      	movs	r2, #144	; 0x90
 800b232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	689a      	ldr	r2, [r3, #8]
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800b240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b244:	441a      	add	r2, r3
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	2201      	movs	r2, #1
 800b250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	2203      	movs	r2, #3
 800b258:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	2201      	movs	r2, #1
 800b260:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b26c:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b286:	e0af      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800b288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28a:	3b01      	subs	r3, #1
 800b28c:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800b28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1c1      	bne.n	800b218 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800b294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800b29a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b29c:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800b29e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00a      	beq.n	800b2ba <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800b2a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b2a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2aa:	f005 f9ac 	bl	8010606 <_fx_utility_FAT_entry_write>
 800b2ae:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800b2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b8:	e096      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800b2ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2bc:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2c4:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800b2c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f47f aef0 	bne.w	800b0ae <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2d4:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800b2d8:	461a      	mov	r2, r3
 800b2da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2de:	f005 f992 	bl	8010606 <_fx_utility_FAT_entry_write>
 800b2e2:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800b2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ec:	e07c      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800b2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800b2f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f8:	673b      	str	r3, [r7, #112]	; 0x70
 800b2fa:	e002      	b.n	800b302 <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b300:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800b302:	2300      	movs	r3, #0
 800b304:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800b306:	2300      	movs	r3, #0
 800b308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b30c:	e024      	b.n	800b358 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800b30e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b312:	461a      	mov	r2, r3
 800b314:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b318:	f004 ff4c 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800b31c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800b31e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b322:	3301      	adds	r3, #1
 800b324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d001      	beq.n	800b332 <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800b32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b330:	e05a      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800b332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b334:	2b01      	cmp	r3, #1
 800b336:	d909      	bls.n	800b34c <_fx_directory_free_search+0x7d8>
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d005      	beq.n	800b34c <_fx_directory_free_search+0x7d8>
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b344:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b348:	429a      	cmp	r2, r3
 800b34a:	d901      	bls.n	800b350 <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b34c:	2303      	movs	r3, #3
 800b34e:	e04b      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800b350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b352:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b35e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b364:	429a      	cmp	r2, r3
 800b366:	d3d2      	bcc.n	800b30e <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b37a:	fb03 f202 	mul.w	r2, r3, r2
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b382:	fb02 f303 	mul.w	r3, r2, r3
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b38a:	4413      	add	r3, r2
 800b38c:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2be5      	cmp	r3, #229	; 0xe5
 800b396:	d103      	bne.n	800b3a0 <_fx_directory_free_search+0x82c>
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	791b      	ldrb	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800b3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a2:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800b3a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	469a      	mov	sl, r3
 800b3aa:	4693      	mov	fp, r2
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d005      	beq.n	800b3c6 <_fx_directory_free_search+0x852>
 800b3ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3c4:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800b3c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3cc:	f005 f91b 	bl	8010606 <_fx_utility_FAT_entry_write>
 800b3d0:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800b3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800b3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3da:	e005      	b.n	800b3e8 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	f63f ada1 	bhi.w	800af28 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800b3e6:	230a      	movs	r3, #10
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3790      	adds	r7, #144	; 0x90
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3f2:	bf00      	nop

0800b3f4 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b5c      	cmp	r3, #92	; 0x5c
 800b40a:	d003      	beq.n	800b414 <_fx_directory_name_extract+0x20>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b2f      	cmp	r3, #47	; 0x2f
 800b412:	d106      	bne.n	800b422 <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800b41a:	e002      	b.n	800b422 <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3301      	adds	r3, #1
 800b420:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b20      	cmp	r3, #32
 800b428:	d0f8      	beq.n	800b41c <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b42e:	e015      	b.n	800b45c <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b5c      	cmp	r3, #92	; 0x5c
 800b436:	d017      	beq.n	800b468 <_fx_directory_name_extract+0x74>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b2f      	cmp	r3, #47	; 0x2f
 800b43e:	d013      	beq.n	800b468 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2bff      	cmp	r3, #255	; 0xff
 800b444:	d00f      	beq.n	800b466 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	440a      	add	r2, r1
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3301      	adds	r3, #1
 800b45a:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <_fx_directory_name_extract+0x3c>
 800b464:	e000      	b.n	800b468 <_fx_directory_name_extract+0x74>
            break;
 800b466:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00b      	beq.n	800b490 <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800b47e:	e007      	b.n	800b490 <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4413      	add	r3, r2
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4413      	add	r3, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b20      	cmp	r3, #32
 800b49a:	d0f1      	beq.n	800b480 <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800b4a8:	687b      	ldr	r3, [r7, #4]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800b4b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4bc:	b0c0      	sub	sp, #256	; 0x100
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4c2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b4c4:	627a      	str	r2, [r7, #36]	; 0x24
 800b4c6:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800b4ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b5c      	cmp	r3, #92	; 0x5c
 800b506:	d003      	beq.n	800b510 <_fx_directory_search+0x58>
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b2f      	cmp	r3, #47	; 0x2f
 800b50e:	d103      	bne.n	800b518 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b516:	e044      	b.n	800b5a2 <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800b518:	4bab      	ldr	r3, [pc, #684]	; (800b7c8 <_fx_directory_search+0x310>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b520:	2b00      	cmp	r3, #0
 800b522:	d022      	beq.n	800b56a <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800b524:	4ba8      	ldr	r3, [pc, #672]	; (800b7c8 <_fx_directory_search+0x310>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d016      	beq.n	800b562 <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800b534:	4ba4      	ldr	r3, [pc, #656]	; (800b7c8 <_fx_directory_search+0x310>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b53c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b540:	4619      	mov	r1, r3
 800b542:	2370      	movs	r3, #112	; 0x70
 800b544:	461a      	mov	r2, r3
 800b546:	f00b f819 	bl	801657c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800b54a:	4b9f      	ldr	r3, [pc, #636]	; (800b7c8 <_fx_directory_search+0x310>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b552:	3370      	adds	r3, #112	; 0x70
 800b554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800b558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b55c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b560:	e01f      	b.n	800b5a2 <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b568:	e01b      	b.n	800b5a2 <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d012      	beq.n	800b59c <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b57c:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800b580:	2370      	movs	r3, #112	; 0x70
 800b582:	461a      	mov	r2, r3
 800b584:	f00a fffa 	bl	801657c <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800b58e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800b592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b59a:	e002      	b.n	800b5a2 <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 81b9 	beq.w	800b920 <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5ba:	d02d      	beq.n	800b618 <_fx_directory_search+0x160>
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b2f      	cmp	r3, #47	; 0x2f
 800b5c2:	d14c      	bne.n	800b65e <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b5c4:	e028      	b.n	800b618 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800b5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5cc:	4413      	add	r3, r2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800b5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800b5e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b5ea:	2b5c      	cmp	r3, #92	; 0x5c
 800b5ec:	d102      	bne.n	800b5f4 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800b5ee:	232f      	movs	r3, #47	; 0x2f
 800b5f0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800b5f4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b5f8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5fa:	d102      	bne.n	800b602 <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800b5fc:	232f      	movs	r3, #47	; 0x2f
 800b5fe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800b602:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b606:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d110      	bne.n	800b630 <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800b60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b612:	3301      	adds	r3, #1
 800b614:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800b618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b61c:	2bfe      	cmp	r3, #254	; 0xfe
 800b61e:	d808      	bhi.n	800b632 <_fx_directory_search+0x17a>
 800b620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1cb      	bne.n	800b5c6 <_fx_directory_search+0x10e>
 800b62e:	e000      	b.n	800b632 <_fx_directory_search+0x17a>
                    break;
 800b630:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b638:	4413      	add	r3, r2
 800b63a:	7819      	ldrb	r1, [r3, #0]
 800b63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b63e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b642:	4413      	add	r3, r2
 800b644:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	4299      	cmp	r1, r3
 800b64c:	d003      	beq.n	800b656 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800b64e:	2300      	movs	r3, #0
 800b650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b654:	e0cf      	b.n	800b7f6 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800b656:	2301      	movs	r3, #1
 800b658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800b65c:	e0cb      	b.n	800b7f6 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800b664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d043      	beq.n	800b6f4 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b66c:	e029      	b.n	800b6c2 <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800b66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	4413      	add	r3, r2
 800b676:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800b680:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b688:	4413      	add	r3, r2
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b690:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b694:	2b5c      	cmp	r3, #92	; 0x5c
 800b696:	d102      	bne.n	800b69e <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800b698:	232f      	movs	r3, #47	; 0x2f
 800b69a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b69e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b6a2:	2b5c      	cmp	r3, #92	; 0x5c
 800b6a4:	d102      	bne.n	800b6ac <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800b6a6:	232f      	movs	r3, #47	; 0x2f
 800b6a8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b6ac:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b6b0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d111      	bne.n	800b6dc <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6bc:	3301      	adds	r3, #1
 800b6be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	2bfe      	cmp	r3, #254	; 0xfe
 800b6c8:	d809      	bhi.n	800b6de <_fx_directory_search+0x226>
 800b6ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	4413      	add	r3, r2
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1c9      	bne.n	800b66e <_fx_directory_search+0x1b6>
 800b6da:	e000      	b.n	800b6de <_fx_directory_search+0x226>
                        break;
 800b6dc:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800b6de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e6:	4413      	add	r3, r2
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800b6f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d07c      	beq.n	800b7f6 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b702:	4413      	add	r3, r2
 800b704:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b5c      	cmp	r3, #92	; 0x5c
 800b70c:	d00c      	beq.n	800b728 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800b70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b714:	4413      	add	r3, r2
 800b716:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b71a:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800b71c:	2b2f      	cmp	r3, #47	; 0x2f
 800b71e:	d003      	beq.n	800b728 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800b720:	2300      	movs	r3, #0
 800b722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b726:	e004      	b.n	800b732 <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800b728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b72c:	3301      	adds	r3, #1
 800b72e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800b732:	2300      	movs	r3, #0
 800b734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b738:	e02d      	b.n	800b796 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800b73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b73c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b740:	4413      	add	r3, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800b748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74e:	4413      	add	r3, r2
 800b750:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800b75a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800b75e:	2b5c      	cmp	r3, #92	; 0x5c
 800b760:	d102      	bne.n	800b768 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800b762:	232f      	movs	r3, #47	; 0x2f
 800b764:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800b768:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b76c:	2b5c      	cmp	r3, #92	; 0x5c
 800b76e:	d102      	bne.n	800b776 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800b770:	232f      	movs	r3, #47	; 0x2f
 800b772:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800b776:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800b77a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800b77e:	429a      	cmp	r2, r3
 800b780:	d119      	bne.n	800b7b6 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800b782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b786:	3301      	adds	r3, #1
 800b788:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800b78c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b790:	3301      	adds	r3, #1
 800b792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800b796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79a:	2bfe      	cmp	r3, #254	; 0xfe
 800b79c:	d80c      	bhi.n	800b7b8 <_fx_directory_search+0x300>
 800b79e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7a4:	4413      	add	r3, r2
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <_fx_directory_search+0x300>
 800b7ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1c2      	bne.n	800b73a <_fx_directory_search+0x282>
 800b7b4:	e000      	b.n	800b7b8 <_fx_directory_search+0x300>
                        break;
 800b7b6:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800b7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7bc:	2bff      	cmp	r3, #255	; 0xff
 800b7be:	d905      	bls.n	800b7cc <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7c6:	e016      	b.n	800b7f6 <_fx_directory_search+0x33e>
 800b7c8:	24014f1c 	.word	0x24014f1c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800b7cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d010      	beq.n	800b7f6 <_fx_directory_search+0x33e>
 800b7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7da:	4413      	add	r3, r2
 800b7dc:	7819      	ldrb	r1, [r3, #0]
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	4299      	cmp	r1, r3
 800b7ee:	d002      	beq.n	800b7f6 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800b7f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 8090 	beq.w	800b920 <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800b808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	4610      	mov	r0, r2
 800b80e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800b812:	2270      	movs	r2, #112	; 0x70
 800b814:	4619      	mov	r1, r3
 800b816:	f00a feb1 	bl	801657c <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b820:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b822:	2300      	movs	r3, #0
 800b824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b828:	e01d      	b.n	800b866 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800b82a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b82e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b832:	4413      	add	r3, r2
 800b834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b836:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800b840:	7812      	ldrb	r2, [r2, #0]
 800b842:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800b844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b84c:	4413      	add	r3, r2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800b854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b858:	2bfe      	cmp	r3, #254	; 0xfe
 800b85a:	d909      	bls.n	800b870 <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800b85c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b860:	3301      	adds	r3, #1
 800b862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b86a:	2bff      	cmp	r3, #255	; 0xff
 800b86c:	d9dd      	bls.n	800b82a <_fx_directory_search+0x372>
 800b86e:	e000      	b.n	800b872 <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800b870:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d041      	beq.n	800b8fc <_fx_directory_search+0x444>
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d03c      	beq.n	800b8fc <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800b88a:	6a3a      	ldr	r2, [r7, #32]
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	4610      	mov	r0, r2
 800b890:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b894:	2270      	movs	r2, #112	; 0x70
 800b896:	4619      	mov	r1, r3
 800b898:	f00a fe70 	bl	801657c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8a2:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8b4:	e01c      	b.n	800b8f0 <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800b8b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8be:	441a      	add	r2, r3
 800b8c0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b8c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8c8:	440b      	add	r3, r1
 800b8ca:	7812      	ldrb	r2, [r2, #0]
 800b8cc:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800b8ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8d6:	4413      	add	r3, r2
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d103      	bne.n	800b8e6 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800b8de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8e2:	2bfe      	cmp	r3, #254	; 0xfe
 800b8e4:	d909      	bls.n	800b8fa <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800b8e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8f4:	2bff      	cmp	r3, #255	; 0xff
 800b8f6:	d9de      	bls.n	800b8b6 <_fx_directory_search+0x3fe>
 800b8f8:	e000      	b.n	800b8fc <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800b8fa:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800b8fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800b904:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b90c:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800b91c:	2300      	movs	r3, #0
 800b91e:	e2ff      	b.n	800bf20 <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800b920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b922:	2300      	movs	r3, #0
 800b924:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800b928:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800b930:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800b938:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b93e:	f7ff fd59 	bl	800b3f4 <_fx_directory_name_extract>
 800b942:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800b944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 80be 	beq.w	800baca <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b94e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b952:	2300      	movs	r3, #0
 800b954:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800b956:	2300      	movs	r3, #0
 800b958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800b95c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b962:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b966:	e02b      	b.n	800b9c0 <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800b968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b96c:	3301      	adds	r3, #1
 800b96e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b972:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800b976:	461a      	mov	r2, r3
 800b978:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b97c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b97e:	f004 fc19 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800b982:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800b986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800b98e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b992:	e2c5      	b.n	800bf20 <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800b994:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d90b      	bls.n	800b9b4 <_fx_directory_search+0x4fc>
 800b99c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b9a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d005      	beq.n	800b9b4 <_fx_directory_search+0x4fc>
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d201      	bcs.n	800b9b8 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e2b3      	b.n	800bf20 <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800b9b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b9c6:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800b9ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d3ca      	bcc.n	800b968 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	469a      	mov	sl, r3
 800b9da:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	613b      	str	r3, [r7, #16]
 800b9e4:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800b9e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	fb03 f20b 	mul.w	r2, r3, fp
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	fb0a f303 	mul.w	r3, sl, r3
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	fbaa 4502 	umull	r4, r5, sl, r2
 800b9fe:	442b      	add	r3, r5
 800ba00:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800ba02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba06:	2200      	movs	r2, #0
 800ba08:	60bb      	str	r3, [r7, #8]
 800ba0a:	60fa      	str	r2, [r7, #12]
 800ba0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba10:	4603      	mov	r3, r0
 800ba12:	fb03 f205 	mul.w	r2, r3, r5
 800ba16:	460b      	mov	r3, r1
 800ba18:	fb04 f303 	mul.w	r3, r4, r3
 800ba1c:	4413      	add	r3, r2
 800ba1e:	4602      	mov	r2, r0
 800ba20:	fba4 8902 	umull	r8, r9, r4, r2
 800ba24:	444b      	add	r3, r9
 800ba26:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800ba34:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800ba38:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800ba3c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800ba40:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800ba44:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ba48:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d046      	beq.n	800bae0 <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800ba5a:	6a3a      	ldr	r2, [r7, #32]
 800ba5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba60:	4610      	mov	r0, r2
 800ba62:	4619      	mov	r1, r3
 800ba64:	2370      	movs	r3, #112	; 0x70
 800ba66:	461a      	mov	r2, r3
 800ba68:	f00a fd88 	bl	801657c <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800ba6c:	6a3a      	ldr	r2, [r7, #32]
 800ba6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ba72:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800ba74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba84:	e01c      	b.n	800bac0 <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800ba86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba8e:	18d1      	adds	r1, r2, r3
 800ba90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba98:	441a      	add	r2, r3
 800ba9a:	780b      	ldrb	r3, [r1, #0]
 800ba9c:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800ba9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800baa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baa6:	4413      	add	r3, r2
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800baae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bab2:	2bfe      	cmp	r3, #254	; 0xfe
 800bab4:	d913      	bls.n	800bade <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baba:	3301      	adds	r3, #1
 800babc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bac4:	2bff      	cmp	r3, #255	; 0xff
 800bac6:	d9de      	bls.n	800ba86 <_fx_directory_search+0x5ce>
 800bac8:	e00a      	b.n	800bae0 <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bace:	2200      	movs	r2, #0
 800bad0:	603b      	str	r3, [r7, #0]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800badc:	e000      	b.n	800bae0 <_fx_directory_search+0x628>
                            break;
 800bade:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800baec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800baf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf8:	f7fd fe7a 	bl	80097f0 <_fx_directory_entry_read>
 800bafc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800bb00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb04:	3301      	adds	r3, #1
 800bb06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800bb0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <_fx_directory_search+0x660>
            {
                return(status);
 800bb12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb16:	e203      	b.n	800bf20 <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f000 80c6 	beq.w	800bcb0 <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	7f1b      	ldrb	r3, [r3, #28]
 800bb28:	f003 0308 	and.w	r3, r3, #8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f040 80a9 	bne.w	800bc84 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2be5      	cmp	r3, #229	; 0xe5
 800bb3a:	d104      	bne.n	800bb46 <_fx_directory_search+0x68e>
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	791b      	ldrb	r3, [r3, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80a1 	beq.w	800bc88 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800bb46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800bb56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800bb60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800bb6a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bb6e:	2b60      	cmp	r3, #96	; 0x60
 800bb70:	d908      	bls.n	800bb84 <_fx_directory_search+0x6cc>
 800bb72:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bb76:	2b7a      	cmp	r3, #122	; 0x7a
 800bb78:	d804      	bhi.n	800bb84 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800bb7a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bb7e:	3b20      	subs	r3, #32
 800bb80:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bb84:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bb88:	2b60      	cmp	r3, #96	; 0x60
 800bb8a:	d908      	bls.n	800bb9e <_fx_directory_search+0x6e6>
 800bb8c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bb90:	2b7a      	cmp	r3, #122	; 0x7a
 800bb92:	d804      	bhi.n	800bb9e <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bb94:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bb98:	3b20      	subs	r3, #32
 800bb9a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800bb9e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bba2:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d10f      	bne.n	800bbca <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800bbaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbae:	3301      	adds	r3, #1
 800bbb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800bbb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbb8:	3301      	adds	r3, #1
 800bbba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800bbbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1c6      	bne.n	800bb56 <_fx_directory_search+0x69e>
 800bbc8:	e000      	b.n	800bbcc <_fx_directory_search+0x714>
                    break;
 800bbca:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bbcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10b      	bne.n	800bbee <_fx_directory_search+0x736>
 800bbd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d103      	bne.n	800bbee <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bbec:	e04d      	b.n	800bc8a <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	791b      	ldrb	r3, [r3, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d049      	beq.n	800bc8a <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800bbf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	3304      	adds	r3, #4
 800bc02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800bc06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800bc10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800bc1a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc1e:	2b60      	cmp	r3, #96	; 0x60
 800bc20:	d908      	bls.n	800bc34 <_fx_directory_search+0x77c>
 800bc22:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc26:	2b7a      	cmp	r3, #122	; 0x7a
 800bc28:	d804      	bhi.n	800bc34 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800bc2a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc2e:	3b20      	subs	r3, #32
 800bc30:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800bc34:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bc38:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d10f      	bne.n	800bc60 <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800bc40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc44:	3301      	adds	r3, #1
 800bc46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800bc4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc4e:	3301      	adds	r3, #1
 800bc50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800bc54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1d3      	bne.n	800bc06 <_fx_directory_search+0x74e>
 800bc5e:	e000      	b.n	800bc62 <_fx_directory_search+0x7aa>
                        break;
 800bc60:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800bc62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10e      	bne.n	800bc8a <_fx_directory_search+0x7d2>
 800bc6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc70:	781a      	ldrb	r2, [r3, #0]
 800bc72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d106      	bne.n	800bc8a <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc82:	e002      	b.n	800bc8a <_fx_directory_search+0x7d2>
                continue;
 800bc84:	bf00      	nop
 800bc86:	e000      	b.n	800bc8a <_fx_directory_search+0x7d2>
                continue;
 800bc88:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800bc8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc8e:	2200      	movs	r2, #0
 800bc90:	61bb      	str	r3, [r7, #24]
 800bc92:	61fa      	str	r2, [r7, #28]
 800bc94:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800bc98:	69b9      	ldr	r1, [r7, #24]
 800bc9a:	4291      	cmp	r1, r2
 800bc9c:	69f9      	ldr	r1, [r7, #28]
 800bc9e:	eb71 0303 	sbcs.w	r3, r1, r3
 800bca2:	d206      	bcs.n	800bcb2 <_fx_directory_search+0x7fa>
 800bca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f43f af1f 	beq.w	800baec <_fx_directory_search+0x634>
 800bcae:	e000      	b.n	800bcb2 <_fx_directory_search+0x7fa>
                break;
 800bcb0:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800bcb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800bcba:	2304      	movs	r3, #4
 800bcbc:	e130      	b.n	800bf20 <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	7f1b      	ldrb	r3, [r3, #28]
 800bcc2:	f003 0310 	and.w	r3, r3, #16
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d04f      	beq.n	800bd6a <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	2370      	movs	r3, #112	; 0x70
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	f00a fc51 	bl	801657c <memcpy>
            search_dir_ptr =  &search_dir;
 800bcda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800bce2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bce6:	2300      	movs	r3, #0
 800bce8:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800bcea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d13f      	bne.n	800bd74 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bcf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d02e      	beq.n	800bd62 <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800bd0c:	6a3a      	ldr	r2, [r7, #32]
 800bd0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd12:	4610      	mov	r0, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	2370      	movs	r3, #112	; 0x70
 800bd18:	461a      	mov	r2, r3
 800bd1a:	f00a fc2f 	bl	801657c <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800bd1e:	6a3a      	ldr	r2, [r7, #32]
 800bd20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd24:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800bd26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd36:	e010      	b.n	800bd5a <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800bd38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd40:	18d1      	adds	r1, r2, r3
 800bd42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd4a:	441a      	add	r2, r3
 800bd4c:	780b      	ldrb	r3, [r1, #0]
 800bd4e:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800bd50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd54:	3301      	adds	r3, #1
 800bd56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd5e:	2bff      	cmp	r3, #255	; 0xff
 800bd60:	d9ea      	bls.n	800bd38 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd68:	e004      	b.n	800bd74 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800bd70:	2304      	movs	r3, #4
 800bd72:	e0d5      	b.n	800bf20 <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f47f add6 	bne.w	800b928 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800bd82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b5c      	cmp	r3, #92	; 0x5c
 800bd8a:	d028      	beq.n	800bdde <_fx_directory_search+0x926>
 800bd8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b2f      	cmp	r3, #47	; 0x2f
 800bd94:	d023      	beq.n	800bdde <_fx_directory_search+0x926>
 800bd96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d01f      	beq.n	800bdde <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bd9e:	e012      	b.n	800bdc6 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800bda0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bda4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bda8:	4413      	add	r3, r2
 800bdaa:	7819      	ldrb	r1, [r3, #0]
 800bdac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bdb8:	460a      	mov	r2, r1
 800bdba:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800bdbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdca:	2bfe      	cmp	r3, #254	; 0xfe
 800bdcc:	d807      	bhi.n	800bdde <_fx_directory_search+0x926>
 800bdce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd6:	4413      	add	r3, r2
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e0      	bne.n	800bda0 <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800bdde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b5c      	cmp	r3, #92	; 0x5c
 800bde6:	d012      	beq.n	800be0e <_fx_directory_search+0x956>
 800bde8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b2f      	cmp	r3, #47	; 0x2f
 800bdf0:	d00d      	beq.n	800be0e <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800bdf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf6:	2bfe      	cmp	r3, #254	; 0xfe
 800bdf8:	d809      	bhi.n	800be0e <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800bdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800be04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be06:	4413      	add	r3, r2
 800be08:	222f      	movs	r2, #47	; 0x2f
 800be0a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800be0e:	2300      	movs	r3, #0
 800be10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be14:	e017      	b.n	800be46 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800be16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be1e:	4413      	add	r3, r2
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be28:	4413      	add	r3, r2
 800be2a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be2e:	460a      	mov	r2, r1
 800be30:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800be32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be36:	3301      	adds	r3, #1
 800be38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800be3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be40:	3301      	adds	r3, #1
 800be42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800be46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4a:	2bff      	cmp	r3, #255	; 0xff
 800be4c:	d807      	bhi.n	800be5e <_fx_directory_search+0x9a6>
 800be4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800be52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800be56:	4413      	add	r3, r2
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1db      	bne.n	800be16 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800be5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be62:	2bff      	cmp	r3, #255	; 0xff
 800be64:	d808      	bhi.n	800be78 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800be66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be6c:	4413      	add	r3, r2
 800be6e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be72:	2200      	movs	r2, #0
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	e003      	b.n	800be80 <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800be80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00e      	beq.n	800bea6 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800be8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be92:	4611      	mov	r1, r2
 800be94:	2270      	movs	r2, #112	; 0x70
 800be96:	4618      	mov	r0, r3
 800be98:	f00a fb70 	bl	801657c <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	2201      	movs	r2, #1
 800bea0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800bea4:	e003      	b.n	800beae <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	2200      	movs	r2, #0
 800beaa:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800beb6:	4611      	mov	r1, r2
 800beb8:	2270      	movs	r2, #112	; 0x70
 800beba:	4618      	mov	r0, r3
 800bebc:	f00a fb5e 	bl	801657c <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800becc:	2300      	movs	r3, #0
 800bece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bed2:	e01e      	b.n	800bf12 <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bedc:	4413      	add	r3, r2
 800bede:	7819      	ldrb	r1, [r3, #0]
 800bee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800beec:	460a      	mov	r2, r1
 800beee:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bef8:	4413      	add	r3, r2
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d103      	bne.n	800bf08 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800bf00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf04:	2bfe      	cmp	r3, #254	; 0xfe
 800bf06:	d909      	bls.n	800bf1c <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800bf08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf16:	2bff      	cmp	r3, #255	; 0xff
 800bf18:	d9dc      	bls.n	800bed4 <_fx_directory_search+0xa1c>
 800bf1a:	e000      	b.n	800bf1e <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800bf1c:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf26:	46bd      	mov	sp, r7
 800bf28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bf2c <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a49      	ldr	r2, [pc, #292]	; (800c060 <_fx_file_close+0x134>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d001      	beq.n	800bf42 <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800bf3e:	2307      	movs	r3, #7
 800bf40:	e08a      	b.n	800c058 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a42      	ldr	r2, [pc, #264]	; (800c064 <_fx_file_close+0x138>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d001      	beq.n	800bf64 <_fx_file_close+0x38>
 800bf60:	2311      	movs	r3, #17
 800bf62:	e079      	b.n	800c058 <_fx_file_close+0x12c>
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bf6a:	f04f 31ff 	mov.w	r1, #4294967295
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f007 fb62 	bl	8013638 <_tx_mutex_get>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <_fx_file_close+0x52>
 800bf7a:	2311      	movs	r3, #17
 800bf7c:	e06c      	b.n	800c058 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d104      	bne.n	800bf92 <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800bf90:	e014      	b.n	800bfbc <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800bf9a:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800bfa4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d104      	bne.n	800bfbc <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bfc2:	1e5a      	subs	r2, r3, #1
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a26      	ldr	r2, [pc, #152]	; (800c068 <_fx_file_close+0x13c>)
 800bfce:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d138      	bne.n	800c04a <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d034      	beq.n	800c04a <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfe0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe4:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800bfe8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfea:	b672      	cpsid	i
    return(int_posture);
 800bfec:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800bfee:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800bff0:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <_fx_file_close+0x140>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800bffa:	4b1d      	ldr	r3, [pc, #116]	; (800c070 <_fx_file_close+0x144>)
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800c004:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <_fx_file_close+0x144>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f383 8810 	msr	PRIMASK, r3
}
 800c018:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3368      	adds	r3, #104	; 0x68
 800c02a:	4619      	mov	r1, r3
 800c02c:	69f8      	ldr	r0, [r7, #28]
 800c02e:	f7fd ff65 	bl	8009efc <_fx_directory_entry_write>
 800c032:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d007      	beq.n	800c04a <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c040:	4618      	mov	r0, r3
 800c042:	f007 fd71 	bl	8013b28 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	e006      	b.n	800c058 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c050:	4618      	mov	r0, r3
 800c052:	f007 fd69 	bl	8013b28 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	46494c45 	.word	0x46494c45
 800c064:	4d454449 	.word	0x4d454449
 800c068:	46494c43 	.word	0x46494c43
 800c06c:	24014c94 	.word	0x24014c94
 800c070:	24014c90 	.word	0x24014c90

0800c074 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800c074:	b590      	push	{r4, r7, lr}
 800c076:	b0c5      	sub	sp, #276	; 0x114
 800c078:	af02      	add	r7, sp, #8
 800c07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c082:	6018      	str	r0, [r3, #0]
 800c084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08c:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800c08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800c0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c0c0:	e020      	b.n	800c104 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800c0c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b5c      	cmp	r3, #92	; 0x5c
 800c0ca:	d004      	beq.n	800c0d6 <_fx_file_create+0x62>
 800c0cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b2f      	cmp	r3, #47	; 0x2f
 800c0d4:	d103      	bne.n	800c0de <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c0dc:	e00d      	b.n	800c0fa <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800c0de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d103      	bne.n	800c0f0 <_fx_file_create+0x7c>
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800c0fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c0fe:	3301      	adds	r3, #1
 800c100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c104:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1d9      	bne.n	800c0c2 <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800c10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <_fx_file_create+0xaa>
 800c116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11a:	2bff      	cmp	r3, #255	; 0xff
 800c11c:	d901      	bls.n	800c122 <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800c11e:	230c      	movs	r3, #12
 800c120:	e10a      	b.n	800c338 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800c122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c130:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c134:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800c136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c13a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c144:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800c148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c14c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c150:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800c152:	2300      	movs	r3, #0
 800c154:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800c158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c15c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c160:	2200      	movs	r2, #0
 800c162:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a74      	ldr	r2, [pc, #464]	; (800c344 <_fx_file_create+0x2d0>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d001      	beq.n	800c17a <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c176:	2311      	movs	r3, #17
 800c178:	e0de      	b.n	800c338 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a6f      	ldr	r2, [pc, #444]	; (800c344 <_fx_file_create+0x2d0>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d001      	beq.n	800c190 <_fx_file_create+0x11c>
 800c18c:	2311      	movs	r3, #17
 800c18e:	e0d3      	b.n	800c338 <_fx_file_create+0x2c4>
 800c190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c19e:	f04f 31ff 	mov.w	r1, #4294967295
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f007 fa48 	bl	8013638 <_tx_mutex_get>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <_fx_file_create+0x13e>
 800c1ae:	2311      	movs	r3, #17
 800c1b0:	e0c2      	b.n	800c338 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800c1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f007 fca8 	bl	8013b28 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800c1d8:	2323      	movs	r3, #35	; 0x23
 800c1da:	e0ad      	b.n	800c338 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800c1dc:	f107 0408 	add.w	r4, r7, #8
 800c1e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e8:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800c1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f0:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800c1f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	4623      	mov	r3, r4
 800c1fc:	6809      	ldr	r1, [r1, #0]
 800c1fe:	6800      	ldr	r0, [r0, #0]
 800c200:	f7ff f95a 	bl	800b4b8 <_fx_directory_search>
 800c204:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800c208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10b      	bne.n	800c228 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c21e:	4618      	mov	r0, r3
 800c220:	f007 fc82 	bl	8013b28 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800c224:	230b      	movs	r3, #11
 800c226:	e087      	b.n	800c338 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800c228:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c22c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c22e:	4611      	mov	r1, r2
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff f8df 	bl	800b3f4 <_fx_directory_name_extract>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00b      	beq.n	800c254 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c24a:	4618      	mov	r0, r3
 800c24c:	f007 fc6c 	bl	8013b28 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800c250:	230d      	movs	r3, #13
 800c252:	e071      	b.n	800c338 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800c254:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c258:	f107 0108 	add.w	r1, r7, #8
 800c25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	f7fe fc85 	bl	800ab74 <_fx_directory_free_search>
 800c26a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00c      	beq.n	800c290 <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800c276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c284:	4618      	mov	r0, r3
 800c286:	f007 fc4f 	bl	8013b28 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c28a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c28e:	e053      	b.n	800c338 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800c290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c296:	4611      	mov	r1, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff f8ab 	bl	800b3f4 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c29e:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800c2a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800c2aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2ae:	b672      	cpsid	i
    return(int_posture);
 800c2b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800c2b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c2b8:	4b23      	ldr	r3, [pc, #140]	; (800c348 <_fx_file_create+0x2d4>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c2c0:	4b22      	ldr	r3, [pc, #136]	; (800c34c <_fx_file_create+0x2d8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2d4:	f383 8810 	msr	PRIMASK, r3
}
 800c2d8:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800c2da:	2320      	movs	r3, #32
 800c2dc:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800c2f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f8:	d106      	bne.n	800c308 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800c2fa:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800c2fe:	f043 0302 	orr.w	r3, r3, #2
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800c308:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c314:	4611      	mov	r1, r2
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	f7fd fdf0 	bl	8009efc <_fx_directory_entry_write>
 800c31c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800c320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c32e:	4618      	mov	r0, r3
 800c330:	f007 fbfa 	bl	8013b28 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800c334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800c338:	4618      	mov	r0, r3
 800c33a:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd90      	pop	{r4, r7, pc}
 800c342:	bf00      	nop
 800c344:	4d454449 	.word	0x4d454449
 800c348:	24014c94 	.word	0x24014c94
 800c34c:	24014c90 	.word	0x24014c90

0800c350 <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800c350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c354:	b0c2      	sub	sp, #264	; 0x108
 800c356:	af00      	add	r7, sp, #0
 800c358:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800c35c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	4bcf      	ldr	r3, [pc, #828]	; (800c6ac <_fx_file_extended_seek+0x35c>)
 800c36e:	429a      	cmp	r2, r3
 800c370:	d001      	beq.n	800c376 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c372:	2307      	movs	r3, #7
 800c374:	e2b5      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c37c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800c380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c384:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c388:	1c5a      	adds	r2, r3, #1
 800c38a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c38e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c398:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	4bc3      	ldr	r3, [pc, #780]	; (800c6b0 <_fx_file_extended_seek+0x360>)
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d001      	beq.n	800c3ac <_fx_file_extended_seek+0x5c>
 800c3a8:	2311      	movs	r3, #17
 800c3aa:	e29a      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
 800c3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c3b4:	f04f 31ff 	mov.w	r1, #4294967295
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f007 f93d 	bl	8013638 <_tx_mutex_get>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <_fx_file_extended_seek+0x78>
 800c3c4:	2311      	movs	r3, #17
 800c3c6:	e28c      	b.n	800c8e2 <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800c3c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3cc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800c3d0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf08      	it	eq
 800c3d8:	4282      	cmpeq	r2, r0
 800c3da:	d108      	bne.n	800c3ee <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3e0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f007 fb9f 	bl	8013b28 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e279      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800c3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800c3fa:	fb02 f303 	mul.w	r3, r2, r3
 800c3fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800c402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d108      	bne.n	800c41c <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c40a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c40e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c412:	4618      	mov	r0, r3
 800c414:	f007 fb88 	bl	8013b28 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800c418:	2302      	movs	r3, #2
 800c41a:	e262      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800c41c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c420:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800c424:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c428:	4290      	cmp	r0, r2
 800c42a:	eb71 0303 	sbcs.w	r3, r1, r3
 800c42e:	d205      	bcs.n	800c43c <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800c430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c434:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c438:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800c43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	2200      	movs	r2, #0
 800c444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c44c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c450:	2200      	movs	r2, #0
 800c452:	469a      	mov	sl, r3
 800c454:	4693      	mov	fp, r2
 800c456:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c45a:	460b      	mov	r3, r1
 800c45c:	fb0a f203 	mul.w	r2, sl, r3
 800c460:	4603      	mov	r3, r0
 800c462:	fb03 f30b 	mul.w	r3, r3, fp
 800c466:	4413      	add	r3, r2
 800c468:	4602      	mov	r2, r0
 800c46a:	fba2 450a 	umull	r4, r5, r2, sl
 800c46e:	442b      	add	r3, r5
 800c470:	461d      	mov	r5, r3
 800c472:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c476:	42a2      	cmp	r2, r4
 800c478:	41ab      	sbcs	r3, r5
 800c47a:	f0c0 8156 	bcc.w	800c72a <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800c47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c484:	2200      	movs	r2, #0
 800c486:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c48a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c48e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c492:	2200      	movs	r2, #0
 800c494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c498:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c49c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c4a0:	462b      	mov	r3, r5
 800c4a2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800c4a6:	4652      	mov	r2, sl
 800c4a8:	fb02 f203 	mul.w	r2, r2, r3
 800c4ac:	465b      	mov	r3, fp
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	fb01 f303 	mul.w	r3, r1, r3
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4651      	mov	r1, sl
 800c4ba:	fba2 8901 	umull	r8, r9, r2, r1
 800c4be:	444b      	add	r3, r9
 800c4c0:	4699      	mov	r9, r3
 800c4c2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c4c6:	4590      	cmp	r8, r2
 800c4c8:	eb79 0303 	sbcs.w	r3, r9, r3
 800c4cc:	d225      	bcs.n	800c51a <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800c4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800c4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c4e2:	fb02 f303 	mul.w	r3, r2, r3
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800c4f0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c4f4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	1a51      	subs	r1, r2, r1
 800c4fc:	6139      	str	r1, [r7, #16]
 800c4fe:	4629      	mov	r1, r5
 800c500:	eb63 0301 	sbc.w	r3, r3, r1
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c50a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800c50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c518:	e0b7      	b.n	800c68a <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51e:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800c520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c524:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800c526:	4413      	add	r3, r2
 800c528:	3b01      	subs	r3, #1
 800c52a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800c52e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	1e5a      	subs	r2, r3, #1
 800c536:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c53a:	fb02 f303 	mul.w	r3, r2, r3
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c544:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800c548:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c54c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c550:	4621      	mov	r1, r4
 800c552:	1a51      	subs	r1, r2, r1
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4629      	mov	r1, r5
 800c558:	eb63 0301 	sbc.w	r3, r3, r1
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c562:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800c566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c572:	e08a      	b.n	800c68a <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800c574:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c578:	3301      	adds	r3, #1
 800c57a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800c57e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800c582:	461a      	mov	r2, r3
 800c584:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800c588:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800c58c:	f003 fe12 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800c590:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800c594:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d009      	beq.n	800c5b0 <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800c59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5a0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f007 fabf 	bl	8013b28 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800c5aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5ae:	e198      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800c5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800c5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800c5c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5ca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c5ce:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c5d2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	4291      	cmp	r1, r2
 800c5da:	4629      	mov	r1, r5
 800c5dc:	eb71 0303 	sbcs.w	r3, r1, r3
 800c5e0:	d216      	bcs.n	800c610 <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800c5e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5f0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c5f4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	1a51      	subs	r1, r2, r1
 800c5fc:	6039      	str	r1, [r7, #0]
 800c5fe:	4629      	mov	r1, r5
 800c600:	eb63 0301 	sbc.w	r3, r3, r1
 800c604:	607b      	str	r3, [r7, #4]
 800c606:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c60a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800c60e:	e03c      	b.n	800c68a <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800c610:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c618:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800c61a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c624:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800c626:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c634:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c638:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c63c:	4621      	mov	r1, r4
 800c63e:	4628      	mov	r0, r5
 800c640:	4283      	cmp	r3, r0
 800c642:	bf08      	it	eq
 800c644:	428a      	cmpeq	r2, r1
 800c646:	d135      	bne.n	800c6b4 <_fx_file_extended_seek+0x364>
 800c648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d931      	bls.n	800c6b4 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c654:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c658:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c660:	4293      	cmp	r3, r2
 800c662:	d227      	bcs.n	800c6b4 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800c664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c66c:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800c66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c67a:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800c67c:	f04f 0200 	mov.w	r2, #0
 800c680:	f04f 0300 	mov.w	r3, #0
 800c684:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800c688:	e014      	b.n	800c6b4 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800c68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d911      	bls.n	800c6b6 <_fx_file_extended_seek+0x366>
 800c692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c696:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c69a:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	f4ff af66 	bcc.w	800c574 <_fx_file_extended_seek+0x224>
 800c6a8:	e005      	b.n	800c6b6 <_fx_file_extended_seek+0x366>
 800c6aa:	bf00      	nop
 800c6ac:	46494c45 	.word	0x46494c45
 800c6b0:	4d454449 	.word	0x4d454449
                    break;
 800c6b4:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800c6b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c6c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6cc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c6ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c6d2:	462b      	mov	r3, r5
 800c6d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c6d8:	4642      	mov	r2, r8
 800c6da:	fb02 f203 	mul.w	r2, r2, r3
 800c6de:	464b      	mov	r3, r9
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	fb01 f303 	mul.w	r3, r1, r3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	4641      	mov	r1, r8
 800c6ec:	fba2 1201 	umull	r1, r2, r2, r1
 800c6f0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c6fa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c6fe:	4413      	add	r3, r2
 800c700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c704:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c708:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800c70c:	4621      	mov	r1, r4
 800c70e:	4291      	cmp	r1, r2
 800c710:	4629      	mov	r1, r5
 800c712:	eb71 0303 	sbcs.w	r3, r1, r3
 800c716:	d22f      	bcs.n	800c778 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800c718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c71c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c720:	4618      	mov	r0, r3
 800c722:	f007 fa01 	bl	8013b28 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800c726:	2308      	movs	r3, #8
 800c728:	e0db      	b.n	800c8e2 <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800c72a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c72e:	2200      	movs	r2, #0
 800c730:	673b      	str	r3, [r7, #112]	; 0x70
 800c732:	677a      	str	r2, [r7, #116]	; 0x74
 800c734:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c738:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c73c:	f7f3 ff40 	bl	80005c0 <__aeabi_uldivmod>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c748:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800c74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c74e:	695a      	ldr	r2, [r3, #20]
 800c750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800c758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75c:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800c75e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c762:	2200      	movs	r2, #0
 800c764:	66bb      	str	r3, [r7, #104]	; 0x68
 800c766:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c768:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c76c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c770:	f7f3 ff26 	bl	80005c0 <__aeabi_uldivmod>
 800c774:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800c778:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c77c:	2200      	movs	r2, #0
 800c77e:	663b      	str	r3, [r7, #96]	; 0x60
 800c780:	667a      	str	r2, [r7, #100]	; 0x64
 800c782:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c786:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c78a:	4621      	mov	r1, r4
 800c78c:	4628      	mov	r0, r5
 800c78e:	4283      	cmp	r3, r0
 800c790:	bf08      	it	eq
 800c792:	428a      	cmpeq	r2, r1
 800c794:	d151      	bne.n	800c83a <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7a2:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c7a4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c7a8:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7aa:	fb01 f303 	mul.w	r3, r1, r3
 800c7ae:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c7b0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7b4:	1e51      	subs	r1, r2, #1
 800c7b6:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7b8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c7bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	653b      	str	r3, [r7, #80]	; 0x50
 800c7c8:	657a      	str	r2, [r7, #84]	; 0x54
 800c7ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c7ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c7d2:	f7f3 fef5 	bl	80005c0 <__aeabi_uldivmod>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c7da:	4613      	mov	r3, r2
 800c7dc:	4423      	add	r3, r4
 800c7de:	2200      	movs	r2, #0
 800c7e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c7ec:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c7f0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c7f4:	1e51      	subs	r1, r2, #1
 800c7f6:	6439      	str	r1, [r7, #64]	; 0x40
 800c7f8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c804:	2200      	movs	r2, #0
 800c806:	63bb      	str	r3, [r7, #56]	; 0x38
 800c808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c80a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c80e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c812:	f7f3 fed5 	bl	80005c0 <__aeabi_uldivmod>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c820:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c824:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c828:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800c82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c836:	631a      	str	r2, [r3, #48]	; 0x30
 800c838:	e04b      	b.n	800c8d2 <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800c840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c844:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c846:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800c848:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800c84c:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c84e:	fb01 f303 	mul.w	r3, r1, r3
 800c852:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	2200      	movs	r2, #0
 800c85c:	633b      	str	r3, [r7, #48]	; 0x30
 800c85e:	637a      	str	r2, [r7, #52]	; 0x34
 800c860:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c864:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c868:	f7f3 feaa 	bl	80005c0 <__aeabi_uldivmod>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800c870:	4613      	mov	r3, r2
 800c872:	4423      	add	r3, r4
 800c874:	2200      	movs	r2, #0
 800c876:	62bb      	str	r3, [r7, #40]	; 0x28
 800c878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c87e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c882:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	2200      	movs	r2, #0
 800c88e:	623b      	str	r3, [r7, #32]
 800c890:	627a      	str	r2, [r7, #36]	; 0x24
 800c892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c896:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c89a:	f7f3 fe91 	bl	80005c0 <__aeabi_uldivmod>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800c8a8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c8ac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c8b0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800c8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	61fa      	str	r2, [r7, #28]
 800c8c0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c8c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8c8:	f7f3 fe7a 	bl	80005c0 <__aeabi_uldivmod>
 800c8cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f007 f924 	bl	8013b28 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8ee:	bf00      	nop

0800c8f0 <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800c8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8f4:	b0e8      	sub	sp, #416	; 0x1a0
 800c8f6:	af02      	add	r7, sp, #8
 800c8f8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800c8fc:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800c900:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c904:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c90e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	4bd9      	ldr	r3, [pc, #868]	; (800cc7c <_fx_file_open+0x38c>)
 800c916:	429a      	cmp	r2, r3
 800c918:	d002      	beq.n	800c920 <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c91a:	2311      	movs	r3, #17
 800c91c:	f000 bcc4 	b.w	800d2a8 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800c920:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c924:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c92e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800c932:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c936:	2300      	movs	r3, #0
 800c938:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800c93c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c942:	2b00      	cmp	r3, #0
 800c944:	d006      	beq.n	800c954 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800c946:	4bce      	ldr	r3, [pc, #824]	; (800cc80 <_fx_file_open+0x390>)
 800c948:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c94c:	2318      	movs	r3, #24
 800c94e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800c952:	e006      	b.n	800c962 <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800c954:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c958:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800c95c:	2318      	movs	r3, #24
 800c95e:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800c962:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c966:	2b02      	cmp	r3, #2
 800c968:	d106      	bne.n	800c978 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800c970:	2301      	movs	r3, #1
 800c972:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800c976:	e002      	b.n	800c97e <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800c978:	2300      	movs	r3, #0
 800c97a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c97e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	4bbd      	ldr	r3, [pc, #756]	; (800cc7c <_fx_file_open+0x38c>)
 800c986:	429a      	cmp	r2, r3
 800c988:	d002      	beq.n	800c990 <_fx_file_open+0xa0>
 800c98a:	2311      	movs	r3, #17
 800c98c:	f000 bc8c 	b.w	800d2a8 <_fx_file_open+0x9b8>
 800c990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c994:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c998:	f04f 31ff 	mov.w	r1, #4294967295
 800c99c:	4618      	mov	r0, r3
 800c99e:	f006 fe4b 	bl	8013638 <_tx_mutex_get>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <_fx_file_open+0xbe>
 800c9a8:	2311      	movs	r3, #17
 800c9aa:	f000 bc7d 	b.w	800d2a8 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800c9ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9b2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800c9b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9ba:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800c9bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800c9c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c9ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c9d8:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c9dc:	f7fe fd6c 	bl	800b4b8 <_fx_directory_search>
 800c9e0:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800c9e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00a      	beq.n	800ca02 <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800c9ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c9f0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f007 f897 	bl	8013b28 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800c9fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c9fe:	f000 bc53 	b.w	800d2a8 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800ca02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca06:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800ca0a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800ca0e:	4013      	ands	r3, r2
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d009      	beq.n	800ca2a <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ca16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca1a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f007 f882 	bl	8013b28 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800ca24:	2305      	movs	r3, #5
 800ca26:	f000 bc3f 	b.w	800d2a8 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800ca2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d160      	bne.n	800caf4 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800ca32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ca3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca42:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca46:	4618      	mov	r0, r3
 800ca48:	f007 f86e 	bl	8013b28 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800ca4c:	2323      	movs	r3, #35	; 0x23
 800ca4e:	f000 bc2b 	b.w	800d2a8 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800ca52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d009      	beq.n	800ca76 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ca62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f007 f85c 	bl	8013b28 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800ca70:	2306      	movs	r3, #6
 800ca72:	f000 bc19 	b.w	800d2a8 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800ca76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ca7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800ca82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ca86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ca8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800ca8e:	e02d      	b.n	800caec <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800ca90:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ca94:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ca98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ca9c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800caa0:	4299      	cmp	r1, r3
 800caa2:	bf08      	it	eq
 800caa4:	4290      	cmpeq	r0, r2
 800caa6:	d117      	bne.n	800cad8 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800caa8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800caac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800cab0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800cab8:	429a      	cmp	r2, r3
 800caba:	d10d      	bne.n	800cad8 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800cabc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cac0:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d108      	bne.n	800cad8 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800cac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800caca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cace:	4618      	mov	r0, r3
 800cad0:	f007 f82a 	bl	8013b28 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800cad4:	2306      	movs	r3, #6
 800cad6:	e3e7      	b.n	800d2a8 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800cad8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800cadc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cade:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800cae2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cae6:	3b01      	subs	r3, #1
 800cae8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800caec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1cd      	bne.n	800ca90 <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800caf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800caf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cafc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cb00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb04:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800cb08:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cb12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cb18:	fb02 f303 	mul.w	r3, r2, r3
 800cb1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800cb20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb24:	2300      	movs	r3, #0
 800cb26:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cb28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d108      	bne.n	800cb42 <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cb30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f006 fff5 	bl	8013b28 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e3b2      	b.n	800d2a8 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800cb54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cb58:	2301      	movs	r3, #1
 800cb5a:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800cb5c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 8103 	beq.w	800cd6c <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800cb66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800cb70:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800cb74:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cb78:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	eb11 0a02 	adds.w	sl, r1, r2
 800cb82:	4629      	mov	r1, r5
 800cb84:	eb41 0b03 	adc.w	fp, r1, r3
 800cb88:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800cb8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800cb90:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800cb94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800cb98:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cba2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800cba6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800cbaa:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800cbae:	f7f3 fd07 	bl	80005c0 <__aeabi_uldivmod>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cbc4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800cbc8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800cbcc:	4623      	mov	r3, r4
 800cbce:	fb03 f201 	mul.w	r2, r3, r1
 800cbd2:	462b      	mov	r3, r5
 800cbd4:	fb00 f303 	mul.w	r3, r0, r3
 800cbd8:	4413      	add	r3, r2
 800cbda:	4622      	mov	r2, r4
 800cbdc:	fba0 8902 	umull	r8, r9, r0, r2
 800cbe0:	444b      	add	r3, r9
 800cbe2:	4699      	mov	r9, r3
 800cbe4:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cbe8:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800cbec:	e12f      	b.n	800ce4e <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800cbee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800cbf8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800cc02:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800cc06:	f003 fad5 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800cc0a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800cc0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d009      	beq.n	800cc2a <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc1a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f006 ff82 	bl	8013b28 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800cc24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800cc28:	e33e      	b.n	800d2a8 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800cc2a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800cc2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d006      	beq.n	800cc44 <_fx_file_open+0x354>
 800cc36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d908      	bls.n	800cc56 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800cc44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cc48:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f006 ff6b 	bl	8013b28 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800cc52:	2303      	movs	r3, #3
 800cc54:	e328      	b.n	800d2a8 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800cc56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d10f      	bne.n	800cc84 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800cc64:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00e      	beq.n	800cc8a <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800cc6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cc78:	619a      	str	r2, [r3, #24]
 800cc7a:	e006      	b.n	800cc8a <_fx_file_open+0x39a>
 800cc7c:	4d454449 	.word	0x4d454449
 800cc80:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800cc8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cc8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800cc92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cc96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800cc9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cca4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800cca8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ccac:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800ccb0:	4641      	mov	r1, r8
 800ccb2:	4291      	cmp	r1, r2
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	eb71 0303 	sbcs.w	r3, r1, r3
 800ccba:	d216      	bcs.n	800ccea <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800ccbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ccc6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ccca:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ccce:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800ccd2:	4641      	mov	r1, r8
 800ccd4:	1a51      	subs	r1, r2, r1
 800ccd6:	6039      	str	r1, [r7, #0]
 800ccd8:	4649      	mov	r1, r9
 800ccda:	eb63 0301 	sbc.w	r3, r3, r1
 800ccde:	607b      	str	r3, [r7, #4]
 800cce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800cce8:	e040      	b.n	800cd6c <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800ccea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d13b      	bne.n	800cd6c <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800ccf4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ccf8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800ccfc:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800ccfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cd02:	1e5a      	subs	r2, r3, #1
 800cd04:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd08:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800cd0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd14:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd18:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cd1c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800cd20:	4641      	mov	r1, r8
 800cd22:	4648      	mov	r0, r9
 800cd24:	4283      	cmp	r3, r0
 800cd26:	bf08      	it	eq
 800cd28:	428a      	cmpeq	r2, r1
 800cd2a:	d11f      	bne.n	800cd6c <_fx_file_open+0x47c>
 800cd2c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d91b      	bls.n	800cd6c <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd3c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d211      	bcs.n	800cd6c <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800cd48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cd4c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd50:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800cd52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cd5e:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800cd60:	f04f 0200 	mov.w	r2, #0
 800cd64:	f04f 0300 	mov.w	r3, #0
 800cd68:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cd6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d90a      	bls.n	800cd8a <_fx_file_open+0x49a>
 800cd74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd7c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cd80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cd84:	4293      	cmp	r3, r2
 800cd86:	f4ff af32 	bcc.w	800cbee <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cd8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	2200      	movs	r2, #0
 800cd92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cd96:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800cd9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda0:	2200      	movs	r2, #0
 800cda2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cda6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cdaa:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800cdae:	464b      	mov	r3, r9
 800cdb0:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	fb02 f203 	mul.w	r2, r2, r3
 800cdba:	465b      	mov	r3, fp
 800cdbc:	4641      	mov	r1, r8
 800cdbe:	fb01 f303 	mul.w	r3, r1, r3
 800cdc2:	4413      	add	r3, r2
 800cdc4:	4642      	mov	r2, r8
 800cdc6:	4651      	mov	r1, sl
 800cdc8:	fba2 4501 	umull	r4, r5, r2, r1
 800cdcc:	442b      	add	r3, r5
 800cdce:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800cdd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cdda:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800cdde:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cde2:	4603      	mov	r3, r0
 800cde4:	fb03 f205 	mul.w	r2, r3, r5
 800cde8:	460b      	mov	r3, r1
 800cdea:	fb04 f303 	mul.w	r3, r4, r3
 800cdee:	4413      	add	r3, r2
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	fba4 1202 	umull	r1, r2, r4, r2
 800cdf6:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800cdfa:	460a      	mov	r2, r1
 800cdfc:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800ce00:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ce04:	4413      	add	r3, r2
 800ce06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ce0a:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800ce0e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800ce12:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800ce16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce1a:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800ce1e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ce22:	4282      	cmp	r2, r0
 800ce24:	418b      	sbcs	r3, r1
 800ce26:	d309      	bcc.n	800ce3c <_fx_file_open+0x54c>
 800ce28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00e      	beq.n	800ce4e <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800ce30:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ce34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d908      	bls.n	800ce4e <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800ce3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce40:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce44:	4618      	mov	r0, r3
 800ce46:	f006 fe6f 	bl	8013b28 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800ce4a:	2308      	movs	r3, #8
 800ce4c:	e22c      	b.n	800d2a8 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800ce4e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce52:	4baa      	ldr	r3, [pc, #680]	; (800d0fc <_fx_file_open+0x80c>)
 800ce54:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800ce56:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce5a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800ce5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce62:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800ce64:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ce6c:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800ce6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ce76:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800ce78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800ce80:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ce88:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800ce8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce8e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ce92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ce96:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800ce98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ce9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800cea0:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800cea2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cea6:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800ceaa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceae:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800ceb2:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800ceb6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800ceba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800cebe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800cec8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d163      	bne.n	800cf98 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800ced0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ceda:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800cedc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cee0:	2200      	movs	r2, #0
 800cee2:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cef0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cef4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	3b02      	subs	r3, #2
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf02:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800cf06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cf0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf12:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800cf16:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf20:	4642      	mov	r2, r8
 800cf22:	fb02 f203 	mul.w	r2, r2, r3
 800cf26:	464b      	mov	r3, r9
 800cf28:	4621      	mov	r1, r4
 800cf2a:	fb01 f303 	mul.w	r3, r1, r3
 800cf2e:	4413      	add	r3, r2
 800cf30:	4622      	mov	r2, r4
 800cf32:	4641      	mov	r1, r8
 800cf34:	fba2 1201 	umull	r1, r2, r2, r1
 800cf38:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800cf3c:	460a      	mov	r2, r1
 800cf3e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800cf42:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cf46:	4413      	add	r3, r2
 800cf48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cf4c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cf50:	4623      	mov	r3, r4
 800cf52:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800cf56:	4602      	mov	r2, r0
 800cf58:	189b      	adds	r3, r3, r2
 800cf5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	462a      	mov	r2, r5
 800cf62:	eb42 0303 	adc.w	r3, r2, r3
 800cf66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cf72:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800cf76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800cf7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf82:	2200      	movs	r2, #0
 800cf84:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800cf86:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cf8a:	f04f 0200 	mov.w	r2, #0
 800cf8e:	f04f 0300 	mov.w	r3, #0
 800cf92:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800cf96:	e140      	b.n	800d21a <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800cf98:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfa2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfa6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800cfaa:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	4283      	cmp	r3, r0
 800cfb4:	bf08      	it	eq
 800cfb6:	428a      	cmpeq	r2, r1
 800cfb8:	f040 80a2 	bne.w	800d100 <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800cfbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cfc8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800cfcc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800cfdc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	3b02      	subs	r3, #2
 800cfe4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfe8:	4613      	mov	r3, r2
 800cfea:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cfee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800cff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cff8:	2200      	movs	r2, #0
 800cffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cffe:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d006:	462b      	mov	r3, r5
 800d008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d00c:	4642      	mov	r2, r8
 800d00e:	fb02 f203 	mul.w	r2, r2, r3
 800d012:	464b      	mov	r3, r9
 800d014:	4621      	mov	r1, r4
 800d016:	fb01 f303 	mul.w	r3, r1, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	4622      	mov	r2, r4
 800d01e:	4641      	mov	r1, r8
 800d020:	fba2 1201 	umull	r1, r2, r2, r1
 800d024:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d028:	460a      	mov	r2, r1
 800d02a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d02e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d032:	4413      	add	r3, r2
 800d034:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d038:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d03c:	4623      	mov	r3, r4
 800d03e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d042:	4602      	mov	r2, r0
 800d044:	189b      	adds	r3, r3, r2
 800d046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d04a:	460b      	mov	r3, r1
 800d04c:	462a      	mov	r2, r5
 800d04e:	eb42 0303 	adc.w	r3, r2, r3
 800d052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d056:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d05a:	1e51      	subs	r1, r2, #1
 800d05c:	67b9      	str	r1, [r7, #120]	; 0x78
 800d05e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d062:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	2200      	movs	r2, #0
 800d06c:	673b      	str	r3, [r7, #112]	; 0x70
 800d06e:	677a      	str	r2, [r7, #116]	; 0x74
 800d070:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d074:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d078:	f7f3 faa2 	bl	80005c0 <__aeabi_uldivmod>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	2300      	movs	r3, #0
 800d082:	66ba      	str	r2, [r7, #104]	; 0x68
 800d084:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d086:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d08a:	4623      	mov	r3, r4
 800d08c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d090:	4602      	mov	r2, r0
 800d092:	189b      	adds	r3, r3, r2
 800d094:	663b      	str	r3, [r7, #96]	; 0x60
 800d096:	460b      	mov	r3, r1
 800d098:	462a      	mov	r2, r5
 800d09a:	eb42 0303 	adc.w	r3, r2, r3
 800d09e:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d0a8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d0ac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d0b0:	1e51      	subs	r1, r2, #1
 800d0b2:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d0b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	653b      	str	r3, [r7, #80]	; 0x50
 800d0c4:	657a      	str	r2, [r7, #84]	; 0x54
 800d0c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d0ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d0ce:	f7f3 fa77 	bl	80005c0 <__aeabi_uldivmod>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0da:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d0dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d0e4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d0e8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d0ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d0f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d0f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d0f8:	e08f      	b.n	800d21a <_fx_file_open+0x92a>
 800d0fa:	bf00      	nop
 800d0fc:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d106:	2200      	movs	r2, #0
 800d108:	64bb      	str	r3, [r7, #72]	; 0x48
 800d10a:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d10c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	2200      	movs	r2, #0
 800d114:	643b      	str	r3, [r7, #64]	; 0x40
 800d116:	647a      	str	r2, [r7, #68]	; 0x44
 800d118:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d11c:	460b      	mov	r3, r1
 800d11e:	3b02      	subs	r3, #2
 800d120:	63bb      	str	r3, [r7, #56]	; 0x38
 800d122:	4613      	mov	r3, r2
 800d124:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d12a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d130:	2200      	movs	r2, #0
 800d132:	633b      	str	r3, [r7, #48]	; 0x30
 800d134:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d136:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d13a:	462b      	mov	r3, r5
 800d13c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d140:	4642      	mov	r2, r8
 800d142:	fb02 f203 	mul.w	r2, r2, r3
 800d146:	464b      	mov	r3, r9
 800d148:	4621      	mov	r1, r4
 800d14a:	fb01 f303 	mul.w	r3, r1, r3
 800d14e:	4413      	add	r3, r2
 800d150:	4622      	mov	r2, r4
 800d152:	4641      	mov	r1, r8
 800d154:	fba2 1201 	umull	r1, r2, r2, r1
 800d158:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d15c:	460a      	mov	r2, r1
 800d15e:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d162:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d166:	4413      	add	r3, r2
 800d168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d16c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d170:	4623      	mov	r3, r4
 800d172:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d176:	4602      	mov	r2, r0
 800d178:	189b      	adds	r3, r3, r2
 800d17a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d17c:	460b      	mov	r3, r1
 800d17e:	462a      	mov	r2, r5
 800d180:	eb42 0303 	adc.w	r3, r2, r3
 800d184:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d186:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18c:	2200      	movs	r2, #0
 800d18e:	623b      	str	r3, [r7, #32]
 800d190:	627a      	str	r2, [r7, #36]	; 0x24
 800d192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d196:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d19a:	f7f3 fa11 	bl	80005c0 <__aeabi_uldivmod>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61ba      	str	r2, [r7, #24]
 800d1a6:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d1a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d1ac:	4623      	mov	r3, r4
 800d1ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	189b      	adds	r3, r3, r2
 800d1b6:	613b      	str	r3, [r7, #16]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	462a      	mov	r2, r5
 800d1bc:	eb42 0303 	adc.w	r3, r2, r3
 800d1c0:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d1c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d1ca:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d1ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	60bb      	str	r3, [r7, #8]
 800d1d8:	60fa      	str	r2, [r7, #12]
 800d1da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1de:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d1e2:	f7f3 f9ed 	bl	80005c0 <__aeabi_uldivmod>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d1f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d1f4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d1f8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d1fc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800d200:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d204:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d208:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d20a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d20e:	fb01 f202 	mul.w	r2, r1, r2
 800d212:	1a9a      	subs	r2, r3, r2
 800d214:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d218:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800d21a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d21e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01f      	beq.n	800d266 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800d226:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d22a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d230:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800d234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d238:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d23c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d240:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800d242:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d24a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800d24c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d250:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800d254:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800d256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d25a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d25e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d262:	65da      	str	r2, [r3, #92]	; 0x5c
 800d264:	e00f      	b.n	800d286 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800d266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d26a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d26e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800d272:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d276:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d27a:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800d27c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d280:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d284:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800d286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d28a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d294:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800d298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d29c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f006 fc41 	bl	8013b28 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d2b4 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800d2b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2b8:	b0aa      	sub	sp, #168	; 0xa8
 800d2ba:	af04      	add	r7, sp, #16
 800d2bc:	66f8      	str	r0, [r7, #108]	; 0x6c
 800d2be:	66b9      	str	r1, [r7, #104]	; 0x68
 800d2c0:	667a      	str	r2, [r7, #100]	; 0x64
 800d2c2:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	4b9d      	ldr	r3, [pc, #628]	; (800d540 <_fx_file_read+0x28c>)
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d001      	beq.n	800d2d2 <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d2ce:	2307      	movs	r3, #7
 800d2d0:	e28d      	b.n	800d7ee <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d6:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800d2d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2da:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d2de:	1c5a      	adds	r2, r3, #1
 800d2e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ea:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d2ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	4b94      	ldr	r3, [pc, #592]	; (800d544 <_fx_file_read+0x290>)
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d001      	beq.n	800d2fa <_fx_file_read+0x46>
 800d2f6:	2311      	movs	r3, #17
 800d2f8:	e279      	b.n	800d7ee <_fx_file_read+0x53a>
 800d2fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d300:	f04f 31ff 	mov.w	r1, #4294967295
 800d304:	4618      	mov	r0, r3
 800d306:	f006 f997 	bl	8013638 <_tx_mutex_get>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <_fx_file_read+0x60>
 800d310:	2311      	movs	r3, #17
 800d312:	e26c      	b.n	800d7ee <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800d314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d316:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800d31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d31c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800d320:	4290      	cmp	r0, r2
 800d322:	eb71 0303 	sbcs.w	r3, r1, r3
 800d326:	d30a      	bcc.n	800d33e <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d32a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d32e:	4618      	mov	r0, r3
 800d330:	f006 fbfa 	bl	8013b28 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800d334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800d33a:	2309      	movs	r3, #9
 800d33c:	e257      	b.n	800d7ee <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800d33e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800d344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d346:	2200      	movs	r2, #0
 800d348:	4698      	mov	r8, r3
 800d34a:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800d34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d34e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d354:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d358:	1a84      	subs	r4, r0, r2
 800d35a:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800d35e:	4544      	cmp	r4, r8
 800d360:	eb75 0309 	sbcs.w	r3, r5, r9
 800d364:	d209      	bcs.n	800d37a <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800d366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d368:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d36c:	4611      	mov	r1, r2
 800d36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d370:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d374:	4613      	mov	r3, r2
 800d376:	1acb      	subs	r3, r1, r3
 800d378:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800d37a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d37c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800d380:	e20a      	b.n	800d798 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d386:	2b00      	cmp	r3, #0
 800d388:	d105      	bne.n	800d396 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800d38a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d38c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800d38e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d392:	4293      	cmp	r3, r2
 800d394:	d24d      	bcs.n	800d432 <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d398:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d39c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d39e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800d3a0:	2304      	movs	r3, #4
 800d3a2:	9302      	str	r3, [sp, #8]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	9200      	str	r2, [sp, #0]
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d3b0:	f004 fb0e 	bl	80119d0 <_fx_utility_logical_sector_read>
 800d3b4:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800d3b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d007      	beq.n	800d3cc <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d3bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f006 fbb0 	bl	8013b28 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800d3c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ca:	e210      	b.n	800d7ee <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d3cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800d3da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d903      	bls.n	800d3ee <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800d3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d3ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d3f0:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800d3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d400:	4618      	mov	r0, r3
 800d402:	f004 fee1 	bl	80121c8 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800d406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d40e:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800d410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d412:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800d414:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800d422:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d42a:	4413      	add	r3, r2
 800d42c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d430:	e108      	b.n	800d644 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800d432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d43e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800d442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d44a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d44e:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d45e:	e033      	b.n	800d4c8 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800d460:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d464:	461a      	mov	r2, r3
 800d466:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d46a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d46c:	f002 fea2 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800d470:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10a      	bne.n	800d48e <_fx_file_read+0x1da>
 800d478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d907      	bls.n	800d48e <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d47e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d480:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d484:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d20c      	bcs.n	800d4a8 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d48e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d490:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d494:	4618      	mov	r0, r3
 800d496:	f006 fb47 	bl	8013b28 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d49a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <_fx_file_read+0x1f0>
                        {
                            return(status);
 800d4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4a2:	e1a4      	b.n	800d7ee <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	e1a2      	b.n	800d7ee <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800d4a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d110      	bne.n	800d4d6 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800d4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800d4ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4c2:	4413      	add	r3, r2
 800d4c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800d4c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d4cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d3c5      	bcc.n	800d460 <_fx_file_read+0x1ac>
 800d4d4:	e000      	b.n	800d4d8 <_fx_file_read+0x224>
                        break;
 800d4d6:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800d4d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d203      	bcs.n	800d4ec <_fx_file_read+0x238>
            {
                sectors = i;
 800d4e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800d4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d129      	bne.n	800d548 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800d4fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4fc:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800d4fe:	2304      	movs	r3, #4
 800d500:	9302      	str	r3, [sp, #8]
 800d502:	2301      	movs	r3, #1
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	9200      	str	r2, [sp, #0]
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d50e:	f004 fa5f 	bl	80119d0 <_fx_utility_logical_sector_read>
 800d512:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d51a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d51c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d520:	4618      	mov	r0, r3
 800d522:	f006 fb01 	bl	8013b28 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d528:	e161      	b.n	800d7ee <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800d52a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d52c:	6898      	ldr	r0, [r3, #8]
 800d52e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d532:	461a      	mov	r2, r3
 800d534:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d538:	f004 fe46 	bl	80121c8 <_fx_utility_memory_copy>
 800d53c:	e02f      	b.n	800d59e <_fx_file_read+0x2ea>
 800d53e:	bf00      	nop
 800d540:	46494c45 	.word	0x46494c45
 800d544:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800d548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d54a:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800d54e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d550:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d554:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800d558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800d55e:	2304      	movs	r3, #4
 800d560:	9302      	str	r3, [sp, #8]
 800d562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d574:	f004 fa2c 	bl	80119d0 <_fx_utility_logical_sector_read>
 800d578:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800d57a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d57c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d580:	461a      	mov	r2, r3
 800d582:	2300      	movs	r3, #0
 800d584:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800d588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d007      	beq.n	800d59e <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d58e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d590:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d594:	4618      	mov	r0, r3
 800d596:	f006 fac7 	bl	8013b28 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d59a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d59c:	e127      	b.n	800d7ee <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800d59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800d5a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5ae:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800d5b0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	18c3      	adds	r3, r0, r3
 800d5b8:	653b      	str	r3, [r7, #80]	; 0x50
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	eb41 0303 	adc.w	r3, r1, r3
 800d5c0:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800d5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d5c8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d5cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5d8:	4413      	add	r3, r2
 800d5da:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800d5dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800d5e0:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800d5e4:	18ca      	adds	r2, r1, r3
 800d5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5e8:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800d5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5f2:	4413      	add	r3, r2
 800d5f4:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800d5f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5fa:	fbb1 f3f2 	udiv	r3, r1, r2
 800d5fe:	fb02 f303 	mul.w	r3, r2, r3
 800d602:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800d604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d606:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800d608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800d60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60e:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800d610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d616:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d61a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d61c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d620:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800d624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d628:	1a9b      	subs	r3, r3, r2
 800d62a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800d62e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d636:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800d63a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d63e:	4413      	add	r3, r2
 800d640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800d644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800d648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800d64c:	429a      	cmp	r2, r3
 800d64e:	f0c0 80a3 	bcc.w	800d798 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d656:	2b00      	cmp	r3, #0
 800d658:	d11a      	bne.n	800d690 <_fx_file_read+0x3dc>
 800d65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d65c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d660:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d662:	2000      	movs	r0, #0
 800d664:	64b9      	str	r1, [r7, #72]	; 0x48
 800d666:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d668:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d66c:	4621      	mov	r1, r4
 800d66e:	1851      	adds	r1, r2, r1
 800d670:	6439      	str	r1, [r7, #64]	; 0x40
 800d672:	4629      	mov	r1, r5
 800d674:	414b      	adcs	r3, r1
 800d676:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800d678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d67a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800d67e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d682:	4621      	mov	r1, r4
 800d684:	4291      	cmp	r1, r2
 800d686:	4629      	mov	r1, r5
 800d688:	eb71 0303 	sbcs.w	r3, r1, r3
 800d68c:	f080 808a 	bcs.w	800d7a4 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800d690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800d69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800d69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d368      	bcc.n	800d778 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800d6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a8:	6a19      	ldr	r1, [r3, #32]
 800d6aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d6b2:	f002 fd7f 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800d6b6:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d6b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <_fx_file_read+0x420>
 800d6be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d907      	bls.n	800d6d4 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800d6c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d6ca:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d6ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d20c      	bcs.n	800d6ee <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800d6d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f006 fa24 	bl	8013b28 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800d6e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <_fx_file_read+0x436>
                        {
                            return(status);
 800d6e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6e8:	e081      	b.n	800d7ee <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800d6ea:	2308      	movs	r3, #8
 800d6ec:	e07f      	b.n	800d7ee <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800d6ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f2:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800d6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fc:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d6fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d702:	2200      	movs	r2, #0
 800d704:	63bb      	str	r3, [r7, #56]	; 0x38
 800d706:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d70a:	2200      	movs	r2, #0
 800d70c:	633b      	str	r3, [r7, #48]	; 0x30
 800d70e:	637a      	str	r2, [r7, #52]	; 0x34
 800d710:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d714:	460b      	mov	r3, r1
 800d716:	3b02      	subs	r3, #2
 800d718:	62bb      	str	r3, [r7, #40]	; 0x28
 800d71a:	4613      	mov	r3, r2
 800d71c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d720:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d726:	2200      	movs	r2, #0
 800d728:	623b      	str	r3, [r7, #32]
 800d72a:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800d72c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d730:	462b      	mov	r3, r5
 800d732:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d736:	4642      	mov	r2, r8
 800d738:	fb02 f203 	mul.w	r2, r2, r3
 800d73c:	464b      	mov	r3, r9
 800d73e:	4621      	mov	r1, r4
 800d740:	fb01 f303 	mul.w	r3, r1, r3
 800d744:	4413      	add	r3, r2
 800d746:	4622      	mov	r2, r4
 800d748:	4641      	mov	r1, r8
 800d74a:	fba2 ab01 	umull	sl, fp, r2, r1
 800d74e:	445b      	add	r3, fp
 800d750:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d752:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d756:	460b      	mov	r3, r1
 800d758:	eb13 030a 	adds.w	r3, r3, sl
 800d75c:	61bb      	str	r3, [r7, #24]
 800d75e:	4613      	mov	r3, r2
 800d760:	eb43 030b 	adc.w	r3, r3, fp
 800d764:	61fb      	str	r3, [r7, #28]
 800d766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d768:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d76c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800d770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d772:	2300      	movs	r3, #0
 800d774:	6393      	str	r3, [r2, #56]	; 0x38
 800d776:	e00c      	b.n	800d792 <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800d778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d77a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d77e:	1c51      	adds	r1, r2, #1
 800d780:	6139      	str	r1, [r7, #16]
 800d782:	f143 0300 	adc.w	r3, r3, #0
 800d786:	617b      	str	r3, [r7, #20]
 800d788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d78a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d78e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800d792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d794:	2300      	movs	r3, #0
 800d796:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800d798:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f47f adf0 	bne.w	800d382 <_fx_file_read+0xce>
 800d7a2:	e000      	b.n	800d7a6 <_fx_file_read+0x4f2>
                break;
 800d7a4:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800d7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d7ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	1851      	adds	r1, r2, r1
 800d7bc:	6039      	str	r1, [r7, #0]
 800d7be:	4629      	mov	r1, r5
 800d7c0:	eb43 0101 	adc.w	r1, r3, r1
 800d7c4:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800d7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d7cc:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800d7d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d7d4:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800d7d6:	4b08      	ldr	r3, [pc, #32]	; (800d7f8 <_fx_file_read+0x544>)
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800d7e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f006 f99e 	bl	8013b28 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3798      	adds	r7, #152	; 0x98
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7f8:	24014c90 	.word	0x24014c90

0800d7fc <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	2000      	movs	r0, #0
 800d80a:	460a      	mov	r2, r1
 800d80c:	4603      	mov	r3, r0
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fe fd9e 	bl	800c350 <_fx_file_extended_seek>
 800d814:	4603      	mov	r3, r0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800d820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d824:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800d828:	af04      	add	r7, sp, #16
 800d82a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800d82e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800d832:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800d836:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	4bd9      	ldr	r3, [pc, #868]	; (800dba4 <_fx_file_write+0x384>)
 800d83e:	429a      	cmp	r2, r3
 800d840:	d002      	beq.n	800d848 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800d842:	2307      	movs	r3, #7
 800d844:	f000 bf26 	b.w	800e694 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800d848:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800d852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d856:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d860:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800d864:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d868:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d86c:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800d870:	2000      	movs	r0, #0
 800d872:	460c      	mov	r4, r1
 800d874:	4605      	mov	r5, r0
 800d876:	eb12 0804 	adds.w	r8, r2, r4
 800d87a:	eb43 0905 	adc.w	r9, r3, r5
 800d87e:	f1b9 0f01 	cmp.w	r9, #1
 800d882:	d302      	bcc.n	800d88a <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800d884:	230a      	movs	r3, #10
 800d886:	f000 bf05 	b.w	800e694 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d88a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	4bc5      	ldr	r3, [pc, #788]	; (800dba8 <_fx_file_write+0x388>)
 800d892:	429a      	cmp	r2, r3
 800d894:	d002      	beq.n	800d89c <_fx_file_write+0x7c>
 800d896:	2311      	movs	r3, #17
 800d898:	f000 befc 	b.w	800e694 <_fx_file_write+0xe74>
 800d89c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8a0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8a4:	f04f 31ff 	mov.w	r1, #4294967295
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f005 fec5 	bl	8013638 <_tx_mutex_get>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <_fx_file_write+0x9a>
 800d8b4:	2311      	movs	r3, #17
 800d8b6:	f000 beed 	b.w	800e694 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800d8ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d8c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8ca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f006 f92a 	bl	8013b28 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800d8d4:	2323      	movs	r3, #35	; 0x23
 800d8d6:	f000 bedd 	b.w	800e694 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800d8da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d009      	beq.n	800d8f8 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d8e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8e8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f006 f91b 	bl	8013b28 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800d8f2:	2306      	movs	r3, #6
 800d8f4:	f000 bece 	b.w	800e694 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d8f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d8fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d904:	fb02 f303 	mul.w	r3, r2, r3
 800d908:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d90c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d910:	2b00      	cmp	r3, #0
 800d912:	d109      	bne.n	800d928 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800d914:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d918:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d91c:	4618      	mov	r0, r3
 800d91e:	f006 f903 	bl	8013b28 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d922:	2302      	movs	r3, #2
 800d924:	f000 beb6 	b.w	800e694 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800d928:	2300      	movs	r3, #0
 800d92a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800d92e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d932:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800d936:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d93a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d93e:	ebb0 0a02 	subs.w	sl, r0, r2
 800d942:	eb61 0b03 	sbc.w	fp, r1, r3
 800d946:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800d950:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800d954:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800d958:	460b      	mov	r3, r1
 800d95a:	459a      	cmp	sl, r3
 800d95c:	4613      	mov	r3, r2
 800d95e:	eb7b 0303 	sbcs.w	r3, fp, r3
 800d962:	f080 82a9 	bcs.w	800deb8 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d966:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d96a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d96e:	4413      	add	r3, r2
 800d970:	3b01      	subs	r3, #1
 800d972:	2200      	movs	r2, #0
 800d974:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d978:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d97c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d980:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800d984:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d988:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d98c:	1a84      	subs	r4, r0, r2
 800d98e:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d992:	eb61 0303 	sbc.w	r3, r1, r3
 800d996:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d99a:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800d99e:	4623      	mov	r3, r4
 800d9a0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	189b      	adds	r3, r3, r2
 800d9a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	462a      	mov	r2, r5
 800d9b0:	eb42 0303 	adc.w	r3, r2, r3
 800d9b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800d9b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800d9c2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d9c6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d9ca:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d9ce:	f7f2 fdf7 	bl	80005c0 <__aeabi_uldivmod>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800d9dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d9e2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d909      	bls.n	800d9fe <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800d9ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9ee:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f006 f898 	bl	8013b28 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800d9f8:	230a      	movs	r3, #10
 800d9fa:	f000 be4b 	b.w	800e694 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800d9fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da02:	691a      	ldr	r2, [r3, #16]
 800da04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da08:	441a      	add	r2, r3
 800da0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da0e:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800da10:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da14:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800da18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800da1c:	2200      	movs	r2, #0
 800da1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800da22:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800da26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800da2a:	2200      	movs	r2, #0
 800da2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800da30:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800da34:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800da38:	464b      	mov	r3, r9
 800da3a:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800da3e:	4652      	mov	r2, sl
 800da40:	fb02 f203 	mul.w	r2, r2, r3
 800da44:	465b      	mov	r3, fp
 800da46:	4644      	mov	r4, r8
 800da48:	fb04 f303 	mul.w	r3, r4, r3
 800da4c:	4413      	add	r3, r2
 800da4e:	4642      	mov	r2, r8
 800da50:	4654      	mov	r4, sl
 800da52:	fba2 4204 	umull	r4, r2, r2, r4
 800da56:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800da5a:	4622      	mov	r2, r4
 800da5c:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800da60:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800da64:	4413      	add	r3, r2
 800da66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800da6a:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800da6e:	4623      	mov	r3, r4
 800da70:	18c3      	adds	r3, r0, r3
 800da72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800da76:	462b      	mov	r3, r5
 800da78:	eb41 0303 	adc.w	r3, r1, r3
 800da7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800da80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800da84:	2b01      	cmp	r3, #1
 800da86:	d308      	bcc.n	800da9a <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800da88:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800da8c:	f04f 32ff 	mov.w	r2, #4294967295
 800da90:	f04f 0300 	mov.w	r3, #0
 800da94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800da98:	e03d      	b.n	800db16 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800da9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800da9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800daa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800daa6:	2200      	movs	r2, #0
 800daa8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800daac:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800dab0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800daba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800dabe:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800dac2:	464b      	mov	r3, r9
 800dac4:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800dac8:	4652      	mov	r2, sl
 800daca:	fb02 f203 	mul.w	r2, r2, r3
 800dace:	465b      	mov	r3, fp
 800dad0:	4644      	mov	r4, r8
 800dad2:	fb04 f303 	mul.w	r3, r4, r3
 800dad6:	4413      	add	r3, r2
 800dad8:	4642      	mov	r2, r8
 800dada:	4654      	mov	r4, sl
 800dadc:	fba2 4204 	umull	r4, r2, r2, r4
 800dae0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800dae4:	4622      	mov	r2, r4
 800dae6:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800daea:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800daee:	4413      	add	r3, r2
 800daf0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800daf4:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800daf8:	4623      	mov	r3, r4
 800dafa:	18c3      	adds	r3, r0, r3
 800dafc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800db00:	462b      	mov	r3, r5
 800db02:	eb41 0303 	adc.w	r3, r1, r3
 800db06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800db0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db0e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800db12:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800db16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db1a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800db1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db26:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800db28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800db32:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800db3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800db48:	e16f      	b.n	800de2a <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800db4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800db4e:	3b01      	subs	r3, #1
 800db50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800db54:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d109      	bne.n	800db70 <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800db5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db60:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db64:	4618      	mov	r0, r3
 800db66:	f005 ffdf 	bl	8013b28 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800db6a:	230a      	movs	r3, #10
 800db6c:	f000 bd92 	b.w	800e694 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800db70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800db74:	461a      	mov	r2, r3
 800db76:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800db7a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800db7e:	f002 fb19 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800db82:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800db86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800db8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800db92:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db96:	4618      	mov	r0, r3
 800db98:	f005 ffc6 	bl	8013b28 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800db9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dba0:	f000 bd78 	b.w	800e694 <_fx_file_write+0xe74>
 800dba4:	46494c45 	.word	0x46494c45
 800dba8:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800dbac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800dbb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d116      	bne.n	800dbec <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800dbbe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800dbcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800dbd4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	3302      	adds	r3, #2
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d316      	bcc.n	800dc0e <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800dbe0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800dbea:	e010      	b.n	800dc0e <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800dbec:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800dbf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfc:	1c9a      	adds	r2, r3, #2
 800dbfe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d3a6      	bcc.n	800db54 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800dc06:	2302      	movs	r3, #2
 800dc08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800dc0c:	e7a2      	b.n	800db54 <_fx_file_write+0x334>
                        break;
 800dc0e:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800dc10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d103      	bne.n	800dc20 <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800dc18:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800dc20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 808f 	beq.w	800dd48 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800dc2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc2e:	69da      	ldr	r2, [r3, #28]
 800dc30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d009      	beq.n	800dc4c <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800dc38:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800dc3c:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800dc40:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800dc44:	f002 fcdf 	bl	8010606 <_fx_utility_FAT_entry_write>
 800dc48:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800dc4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00a      	beq.n	800dc6a <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dc54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc58:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f005 ff63 	bl	8013b28 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800dc62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc66:	f000 bd15 	b.w	800e694 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800dc6a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800dc70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc76:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	f0c0 80cc 	bcc.w	800de16 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800dc7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800dc84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	f0c0 80c3 	bcc.w	800de16 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800dc90:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dc94:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dc98:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800dc9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800dca8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dcac:	2300      	movs	r3, #0
 800dcae:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dcb0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dcbc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dcc0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dcc4:	3b02      	subs	r3, #2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dccc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800dcd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dcdc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dce0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800dce4:	462b      	mov	r3, r5
 800dce6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800dcea:	4642      	mov	r2, r8
 800dcec:	fb02 f203 	mul.w	r2, r2, r3
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	fb01 f303 	mul.w	r3, r1, r3
 800dcf8:	4413      	add	r3, r2
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4641      	mov	r1, r8
 800dcfe:	fba2 1201 	umull	r1, r2, r2, r1
 800dd02:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800dd06:	460a      	mov	r2, r1
 800dd08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800dd0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800dd10:	4413      	add	r3, r2
 800dd12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dd16:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800dd1a:	4623      	mov	r3, r4
 800dd1c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800dd20:	4602      	mov	r2, r0
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd28:	462b      	mov	r3, r5
 800dd2a:	460a      	mov	r2, r1
 800dd2c:	4153      	adcs	r3, r2
 800dd2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dd32:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dd36:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800dd3a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800dd3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd42:	2300      	movs	r3, #0
 800dd44:	6313      	str	r3, [r2, #48]	; 0x30
 800dd46:	e066      	b.n	800de16 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800dd48:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd4c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd50:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800dd52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd5a:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800dd5c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800dd60:	2300      	movs	r3, #0
 800dd62:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dd64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dd70:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dd74:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800dd78:	3b02      	subs	r3, #2
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dd80:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800dd84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dd90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800dd94:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800dd98:	462b      	mov	r3, r5
 800dd9a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800dd9e:	4642      	mov	r2, r8
 800dda0:	fb02 f203 	mul.w	r2, r2, r3
 800dda4:	464b      	mov	r3, r9
 800dda6:	4621      	mov	r1, r4
 800dda8:	fb01 f303 	mul.w	r3, r1, r3
 800ddac:	4413      	add	r3, r2
 800ddae:	4622      	mov	r2, r4
 800ddb0:	4641      	mov	r1, r8
 800ddb2:	fba2 1201 	umull	r1, r2, r2, r1
 800ddb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800ddba:	460a      	mov	r2, r1
 800ddbc:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800ddc0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ddca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800ddce:	4623      	mov	r3, r4
 800ddd0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	189b      	adds	r3, r3, r2
 800ddd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dddc:	462b      	mov	r3, r5
 800ddde:	460a      	mov	r2, r1
 800dde0:	4153      	adcs	r3, r2
 800dde2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dde6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ddea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ddee:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800ddf2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800ddfa:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800ddfe:	f04f 0200 	mov.w	r2, #0
 800de02:	f04f 0300 	mov.w	r3, #0
 800de06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800de0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800de0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800de16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800de1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800de1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800de2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f47f ae8b 	bne.w	800db4a <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800de34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800de3c:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800de40:	461a      	mov	r2, r3
 800de42:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800de46:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800de4a:	f002 fbdc 	bl	8010606 <_fx_utility_FAT_entry_write>
 800de4e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800de52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00a      	beq.n	800de70 <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800de5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de5e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de62:	4618      	mov	r0, r3
 800de64:	f005 fe60 	bl	8013b28 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800de68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de6c:	f000 bc12 	b.w	800e694 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800de70:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de74:	69db      	ldr	r3, [r3, #28]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d019      	beq.n	800deae <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800de7a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800de84:	4619      	mov	r1, r3
 800de86:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800de8a:	f002 fbbc 	bl	8010606 <_fx_utility_FAT_entry_write>
 800de8e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800de92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de96:	2b00      	cmp	r3, #0
 800de98:	d009      	beq.n	800deae <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800de9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800de9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dea2:	4618      	mov	r0, r3
 800dea4:	f005 fe40 	bl	8013b28 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800dea8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800deac:	e3f2      	b.n	800e694 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800deae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800deb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800deb6:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800deb8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800debc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800debe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d31b      	bcc.n	800df00 <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800dec8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800decc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ded0:	1c51      	adds	r1, r2, #1
 800ded2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ded6:	f143 0300 	adc.w	r3, r3, #0
 800deda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dede:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dee2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dee6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800deea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def0:	1c5a      	adds	r2, r3, #1
 800def2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800def6:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800def8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800defc:	2300      	movs	r3, #0
 800defe:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800df00:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800df04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800df08:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800df0c:	2200      	movs	r2, #0
 800df0e:	613b      	str	r3, [r7, #16]
 800df10:	617a      	str	r2, [r7, #20]
 800df12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800df16:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800df1a:	e290      	b.n	800e43e <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800df1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df22:	2b00      	cmp	r3, #0
 800df24:	d111      	bne.n	800df4a <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800df26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df32:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800df36:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800df3a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800df3e:	4621      	mov	r1, r4
 800df40:	428a      	cmp	r2, r1
 800df42:	4629      	mov	r1, r5
 800df44:	418b      	sbcs	r3, r1
 800df46:	f080 8096 	bcs.w	800e076 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800df4a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800df52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df56:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800df58:	2304      	movs	r3, #4
 800df5a:	9302      	str	r3, [sp, #8]
 800df5c:	2301      	movs	r3, #1
 800df5e:	9301      	str	r3, [sp, #4]
 800df60:	9200      	str	r2, [sp, #0]
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800df6a:	f003 fd31 	bl	80119d0 <_fx_utility_logical_sector_read>
 800df6e:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800df72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800df76:	2b00      	cmp	r3, #0
 800df78:	d009      	beq.n	800df8e <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800df7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df7e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800df82:	4618      	mov	r0, r3
 800df84:	f005 fdd0 	bl	8013b28 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800df88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800df8c:	e382      	b.n	800e694 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800df8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800df92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800df94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800df98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800dfa0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dfaa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800dfae:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800dfb2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	428a      	cmp	r2, r1
 800dfba:	4629      	mov	r1, r5
 800dfbc:	418b      	sbcs	r3, r1
 800dfbe:	d203      	bcs.n	800dfc8 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800dfc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800dfc4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800dfc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dfcc:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800dfce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800dfda:	4619      	mov	r1, r3
 800dfdc:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800dfe0:	f004 f8f2 	bl	80121c8 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dfe4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dfe8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dfec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dff0:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800dff2:	2304      	movs	r3, #4
 800dff4:	9302      	str	r3, [sp, #8]
 800dff6:	2301      	movs	r3, #1
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	9200      	str	r2, [sp, #0]
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e004:	f003 ff78 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800e008:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e00c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e010:	2b00      	cmp	r3, #0
 800e012:	d009      	beq.n	800e028 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e014:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e018:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e01c:	4618      	mov	r0, r3
 800e01e:	f005 fd83 	bl	8013b28 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e022:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e026:	e335      	b.n	800e694 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800e028:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e02c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e02e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e032:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800e034:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e038:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800e03a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e03e:	2200      	movs	r2, #0
 800e040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e048:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e04c:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e050:	4621      	mov	r1, r4
 800e052:	1a51      	subs	r1, r2, r1
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4629      	mov	r1, r5
 800e058:	eb63 0301 	sbc.w	r3, r3, r1
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e062:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800e066:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800e06a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e06e:	4413      	add	r3, r2
 800e070:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800e074:	e10d      	b.n	800e292 <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800e076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e086:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e08a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800e08e:	f7f2 fa97 	bl	80005c0 <__aeabi_uldivmod>
 800e092:	4602      	mov	r2, r0
 800e094:	460b      	mov	r3, r1
 800e096:	4613      	mov	r3, r2
 800e098:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800e09c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800e0a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e0aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e0ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e0b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800e0c0:	e03f      	b.n	800e142 <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800e0c2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800e0cc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e0d0:	f002 f870 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800e0d4:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e0d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10d      	bne.n	800e0fc <_fx_file_write+0x8dc>
 800e0e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d909      	bls.n	800e0fc <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e0e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e0f0:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e0f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d20f      	bcs.n	800e11c <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e0fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e100:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e104:	4618      	mov	r0, r3
 800e106:	f005 fd0f 	bl	8013b28 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e10a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800e112:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e116:	e2bd      	b.n	800e694 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e118:	2308      	movs	r3, #8
 800e11a:	e2bb      	b.n	800e694 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800e11c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e120:	1c5a      	adds	r2, r3, #1
 800e122:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e126:	429a      	cmp	r2, r3
 800e128:	d112      	bne.n	800e150 <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800e12a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e12e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e132:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e138:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e13c:	4413      	add	r3, r2
 800e13e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e142:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e146:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d3b9      	bcc.n	800e0c2 <_fx_file_write+0x8a2>
 800e14e:	e000      	b.n	800e152 <_fx_file_write+0x932>
                        break;
 800e150:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800e152:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e156:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d203      	bcs.n	800e166 <_fx_file_write+0x946>
            {
                sectors = i;
 800e15e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e162:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e166:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e16a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800e16e:	2304      	movs	r3, #4
 800e170:	9302      	str	r3, [sp, #8]
 800e172:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e176:	9301      	str	r3, [sp, #4]
 800e178:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e186:	f003 feb7 	bl	8011ef8 <_fx_utility_logical_sector_write>
 800e18a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e18e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e196:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e19a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f005 fcc2 	bl	8013b28 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e1a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e1a8:	e274      	b.n	800e694 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800e1aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800e1b2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e1be:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800e1c2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	18c3      	adds	r3, r0, r3
 800e1ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	eb41 0303 	adc.w	r3, r1, r3
 800e1d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800e1d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1dc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e1e0:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800e1e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800e1ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1f0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1f4:	4413      	add	r3, r2
 800e1f6:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800e1f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800e1fe:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800e202:	18ca      	adds	r2, r1, r3
 800e204:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e208:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800e20a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e210:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e214:	4413      	add	r3, r2
 800e216:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800e218:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800e21e:	fbb1 f3f2 	udiv	r3, r1, r2
 800e222:	fb02 f303 	mul.w	r3, r2, r3
 800e226:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800e228:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e22c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800e22e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800e234:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e238:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800e23a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e23e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e242:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800e244:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e24a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e24e:	fb02 f303 	mul.w	r3, r2, r3
 800e252:	2200      	movs	r2, #0
 800e254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800e25c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e260:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e264:	4621      	mov	r1, r4
 800e266:	1a51      	subs	r1, r2, r1
 800e268:	6039      	str	r1, [r7, #0]
 800e26a:	4629      	mov	r1, r5
 800e26c:	eb63 0301 	sbc.w	r3, r3, r1
 800e270:	607b      	str	r3, [r7, #4]
 800e272:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e276:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800e27a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e27e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e280:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e284:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800e288:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e28c:	4413      	add	r3, r2
 800e28e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800e292:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800e298:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	f0c0 80cd 	bcc.w	800e43e <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800e2a4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	d11f      	bne.n	800e2ec <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800e2ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e2b4:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e2be:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800e2c2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	1851      	adds	r1, r2, r1
 800e2ca:	67b9      	str	r1, [r7, #120]	; 0x78
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	414b      	adcs	r3, r1
 800e2d0:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800e2d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2d6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800e2da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800e2de:	4621      	mov	r1, r4
 800e2e0:	4291      	cmp	r1, r2
 800e2e2:	4629      	mov	r1, r5
 800e2e4:	eb71 0303 	sbcs.w	r3, r1, r3
 800e2e8:	f080 80af 	bcs.w	800e44a <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800e2ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800e2fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e2fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800e300:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800e306:	429a      	cmp	r2, r3
 800e308:	f0c0 8086 	bcc.w	800e418 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800e30c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e310:	6a19      	ldr	r1, [r3, #32]
 800e312:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e316:	461a      	mov	r2, r3
 800e318:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e31c:	f001 ff4a 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800e320:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e324:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10d      	bne.n	800e348 <_fx_file_write+0xb28>
 800e32c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e330:	2b01      	cmp	r3, #1
 800e332:	d909      	bls.n	800e348 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e334:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e338:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e33c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e340:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e344:	429a      	cmp	r2, r3
 800e346:	d20f      	bcs.n	800e368 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e348:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e34c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e350:	4618      	mov	r0, r3
 800e352:	f005 fbe9 	bl	8013b28 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e356:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d002      	beq.n	800e364 <_fx_file_write+0xb44>
                        {
                            return(status);
 800e35e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e362:	e197      	b.n	800e694 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e364:	2308      	movs	r3, #8
 800e366:	e195      	b.n	800e694 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800e368:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800e36c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e370:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800e372:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e378:	1c5a      	adds	r2, r3, #1
 800e37a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e37e:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e380:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e386:	2200      	movs	r2, #0
 800e388:	673b      	str	r3, [r7, #112]	; 0x70
 800e38a:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e38c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e390:	2200      	movs	r2, #0
 800e392:	66bb      	str	r3, [r7, #104]	; 0x68
 800e394:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e396:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e39a:	460b      	mov	r3, r1
 800e39c:	3b02      	subs	r3, #2
 800e39e:	663b      	str	r3, [r7, #96]	; 0x60
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e3a6:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e3a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3b2:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800e3b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e3b8:	462b      	mov	r3, r5
 800e3ba:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800e3be:	4642      	mov	r2, r8
 800e3c0:	fb02 f203 	mul.w	r2, r2, r3
 800e3c4:	464b      	mov	r3, r9
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	fb01 f303 	mul.w	r3, r1, r3
 800e3cc:	4413      	add	r3, r2
 800e3ce:	4622      	mov	r2, r4
 800e3d0:	4641      	mov	r1, r8
 800e3d2:	fba2 1201 	umull	r1, r2, r2, r1
 800e3d6:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800e3da:	460a      	mov	r2, r1
 800e3dc:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800e3e0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e3ea:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800e3ee:	4623      	mov	r3, r4
 800e3f0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	189b      	adds	r3, r3, r2
 800e3f8:	653b      	str	r3, [r7, #80]	; 0x50
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	460a      	mov	r2, r1
 800e3fe:	4153      	adcs	r3, r2
 800e400:	657b      	str	r3, [r7, #84]	; 0x54
 800e402:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e406:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e40a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800e40e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e412:	2300      	movs	r3, #0
 800e414:	6393      	str	r3, [r2, #56]	; 0x38
 800e416:	e00e      	b.n	800e436 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800e418:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e41c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e420:	1c51      	adds	r1, r2, #1
 800e422:	64b9      	str	r1, [r7, #72]	; 0x48
 800e424:	f143 0300 	adc.w	r3, r3, #0
 800e428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e42a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e42e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e432:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800e436:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e43a:	2300      	movs	r3, #0
 800e43c:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800e43e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e442:	4313      	orrs	r3, r2
 800e444:	f47f ad6a 	bne.w	800df1c <_fx_file_write+0x6fc>
 800e448:	e000      	b.n	800e44c <_fx_file_write+0xc2c>
                break;
 800e44a:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800e44c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e450:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e454:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e458:	2000      	movs	r0, #0
 800e45a:	6439      	str	r1, [r7, #64]	; 0x40
 800e45c:	6478      	str	r0, [r7, #68]	; 0x44
 800e45e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e462:	4621      	mov	r1, r4
 800e464:	1851      	adds	r1, r2, r1
 800e466:	63b9      	str	r1, [r7, #56]	; 0x38
 800e468:	4629      	mov	r1, r5
 800e46a:	eb43 0101 	adc.w	r1, r3, r1
 800e46e:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800e470:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e474:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e478:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800e47c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e480:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e484:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e488:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800e48c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e490:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800e494:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e498:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800e49c:	4290      	cmp	r0, r2
 800e49e:	eb71 0303 	sbcs.w	r3, r1, r3
 800e4a2:	f080 80de 	bcs.w	800e662 <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e4a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e4ae:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e4b2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800e4b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800e4c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e4ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800e4ce:	e0c3      	b.n	800e658 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800e4d0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800e4d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	f000 80b3 	beq.w	800e644 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800e4de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e4e2:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e4e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4ea:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800e4ee:	4299      	cmp	r1, r3
 800e4f0:	bf08      	it	eq
 800e4f2:	4290      	cmpeq	r0, r2
 800e4f4:	f040 80a6 	bne.w	800e644 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800e4f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e4fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800e500:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800e508:	429a      	cmp	r2, r3
 800e50a:	f040 809b 	bne.w	800e644 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800e50e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e512:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e516:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e51a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800e51e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e522:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800e526:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e52a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800e52e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e532:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800e536:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e53a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800e53e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e542:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800e546:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e54a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800e54e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e552:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800e556:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e55a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800e55e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e562:	69da      	ldr	r2, [r3, #28]
 800e564:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e568:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800e56a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e56e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800e572:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e576:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800e57a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d15f      	bne.n	800e644 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800e584:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e588:	691a      	ldr	r2, [r3, #16]
 800e58a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e58e:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800e590:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e594:	695a      	ldr	r2, [r3, #20]
 800e596:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e59a:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800e59c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e5a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ae:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e5b0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	3b02      	subs	r3, #2
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5bc:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e5be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e5c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	623b      	str	r3, [r7, #32]
 800e5c8:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800e5ca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e5d4:	4642      	mov	r2, r8
 800e5d6:	fb02 f203 	mul.w	r2, r2, r3
 800e5da:	464b      	mov	r3, r9
 800e5dc:	4621      	mov	r1, r4
 800e5de:	fb01 f303 	mul.w	r3, r1, r3
 800e5e2:	4413      	add	r3, r2
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	4641      	mov	r1, r8
 800e5e8:	fba2 1201 	umull	r1, r2, r2, r1
 800e5ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800e5f0:	460a      	mov	r2, r1
 800e5f2:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800e5f6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e604:	4623      	mov	r3, r4
 800e606:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800e60a:	4602      	mov	r2, r0
 800e60c:	189b      	adds	r3, r3, r2
 800e60e:	61bb      	str	r3, [r7, #24]
 800e610:	462b      	mov	r3, r5
 800e612:	460a      	mov	r2, r1
 800e614:	4153      	adcs	r3, r2
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e61c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e620:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800e624:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e628:	2200      	movs	r2, #0
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800e62c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e630:	2200      	movs	r2, #0
 800e632:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800e634:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800e638:	f04f 0200 	mov.w	r2, #0
 800e63c:	f04f 0300 	mov.w	r3, #0
 800e640:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800e644:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e64a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800e64e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e652:	3b01      	subs	r3, #1
 800e654:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800e658:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f47f af37 	bne.w	800e4d0 <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800e662:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e666:	2201      	movs	r2, #1
 800e668:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800e66a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e66e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e672:	2b00      	cmp	r3, #0
 800e674:	d006      	beq.n	800e684 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800e676:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e67a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e67e:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800e682:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800e684:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e688:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e68c:	4618      	mov	r0, r3
 800e68e:	f005 fa4b 	bl	8013b28 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800e69a:	46bd      	mov	sp, r7
 800e69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6a0 <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a3f      	ldr	r2, [pc, #252]	; (800e7b8 <_fx_media_abort+0x118>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d001      	beq.n	800e6c4 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e6c0:	2311      	movs	r3, #17
 800e6c2:	e074      	b.n	800e7ae <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a3b      	ldr	r2, [pc, #236]	; (800e7b8 <_fx_media_abort+0x118>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d001      	beq.n	800e6d2 <_fx_media_abort+0x32>
 800e6ce:	2311      	movs	r3, #17
 800e6d0:	e06d      	b.n	800e7ae <_fx_media_abort+0x10e>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e6d8:	f04f 31ff 	mov.w	r1, #4294967295
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f004 ffab 	bl	8013638 <_tx_mutex_get>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <_fx_media_abort+0x4c>
 800e6e8:	2311      	movs	r3, #17
 800e6ea:	e060      	b.n	800e7ae <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e6f2:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e6fa:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800e6fc:	e008      	b.n	800e710 <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	4a2e      	ldr	r2, [pc, #184]	; (800e7bc <_fx_media_abort+0x11c>)
 800e702:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e708:	61bb      	str	r3, [r7, #24]
        open_count--;
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1f3      	bne.n	800e6fe <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2203      	movs	r2, #3
 800e71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2290      	movs	r2, #144	; 0x90
 800e722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e730:	f3ef 8310 	mrs	r3, PRIMASK
 800e734:	613b      	str	r3, [r7, #16]
    return(posture);
 800e736:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e738:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e73a:	b672      	cpsid	i
    return(int_posture);
 800e73c:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800e73e:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800e740:	4b1f      	ldr	r3, [pc, #124]	; (800e7c0 <_fx_media_abort+0x120>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d103      	bne.n	800e750 <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800e748:	4b1e      	ldr	r3, [pc, #120]	; (800e7c4 <_fx_media_abort+0x124>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	e019      	b.n	800e784 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800e75c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800e76c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800e770:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <_fx_media_abort+0x124>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	429a      	cmp	r2, r3
 800e778:	d104      	bne.n	800e784 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e780:	4a10      	ldr	r2, [pc, #64]	; (800e7c4 <_fx_media_abort+0x124>)
 800e782:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800e784:	4b0e      	ldr	r3, [pc, #56]	; (800e7c0 <_fx_media_abort+0x120>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3b01      	subs	r3, #1
 800e78a:	4a0d      	ldr	r2, [pc, #52]	; (800e7c0 <_fx_media_abort+0x120>)
 800e78c:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4a0d      	ldr	r2, [pc, #52]	; (800e7c8 <_fx_media_abort+0x128>)
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	f383 8810 	msr	PRIMASK, r3
}
 800e79e:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f004 fe9c 	bl	80134e4 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3720      	adds	r7, #32
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	4d454449 	.word	0x4d454449
 800e7bc:	46494c41 	.word	0x46494c41
 800e7c0:	24014c8c 	.word	0x24014c8c
 800e7c4:	24014c88 	.word	0x24014c88
 800e7c8:	4d454441 	.word	0x4d454441

0800e7cc <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800e7cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7dc:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	330b      	adds	r3, #11
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f001 fc80 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d101      	bne.n	800e7fa <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	e08c      	b.n	800e914 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3318      	adds	r3, #24
 800e7fe:	4618      	mov	r0, r3
 800e800:	f001 fc72 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e804:	4602      	mov	r2, r0
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	331a      	adds	r3, #26
 800e80e:	4618      	mov	r0, r3
 800e810:	f001 fc6a 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e814:	4602      	mov	r2, r0
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3313      	adds	r3, #19
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 fc62 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e824:	4603      	mov	r3, r0
 800e826:	2200      	movs	r2, #0
 800e828:	4698      	mov	r8, r3
 800e82a:	4691      	mov	r9, r2
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e838:	4313      	orrs	r3, r2
 800e83a:	d10b      	bne.n	800e854 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	3320      	adds	r3, #32
 800e840:	4618      	mov	r0, r3
 800e842:	f001 fc79 	bl	8010138 <_fx_utility_32_unsigned_read>
 800e846:	4603      	mov	r3, r0
 800e848:	2200      	movs	r2, #0
 800e84a:	461c      	mov	r4, r3
 800e84c:	4615      	mov	r5, r2
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e85a:	4313      	orrs	r3, r2
 800e85c:	d101      	bne.n	800e862 <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800e85e:	2302      	movs	r3, #2
 800e860:	e058      	b.n	800e914 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	330e      	adds	r3, #14
 800e866:	4618      	mov	r0, r3
 800e868:	f001 fc3e 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e86c:	4602      	mov	r2, r0
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800e87a:	2302      	movs	r3, #2
 800e87c:	e04a      	b.n	800e914 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	330d      	adds	r3, #13
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800e892:	2302      	movs	r3, #2
 800e894:	e03e      	b.n	800e914 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3316      	adds	r3, #22
 800e89a:	4618      	mov	r0, r3
 800e89c:	f001 fc24 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d107      	bne.n	800e8be <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3324      	adds	r3, #36	; 0x24
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f001 fc40 	bl	8010138 <_fx_utility_32_unsigned_read>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d101      	bne.n	800e8ca <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e024      	b.n	800e914 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	3310      	adds	r3, #16
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e018      	b.n	800e914 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	331c      	adds	r3, #28
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f001 fc26 	bl	8010138 <_fx_utility_32_unsigned_read>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3311      	adds	r3, #17
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f001 fbf6 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	332c      	adds	r3, #44	; 0x2c
 800e906:	4618      	mov	r0, r3
 800e908:	f001 fc16 	bl	8010138 <_fx_utility_32_unsigned_read>
 800e90c:	4602      	mov	r2, r0
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800e920 <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b092      	sub	sp, #72	; 0x48
 800e924:	af04      	add	r7, sp, #16
 800e926:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4aa6      	ldr	r2, [pc, #664]	; (800ebc8 <_fx_media_close+0x2a8>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d001      	beq.n	800e936 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800e932:	2311      	movs	r3, #17
 800e934:	e1c2      	b.n	800ecbc <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4aa3      	ldr	r2, [pc, #652]	; (800ebc8 <_fx_media_close+0x2a8>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d001      	beq.n	800e944 <_fx_media_close+0x24>
 800e940:	2311      	movs	r3, #17
 800e942:	e1bb      	b.n	800ecbc <_fx_media_close+0x39c>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e94a:	f04f 31ff 	mov.w	r1, #4294967295
 800e94e:	4618      	mov	r0, r3
 800e950:	f004 fe72 	bl	8013638 <_tx_mutex_get>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <_fx_media_close+0x3e>
 800e95a:	2311      	movs	r3, #17
 800e95c:	e1ae      	b.n	800ecbc <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e964:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e96c:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800e96e:	e046      	b.n	800e9fe <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d139      	bne.n	800e9ec <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d035      	beq.n	800e9ec <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e980:	f3ef 8310 	mrs	r3, PRIMASK
 800e984:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e986:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e988:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e98a:	b672      	cpsid	i
    return(int_posture);
 800e98c:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800e98e:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800e990:	4b8e      	ldr	r3, [pc, #568]	; (800ebcc <_fx_media_close+0x2ac>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e996:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800e99a:	4b8d      	ldr	r3, [pc, #564]	; (800ebd0 <_fx_media_close+0x2b0>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f383 8810 	msr	PRIMASK, r3
}
 800e9ae:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800e9b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9b8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	3368      	adds	r3, #104	; 0x68
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7fb fa9a 	bl	8009efc <_fx_directory_entry_write>
 800e9c8:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00a      	beq.n	800e9e6 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f005 f8a6 	bl	8013b28 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff fe5f 	bl	800e6a0 <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800e9e2:	2390      	movs	r3, #144	; 0x90
 800e9e4:	e16a      	b.n	800ecbc <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	4a79      	ldr	r2, [pc, #484]	; (800ebd4 <_fx_media_close+0x2b4>)
 800e9f0:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9f6:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800e9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1b5      	bne.n	800e970 <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f001 fef2 	bl	80107ee <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f002 fa40 	bl	8010e90 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea16:	2100      	movs	r1, #0
 800ea18:	9102      	str	r1, [sp, #8]
 800ea1a:	e9cd 2300 	strd	r2, r3, [sp]
 800ea1e:	f04f 0201 	mov.w	r2, #1
 800ea22:	f04f 0300 	mov.w	r3, #0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f002 fdbc 	bl	80115a4 <_fx_utility_logical_sector_flush>
 800ea2c:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00a      	beq.n	800ea4a <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f005 f874 	bl	8013b28 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7ff fe2d 	bl	800e6a0 <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800ea46:	2390      	movs	r3, #144	; 0x90
 800ea48:	e138      	b.n	800ecbc <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 80ca 	beq.w	800ebe8 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	f000 80c3 	beq.w	800ebe8 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f040 80bd 	bne.w	800ebe8 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	69db      	ldr	r3, [r3, #28]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	69d9      	ldr	r1, [r3, #28]
 800ea7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea82:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2290      	movs	r2, #144	; 0x90
 800ea9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2203      	movs	r2, #3
 800eabc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eae8:	4618      	mov	r0, r3
 800eaea:	f005 f81d 	bl	8013b28 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff fdd6 	bl	800e6a0 <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800eaf4:	2390      	movs	r3, #144	; 0x90
 800eaf6:	e0e1      	b.n	800ecbc <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eafe:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800eb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb02:	f001 fb19 	bl	8010138 <_fx_utility_32_unsigned_read>
 800eb06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	4a33      	ldr	r2, [pc, #204]	; (800ebd8 <_fx_media_close+0x2b8>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d16b      	bne.n	800ebe8 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb16:	4618      	mov	r0, r3
 800eb18:	f001 fb0e 	bl	8010138 <_fx_utility_32_unsigned_read>
 800eb1c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	4a2e      	ldr	r2, [pc, #184]	; (800ebdc <_fx_media_close+0x2bc>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d160      	bne.n	800ebe8 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb30:	4619      	mov	r1, r3
 800eb32:	4610      	mov	r0, r2
 800eb34:	f001 fb1d 	bl	8010172 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800eb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f001 fb13 	bl	8010172 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2290      	movs	r2, #144	; 0x90
 800eb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2203      	movs	r2, #3
 800eb7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800eb8c:	1c5a      	adds	r2, r3, #1
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d017      	beq.n	800ebe0 <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f004 ffb6 	bl	8013b28 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff fd6f 	bl	800e6a0 <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800ebc2:	2390      	movs	r3, #144	; 0x90
 800ebc4:	e07a      	b.n	800ecbc <_fx_media_close+0x39c>
 800ebc6:	bf00      	nop
 800ebc8:	4d454449 	.word	0x4d454449
 800ebcc:	24014c94 	.word	0x24014c94
 800ebd0:	24014c90 	.word	0x24014c90
 800ebd4:	46494c43 	.word	0x46494c43
 800ebd8:	41615252 	.word	0x41615252
 800ebdc:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2290      	movs	r2, #144	; 0x90
 800ec02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2208      	movs	r2, #8
 800ec14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2290      	movs	r2, #144	; 0x90
 800ec1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec2e:	613b      	str	r3, [r7, #16]
    return(posture);
 800ec30:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ec32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec34:	b672      	cpsid	i
    return(int_posture);
 800ec36:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800ec38:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800ec3a:	4b22      	ldr	r3, [pc, #136]	; (800ecc4 <_fx_media_close+0x3a4>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d103      	bne.n	800ec4a <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800ec42:	4b21      	ldr	r3, [pc, #132]	; (800ecc8 <_fx_media_close+0x3a8>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	e019      	b.n	800ec7e <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ec56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ec66:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800ec6a:	4b17      	ldr	r3, [pc, #92]	; (800ecc8 <_fx_media_close+0x3a8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d104      	bne.n	800ec7e <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <_fx_media_close+0x3a8>)
 800ec7c:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800ec7e:	4b11      	ldr	r3, [pc, #68]	; (800ecc4 <_fx_media_close+0x3a4>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3b01      	subs	r3, #1
 800ec84:	4a0f      	ldr	r2, [pc, #60]	; (800ecc4 <_fx_media_close+0x3a4>)
 800ec86:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a10      	ldr	r2, [pc, #64]	; (800eccc <_fx_media_close+0x3ac>)
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	f383 8810 	msr	PRIMASK, r3
}
 800ec98:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eca0:	4618      	mov	r0, r3
 800eca2:	f004 fc1f 	bl	80134e4 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d004      	beq.n	800ecba <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3738      	adds	r7, #56	; 0x38
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	24014c8c 	.word	0x24014c8c
 800ecc8:	24014c88 	.word	0x24014c88
 800eccc:	4d454443 	.word	0x4d454443

0800ecd0 <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b090      	sub	sp, #64	; 0x40
 800ecd4:	af04      	add	r7, sp, #16
 800ecd6:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ecde:	1c5a      	adds	r2, r3, #1
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4aa2      	ldr	r2, [pc, #648]	; (800ef74 <_fx_media_flush+0x2a4>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d001      	beq.n	800ecf4 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ecf0:	2311      	movs	r3, #17
 800ecf2:	e175      	b.n	800efe0 <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a9e      	ldr	r2, [pc, #632]	; (800ef74 <_fx_media_flush+0x2a4>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d001      	beq.n	800ed02 <_fx_media_flush+0x32>
 800ecfe:	2311      	movs	r3, #17
 800ed00:	e16e      	b.n	800efe0 <_fx_media_flush+0x310>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed08:	f04f 31ff 	mov.w	r1, #4294967295
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f004 fc93 	bl	8013638 <_tx_mutex_get>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <_fx_media_flush+0x4c>
 800ed18:	2311      	movs	r3, #17
 800ed1a:	e161      	b.n	800efe0 <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f004 fefb 	bl	8013b28 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800ed32:	2323      	movs	r3, #35	; 0x23
 800ed34:	e154      	b.n	800efe0 <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ed44:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800ed46:	e040      	b.n	800edca <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d136      	bne.n	800edbe <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800ed50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed52:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d032      	beq.n	800edbe <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed58:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5c:	613b      	str	r3, [r7, #16]
    return(posture);
 800ed5e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ed60:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed62:	b672      	cpsid	i
    return(int_posture);
 800ed64:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800ed66:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800ed68:	4b83      	ldr	r3, [pc, #524]	; (800ef78 <_fx_media_flush+0x2a8>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800ed72:	4b82      	ldr	r3, [pc, #520]	; (800ef7c <_fx_media_flush+0x2ac>)
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f383 8810 	msr	PRIMASK, r3
}
 800ed86:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800ed8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed90:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	3368      	adds	r3, #104	; 0x68
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7fb f8ae 	bl	8009efc <_fx_directory_entry_write>
 800eda0:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800eda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d007      	beq.n	800edb8 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800edae:	4618      	mov	r0, r3
 800edb0:	f004 feba 	bl	8013b28 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800edb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb6:	e113      	b.n	800efe0 <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	2200      	movs	r2, #0
 800edbc:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edc2:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	3b01      	subs	r3, #1
 800edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1bb      	bne.n	800ed48 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 fd0c 	bl	80107ee <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f002 f85a 	bl	8010e90 <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ede2:	2100      	movs	r1, #0
 800ede4:	9102      	str	r1, [sp, #8]
 800ede6:	e9cd 2300 	strd	r2, r3, [sp]
 800edea:	f04f 0201 	mov.w	r2, #1
 800edee:	f04f 0300 	mov.w	r3, #0
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f002 fbd6 	bl	80115a4 <_fx_utility_logical_sector_flush>
 800edf8:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d007      	beq.n	800ee10 <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ee06:	4618      	mov	r0, r3
 800ee08:	f004 fe8e 	bl	8013b28 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	e0e7      	b.n	800efe0 <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f000 80bb 	beq.w	800ef90 <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800ee22:	429a      	cmp	r2, r3
 800ee24:	f000 80b4 	beq.w	800ef90 <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	69db      	ldr	r3, [r3, #28]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	69d9      	ldr	r1, [r3, #28]
 800ee34:	f04f 32ff 	mov.w	r2, #4294967295
 800ee38:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	69db      	ldr	r3, [r3, #28]
 800ee44:	2200      	movs	r2, #0
 800ee46:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2290      	movs	r2, #144	; 0x90
 800ee54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6a3a      	ldr	r2, [r7, #32]
 800ee5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2203      	movs	r2, #3
 800ee76:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ee80:	1c5a      	adds	r2, r3, #1
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d007      	beq.n	800eeac <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800eea2:	4618      	mov	r0, r3
 800eea4:	f004 fe40 	bl	8013b28 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800eea8:	2390      	movs	r3, #144	; 0x90
 800eeaa:	e099      	b.n	800efe0 <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeb2:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800eeb4:	6a38      	ldr	r0, [r7, #32]
 800eeb6:	f001 f93f 	bl	8010138 <_fx_utility_32_unsigned_read>
 800eeba:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	4a30      	ldr	r2, [pc, #192]	; (800ef80 <_fx_media_flush+0x2b0>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d165      	bne.n	800ef90 <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f001 f934 	bl	8010138 <_fx_utility_32_unsigned_read>
 800eed0:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	4a2b      	ldr	r2, [pc, #172]	; (800ef84 <_fx_media_flush+0x2b4>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d15a      	bne.n	800ef90 <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f001 f943 	bl	8010172 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800eeec:	6a3b      	ldr	r3, [r7, #32]
 800eeee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eef8:	4619      	mov	r1, r3
 800eefa:	4610      	mov	r0, r2
 800eefc:	f001 f939 	bl	8010172 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2290      	movs	r2, #144	; 0x90
 800ef0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6a3a      	ldr	r2, [r7, #32]
 800ef14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2203      	movs	r2, #3
 800ef2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d011      	beq.n	800ef88 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f004 fddc 	bl	8013b28 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800ef70:	2390      	movs	r3, #144	; 0x90
 800ef72:	e035      	b.n	800efe0 <_fx_media_flush+0x310>
 800ef74:	4d454449 	.word	0x4d454449
 800ef78:	24014c94 	.word	0x24014c94
 800ef7c:	24014c90 	.word	0x24014c90
 800ef80:	41615252 	.word	0x41615252
 800ef84:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ef96:	1c5a      	adds	r2, r3, #1
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2202      	movs	r2, #2
 800efa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2290      	movs	r2, #144	; 0x90
 800efaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d007      	beq.n	800efd2 <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800efc8:	4618      	mov	r0, r3
 800efca:	f004 fdad 	bl	8013b28 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800efce:	2390      	movs	r3, #144	; 0x90
 800efd0:	e006      	b.n	800efe0 <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800efd8:	4618      	mov	r0, r3
 800efda:	f004 fda5 	bl	8013b28 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3730      	adds	r7, #48	; 0x30
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800efe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efec:	b09a      	sub	sp, #104	; 0x68
 800efee:	af04      	add	r7, sp, #16
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	607a      	str	r2, [r7, #4]
 800eff6:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800eff8:	4bba      	ldr	r3, [pc, #744]	; (800f2e4 <_fx_media_open+0x2fc>)
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	4bba      	ldr	r3, [pc, #744]	; (800f2e8 <_fx_media_open+0x300>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	431a      	orrs	r2, r3
 800f002:	4bba      	ldr	r3, [pc, #744]	; (800f2ec <_fx_media_open+0x304>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4313      	orrs	r3, r2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d003      	beq.n	800f014 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800f00c:	4bb8      	ldr	r3, [pc, #736]	; (800f2f0 <_fx_media_open+0x308>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800f010:	2b00      	cmp	r3, #0
 800f012:	d102      	bne.n	800f01a <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800f014:	2322      	movs	r3, #34	; 0x22
 800f016:	f000 bd53 	b.w	800fac0 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f02c:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f032:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f03a:	461a      	mov	r2, r3
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f048:	2200      	movs	r2, #0
 800f04a:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800f04e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f050:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2200      	movs	r2, #0
 800f056:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2200      	movs	r2, #0
 800f076:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2200      	movs	r2, #0
 800f096:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2200      	movs	r2, #0
 800f116:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2200      	movs	r2, #0
 800f156:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2200      	movs	r2, #0
 800f206:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2200      	movs	r2, #0
 800f226:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2204      	movs	r2, #4
 800f236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2290      	movs	r2, #144	; 0x90
 800f23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f272:	2b00      	cmp	r3, #0
 800f274:	d002      	beq.n	800f27c <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800f276:	2390      	movs	r3, #144	; 0x90
 800f278:	f000 bc22 	b.w	800fac0 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800f282:	1c5a      	adds	r2, r3, #1
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2205      	movs	r2, #5
 800f28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2290      	movs	r2, #144	; 0x90
 800f296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f29e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d016      	beq.n	800f2f4 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2208      	movs	r2, #8
 800f2ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2290      	movs	r2, #144	; 0x90
 800f2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e3ed      	b.n	800fac0 <_fx_media_open+0xad8>
 800f2e4:	24014ca0 	.word	0x24014ca0
 800f2e8:	24014ca4 	.word	0x24014ca4
 800f2ec:	24014ca8 	.word	0x24014ca8
 800f2f0:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7ff fa69 	bl	800e7cc <_fx_media_boot_info_extract>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00e      	beq.n	800f31e <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2208      	movs	r2, #8
 800f304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2290      	movs	r2, #144	; 0x90
 800f30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800f31a:	2302      	movs	r3, #2
 800f31c:	e3d0      	b.n	800fac0 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f324:	3330      	adds	r3, #48	; 0x30
 800f326:	4618      	mov	r0, r3
 800f328:	f000 fede 	bl	80100e8 <_fx_utility_16_unsigned_read>
 800f32c:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f332:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f334:	429a      	cmp	r2, r3
 800f336:	d20e      	bcs.n	800f356 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2208      	movs	r2, #8
 800f33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2290      	movs	r2, #144	; 0x90
 800f344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800f352:	2321      	movs	r3, #33	; 0x21
 800f354:	e3b4      	b.n	800fac0 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f35c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f36c:	d903      	bls.n	800f376 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f374:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	695b      	ldr	r3, [r3, #20]
 800f37a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800f382:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800f384:	e01c      	b.n	800f3c0 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800f386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f388:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f38a:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800f38c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f38e:	f04f 32ff 	mov.w	r2, #4294967295
 800f392:	f04f 33ff 	mov.w	r3, #4294967295
 800f396:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800f39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f39c:	2200      	movs	r2, #0
 800f39e:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800f3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800f3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3a8:	f103 0218 	add.w	r2, r3, #24
 800f3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3ae:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800f3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b2:	3318      	adds	r3, #24
 800f3b4:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3bc:	4413      	add	r3, r2
 800f3be:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800f3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3c2:	1e5a      	subs	r2, r3, #1
 800f3c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1dd      	bne.n	800f386 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800f3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3cc:	3b18      	subs	r3, #24
 800f3ce:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800f3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800f3d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d8:	1e5a      	subs	r2, r3, #1
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	695b      	ldr	r3, [r3, #20]
 800f3f8:	2b0f      	cmp	r3, #15
 800f3fa:	d91a      	bls.n	800f432 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	695a      	ldr	r2, [r3, #20]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	3b01      	subs	r3, #1
 800f406:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6959      	ldr	r1, [r3, #20]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	695b      	ldr	r3, [r3, #20]
 800f410:	3b01      	subs	r3, #1
 800f412:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800f414:	429a      	cmp	r2, r3
 800f416:	d10c      	bne.n	800f432 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2201      	movs	r2, #1
 800f41c:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	695b      	ldr	r3, [r3, #20]
 800f422:	089b      	lsrs	r3, r3, #2
 800f424:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800f42c:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800f430:	e002      	b.n	800f438 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2200      	movs	r2, #0
 800f436:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f438:	2300      	movs	r3, #0
 800f43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f43c:	e023      	b.n	800f486 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800f43e:	68f9      	ldr	r1, [r7, #12]
 800f440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f442:	4613      	mov	r3, r2
 800f444:	005b      	lsls	r3, r3, #1
 800f446:	4413      	add	r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	440b      	add	r3, r1
 800f44c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800f454:	68f9      	ldr	r1, [r7, #12]
 800f456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f458:	4613      	mov	r3, r2
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	440b      	add	r3, r1
 800f462:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800f46a:	68f9      	ldr	r1, [r7, #12]
 800f46c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f46e:	4613      	mov	r3, r2
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	4413      	add	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	440b      	add	r3, r1
 800f478:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800f480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f482:	3301      	adds	r3, #1
 800f484:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f488:	2b0f      	cmp	r3, #15
 800f48a:	d9d8      	bls.n	800f43e <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f48c:	2300      	movs	r3, #0
 800f48e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f490:	e009      	b.n	800f4a6 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	4413      	add	r3, r2
 800f498:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800f49c:	2200      	movs	r2, #0
 800f49e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800f4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a8:	2b7f      	cmp	r3, #127	; 0x7f
 800f4aa:	d9f2      	bls.n	800f492 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800f4b4:	68f9      	ldr	r1, [r7, #12]
 800f4b6:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800f4b8:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800f4bc:	441a      	add	r2, r3
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4c6:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800f4cc:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f4ce:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800f4d4:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800f4e4:	441a      	add	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f4f0:	68f9      	ldr	r1, [r7, #12]
 800f4f2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	ebb2 0804 	subs.w	r8, r2, r4
 800f4fe:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f506:	2200      	movs	r2, #0
 800f508:	469a      	mov	sl, r3
 800f50a:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800f50c:	4652      	mov	r2, sl
 800f50e:	465b      	mov	r3, fp
 800f510:	4640      	mov	r0, r8
 800f512:	4649      	mov	r1, r9
 800f514:	f7f1 f854 	bl	80005c0 <__aeabi_uldivmod>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f524:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f528:	4293      	cmp	r3, r2
 800f52a:	d819      	bhi.n	800f560 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2201      	movs	r2, #1
 800f530:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f544:	461a      	mov	r2, r3
 800f546:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f54a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f554:	461a      	mov	r2, r3
 800f556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f55a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f55e:	e037      	b.n	800f5d0 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f564:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800f568:	4293      	cmp	r3, r2
 800f56a:	d819      	bhi.n	800f5a0 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f584:	461a      	mov	r2, r3
 800f586:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800f58a:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f594:	461a      	mov	r2, r3
 800f596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f59a:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800f59e:	e017      	b.n	800f5d0 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5b0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4b95      	ldr	r3, [pc, #596]	; (800f810 <_fx_media_open+0x828>)
 800f5bc:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f5cc:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d15f      	bne.n	800f698 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d801      	bhi.n	800f5e4 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	e26d      	b.n	800fac0 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ec:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800f5ee:	68f9      	ldr	r1, [r7, #12]
 800f5f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800f5f2:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800f5f6:	441a      	add	r2, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f604:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f606:	f107 0310 	add.w	r3, r7, #16
 800f60a:	461a      	mov	r2, r3
 800f60c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f000 fdd0 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800f614:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800f616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f618:	3301      	adds	r3, #1
 800f61a:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00e      	beq.n	800f640 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2208      	movs	r2, #8
 800f626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2290      	movs	r2, #144	; 0x90
 800f62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f63c:	2303      	movs	r3, #3
 800f63e:	e23f      	b.n	800fac0 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f644:	429a      	cmp	r2, r3
 800f646:	d004      	beq.n	800f652 <_fx_media_open+0x66a>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f64e:	429a      	cmp	r2, r3
 800f650:	d90e      	bls.n	800f670 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2208      	movs	r2, #8
 800f656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2290      	movs	r2, #144	; 0x90
 800f65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f66c:	2303      	movs	r3, #3
 800f66e:	e227      	b.n	800fac0 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	4a68      	ldr	r2, [pc, #416]	; (800f814 <_fx_media_open+0x82c>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d802      	bhi.n	800f67e <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f67c:	e7c3      	b.n	800f606 <_fx_media_open+0x61e>
                break;
 800f67e:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f686:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f68e:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800f692:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f000 808e 	beq.w	800f7cc <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	69db      	ldr	r3, [r3, #28]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	69d9      	ldr	r1, [r3, #28]
 800f6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	69db      	ldr	r3, [r3, #28]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2290      	movs	r2, #144	; 0x90
 800f6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2203      	movs	r2, #3
 800f6fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d150      	bne.n	800f7c6 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f72a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f72c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f72e:	f000 fd03 	bl	8010138 <_fx_utility_32_unsigned_read>
 800f732:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	4a38      	ldr	r2, [pc, #224]	; (800f818 <_fx_media_open+0x830>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d140      	bne.n	800f7be <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f742:	4618      	mov	r0, r3
 800f744:	f000 fcf8 	bl	8010138 <_fx_utility_32_unsigned_read>
 800f748:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	4a33      	ldr	r2, [pc, #204]	; (800f81c <_fx_media_open+0x834>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d131      	bne.n	800f7b6 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f754:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fced 	bl	8010138 <_fx_utility_32_unsigned_read>
 800f75e:	4602      	mov	r2, r0
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800f76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f772:	4618      	mov	r0, r3
 800f774:	f000 fce0 	bl	8010138 <_fx_utility_32_unsigned_read>
 800f778:	4602      	mov	r2, r0
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f788:	429a      	cmp	r2, r3
 800f78a:	d80c      	bhi.n	800f7a6 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f796:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800f798:	429a      	cmp	r2, r3
 800f79a:	d804      	bhi.n	800f7a6 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d812      	bhi.n	800f7cc <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800f7b4:	e00a      	b.n	800f7cc <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	669a      	str	r2, [r3, #104]	; 0x68
 800f7bc:	e006      	b.n	800f7cc <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	669a      	str	r2, [r3, #104]	; 0x68
 800f7c4:	e002      	b.n	800f7cc <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d040      	beq.n	800f856 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	657b      	str	r3, [r7, #84]	; 0x54
 800f7d8:	e036      	b.n	800f848 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800f7da:	f107 0310 	add.w	r3, r7, #16
 800f7de:	461a      	mov	r2, r3
 800f7e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f000 fce6 	bl	80101b4 <_fx_utility_FAT_entry_read>
 800f7e8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d017      	beq.n	800f820 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2208      	movs	r2, #8
 800f7f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2290      	movs	r2, #144	; 0x90
 800f7fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f80a:	2303      	movs	r3, #3
 800f80c:	e158      	b.n	800fac0 <_fx_media_open+0xad8>
 800f80e:	bf00      	nop
 800f810:	0ffffff0 	.word	0x0ffffff0
 800f814:	0fffffef 	.word	0x0fffffef
 800f818:	41615252 	.word	0x41615252
 800f81c:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10d      	bne.n	800f842 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f83e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800f842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f844:	3301      	adds	r3, #1
 800f846:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84c:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800f84e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f850:	429a      	cmp	r2, r3
 800f852:	d3c2      	bcc.n	800f7da <_fx_media_open+0x7f2>
 800f854:	e0b4      	b.n	800f9c0 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 80b0 	bne.w	800f9c0 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f866:	2101      	movs	r1, #1
 800f868:	9102      	str	r1, [sp, #8]
 800f86a:	e9cd 2300 	strd	r2, r3, [sp]
 800f86e:	f04f 0201 	mov.w	r2, #1
 800f872:	f04f 0300 	mov.w	r3, #0
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f001 fe94 	bl	80115a4 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f880:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800f882:	2300      	movs	r3, #0
 800f884:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f886:	2300      	movs	r3, #0
 800f888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f88a:	e093      	b.n	800f9b4 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f892:	4413      	add	r3, r2
 800f894:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	695b      	ldr	r3, [r3, #20]
 800f8a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d902      	bls.n	800f8b0 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2290      	movs	r2, #144	; 0x90
 800f8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	689a      	ldr	r2, [r3, #8]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2202      	movs	r2, #2
 800f8de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00e      	beq.n	800f914 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2208      	movs	r2, #8
 800f8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2290      	movs	r2, #144	; 0x90
 800f902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800f910:	2303      	movs	r3, #3
 800f912:	e0d5      	b.n	800fac0 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f91a:	fb02 f303 	mul.w	r3, r2, r3
 800f91e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800f920:	2300      	movs	r3, #0
 800f922:	64bb      	str	r3, [r7, #72]	; 0x48
 800f924:	e03d      	b.n	800f9a2 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d009      	beq.n	800f942 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	689a      	ldr	r2, [r3, #8]
 800f932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f934:	4413      	add	r3, r2
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800f93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f93c:	3304      	adds	r3, #4
 800f93e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f940:	e011      	b.n	800f966 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	689a      	ldr	r2, [r3, #8]
 800f946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f948:	4413      	add	r3, r2
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	689a      	ldr	r2, [r3, #8]
 800f952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f954:	3301      	adds	r3, #1
 800f956:	4413      	add	r3, r2
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800f95c:	430b      	orrs	r3, r1
 800f95e:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800f960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f962:	3302      	adds	r3, #2
 800f964:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10d      	bne.n	800f988 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d103      	bne.n	800f988 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800f988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f98a:	3301      	adds	r3, #1
 800f98c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f992:	3302      	adds	r3, #2
 800f994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f996:	429a      	cmp	r2, r3
 800f998:	d303      	bcc.n	800f9a2 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800f9a0:	e003      	b.n	800f9aa <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800f9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d3bd      	bcc.n	800f926 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	695b      	ldr	r3, [r3, #20]
 800f9ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9b0:	4413      	add	r3, r2
 800f9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	f4ff af66 	bcc.w	800f88c <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d103      	bne.n	800f9d2 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2202      	movs	r2, #2
 800f9ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800fa26:	2200      	movs	r2, #0
 800fa28:	4928      	ldr	r1, [pc, #160]	; (800facc <_fx_media_open+0xae4>)
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f003 fd00 	bl	8013430 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa30:	f3ef 8310 	mrs	r3, PRIMASK
 800fa34:	61fb      	str	r3, [r7, #28]
    return(posture);
 800fa36:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800fa38:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa3a:	b672      	cpsid	i
    return(int_posture);
 800fa3c:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800fa3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4a23      	ldr	r2, [pc, #140]	; (800fad0 <_fx_media_open+0xae8>)
 800fa44:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800fa46:	4b23      	ldr	r3, [pc, #140]	; (800fad4 <_fx_media_open+0xaec>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d017      	beq.n	800fa7e <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800fa4e:	4b21      	ldr	r3, [pc, #132]	; (800fad4 <_fx_media_open+0xaec>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fa56:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <_fx_media_open+0xaec>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6a3a      	ldr	r2, [r7, #32]
 800fa6e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800fa72:	4b18      	ldr	r3, [pc, #96]	; (800fad4 <_fx_media_open+0xaec>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800fa7c:	e00a      	b.n	800fa94 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800fa7e:	4a15      	ldr	r2, [pc, #84]	; (800fad4 <_fx_media_open+0xaec>)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800fa94:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <_fx_media_open+0xaf0>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	4a0f      	ldr	r2, [pc, #60]	; (800fad8 <_fx_media_open+0xaf0>)
 800fa9c:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d004      	beq.n	800fab2 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	4798      	blx	r3
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f383 8810 	msr	PRIMASK, r3
}
 800fabc:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3758      	adds	r7, #88	; 0x58
 800fac4:	46bd      	mov	sp, r7
 800fac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800faca:	bf00      	nop
 800facc:	080175a0 	.word	0x080175a0
 800fad0:	4d454449 	.word	0x4d454449
 800fad4:	24014c88 	.word	0x24014c88
 800fad8:	24014c8c 	.word	0x24014c8c

0800fadc <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800fadc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fae0:	b090      	sub	sp, #64	; 0x40
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	60f8      	str	r0, [r7, #12]
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	607a      	str	r2, [r7, #4]
 800faea:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800faf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2be9      	cmp	r3, #233	; 0xe9
 800fafa:	d008      	beq.n	800fb0e <_fx_partition_offset_calculate+0x32>
 800fafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2beb      	cmp	r3, #235	; 0xeb
 800fb02:	d17d      	bne.n	800fc00 <_fx_partition_offset_calculate+0x124>
 800fb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb06:	3302      	adds	r3, #2
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2b90      	cmp	r3, #144	; 0x90
 800fb0c:	d178      	bne.n	800fc00 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb10:	3316      	adds	r3, #22
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d118      	bne.n	800fb4a <_fx_partition_offset_calculate+0x6e>
 800fb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1a:	3317      	adds	r3, #23
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d113      	bne.n	800fb4a <_fx_partition_offset_calculate+0x6e>
 800fb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb24:	3324      	adds	r3, #36	; 0x24
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10e      	bne.n	800fb4a <_fx_partition_offset_calculate+0x6e>
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	3325      	adds	r3, #37	; 0x25
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d109      	bne.n	800fb4a <_fx_partition_offset_calculate+0x6e>
 800fb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb38:	3326      	adds	r3, #38	; 0x26
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d104      	bne.n	800fb4a <_fx_partition_offset_calculate+0x6e>
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	3327      	adds	r3, #39	; 0x27
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d05a      	beq.n	800fc00 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800fb4a:	f04f 0200 	mov.w	r2, #0
 800fb4e:	f04f 0300 	mov.w	r3, #0
 800fb52:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb58:	3313      	adds	r3, #19
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d104      	bne.n	800fb6a <_fx_partition_offset_calculate+0x8e>
 800fb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb62:	3314      	adds	r3, #20
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00d      	beq.n	800fb86 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800fb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6c:	3314      	adds	r3, #20
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	021b      	lsls	r3, r3, #8
 800fb72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb74:	3213      	adds	r2, #19
 800fb76:	7812      	ldrb	r2, [r2, #0]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	4698      	mov	r8, r3
 800fb7e:	4691      	mov	r9, r2
 800fb80:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800fb84:	e02a      	b.n	800fbdc <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800fb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb88:	3320      	adds	r3, #32
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d10e      	bne.n	800fbae <_fx_partition_offset_calculate+0xd2>
 800fb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb92:	3321      	adds	r3, #33	; 0x21
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d109      	bne.n	800fbae <_fx_partition_offset_calculate+0xd2>
 800fb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb9c:	3322      	adds	r3, #34	; 0x22
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d104      	bne.n	800fbae <_fx_partition_offset_calculate+0xd2>
 800fba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba6:	3323      	adds	r3, #35	; 0x23
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d016      	beq.n	800fbdc <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb0:	3323      	adds	r3, #35	; 0x23
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800fbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb8:	3322      	adds	r3, #34	; 0x22
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fbbe:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc2:	3321      	adds	r3, #33	; 0x21
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800fbc8:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800fbca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbcc:	3220      	adds	r2, #32
 800fbce:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800fbd0:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	461c      	mov	r4, r3
 800fbd6:	4615      	mov	r5, r2
 800fbd8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800fbdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	d00d      	beq.n	800fc00 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d002      	beq.n	800fbfc <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800fbf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e032      	b.n	800fc66 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800fc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	2b55      	cmp	r3, #85	; 0x55
 800fc0a:	d105      	bne.n	800fc18 <_fx_partition_offset_calculate+0x13c>
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	2baa      	cmp	r3, #170	; 0xaa
 800fc16:	d001      	beq.n	800fc1c <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800fc18:	2304      	movs	r3, #4
 800fc1a:	e024      	b.n	800fc66 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800fc1c:	f107 0110 	add.w	r1, r7, #16
 800fc20:	f107 0014 	add.w	r0, r7, #20
 800fc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc26:	2200      	movs	r2, #0
 800fc28:	f000 f822 	bl	800fc70 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d301      	bcc.n	800fc38 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800fc34:	2304      	movs	r3, #4
 800fc36:	e016      	b.n	800fc66 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d007      	beq.n	800fc4e <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	00db      	lsls	r3, r3, #3
 800fc42:	3340      	adds	r3, #64	; 0x40
 800fc44:	443b      	add	r3, r7
 800fc46:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d007      	beq.n	800fc64 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	3340      	adds	r3, #64	; 0x40
 800fc5a:	443b      	add	r3, r7
 800fc5c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3740      	adds	r7, #64	; 0x40
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800fc70 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b089      	sub	sp, #36	; 0x24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800fc82:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800fc86:	61fb      	str	r3, [r7, #28]
 800fc88:	e06f      	b.n	800fd6a <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	683a      	ldr	r2, [r7, #0]
 800fc90:	4413      	add	r3, r2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10e      	bne.n	800fcb6 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	00db      	lsls	r3, r3, #3
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	4413      	add	r3, r2
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	4413      	add	r3, r2
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]
 800fcb4:	e051      	b.n	800fd5a <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	3308      	adds	r3, #8
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	3309      	adds	r3, #9
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	4413      	add	r3, r2
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	330a      	adds	r3, #10
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	4413      	add	r3, r2
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	041b      	lsls	r3, r3, #16
 800fce0:	697a      	ldr	r2, [r7, #20]
 800fce2:	4313      	orrs	r3, r2
 800fce4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	330b      	adds	r3, #11
 800fcea:	683a      	ldr	r2, [r7, #0]
 800fcec:	4413      	add	r3, r2
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	061b      	lsls	r3, r3, #24
 800fcf2:	697a      	ldr	r2, [r7, #20]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	6979      	ldr	r1, [r7, #20]
 800fd04:	69ba      	ldr	r2, [r7, #24]
 800fd06:	440a      	add	r2, r1
 800fd08:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	330c      	adds	r3, #12
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	4413      	add	r3, r2
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	330d      	adds	r3, #13
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	021b      	lsls	r3, r3, #8
 800fd22:	697a      	ldr	r2, [r7, #20]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	330e      	adds	r3, #14
 800fd2c:	683a      	ldr	r2, [r7, #0]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	041b      	lsls	r3, r3, #16
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	330f      	adds	r3, #15
 800fd3e:	683a      	ldr	r2, [r7, #0]
 800fd40:	4413      	add	r3, r2
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	061b      	lsls	r3, r3, #24
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	4413      	add	r3, r2
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	3310      	adds	r3, #16
 800fd68:	61fb      	str	r3, [r7, #28]
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800fd70:	d98b      	bls.n	800fc8a <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3724      	adds	r7, #36	; 0x24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800fd86:	4b27      	ldr	r3, [pc, #156]	; (800fe24 <_fx_system_initialize+0xa4>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800fd8c:	4b26      	ldr	r3, [pc, #152]	; (800fe28 <_fx_system_initialize+0xa8>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800fd92:	4b26      	ldr	r3, [pc, #152]	; (800fe2c <_fx_system_initialize+0xac>)
 800fd94:	f644 2221 	movw	r2, #18977	; 0x4a21
 800fd98:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800fd9a:	4b25      	ldr	r3, [pc, #148]	; (800fe30 <_fx_system_initialize+0xb0>)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800fda0:	4b24      	ldr	r3, [pc, #144]	; (800fe34 <_fx_system_initialize+0xb4>)
 800fda2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fda6:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800fda8:	4b23      	ldr	r3, [pc, #140]	; (800fe38 <_fx_system_initialize+0xb8>)
 800fdaa:	2210      	movs	r2, #16
 800fdac:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800fdae:	2301      	movs	r3, #1
 800fdb0:	9302      	str	r3, [sp, #8]
 800fdb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	4b1f      	ldr	r3, [pc, #124]	; (800fe3c <_fx_system_initialize+0xbc>)
 800fdc0:	4a1f      	ldr	r2, [pc, #124]	; (800fe40 <_fx_system_initialize+0xc0>)
 800fdc2:	4920      	ldr	r1, [pc, #128]	; (800fe44 <_fx_system_initialize+0xc4>)
 800fdc4:	4820      	ldr	r0, [pc, #128]	; (800fe48 <_fx_system_initialize+0xc8>)
 800fdc6:	f005 fc97 	bl	80156f8 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800fdca:	4b20      	ldr	r3, [pc, #128]	; (800fe4c <_fx_system_initialize+0xcc>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdd2:	4a1e      	ldr	r2, [pc, #120]	; (800fe4c <_fx_system_initialize+0xcc>)
 800fdd4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800fdd6:	4b1d      	ldr	r3, [pc, #116]	; (800fe4c <_fx_system_initialize+0xcc>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdde:	4a1b      	ldr	r2, [pc, #108]	; (800fe4c <_fx_system_initialize+0xcc>)
 800fde0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800fde2:	4b1b      	ldr	r3, [pc, #108]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fdea:	4a19      	ldr	r2, [pc, #100]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fdec:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800fdee:	4b18      	ldr	r3, [pc, #96]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdf6:	4a16      	ldr	r2, [pc, #88]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fdf8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800fdfa:	4b15      	ldr	r3, [pc, #84]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f043 0310 	orr.w	r3, r3, #16
 800fe02:	4a13      	ldr	r2, [pc, #76]	; (800fe50 <_fx_system_initialize+0xd0>)
 800fe04:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800fe06:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <_fx_system_initialize+0xd4>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800fe0e:	4a11      	ldr	r2, [pc, #68]	; (800fe54 <_fx_system_initialize+0xd4>)
 800fe10:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800fe12:	4b10      	ldr	r3, [pc, #64]	; (800fe54 <_fx_system_initialize+0xd4>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800fe1a:	4a0e      	ldr	r2, [pc, #56]	; (800fe54 <_fx_system_initialize+0xd4>)
 800fe1c:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800fe1e:	bf00      	nop
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	24014c88 	.word	0x24014c88
 800fe28:	24014c8c 	.word	0x24014c8c
 800fe2c:	24014c90 	.word	0x24014c90
 800fe30:	24014c94 	.word	0x24014c94
 800fe34:	24014c98 	.word	0x24014c98
 800fe38:	24014c9c 	.word	0x24014c9c
 800fe3c:	46585359 	.word	0x46585359
 800fe40:	0800fe59 	.word	0x0800fe59
 800fe44:	080175b4 	.word	0x080175b4
 800fe48:	24014cac 	.word	0x24014cac
 800fe4c:	24014ca0 	.word	0x24014ca0
 800fe50:	24014ca4 	.word	0x24014ca4
 800fe54:	24014ca8 	.word	0x24014ca8

0800fe58 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b089      	sub	sp, #36	; 0x24
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a9d      	ldr	r2, [pc, #628]	; (80100d8 <_fx_system_timer_entry+0x280>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	f040 8132 	bne.w	80100ce <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800fe6a:	4b9c      	ldr	r3, [pc, #624]	; (80100dc <_fx_system_timer_entry+0x284>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f003 031f 	and.w	r3, r3, #31
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800fe76:	4b99      	ldr	r3, [pc, #612]	; (80100dc <_fx_system_timer_entry+0x284>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	095b      	lsrs	r3, r3, #5
 800fe7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe80:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800fe82:	4b96      	ldr	r3, [pc, #600]	; (80100dc <_fx_system_timer_entry+0x284>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	0adb      	lsrs	r3, r3, #11
 800fe88:	f003 031f 	and.w	r3, r3, #31
 800fe8c:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800fe8e:	4b94      	ldr	r3, [pc, #592]	; (80100e0 <_fx_system_timer_entry+0x288>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f003 031f 	and.w	r3, r3, #31
 800fe96:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800fe98:	4b91      	ldr	r3, [pc, #580]	; (80100e0 <_fx_system_timer_entry+0x288>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	095b      	lsrs	r3, r3, #5
 800fe9e:	f003 030f 	and.w	r3, r3, #15
 800fea2:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800fea4:	4b8e      	ldr	r3, [pc, #568]	; (80100e0 <_fx_system_timer_entry+0x288>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	0a5b      	lsrs	r3, r3, #9
 800feaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feae:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800feb2:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	330a      	adds	r3, #10
 800feb8:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	2b3b      	cmp	r3, #59	; 0x3b
 800febe:	f240 80d4 	bls.w	801006a <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	4a87      	ldr	r2, [pc, #540]	; (80100e4 <_fx_system_timer_entry+0x28c>)
 800fec6:	fba2 2303 	umull	r2, r3, r2, r3
 800feca:	095b      	lsrs	r3, r3, #5
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	4413      	add	r3, r2
 800fed0:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800fed2:	69fa      	ldr	r2, [r7, #28]
 800fed4:	4b83      	ldr	r3, [pc, #524]	; (80100e4 <_fx_system_timer_entry+0x28c>)
 800fed6:	fba3 1302 	umull	r1, r3, r3, r2
 800feda:	0959      	lsrs	r1, r3, #5
 800fedc:	460b      	mov	r3, r1
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	1a5b      	subs	r3, r3, r1
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	2b3b      	cmp	r3, #59	; 0x3b
 800feec:	f240 80bd 	bls.w	801006a <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	4a7c      	ldr	r2, [pc, #496]	; (80100e4 <_fx_system_timer_entry+0x28c>)
 800fef4:	fba2 2303 	umull	r2, r3, r2, r3
 800fef8:	095b      	lsrs	r3, r3, #5
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	4413      	add	r3, r2
 800fefe:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	4b78      	ldr	r3, [pc, #480]	; (80100e4 <_fx_system_timer_entry+0x28c>)
 800ff04:	fba3 1302 	umull	r1, r3, r3, r2
 800ff08:	0959      	lsrs	r1, r3, #5
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	011b      	lsls	r3, r3, #4
 800ff0e:	1a5b      	subs	r3, r3, r1
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	2b17      	cmp	r3, #23
 800ff1a:	f240 80a6 	bls.w	801006a <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	617b      	str	r3, [r7, #20]
                    day++;
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	3301      	adds	r3, #1
 800ff26:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	3b01      	subs	r3, #1
 800ff2c:	2b0b      	cmp	r3, #11
 800ff2e:	f200 80cb 	bhi.w	80100c8 <_fx_system_timer_entry+0x270>
 800ff32:	a201      	add	r2, pc, #4	; (adr r2, 800ff38 <_fx_system_timer_entry+0xe0>)
 800ff34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff38:	0800ff69 	.word	0x0800ff69
 800ff3c:	0800ff7b 	.word	0x0800ff7b
 800ff40:	0800ffa9 	.word	0x0800ffa9
 800ff44:	0800ffbb 	.word	0x0800ffbb
 800ff48:	0800ffcd 	.word	0x0800ffcd
 800ff4c:	0800ffdf 	.word	0x0800ffdf
 800ff50:	0800fff1 	.word	0x0800fff1
 800ff54:	08010003 	.word	0x08010003
 800ff58:	08010015 	.word	0x08010015
 800ff5c:	08010027 	.word	0x08010027
 800ff60:	08010039 	.word	0x08010039
 800ff64:	0801004b 	.word	0x0801004b

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	2b1f      	cmp	r3, #31
 800ff6c:	d97f      	bls.n	801006e <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	613b      	str	r3, [r7, #16]
                            month++;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3301      	adds	r3, #1
 800ff76:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ff78:	e079      	b.n	801006e <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	f003 0303 	and.w	r3, r3, #3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d108      	bne.n	800ff96 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	2b1d      	cmp	r3, #29
 800ff88:	d973      	bls.n	8010072 <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	613b      	str	r3, [r7, #16]
                                month++;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	3301      	adds	r3, #1
 800ff92:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800ff94:	e06d      	b.n	8010072 <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	2b1c      	cmp	r3, #28
 800ff9a:	d96a      	bls.n	8010072 <_fx_system_timer_entry+0x21a>
                                day = 1;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	613b      	str	r3, [r7, #16]
                                month++;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	60fb      	str	r3, [r7, #12]
                        break;
 800ffa6:	e064      	b.n	8010072 <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	2b1f      	cmp	r3, #31
 800ffac:	d963      	bls.n	8010076 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	613b      	str	r3, [r7, #16]
                            month++;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ffb8:	e05d      	b.n	8010076 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b1e      	cmp	r3, #30
 800ffbe:	d95c      	bls.n	801007a <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	613b      	str	r3, [r7, #16]
                            month++;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ffca:	e056      	b.n	801007a <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2b1f      	cmp	r3, #31
 800ffd0:	d955      	bls.n	801007e <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	613b      	str	r3, [r7, #16]
                            month++;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ffdc:	e04f      	b.n	801007e <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2b1e      	cmp	r3, #30
 800ffe2:	d94e      	bls.n	8010082 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	613b      	str	r3, [r7, #16]
                            month++;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3301      	adds	r3, #1
 800ffec:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800ffee:	e048      	b.n	8010082 <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	2b1f      	cmp	r3, #31
 800fff4:	d947      	bls.n	8010086 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800fff6:	2301      	movs	r3, #1
 800fff8:	613b      	str	r3, [r7, #16]
                            month++;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3301      	adds	r3, #1
 800fffe:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010000:	e041      	b.n	8010086 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2b1f      	cmp	r3, #31
 8010006:	d940      	bls.n	801008a <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010008:	2301      	movs	r3, #1
 801000a:	613b      	str	r3, [r7, #16]
                            month++;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	3301      	adds	r3, #1
 8010010:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010012:	e03a      	b.n	801008a <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	2b1e      	cmp	r3, #30
 8010018:	d939      	bls.n	801008e <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 801001a:	2301      	movs	r3, #1
 801001c:	613b      	str	r3, [r7, #16]
                            month++;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3301      	adds	r3, #1
 8010022:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010024:	e033      	b.n	801008e <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2b1f      	cmp	r3, #31
 801002a:	d932      	bls.n	8010092 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 801002c:	2301      	movs	r3, #1
 801002e:	613b      	str	r3, [r7, #16]
                            month++;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	3301      	adds	r3, #1
 8010034:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010036:	e02c      	b.n	8010092 <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	2b1e      	cmp	r3, #30
 801003c:	d92b      	bls.n	8010096 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 801003e:	2301      	movs	r3, #1
 8010040:	613b      	str	r3, [r7, #16]
                            month++;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010048:	e025      	b.n	8010096 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	2b1f      	cmp	r3, #31
 801004e:	d924      	bls.n	801009a <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010050:	2301      	movs	r3, #1
 8010052:	613b      	str	r3, [r7, #16]
                            month = 1;
 8010054:	2301      	movs	r3, #1
 8010056:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	3301      	adds	r3, #1
 801005c:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	f640 023b 	movw	r2, #2107	; 0x83b
 8010064:	4293      	cmp	r3, r2
 8010066:	d831      	bhi.n	80100cc <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 8010068:	e017      	b.n	801009a <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 801006a:	bf00      	nop
 801006c:	e016      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801006e:	bf00      	nop
 8010070:	e014      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010072:	bf00      	nop
 8010074:	e012      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010076:	bf00      	nop
 8010078:	e010      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801007a:	bf00      	nop
 801007c:	e00e      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801007e:	bf00      	nop
 8010080:	e00c      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010082:	bf00      	nop
 8010084:	e00a      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010086:	bf00      	nop
 8010088:	e008      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801008a:	bf00      	nop
 801008c:	e006      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801008e:	bf00      	nop
 8010090:	e004      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010092:	bf00      	nop
 8010094:	e002      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 8010096:	bf00      	nop
 8010098:	e000      	b.n	801009c <_fx_system_timer_entry+0x244>
                        break;
 801009a:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 80100a2:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80100a8:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 80100ae:	4a0c      	ldr	r2, [pc, #48]	; (80100e0 <_fx_system_timer_entry+0x288>)
 80100b0:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100ba:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	085b      	lsrs	r3, r3, #1
 80100c0:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 80100c2:	4a06      	ldr	r2, [pc, #24]	; (80100dc <_fx_system_timer_entry+0x284>)
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	e002      	b.n	80100ce <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 80100c8:	bf00      	nop
 80100ca:	e000      	b.n	80100ce <_fx_system_timer_entry+0x276>
                                return;
 80100cc:	bf00      	nop
    }
}
 80100ce:	3724      	adds	r7, #36	; 0x24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr
 80100d8:	46585359 	.word	0x46585359
 80100dc:	24014c94 	.word	0x24014c94
 80100e0:	24014c90 	.word	0x24014c90
 80100e4:	88888889 	.word	0x88888889

080100e8 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3301      	adds	r3, #1
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 80100fc:	4313      	orrs	r3, r2
 80100fe:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8010100:	68fb      	ldr	r3, [r7, #12]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr

0801010e <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 801010e:	b480      	push	{r7}
 8010110:	b083      	sub	sp, #12
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	b2da      	uxtb	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	0a1a      	lsrs	r2, r3, #8
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	3301      	adds	r3, #1
 8010128:	b2d2      	uxtb	r2, r2
 801012a:	701a      	strb	r2, [r3, #0]
}
 801012c:	bf00      	nop
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3303      	adds	r3, #3
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	3302      	adds	r3, #2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8010150:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	3301      	adds	r3, #1
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 801015a:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 8010160:	4313      	orrs	r3, r2
 8010162:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 8010164:	68fb      	ldr	r3, [r7, #12]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 8010172:	b480      	push	{r7}
 8010174:	b083      	sub	sp, #12
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	b2da      	uxtb	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	0a1a      	lsrs	r2, r3, #8
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3301      	adds	r3, #1
 801018c:	b2d2      	uxtb	r2, r2
 801018e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	0c1a      	lsrs	r2, r3, #16
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	3302      	adds	r3, #2
 8010198:	b2d2      	uxtb	r2, r2
 801019a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	0e1a      	lsrs	r2, r3, #24
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3303      	adds	r3, #3
 80101a4:	b2d2      	uxtb	r2, r2
 80101a6:	701a      	strb	r2, [r3, #0]
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 80101b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101b8:	b098      	sub	sp, #96	; 0x60
 80101ba:	af04      	add	r7, sp, #16
 80101bc:	61f8      	str	r0, [r7, #28]
 80101be:	61b9      	str	r1, [r7, #24]
 80101c0:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80101d6:	1c5a      	adds	r2, r3, #1
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	f003 0303 	and.w	r3, r3, #3
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 80101e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101ea:	4613      	mov	r3, r2
 80101ec:	005b      	lsls	r3, r3, #1
 80101ee:	4413      	add	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80101f6:	69fa      	ldr	r2, [r7, #28]
 80101f8:	4413      	add	r3, r2
 80101fa:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 80101fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	69ba      	ldr	r2, [r7, #24]
 8010202:	429a      	cmp	r2, r3
 8010204:	d105      	bne.n	8010212 <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8010206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 801020e:	2300      	movs	r3, #0
 8010210:	e1f4      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8010212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010214:	330c      	adds	r3, #12
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	69ba      	ldr	r2, [r7, #24]
 801021a:	429a      	cmp	r2, r3
 801021c:	d11d      	bne.n	801025a <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 801021e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010220:	330c      	adds	r3, #12
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801022a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801022e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8010234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010238:	4614      	mov	r4, r2
 801023a:	330c      	adds	r3, #12
 801023c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010246:	330c      	adds	r3, #12
 8010248:	461c      	mov	r4, r3
 801024a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801024e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010252:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010256:	2300      	movs	r3, #0
 8010258:	e1d0      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 801025a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801025c:	3318      	adds	r3, #24
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	69ba      	ldr	r2, [r7, #24]
 8010262:	429a      	cmp	r2, r3
 8010264:	d127      	bne.n	80102b6 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8010266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010268:	3318      	adds	r3, #24
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010276:	ca07      	ldmia	r2, {r0, r1, r2}
 8010278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 801027c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801027e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010280:	4614      	mov	r4, r2
 8010282:	3318      	adds	r3, #24
 8010284:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 801028c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801028e:	f103 0218 	add.w	r2, r3, #24
 8010292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010294:	4614      	mov	r4, r2
 8010296:	330c      	adds	r3, #12
 8010298:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801029c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 80102a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a2:	330c      	adds	r3, #12
 80102a4:	461c      	mov	r4, r3
 80102a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 80102b2:	2300      	movs	r3, #0
 80102b4:	e1a2      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 80102b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b8:	3324      	adds	r3, #36	; 0x24
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	69ba      	ldr	r2, [r7, #24]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d131      	bne.n	8010326 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 80102c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c4:	3324      	adds	r3, #36	; 0x24
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 80102cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80102d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 80102d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102dc:	4614      	mov	r4, r2
 80102de:	3324      	adds	r3, #36	; 0x24
 80102e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80102e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ea:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80102ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f0:	4614      	mov	r4, r2
 80102f2:	3318      	adds	r3, #24
 80102f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80102fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fe:	f103 0218 	add.w	r2, r3, #24
 8010302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010304:	4614      	mov	r4, r2
 8010306:	330c      	adds	r3, #12
 8010308:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801030c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010312:	330c      	adds	r3, #12
 8010314:	461c      	mov	r4, r3
 8010316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801031a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801031e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010322:	2300      	movs	r3, #0
 8010324:	e16a      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8010326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010328:	1cda      	adds	r2, r3, #3
 801032a:	69f9      	ldr	r1, [r7, #28]
 801032c:	4613      	mov	r3, r2
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4413      	add	r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	440b      	add	r3, r1
 8010336:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d008      	beq.n	8010352 <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010340:	69f8      	ldr	r0, [r7, #28]
 8010342:	f000 fa54 	bl	80107ee <_fx_utility_FAT_flush>
 8010346:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8010348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 801034e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010350:	e154      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010358:	1e5a      	subs	r2, r3, #1
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8010366:	1c5a      	adds	r2, r3, #1
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80a7 	beq.w	80104c6 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	005a      	lsls	r2, r3, #1
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	4413      	add	r3, r2
 8010380:	085b      	lsrs	r3, r3, #1
 8010382:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038a:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010392:	4413      	add	r3, r2
 8010394:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010398:	2200      	movs	r2, #0
 801039a:	60bb      	str	r3, [r7, #8]
 801039c:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80103a2:	2202      	movs	r2, #2
 80103a4:	9202      	str	r2, [sp, #8]
 80103a6:	2201      	movs	r2, #1
 80103a8:	9201      	str	r2, [sp, #4]
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80103b0:	69f8      	ldr	r0, [r7, #28]
 80103b2:	f001 fb0d 	bl	80119d0 <_fx_utility_logical_sector_read>
 80103b6:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 80103b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 80103be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c0:	e11c      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c8:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 80103ca:	69fa      	ldr	r2, [r7, #28]
 80103cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80103ce:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 80103d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	689a      	ldr	r2, [r3, #8]
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	4413      	add	r3, r2
 80103e0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	f003 0301 	and.w	r3, r3, #1
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d030      	beq.n	801044e <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 80103ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	091b      	lsrs	r3, r3, #4
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 80103f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f8:	3301      	adds	r3, #1
 80103fa:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010400:	3b01      	subs	r3, #1
 8010402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010404:	429a      	cmp	r2, r3
 8010406:	d11b      	bne.n	8010440 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	3301      	adds	r3, #1
 801040c:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010410:	2200      	movs	r2, #0
 8010412:	603b      	str	r3, [r7, #0]
 8010414:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801041a:	2202      	movs	r2, #2
 801041c:	9202      	str	r2, [sp, #8]
 801041e:	2201      	movs	r2, #1
 8010420:	9201      	str	r2, [sp, #4]
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010428:	69f8      	ldr	r0, [r7, #28]
 801042a:	f001 fad1 	bl	80119d0 <_fx_utility_logical_sector_read>
 801042e:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	e0e0      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8010440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	011b      	lsls	r3, r3, #4
 8010446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010448:	4313      	orrs	r3, r2
 801044a:	64bb      	str	r3, [r7, #72]	; 0x48
 801044c:	e02f      	b.n	80104ae <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 801044e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8010454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010456:	3301      	adds	r3, #1
 8010458:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045e:	3b01      	subs	r3, #1
 8010460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010462:	429a      	cmp	r2, r3
 8010464:	d11b      	bne.n	801049e <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010468:	3301      	adds	r3, #1
 801046a:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801046c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046e:	2200      	movs	r2, #0
 8010470:	469a      	mov	sl, r3
 8010472:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010478:	2202      	movs	r2, #2
 801047a:	9202      	str	r2, [sp, #8]
 801047c:	2201      	movs	r2, #1
 801047e:	9201      	str	r2, [sp, #4]
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	4652      	mov	r2, sl
 8010484:	465b      	mov	r3, fp
 8010486:	69f8      	ldr	r0, [r7, #28]
 8010488:	f001 faa2 	bl	80119d0 <_fx_utility_logical_sector_read>
 801048c:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801048e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010490:	2b00      	cmp	r3, #0
 8010492:	d001      	beq.n	8010498 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 8010494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010496:	e0b1      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 801049e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	021b      	lsls	r3, r3, #8
 80104a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80104a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104aa:	4313      	orrs	r3, r2
 80104ac:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 80104ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b0:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80104b4:	d303      	bcc.n	80104be <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 80104b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b8:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80104bc:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	e078      	b.n	80105b8 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d139      	bne.n	8010542 <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	005b      	lsls	r3, r3, #1
 80104d2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104da:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80104e2:	4413      	add	r3, r2
 80104e4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e8:	2200      	movs	r2, #0
 80104ea:	4698      	mov	r8, r3
 80104ec:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80104f2:	2202      	movs	r2, #2
 80104f4:	9202      	str	r2, [sp, #8]
 80104f6:	2201      	movs	r2, #1
 80104f8:	9201      	str	r2, [sp, #4]
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	4642      	mov	r2, r8
 80104fe:	464b      	mov	r3, r9
 8010500:	69f8      	ldr	r0, [r7, #28]
 8010502:	f001 fa65 	bl	80119d0 <_fx_utility_logical_sector_read>
 8010506:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 801050e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010510:	e074      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010518:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 801051a:	69fa      	ldr	r2, [r7, #28]
 801051c:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801051e:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8010522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010524:	1ad3      	subs	r3, r2, r3
 8010526:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	689a      	ldr	r2, [r3, #8]
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	4413      	add	r3, r2
 8010530:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8010532:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010534:	f7ff fdd8 	bl	80100e8 <_fx_utility_16_unsigned_read>
 8010538:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801053e:	601a      	str	r2, [r3, #0]
 8010540:	e03a      	b.n	80105b8 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801054c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801054e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010556:	4413      	add	r3, r2
 8010558:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801055e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010560:	fbb3 f1f2 	udiv	r1, r3, r2
 8010564:	fb01 f202 	mul.w	r2, r1, r2
 8010568:	1a9b      	subs	r3, r3, r2
 801056a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	2200      	movs	r2, #0
 8010570:	461c      	mov	r4, r3
 8010572:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010578:	2202      	movs	r2, #2
 801057a:	9202      	str	r2, [sp, #8]
 801057c:	2201      	movs	r2, #1
 801057e:	9201      	str	r2, [sp, #4]
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	4622      	mov	r2, r4
 8010584:	462b      	mov	r3, r5
 8010586:	69f8      	ldr	r0, [r7, #28]
 8010588:	f001 fa22 	bl	80119d0 <_fx_utility_logical_sector_read>
 801058c:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 801058e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010590:	2b00      	cmp	r3, #0
 8010592:	d001      	beq.n	8010598 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 8010594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010596:	e031      	b.n	80105fc <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	689a      	ldr	r2, [r3, #8]
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	4413      	add	r3, r2
 80105a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 80105a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80105a4:	f7ff fdc8 	bl	8010138 <_fx_utility_32_unsigned_read>
 80105a8:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80105b0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105b6:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 80105b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80105be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105c0:	4614      	mov	r4, r2
 80105c2:	3318      	adds	r3, #24
 80105c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 80105cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ce:	f103 0218 	add.w	r2, r3, #24
 80105d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d4:	4614      	mov	r4, r2
 80105d6:	330c      	adds	r3, #12
 80105d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 80105e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e2:	330c      	adds	r3, #12
 80105e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80105e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 80105ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ee:	69ba      	ldr	r2, [r7, #24]
 80105f0:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f8:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3750      	adds	r7, #80	; 0x50
 8010600:	46bd      	mov	sp, r7
 8010602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010606 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8010606:	b590      	push	{r4, r7, lr}
 8010608:	b089      	sub	sp, #36	; 0x24
 801060a:	af00      	add	r7, sp, #0
 801060c:	60f8      	str	r0, [r7, #12]
 801060e:	60b9      	str	r1, [r7, #8]
 8010610:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010618:	1c5a      	adds	r2, r3, #1
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010626:	1c5a      	adds	r2, r3, #1
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f003 0303 	and.w	r3, r3, #3
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	4613      	mov	r3, r2
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	4413      	add	r3, r2
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	4413      	add	r3, r2
 801064a:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 801064c:	2300      	movs	r3, #0
 801064e:	61fb      	str	r3, [r7, #28]
 8010650:	e051      	b.n	80106f6 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8010652:	69fa      	ldr	r2, [r7, #28]
 8010654:	4613      	mov	r3, r2
 8010656:	005b      	lsls	r3, r3, #1
 8010658:	4413      	add	r3, r2
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	461a      	mov	r2, r3
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	4413      	add	r3, r2
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	429a      	cmp	r2, r3
 8010668:	d142      	bne.n	80106f0 <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 801066a:	69fa      	ldr	r2, [r7, #28]
 801066c:	4613      	mov	r3, r2
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	4413      	add	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	461a      	mov	r2, r3
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	4413      	add	r3, r2
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 801067e:	69fa      	ldr	r2, [r7, #28]
 8010680:	4613      	mov	r3, r2
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	4413      	add	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	461a      	mov	r2, r3
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	4413      	add	r3, r2
 801068e:	2201      	movs	r2, #1
 8010690:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010698:	2b00      	cmp	r3, #0
 801069a:	d027      	beq.n	80106ec <_fx_utility_FAT_entry_write+0xe6>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d124      	bne.n	80106ec <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2206      	movs	r2, #6
 80106b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2290      	movs	r2, #144	; 0x90
 80106bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	3b02      	subs	r3, #2
 80106c8:	68f9      	ldr	r1, [r7, #12]
 80106ca:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80106cc:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80106d0:	441a      	add	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 80106ec:	2300      	movs	r3, #0
 80106ee:	e07a      	b.n	80107e6 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	3301      	adds	r3, #1
 80106f4:	61fb      	str	r3, [r7, #28]
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	2b03      	cmp	r3, #3
 80106fa:	d9aa      	bls.n	8010652 <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010702:	1e5a      	subs	r2, r3, #1
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8010710:	1c5a      	adds	r2, r3, #1
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	1cda      	adds	r2, r3, #3
 801071c:	68f9      	ldr	r1, [r7, #12]
 801071e:	4613      	mov	r3, r2
 8010720:	005b      	lsls	r3, r3, #1
 8010722:	4413      	add	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	440b      	add	r3, r1
 8010728:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d108      	bne.n	8010744 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 f85b 	bl	80107ee <_fx_utility_FAT_flush>
 8010738:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	e050      	b.n	80107e6 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	4614      	mov	r4, r2
 801074e:	3318      	adds	r3, #24
 8010750:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	f103 0218 	add.w	r2, r3, #24
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	4614      	mov	r4, r2
 8010762:	330c      	adds	r3, #12
 8010764:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	330c      	adds	r3, #12
 8010770:	697a      	ldr	r2, [r7, #20]
 8010772:	ca07      	ldmia	r2, {r0, r1, r2}
 8010774:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	2201      	movs	r2, #1
 801077c:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010790:	2b00      	cmp	r3, #0
 8010792:	d027      	beq.n	80107e4 <_fx_utility_FAT_entry_write+0x1de>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d124      	bne.n	80107e4 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80107a0:	1c5a      	adds	r2, r3, #1
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2206      	movs	r2, #6
 80107ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2290      	movs	r2, #144	; 0x90
 80107b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	3b02      	subs	r3, #2
 80107c0:	68f9      	ldr	r1, [r7, #12]
 80107c2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80107c4:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 80107c8:	441a      	add	r2, r3
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3724      	adds	r7, #36	; 0x24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd90      	pop	{r4, r7, pc}

080107ee <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 80107ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107f2:	b09a      	sub	sp, #104	; 0x68
 80107f4:	af04      	add	r7, sp, #16
 80107f6:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80107fe:	1c5a      	adds	r2, r3, #1
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010806:	2300      	movs	r3, #0
 8010808:	64fb      	str	r3, [r7, #76]	; 0x4c
 801080a:	e337      	b.n	8010e7c <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 801080c:	69f9      	ldr	r1, [r7, #28]
 801080e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010810:	4613      	mov	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	4413      	add	r3, r2
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	440b      	add	r3, r1
 801081a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 8325 	beq.w	8010e70 <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 8010826:	69f9      	ldr	r1, [r7, #28]
 8010828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801082a:	4613      	mov	r3, r2
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	4413      	add	r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	440b      	add	r3, r1
 8010834:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010840:	2b00      	cmp	r3, #0
 8010842:	f000 816c 	beq.w	8010b1e <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010848:	005a      	lsls	r2, r3, #1
 801084a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801084c:	4413      	add	r3, r2
 801084e:	085b      	lsrs	r3, r3, #1
 8010850:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010858:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010860:	4413      	add	r3, r2
 8010862:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 8010864:	f04f 33ff 	mov.w	r3, #4294967295
 8010868:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801086a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801086c:	2200      	movs	r2, #0
 801086e:	461c      	mov	r4, r3
 8010870:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010876:	2302      	movs	r3, #2
 8010878:	9302      	str	r3, [sp, #8]
 801087a:	2301      	movs	r3, #1
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	9200      	str	r2, [sp, #0]
 8010880:	4622      	mov	r2, r4
 8010882:	462b      	mov	r3, r5
 8010884:	69f8      	ldr	r0, [r7, #28]
 8010886:	f001 f8a3 	bl	80119d0 <_fx_utility_logical_sector_read>
 801088a:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	e2f7      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 8010896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089c:	d037      	beq.n	801090e <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 80108a4:	69f9      	ldr	r1, [r7, #28]
 80108a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	440b      	add	r3, r1
 80108b2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 80108ba:	69f9      	ldr	r1, [r7, #28]
 80108bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108be:	4613      	mov	r3, r2
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	440b      	add	r3, r1
 80108c8:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80108d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d2:	f003 0301 	and.w	r3, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d005      	beq.n	80108e6 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	091b      	lsrs	r3, r3, #4
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108e2:	7013      	strb	r3, [r2, #0]
 80108e4:	e010      	b.n	8010908 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 80108e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108ee:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	b2da      	uxtb	r2, r3
 80108f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f6:	0a1b      	lsrs	r3, r3, #8
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	f003 030f 	and.w	r3, r3, #15
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	4313      	orrs	r3, r2
 8010902:	b2db      	uxtb	r3, r3
 8010904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010906:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8010908:	f04f 33ff 	mov.w	r3, #4294967295
 801090c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801090e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010910:	653b      	str	r3, [r7, #80]	; 0x50
 8010912:	e0a0      	b.n	8010a56 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8010914:	69f9      	ldr	r1, [r7, #28]
 8010916:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010918:	4613      	mov	r3, r2
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	4413      	add	r3, r2
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	440b      	add	r3, r1
 8010922:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 808a 	beq.w	8010a42 <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 801092e:	69f9      	ldr	r1, [r7, #28]
 8010930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010932:	4613      	mov	r3, r2
 8010934:	005b      	lsls	r3, r3, #1
 8010936:	4413      	add	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	440b      	add	r3, r1
 801093c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010946:	005a      	lsls	r2, r3, #1
 8010948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801094a:	4413      	add	r3, r2
 801094c:	085b      	lsrs	r3, r3, #1
 801094e:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010956:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801095e:	4413      	add	r3, r2
 8010960:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 8010962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010966:	429a      	cmp	r2, r3
 8010968:	d16d      	bne.n	8010a46 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801096a:	69f9      	ldr	r1, [r7, #28]
 801096c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801096e:	4613      	mov	r3, r2
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	440b      	add	r3, r1
 8010978:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010986:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801098c:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 8010990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099a:	3b01      	subs	r3, #1
 801099c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801099e:	429a      	cmp	r2, r3
 80109a0:	d101      	bne.n	80109a6 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 80109a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109a4:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	689a      	ldr	r2, [r3, #8]
 80109aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ac:	4413      	add	r3, r2
 80109ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 80109b0:	69f9      	ldr	r1, [r7, #28]
 80109b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109b4:	4613      	mov	r3, r2
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	4413      	add	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	440b      	add	r3, r1
 80109be:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 80109c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109c8:	f003 0301 	and.w	r3, r3, #1
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d01b      	beq.n	8010a08 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	f003 030f 	and.w	r3, r3, #15
 80109d8:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	011b      	lsls	r3, r3, #4
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	4313      	orrs	r3, r2
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ec:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 80109ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d029      	beq.n	8010a4a <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 80109f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f8:	3301      	adds	r3, #1
 80109fa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 80109fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fe:	091b      	lsrs	r3, r3, #4
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a04:	7013      	strb	r3, [r2, #0]
 8010a06:	e023      	b.n	8010a50 <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a0e:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 8010a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d01a      	beq.n	8010a4e <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8010a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8010a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a26:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2e:	0a1b      	lsrs	r3, r3, #8
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	f003 030f 	and.w	r3, r3, #15
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a3e:	7013      	strb	r3, [r2, #0]
 8010a40:	e006      	b.n	8010a50 <_fx_utility_FAT_flush+0x262>
                        continue;
 8010a42:	bf00      	nop
 8010a44:	e004      	b.n	8010a50 <_fx_utility_FAT_flush+0x262>
                        continue;
 8010a46:	bf00      	nop
 8010a48:	e002      	b.n	8010a50 <_fx_utility_FAT_flush+0x262>
                            continue;
 8010a4a:	bf00      	nop
 8010a4c:	e000      	b.n	8010a50 <_fx_utility_FAT_flush+0x262>
                            continue;
 8010a4e:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a52:	3301      	adds	r3, #1
 8010a54:	653b      	str	r3, [r7, #80]	; 0x50
 8010a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a58:	2b0f      	cmp	r3, #15
 8010a5a:	f67f af5b 	bls.w	8010914 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a60:	2200      	movs	r2, #0
 8010a62:	4698      	mov	r8, r3
 8010a64:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010a6a:	2302      	movs	r3, #2
 8010a6c:	9302      	str	r3, [sp, #8]
 8010a6e:	2301      	movs	r3, #1
 8010a70:	9301      	str	r3, [sp, #4]
 8010a72:	9200      	str	r2, [sp, #0]
 8010a74:	4642      	mov	r2, r8
 8010a76:	464b      	mov	r3, r9
 8010a78:	69f8      	ldr	r0, [r7, #28]
 8010a7a:	f001 fa3d 	bl	8011ef8 <_fx_utility_logical_sector_write>
 8010a7e:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d001      	beq.n	8010a8a <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 8010a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a88:	e1fd      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d105      	bne.n	8010aa2 <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a9a:	0a9b      	lsrs	r3, r3, #10
 8010a9c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010aa0:	e006      	b.n	8010ab0 <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aa6:	0a9b      	lsrs	r3, r3, #10
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	3301      	adds	r3, #1
 8010aac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 8010ab0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d101      	bne.n	8010abc <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8010ab8:	2302      	movs	r3, #2
 8010aba:	e1e4      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ac2:	1ad2      	subs	r2, r2, r3
 8010ac4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010acc:	08db      	lsrs	r3, r3, #3
 8010ace:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010ad0:	69fa      	ldr	r2, [r7, #28]
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae4:	1a9a      	subs	r2, r3, r2
 8010ae6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8010aee:	f003 0207 	and.w	r2, r3, #7
 8010af2:	2301      	movs	r3, #1
 8010af4:	4093      	lsls	r3, r2
 8010af6:	b25b      	sxtb	r3, r3
 8010af8:	430b      	orrs	r3, r1
 8010afa:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010afc:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010afe:	69fa      	ldr	r2, [r7, #28]
 8010b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b02:	4413      	add	r3, r2
 8010b04:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010b08:	460b      	mov	r3, r1
 8010b0a:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 8010b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b12:	f000 81af 	beq.w	8010e74 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 8010b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b18:	3301      	adds	r3, #1
 8010b1a:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b1c:	e6a5      	b.n	801086a <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f040 80d2 	bne.w	8010ccc <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 8010b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2a:	005b      	lsls	r3, r3, #1
 8010b2c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b34:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010b3c:	4413      	add	r3, r2
 8010b3e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b42:	2200      	movs	r2, #0
 8010b44:	469a      	mov	sl, r3
 8010b46:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010b4c:	2302      	movs	r3, #2
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	2301      	movs	r3, #1
 8010b52:	9301      	str	r3, [sp, #4]
 8010b54:	9200      	str	r2, [sp, #0]
 8010b56:	4652      	mov	r2, sl
 8010b58:	465b      	mov	r3, fp
 8010b5a:	69f8      	ldr	r0, [r7, #28]
 8010b5c:	f000 ff38 	bl	80119d0 <_fx_utility_logical_sector_read>
 8010b60:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 8010b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6a:	e18c      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8010b70:	e057      	b.n	8010c22 <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010b72:	69f9      	ldr	r1, [r7, #28]
 8010b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b76:	4613      	mov	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	440b      	add	r3, r1
 8010b80:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d045      	beq.n	8010c16 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010b8a:	69f9      	ldr	r1, [r7, #28]
 8010b8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b8e:	4613      	mov	r3, r2
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	440b      	add	r3, r1
 8010b98:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 8010ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bac:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010bb4:	4413      	add	r3, r2
 8010bb6:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d12c      	bne.n	8010c1a <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bc6:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010bcc:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	689a      	ldr	r2, [r3, #8]
 8010bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bdc:	4413      	add	r3, r2
 8010bde:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010be0:	69f9      	ldr	r1, [r7, #28]
 8010be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010be4:	4613      	mov	r3, r2
 8010be6:	005b      	lsls	r3, r3, #1
 8010be8:	4413      	add	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	440b      	add	r3, r1
 8010bee:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8010bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bfa:	f7ff fa88 	bl	801010e <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010bfe:	69f9      	ldr	r1, [r7, #28]
 8010c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c02:	4613      	mov	r3, r2
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	440b      	add	r3, r1
 8010c0c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010c10:	2200      	movs	r2, #0
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	e002      	b.n	8010c1c <_fx_utility_FAT_flush+0x42e>
                    continue;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <_fx_utility_FAT_flush+0x42e>
                    continue;
 8010c1a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c1e:	3301      	adds	r3, #1
 8010c20:	653b      	str	r3, [r7, #80]	; 0x50
 8010c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c24:	2b0f      	cmp	r3, #15
 8010c26:	d9a4      	bls.n	8010b72 <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	613b      	str	r3, [r7, #16]
 8010c2e:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010c34:	2302      	movs	r3, #2
 8010c36:	9302      	str	r3, [sp, #8]
 8010c38:	2301      	movs	r3, #1
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	9200      	str	r2, [sp, #0]
 8010c3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c42:	69f8      	ldr	r0, [r7, #28]
 8010c44:	f001 f958 	bl	8011ef8 <_fx_utility_logical_sector_write>
 8010c48:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 8010c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c52:	e118      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d105      	bne.n	8010c6c <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c64:	0a9b      	lsrs	r3, r3, #10
 8010c66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010c6a:	e006      	b.n	8010c7a <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c70:	0a9b      	lsrs	r3, r3, #10
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	3301      	adds	r3, #1
 8010c76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c80:	1ad2      	subs	r2, r2, r3
 8010c82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c8a:	08db      	lsrs	r3, r3, #3
 8010c8c:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010c8e:	69fa      	ldr	r2, [r7, #28]
 8010c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c92:	4413      	add	r3, r2
 8010c94:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ca2:	1a9a      	subs	r2, r3, r2
 8010ca4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cac:	f003 0207 	and.w	r2, r3, #7
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4093      	lsls	r3, r2
 8010cb4:	b25b      	sxtb	r3, r3
 8010cb6:	430b      	orrs	r3, r1
 8010cb8:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010cba:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010cbc:	69fa      	ldr	r2, [r7, #28]
 8010cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	7013      	strb	r3, [r2, #0]
 8010cca:	e0d4      	b.n	8010e76 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8010ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010cd8:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010ce0:	4413      	add	r3, r2
 8010ce2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	60bb      	str	r3, [r7, #8]
 8010cea:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010cf0:	2302      	movs	r3, #2
 8010cf2:	9302      	str	r3, [sp, #8]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	9301      	str	r3, [sp, #4]
 8010cf8:	9200      	str	r2, [sp, #0]
 8010cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010cfe:	69f8      	ldr	r0, [r7, #28]
 8010d00:	f000 fe66 	bl	80119d0 <_fx_utility_logical_sector_read>
 8010d04:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	e0ba      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d12:	653b      	str	r3, [r7, #80]	; 0x50
 8010d14:	e057      	b.n	8010dc6 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8010d16:	69f9      	ldr	r1, [r7, #28]
 8010d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	440b      	add	r3, r1
 8010d24:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d045      	beq.n	8010dba <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8010d2e:	69f9      	ldr	r1, [r7, #28]
 8010d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d32:	4613      	mov	r3, r2
 8010d34:	005b      	lsls	r3, r3, #1
 8010d36:	4413      	add	r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	440b      	add	r3, r1
 8010d3c:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 8010d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d50:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d58:	4413      	add	r3, r2
 8010d5a:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8010d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d12c      	bne.n	8010dbe <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d6a:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010d70:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 8010d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	689a      	ldr	r2, [r3, #8]
 8010d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d80:	4413      	add	r3, r2
 8010d82:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8010d84:	69f9      	ldr	r1, [r7, #28]
 8010d86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d88:	4613      	mov	r3, r2
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	4413      	add	r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	440b      	add	r3, r1
 8010d92:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8010d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d9e:	f7ff f9e8 	bl	8010172 <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 8010da2:	69f9      	ldr	r1, [r7, #28]
 8010da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010da6:	4613      	mov	r3, r2
 8010da8:	005b      	lsls	r3, r3, #1
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010db4:	2200      	movs	r2, #0
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	e002      	b.n	8010dc0 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010dba:	bf00      	nop
 8010dbc:	e000      	b.n	8010dc0 <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8010dbe:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8010dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8010dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc8:	2b0f      	cmp	r3, #15
 8010dca:	d9a4      	bls.n	8010d16 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dce:	2200      	movs	r2, #0
 8010dd0:	603b      	str	r3, [r7, #0]
 8010dd2:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8010dd8:	2302      	movs	r3, #2
 8010dda:	9302      	str	r3, [sp, #8]
 8010ddc:	2301      	movs	r3, #1
 8010dde:	9301      	str	r3, [sp, #4]
 8010de0:	9200      	str	r2, [sp, #0]
 8010de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010de6:	69f8      	ldr	r0, [r7, #28]
 8010de8:	f001 f886 	bl	8011ef8 <_fx_utility_logical_sector_write>
 8010dec:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	e046      	b.n	8010e86 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e08:	0a9b      	lsrs	r3, r3, #10
 8010e0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8010e0e:	e006      	b.n	8010e1e <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e14:	0a9b      	lsrs	r3, r3, #10
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	3301      	adds	r3, #1
 8010e1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e24:	1ad2      	subs	r2, r2, r3
 8010e26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e2e:	08db      	lsrs	r3, r3, #3
 8010e30:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010e32:	69fa      	ldr	r2, [r7, #28]
 8010e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e36:	4413      	add	r3, r2
 8010e38:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e46:	1a9a      	subs	r2, r3, r2
 8010e48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e50:	f003 0207 	and.w	r2, r3, #7
 8010e54:	2301      	movs	r3, #1
 8010e56:	4093      	lsls	r3, r2
 8010e58:	b25b      	sxtb	r3, r3
 8010e5a:	430b      	orrs	r3, r1
 8010e5c:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8010e5e:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8010e60:	69fa      	ldr	r2, [r7, #28]
 8010e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e64:	4413      	add	r3, r2
 8010e66:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	7013      	strb	r3, [r2, #0]
 8010e6e:	e002      	b.n	8010e76 <_fx_utility_FAT_flush+0x688>
            continue;
 8010e70:	bf00      	nop
 8010e72:	e000      	b.n	8010e76 <_fx_utility_FAT_flush+0x688>
                    break;
 8010e74:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8010e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e78:	3301      	adds	r3, #1
 8010e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e7e:	2b0f      	cmp	r3, #15
 8010e80:	f67f acc4 	bls.w	801080c <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3758      	adds	r7, #88	; 0x58
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e90 <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 8010e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e94:	b092      	sub	sp, #72	; 0x48
 8010e96:	af04      	add	r7, sp, #16
 8010e98:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d105      	bne.n	8010eb2 <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eaa:	0a9b      	lsrs	r3, r3, #10
 8010eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010eb0:	e006      	b.n	8010ec0 <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eb6:	0a9b      	lsrs	r3, r3, #10
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	3301      	adds	r3, #1
 8010ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ec4:	e089      	b.n	8010fda <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8010ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec8:	08db      	lsrs	r3, r3, #3
 8010eca:	69fa      	ldr	r2, [r7, #28]
 8010ecc:	4413      	add	r3, r2
 8010ece:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed6:	f003 0307 	and.w	r3, r3, #7
 8010eda:	fa42 f303 	asr.w	r3, r2, r3
 8010ede:	f003 0301 	and.w	r3, r3, #1
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d075      	beq.n	8010fd2 <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8010ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eec:	fb03 f202 	mul.w	r2, r3, r2
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef4:	4413      	add	r3, r2
 8010ef6:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8010ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010efe:	4413      	add	r3, r2
 8010f00:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f0a:	4413      	add	r3, r2
 8010f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d95a      	bls.n	8010fc8 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1a:	4413      	add	r3, r2
 8010f1c:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 8010f1e:	e053      	b.n	8010fc8 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f22:	2200      	movs	r2, #0
 8010f24:	613b      	str	r3, [r7, #16]
 8010f26:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	9302      	str	r3, [sp, #8]
 8010f30:	2301      	movs	r3, #1
 8010f32:	9301      	str	r3, [sp, #4]
 8010f34:	9200      	str	r2, [sp, #0]
 8010f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010f3a:	69f8      	ldr	r0, [r7, #28]
 8010f3c:	f000 fd48 	bl	80119d0 <_fx_utility_logical_sector_read>
 8010f40:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 8010f48:	6a3b      	ldr	r3, [r7, #32]
 8010f4a:	e05c      	b.n	8011006 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f50:	3b01      	subs	r3, #1
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 8010f54:	e032      	b.n	8010fbc <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 8010f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f58:	2200      	movs	r2, #0
 8010f5a:	60bb      	str	r3, [r7, #8]
 8010f5c:	60fa      	str	r2, [r7, #12]
 8010f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f60:	2200      	movs	r2, #0
 8010f62:	4698      	mov	r8, r3
 8010f64:	4691      	mov	r9, r2
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	469a      	mov	sl, r3
 8010f6e:	4693      	mov	fp, r2
 8010f70:	fb0a f209 	mul.w	r2, sl, r9
 8010f74:	fb08 f30b 	mul.w	r3, r8, fp
 8010f78:	4413      	add	r3, r2
 8010f7a:	fba8 450a 	umull	r4, r5, r8, sl
 8010f7e:	442b      	add	r3, r5
 8010f80:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010f82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010f86:	460b      	mov	r3, r1
 8010f88:	191b      	adds	r3, r3, r4
 8010f8a:	603b      	str	r3, [r7, #0]
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	416b      	adcs	r3, r5
 8010f90:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8010f96:	2302      	movs	r3, #2
 8010f98:	9302      	str	r3, [sp, #8]
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	9200      	str	r2, [sp, #0]
 8010fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fa4:	69f8      	ldr	r0, [r7, #28]
 8010fa6:	f000 ffa7 	bl	8011ef8 <_fx_utility_logical_sector_write>
 8010faa:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d001      	beq.n	8010fb6 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	e027      	b.n	8011006 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8010fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1c9      	bne.n	8010f56 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 8010fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8010fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d3a7      	bcc.n	8010f20 <_fx_utility_FAT_map_flush+0x90>
 8010fd0:	e000      	b.n	8010fd4 <_fx_utility_FAT_map_flush+0x144>
            continue;
 8010fd2:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8010fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fe0:	f4ff af71 	bcc.w	8010ec6 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fe8:	e009      	b.n	8010ffe <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	4413      	add	r3, r2
 8010ff0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	2b7f      	cmp	r3, #127	; 0x7f
 8011002:	d9f2      	bls.n	8010fea <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 8011004:	2300      	movs	r3, #0
}
 8011006:	4618      	mov	r0, r3
 8011008:	3738      	adds	r7, #56	; 0x38
 801100a:	46bd      	mov	sp, r7
 801100c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011010 <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 8011010:	b480      	push	{r7}
 8011012:	b08f      	sub	sp, #60	; 0x3c
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 8275 	beq.w	8011510 <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801102e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011032:	4013      	ands	r3, r2
 8011034:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6a1a      	ldr	r2, [r3, #32]
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	f003 031f 	and.w	r3, r3, #31
 8011040:	2101      	movs	r1, #1
 8011042:	fa01 f303 	lsl.w	r3, r1, r3
 8011046:	431a      	orrs	r2, r3
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8011052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011054:	4613      	mov	r3, r2
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	4413      	add	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	4413      	add	r3, r2
 8011064:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011068:	7c5b      	ldrb	r3, [r3, #17]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d015      	beq.n	801109a <_fx_utility_logical_sector_cache_entry_read+0x8a>
 801106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011070:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011074:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011078:	4299      	cmp	r1, r3
 801107a:	bf08      	it	eq
 801107c:	4290      	cmpeq	r0, r2
 801107e:	d10c      	bne.n	801109a <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8011096:	2300      	movs	r3, #0
 8011098:	e27e      	b.n	8011598 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 801109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109c:	3318      	adds	r3, #24
 801109e:	7c5b      	ldrb	r3, [r3, #17]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d060      	beq.n	8011166 <_fx_utility_logical_sector_cache_entry_read+0x156>
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	3318      	adds	r3, #24
 80110a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80110b0:	4299      	cmp	r1, r3
 80110b2:	bf08      	it	eq
 80110b4:	4290      	cmpeq	r0, r2
 80110b6:	d156      	bne.n	8011166 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80110b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ba:	3318      	adds	r3, #24
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80110c8:	1c5a      	adds	r2, r3, #1
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80110d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80110d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80110dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80110e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e2:	7c1b      	ldrb	r3, [r3, #16]
 80110e4:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80110e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ea:	7c5b      	ldrb	r3, [r3, #17]
 80110ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80110f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f2:	7c9b      	ldrb	r3, [r3, #18]
 80110f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fa:	3318      	adds	r3, #24
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011100:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 8011102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011104:	3318      	adds	r3, #24
 8011106:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801110a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801110c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011112:	3318      	adds	r3, #24
 8011114:	7c1a      	ldrb	r2, [r3, #16]
 8011116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011118:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 801111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801111c:	3318      	adds	r3, #24
 801111e:	7c5a      	ldrb	r2, [r3, #17]
 8011120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011122:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 8011124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011126:	3318      	adds	r3, #24
 8011128:	7c9a      	ldrb	r2, [r3, #18]
 801112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112c:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 801112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011130:	3318      	adds	r3, #24
 8011132:	693a      	ldr	r2, [r7, #16]
 8011134:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8011136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011138:	f103 0118 	add.w	r1, r3, #24
 801113c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011140:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8011144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011146:	3318      	adds	r3, #24
 8011148:	f897 2020 	ldrb.w	r2, [r7, #32]
 801114c:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 801114e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011150:	3318      	adds	r3, #24
 8011152:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011156:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115a:	3318      	adds	r3, #24
 801115c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011160:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8011162:	2300      	movs	r3, #0
 8011164:	e218      	b.n	8011598 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 8011166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011168:	3330      	adds	r3, #48	; 0x30
 801116a:	7c5b      	ldrb	r3, [r3, #17]
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 8086 	beq.w	801127e <_fx_utility_logical_sector_cache_entry_read+0x26e>
 8011172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011174:	3330      	adds	r3, #48	; 0x30
 8011176:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801117a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801117e:	4299      	cmp	r1, r3
 8011180:	bf08      	it	eq
 8011182:	4290      	cmpeq	r0, r2
 8011184:	d17b      	bne.n	801127e <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011188:	3330      	adds	r3, #48	; 0x30
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011196:	1c5a      	adds	r2, r3, #1
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80111a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80111aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	7c1b      	ldrb	r3, [r3, #16]
 80111b2:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80111b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b8:	7c5b      	ldrb	r3, [r3, #17]
 80111ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80111be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c0:	7c9b      	ldrb	r3, [r3, #18]
 80111c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 80111c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c8:	3330      	adds	r3, #48	; 0x30
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ce:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 80111d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d2:	3330      	adds	r3, #48	; 0x30
 80111d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80111d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80111da:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 80111de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e0:	3330      	adds	r3, #48	; 0x30
 80111e2:	7c1a      	ldrb	r2, [r3, #16]
 80111e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e6:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 80111e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ea:	3330      	adds	r3, #48	; 0x30
 80111ec:	7c5a      	ldrb	r2, [r3, #17]
 80111ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f0:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 80111f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f4:	3330      	adds	r3, #48	; 0x30
 80111f6:	7c9a      	ldrb	r2, [r3, #18]
 80111f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fa:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 80111fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fe:	f103 0218 	add.w	r2, r3, #24
 8011202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011204:	3330      	adds	r3, #48	; 0x30
 8011206:	6812      	ldr	r2, [r2, #0]
 8011208:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120c:	3318      	adds	r3, #24
 801120e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011210:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011214:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011218:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	f103 0218 	add.w	r2, r3, #24
 8011222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011224:	3330      	adds	r3, #48	; 0x30
 8011226:	7c12      	ldrb	r2, [r2, #16]
 8011228:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122c:	f103 0218 	add.w	r2, r3, #24
 8011230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011232:	3330      	adds	r3, #48	; 0x30
 8011234:	7c52      	ldrb	r2, [r2, #17]
 8011236:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8011238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123a:	f103 0218 	add.w	r2, r3, #24
 801123e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011240:	3330      	adds	r3, #48	; 0x30
 8011242:	7c92      	ldrb	r2, [r2, #18]
 8011244:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	3318      	adds	r3, #24
 801124a:	693a      	ldr	r2, [r7, #16]
 801124c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 801124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011250:	f103 0118 	add.w	r1, r3, #24
 8011254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011258:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 801125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125e:	3318      	adds	r3, #24
 8011260:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011264:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8011266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011268:	3318      	adds	r3, #24
 801126a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801126e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011272:	3318      	adds	r3, #24
 8011274:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011278:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 801127a:	2300      	movs	r3, #0
 801127c:	e18c      	b.n	8011598 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 801127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011280:	3348      	adds	r3, #72	; 0x48
 8011282:	7c5b      	ldrb	r3, [r3, #17]
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 80ac 	beq.w	80113e2 <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 801128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128c:	3348      	adds	r3, #72	; 0x48
 801128e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011296:	4299      	cmp	r1, r3
 8011298:	bf08      	it	eq
 801129a:	4290      	cmpeq	r0, r2
 801129c:	f040 80a1 	bne.w	80113e2 <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80112a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a2:	3348      	adds	r3, #72	; 0x48
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80112b0:	1c5a      	adds	r2, r3, #1
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 80112b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 80112be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80112c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 80112c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ca:	7c1b      	ldrb	r3, [r3, #16]
 80112cc:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 80112d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d2:	7c5b      	ldrb	r3, [r3, #17]
 80112d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	7c9b      	ldrb	r3, [r3, #18]
 80112dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80112e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e2:	3348      	adds	r3, #72	; 0x48
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112e8:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 80112ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ec:	3348      	adds	r3, #72	; 0x48
 80112ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80112f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80112f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fa:	3348      	adds	r3, #72	; 0x48
 80112fc:	7c1a      	ldrb	r2, [r3, #16]
 80112fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011300:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8011302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011304:	3348      	adds	r3, #72	; 0x48
 8011306:	7c5a      	ldrb	r2, [r3, #17]
 8011308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130a:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 801130c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801130e:	3348      	adds	r3, #72	; 0x48
 8011310:	7c9a      	ldrb	r2, [r3, #18]
 8011312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011314:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131e:	3348      	adds	r3, #72	; 0x48
 8011320:	6812      	ldr	r2, [r2, #0]
 8011322:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8011324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011326:	3330      	adds	r3, #48	; 0x30
 8011328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801132a:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801132e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011332:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011338:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801133e:	3348      	adds	r3, #72	; 0x48
 8011340:	7c12      	ldrb	r2, [r2, #16]
 8011342:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8011344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011346:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801134c:	3348      	adds	r3, #72	; 0x48
 801134e:	7c52      	ldrb	r2, [r2, #17]
 8011350:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8011352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801135a:	3348      	adds	r3, #72	; 0x48
 801135c:	7c92      	ldrb	r2, [r2, #18]
 801135e:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011362:	f103 0218 	add.w	r2, r3, #24
 8011366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011368:	3330      	adds	r3, #48	; 0x30
 801136a:	6812      	ldr	r2, [r2, #0]
 801136c:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011370:	3318      	adds	r3, #24
 8011372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011374:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011378:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801137c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011382:	f103 0218 	add.w	r2, r3, #24
 8011386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011388:	3330      	adds	r3, #48	; 0x30
 801138a:	7c12      	ldrb	r2, [r2, #16]
 801138c:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	f103 0218 	add.w	r2, r3, #24
 8011394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011396:	3330      	adds	r3, #48	; 0x30
 8011398:	7c52      	ldrb	r2, [r2, #17]
 801139a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801139e:	f103 0218 	add.w	r2, r3, #24
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	3330      	adds	r3, #48	; 0x30
 80113a6:	7c92      	ldrb	r2, [r2, #18]
 80113a8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80113aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ac:	3318      	adds	r3, #24
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80113b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b4:	f103 0118 	add.w	r1, r3, #24
 80113b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80113bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80113c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c2:	3318      	adds	r3, #24
 80113c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80113c8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80113ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113cc:	3318      	adds	r3, #24
 80113ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80113d2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80113d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d6:	3318      	adds	r3, #24
 80113d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80113dc:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80113de:	2300      	movs	r3, #0
 80113e0:	e0da      	b.n	8011598 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 80113e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e4:	3348      	adds	r3, #72	; 0x48
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 80113ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ec:	3348      	adds	r3, #72	; 0x48
 80113ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80113f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 80113f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f8:	3348      	adds	r3, #72	; 0x48
 80113fa:	7c1b      	ldrb	r3, [r3, #16]
 80113fc:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 8011400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011402:	3348      	adds	r3, #72	; 0x48
 8011404:	7c5b      	ldrb	r3, [r3, #17]
 8011406:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 801140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140c:	3348      	adds	r3, #72	; 0x48
 801140e:	7c9b      	ldrb	r3, [r3, #18]
 8011410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011416:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141c:	3348      	adds	r3, #72	; 0x48
 801141e:	6812      	ldr	r2, [r2, #0]
 8011420:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011424:	3330      	adds	r3, #48	; 0x30
 8011426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011428:	f102 0148 	add.w	r1, r2, #72	; 0x48
 801142c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011430:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011436:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143c:	3348      	adds	r3, #72	; 0x48
 801143e:	7c12      	ldrb	r2, [r2, #16]
 8011440:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8011442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011444:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144a:	3348      	adds	r3, #72	; 0x48
 801144c:	7c52      	ldrb	r2, [r2, #17]
 801144e:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8011450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011452:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011458:	3348      	adds	r3, #72	; 0x48
 801145a:	7c92      	ldrb	r2, [r2, #18]
 801145c:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 801145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011460:	f103 0218 	add.w	r2, r3, #24
 8011464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011466:	3330      	adds	r3, #48	; 0x30
 8011468:	6812      	ldr	r2, [r2, #0]
 801146a:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 801146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146e:	3318      	adds	r3, #24
 8011470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011472:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011476:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801147a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011480:	f103 0218 	add.w	r2, r3, #24
 8011484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011486:	3330      	adds	r3, #48	; 0x30
 8011488:	7c12      	ldrb	r2, [r2, #16]
 801148a:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	f103 0218 	add.w	r2, r3, #24
 8011492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011494:	3330      	adds	r3, #48	; 0x30
 8011496:	7c52      	ldrb	r2, [r2, #17]
 8011498:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 801149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801149c:	f103 0218 	add.w	r2, r3, #24
 80114a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a2:	3330      	adds	r3, #48	; 0x30
 80114a4:	7c92      	ldrb	r2, [r2, #18]
 80114a6:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 80114a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114aa:	3318      	adds	r3, #24
 80114ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114ae:	6812      	ldr	r2, [r2, #0]
 80114b0:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 80114b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b4:	f103 0118 	add.w	r1, r3, #24
 80114b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80114be:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 80114c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c4:	3318      	adds	r3, #24
 80114c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114c8:	7c12      	ldrb	r2, [r2, #16]
 80114ca:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 80114cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ce:	3318      	adds	r3, #24
 80114d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114d2:	7c52      	ldrb	r2, [r2, #17]
 80114d4:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 80114d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d8:	3318      	adds	r3, #24
 80114da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114dc:	7c92      	ldrb	r2, [r2, #18]
 80114de:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114e4:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 80114e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80114ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 80114f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 80114f8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80114fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114fe:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8011500:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011506:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8011508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801150a:	2200      	movs	r2, #0
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	e042      	b.n	8011596 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	69db      	ldr	r3, [r3, #28]
 801151a:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 801151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 8011522:	e033      	b.n	801158c <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011526:	7c5b      	ldrb	r3, [r3, #17]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d025      	beq.n	8011578 <_fx_utility_logical_sector_cache_entry_read+0x568>
 801152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801152e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011536:	4299      	cmp	r1, r3
 8011538:	bf08      	it	eq
 801153a:	4290      	cmpeq	r0, r2
 801153c:	d11c      	bne.n	8011578 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8011546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d00b      	beq.n	8011566 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 801154e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011550:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 8011552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011554:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8011556:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 801155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155e:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011564:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8011574:	2300      	movs	r3, #0
 8011576:	e00f      	b.n	8011598 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8011578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157a:	695b      	ldr	r3, [r3, #20]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d005      	beq.n	801158c <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8011580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011584:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8011586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 801158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158e:	1e5a      	subs	r2, r3, #1
 8011590:	633a      	str	r2, [r7, #48]	; 0x30
 8011592:	2b00      	cmp	r3, #0
 8011594:	d1c6      	bne.n	8011524 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8011596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8011598:	4618      	mov	r0, r3
 801159a:	373c      	adds	r7, #60	; 0x3c
 801159c:	46bd      	mov	sp, r7
 801159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a2:	4770      	bx	lr

080115a4 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 80115a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80115a8:	b094      	sub	sp, #80	; 0x50
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	61f8      	str	r0, [r7, #28]
 80115ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 80115b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80115b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80115ba:	1884      	adds	r4, r0, r2
 80115bc:	eb41 0503 	adc.w	r5, r1, r3
 80115c0:	1e63      	subs	r3, r4, #1
 80115c2:	60bb      	str	r3, [r7, #8]
 80115c4:	f145 33ff 	adc.w	r3, r5, #4294967295
 80115c8:	60fb      	str	r3, [r7, #12]
 80115ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80115ce:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f040 80b4 	bne.w	801174a <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	695b      	ldr	r3, [r3, #20]
 80115e6:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	69db      	ldr	r3, [r3, #28]
 80115ec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 80115ee:	e09f      	b.n	8011730 <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80115f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d103      	bne.n	80115fe <_fx_utility_logical_sector_flush+0x5a>
 80115f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f000 81de 	beq.w	80119ba <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 80115fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011602:	4313      	orrs	r3, r2
 8011604:	f000 81db 	beq.w	80119be <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801160a:	7c5b      	ldrb	r3, [r3, #17]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 808c 	beq.w	801172a <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011614:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801161c:	4290      	cmp	r0, r2
 801161e:	eb71 0303 	sbcs.w	r3, r1, r3
 8011622:	f0c0 8082 	bcc.w	801172a <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8011626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011628:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 801162c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011630:	4290      	cmp	r0, r2
 8011632:	eb71 0303 	sbcs.w	r3, r1, r3
 8011636:	d378      	bcc.n	801172a <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801163a:	7c1b      	ldrb	r3, [r3, #16]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d04d      	beq.n	80116dc <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011646:	2b00      	cmp	r3, #0
 8011648:	d148      	bne.n	80116dc <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	2201      	movs	r2, #1
 801165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2290      	movs	r2, #144	; 0x90
 8011664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011674:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	2201      	movs	r2, #1
 8011682:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011688:	7c9b      	ldrb	r3, [r3, #18]
 801168a:	461a      	mov	r2, r3
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011694:	7c9b      	ldrb	r3, [r3, #18]
 8011696:	2b04      	cmp	r3, #4
 8011698:	d003      	beq.n	80116a2 <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	2201      	movs	r2, #1
 801169e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80116a8:	69f8      	ldr	r0, [r7, #28]
 80116aa:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d003      	beq.n	80116c6 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116c4:	e17f      	b.n	80119c6 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80116c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116c8:	2200      	movs	r2, #0
 80116ca:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d0:	1e5a      	subs	r2, r3, #1
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 80116d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d8:	3b01      	subs	r3, #1
 80116da:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 80116dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d018      	beq.n	8011714 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80116e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e4:	2200      	movs	r2, #0
 80116e6:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80116e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80116ea:	f04f 32ff 	mov.w	r2, #4294967295
 80116ee:	f04f 33ff 	mov.w	r3, #4294967295
 80116f2:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 80116f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f8:	7c1b      	ldrb	r3, [r3, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00a      	beq.n	8011714 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80116fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011700:	2200      	movs	r2, #0
 8011702:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	1e5a      	subs	r2, r3, #1
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	3b01      	subs	r3, #1
 8011712:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8011714:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011718:	1e51      	subs	r1, r2, #1
 801171a:	6039      	str	r1, [r7, #0]
 801171c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011720:	607b      	str	r3, [r7, #4]
 8011722:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011726:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 801172a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8011730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011732:	1e5a      	subs	r2, r3, #1
 8011734:	64ba      	str	r2, [r7, #72]	; 0x48
 8011736:	2b00      	cmp	r3, #0
 8011738:	f000 8144 	beq.w	80119c4 <_fx_utility_logical_sector_flush+0x420>
 801173c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801173e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011742:	4313      	orrs	r3, r2
 8011744:	f47f af54 	bne.w	80115f0 <_fx_utility_logical_sector_flush+0x4c>
 8011748:	e13c      	b.n	80119c4 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8011750:	2300      	movs	r3, #0
 8011752:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	6a1b      	ldr	r3, [r3, #32]
 8011758:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 801175a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801175e:	2a20      	cmp	r2, #32
 8011760:	f173 0300 	sbcs.w	r3, r3, #0
 8011764:	d202      	bcs.n	801176c <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8011766:	2301      	movs	r3, #1
 8011768:	63fb      	str	r3, [r7, #60]	; 0x3c
 801176a:	e121      	b.n	80119b0 <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 801176c:	2300      	movs	r3, #0
 801176e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8011770:	e11e      	b.n	80119b0 <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	2b00      	cmp	r3, #0
 8011776:	d103      	bne.n	8011780 <_fx_utility_logical_sector_flush+0x1dc>
 8011778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801177a:	2b00      	cmp	r3, #0
 801177c:	f000 8121 	beq.w	80119c2 <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8011780:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011784:	4313      	orrs	r3, r2
 8011786:	f000 811d 	beq.w	80119c4 <_fx_utility_logical_sector_flush+0x420>
 801178a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801178e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011792:	4290      	cmp	r0, r2
 8011794:	eb71 0303 	sbcs.w	r3, r1, r3
 8011798:	f0c0 8114 	bcc.w	80119c4 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 801179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d015      	beq.n	80117ce <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80117a2:	693a      	ldr	r2, [r7, #16]
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80117aa:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80117ae:	4013      	ands	r3, r2
 80117b0:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 80117b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b4:	f003 031f 	and.w	r3, r3, #31
 80117b8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80117ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	63bb      	str	r3, [r7, #56]	; 0x38
 80117c0:	e00d      	b.n	80117de <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 80117c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c4:	085b      	lsrs	r3, r3, #1
 80117c6:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 80117c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ca:	3301      	adds	r3, #1
 80117cc:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 80117ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d0:	f003 0301 	and.w	r3, r3, #1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d0f4      	beq.n	80117c2 <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 80117d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 80117de:	2300      	movs	r3, #0
 80117e0:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80117e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117e4:	4613      	mov	r3, r2
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	4413      	add	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80117f0:	69fa      	ldr	r2, [r7, #28]
 80117f2:	4413      	add	r3, r2
 80117f4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 80117f6:	2300      	movs	r3, #0
 80117f8:	647b      	str	r3, [r7, #68]	; 0x44
 80117fa:	e0a7      	b.n	801194c <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 80117fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117fe:	7c5b      	ldrb	r3, [r3, #17]
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 8089 	beq.w	8011918 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011808:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 801180c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011810:	4290      	cmp	r0, r2
 8011812:	eb71 0303 	sbcs.w	r3, r1, r3
 8011816:	d37f      	bcc.n	8011918 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8011818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801181e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011822:	4290      	cmp	r0, r2
 8011824:	eb71 0303 	sbcs.w	r3, r1, r3
 8011828:	d376      	bcc.n	8011918 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 801182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182c:	7c1b      	ldrb	r3, [r3, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d04d      	beq.n	80118ce <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011838:	2b00      	cmp	r3, #0
 801183a:	d148      	bne.n	80118ce <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 801183c:	69fb      	ldr	r3, [r7, #28]
 801183e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	2201      	movs	r2, #1
 801184e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	2290      	movs	r2, #144	; 0x90
 8011856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 801185a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011866:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	2201      	movs	r2, #1
 8011874:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801187a:	7c9b      	ldrb	r3, [r3, #18]
 801187c:	461a      	mov	r2, r3
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011886:	7c9b      	ldrb	r3, [r3, #18]
 8011888:	2b04      	cmp	r3, #4
 801188a:	d003      	beq.n	8011894 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2201      	movs	r2, #1
 8011890:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801189a:	69f8      	ldr	r0, [r7, #28]
 801189c:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	2200      	movs	r2, #0
 80118a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d003      	beq.n	80118b8 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118b6:	e086      	b.n	80119c6 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80118b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ba:	2200      	movs	r2, #0
 80118bc:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c2:	1e5a      	subs	r2, r3, #1
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 80118c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ca:	3b01      	subs	r3, #1
 80118cc:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 80118ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d018      	beq.n	8011906 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 80118d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118d6:	2200      	movs	r2, #0
 80118d8:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 80118da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80118dc:	f04f 32ff 	mov.w	r2, #4294967295
 80118e0:	f04f 33ff 	mov.w	r3, #4294967295
 80118e4:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 80118e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ea:	7c1b      	ldrb	r3, [r3, #16]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80118f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118f2:	2200      	movs	r2, #0
 80118f4:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fa:	1e5a      	subs	r2, r3, #1
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8011900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011902:	3b01      	subs	r3, #1
 8011904:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8011906:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801190a:	f112 38ff 	adds.w	r8, r2, #4294967295
 801190e:	f143 39ff 	adc.w	r9, r3, #4294967295
 8011912:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8011916:	e006      	b.n	8011926 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8011918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801191a:	7c5b      	ldrb	r3, [r3, #17]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d002      	beq.n	8011926 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 8011920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011922:	3301      	adds	r3, #1
 8011924:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011928:	2b00      	cmp	r3, #0
 801192a:	d102      	bne.n	8011932 <_fx_utility_logical_sector_flush+0x38e>
 801192c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801192e:	2b00      	cmp	r3, #0
 8011930:	d011      	beq.n	8011956 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 8011932:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011936:	4313      	orrs	r3, r2
 8011938:	d102      	bne.n	8011940 <_fx_utility_logical_sector_flush+0x39c>
 801193a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00c      	beq.n	801195a <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 8011940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011942:	3318      	adds	r3, #24
 8011944:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 8011946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011948:	3301      	adds	r3, #1
 801194a:	647b      	str	r3, [r7, #68]	; 0x44
 801194c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801194e:	2b03      	cmp	r3, #3
 8011950:	f67f af54 	bls.w	80117fc <_fx_utility_logical_sector_flush+0x258>
 8011954:	e002      	b.n	801195c <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 8011956:	bf00      	nop
 8011958:	e000      	b.n	801195c <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 801195a:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 801195c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195e:	3380      	adds	r3, #128	; 0x80
 8011960:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 8011962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011966:	429a      	cmp	r2, r3
 8011968:	f4ff af3b 	bcc.w	80117e2 <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 801196c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00c      	beq.n	801198c <_fx_utility_logical_sector_flush+0x3e8>
 8011972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011974:	2b00      	cmp	r3, #0
 8011976:	d109      	bne.n	801198c <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	6a1a      	ldr	r2, [r3, #32]
 801197c:	2101      	movs	r1, #1
 801197e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011980:	fa01 f303 	lsl.w	r3, r1, r3
 8011984:	43db      	mvns	r3, r3
 8011986:	401a      	ands	r2, r3
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 801198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801198e:	2b00      	cmp	r3, #0
 8011990:	d008      	beq.n	80119a4 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 8011992:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011996:	f112 0a01 	adds.w	sl, r2, #1
 801199a:	f143 0b00 	adc.w	fp, r3, #0
 801199e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80119a2:	e005      	b.n	80119b0 <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 80119a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a6:	085b      	lsrs	r3, r3, #1
 80119a8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 80119aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119ac:	3301      	adds	r3, #1
 80119ae:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 80119b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f47f aedd 	bne.w	8011772 <_fx_utility_logical_sector_flush+0x1ce>
 80119b8:	e004      	b.n	80119c4 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119ba:	bf00      	nop
 80119bc:	e002      	b.n	80119c4 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119be:	bf00      	nop
 80119c0:	e000      	b.n	80119c4 <_fx_utility_logical_sector_flush+0x420>
                break;
 80119c2:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3750      	adds	r7, #80	; 0x50
 80119ca:	46bd      	mov	sp, r7
 80119cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080119d0 <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 80119d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80119d4:	b09c      	sub	sp, #112	; 0x70
 80119d6:	af04      	add	r7, sp, #16
 80119d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80119da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 80119de:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80119e2:	2b02      	cmp	r3, #2
 80119e4:	d106      	bne.n	80119f4 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 80119e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119e8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80119ec:	1c5a      	adds	r2, r3, #1
 80119ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119f0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 80119f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119f6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119fe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a04:	689a      	ldr	r2, [r3, #8]
 8011a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	f0c0 80d9 	bcc.w	8011bc2 <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a12:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	f200 80d2 	bhi.w	8011bc2 <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011a1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011a28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011a2a:	f7ff faf1 	bl	8011010 <_fx_utility_logical_sector_cache_entry_read>
 8011a2e:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 8011a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d101      	bne.n	8011a3a <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 8011a36:	2300      	movs	r3, #0
 8011a38:	e259      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 8011a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a3c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8011a40:	1c5a      	adds	r2, r3, #1
 8011a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a44:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a4a:	7c5b      	ldrb	r3, [r3, #17]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d049      	beq.n	8011ae4 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 8011a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a52:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d045      	beq.n	8011ae4 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 8011a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a5a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011a5e:	1c5a      	adds	r2, r3, #1
 8011a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a62:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a68:	2201      	movs	r2, #1
 8011a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a70:	2290      	movs	r2, #144	; 0x90
 8011a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8011a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a8e:	2201      	movs	r2, #1
 8011a90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a96:	7c9b      	ldrb	r3, [r3, #18]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aa2:	7c9b      	ldrb	r3, [r3, #18]
 8011aa4:	2b04      	cmp	r3, #4
 8011aa6:	d003      	beq.n	8011ab0 <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aaa:	2201      	movs	r2, #1
 8011aac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ab2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011ab6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ab8:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011abc:	2200      	movs	r2, #0
 8011abe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 8011ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d003      	beq.n	8011ad4 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8011acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ad2:	e20c      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8011ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ade:	1e5a      	subs	r2, r3, #1
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae2:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8011ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011aea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8011aee:	4290      	cmp	r0, r2
 8011af0:	eb71 0303 	sbcs.w	r3, r1, r3
 8011af4:	d301      	bcc.n	8011afa <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8011af6:	2389      	movs	r3, #137	; 0x89
 8011af8:	e1f9      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011afc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b04:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b12:	2290      	movs	r2, #144	; 0x90
 8011b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 8011b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011b32:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011b3c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011b40:	2b04      	cmp	r3, #4
 8011b42:	d103      	bne.n	8011b4c <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b46:	2201      	movs	r2, #1
 8011b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011b52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011b54:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 8011b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d11a      	bne.n	8011b9e <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 8011b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011b6e:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b74:	2201      	movs	r2, #1
 8011b76:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 8011b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b7a:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011b7e:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 8011b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d015      	beq.n	8011bb2 <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8011b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8011b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b8a:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8011b8c:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 8011b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b90:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 8011b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b94:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b9a:	61da      	str	r2, [r3, #28]
 8011b9c:	e009      	b.n	8011bb2 <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8011b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8011baa:	f04f 33ff 	mov.w	r3, #4294967295
 8011bae:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bb8:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bc0:	e195      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 8011bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	469a      	mov	sl, r3
 8011bca:	4693      	mov	fp, r2
 8011bcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011bd0:	eb1a 0402 	adds.w	r4, sl, r2
 8011bd4:	eb4b 0503 	adc.w	r5, fp, r3
 8011bd8:	f114 38ff 	adds.w	r8, r4, #4294967295
 8011bdc:	f145 39ff 	adc.w	r9, r5, #4294967295
 8011be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011be2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011be6:	2300      	movs	r3, #0
 8011be8:	63ba      	str	r2, [r7, #56]	; 0x38
 8011bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	4543      	cmp	r3, r8
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	eb73 0309 	sbcs.w	r3, r3, r9
 8011bfa:	d22c      	bcs.n	8011c56 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8011bfc:	2389      	movs	r3, #137	; 0x89
 8011bfe:	e176      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 8011c00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011c04:	9300      	str	r3, [sp, #0]
 8011c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011c0c:	f7ff fa00 	bl	8011010 <_fx_utility_logical_sector_cache_entry_read>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d124      	bne.n	8011c60 <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8011c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c18:	6898      	ldr	r0, [r3, #8]
 8011c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011c24:	f000 fad0 	bl	80121c8 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c30:	4413      	add	r3, r2
 8011c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 8011c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c3a:	1c51      	adds	r1, r2, #1
 8011c3c:	61b9      	str	r1, [r7, #24]
 8011c3e:	f143 0300 	adc.w	r3, r3, #0
 8011c42:	61fb      	str	r3, [r7, #28]
 8011c44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011c48:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 8011c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c50:	3b01      	subs	r3, #1
 8011c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8011c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d1d0      	bne.n	8011c00 <_fx_utility_logical_sector_read+0x230>
 8011c5e:	e000      	b.n	8011c62 <_fx_utility_logical_sector_read+0x292>
                break;
 8011c60:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 8011c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c66:	2200      	movs	r2, #0
 8011c68:	633b      	str	r3, [r7, #48]	; 0x30
 8011c6a:	637a      	str	r2, [r7, #52]	; 0x34
 8011c6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011c70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011c74:	4621      	mov	r1, r4
 8011c76:	1889      	adds	r1, r1, r2
 8011c78:	62b9      	str	r1, [r7, #40]	; 0x28
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	eb43 0101 	adc.w	r1, r3, r1
 8011c80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011c82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011c86:	460b      	mov	r3, r1
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011c92:	617b      	str	r3, [r7, #20]
 8011c94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011c98:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8011c9c:	e02b      	b.n	8011cf6 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 8011c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011ca8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011caa:	f7ff f9b1 	bl	8011010 <_fx_utility_logical_sector_cache_entry_read>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d125      	bne.n	8011d00 <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cb6:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8011cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011cc2:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011cca:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8011ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	f000 fa79 	bl	80121c8 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8011cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011cda:	1e51      	subs	r1, r2, #1
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011ce8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8011cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8011cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1cf      	bne.n	8011c9e <_fx_utility_logical_sector_read+0x2ce>
 8011cfe:	e000      	b.n	8011d02 <_fx_utility_logical_sector_read+0x332>
                break;
 8011d00:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 8011d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d101      	bne.n	8011d0e <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	e0ef      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8011d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d12:	2200      	movs	r2, #0
 8011d14:	623b      	str	r3, [r7, #32]
 8011d16:	627a      	str	r2, [r7, #36]	; 0x24
 8011d18:	2301      	movs	r3, #1
 8011d1a:	9302      	str	r3, [sp, #8]
 8011d1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011d20:	e9cd 3400 	strd	r3, r4, [sp]
 8011d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011d2a:	f7ff fc3b 	bl	80115a4 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8011d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d30:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8011d34:	1c5a      	adds	r2, r3, #1
 8011d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d38:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8011d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d46:	2290      	movs	r2, #144	; 0x90
 8011d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8011d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8011d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8011d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8011d68:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d6e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 8011d72:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011d76:	2b04      	cmp	r3, #4
 8011d78:	d103      	bne.n	8011d82 <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 8011d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011d88:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011d8a:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8011d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8011d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	f040 80a4 	bne.w	8011ee8 <_fx_utility_logical_sector_read+0x518>
 8011da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011da2:	695b      	ldr	r3, [r3, #20]
 8011da4:	089b      	lsrs	r3, r3, #2
 8011da6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011daa:	429a      	cmp	r2, r3
 8011dac:	f080 809c 	bcs.w	8011ee8 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 8011db0:	e095      	b.n	8011ede <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 8011db2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011dbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011dbe:	f7ff f927 	bl	8011010 <_fx_utility_logical_sector_cache_entry_read>
 8011dc2:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8011dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e08f      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dd0:	7c5b      	ldrb	r3, [r3, #17]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d049      	beq.n	8011e6a <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8011dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dd8:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d045      	beq.n	8011e6a <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 8011dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011de0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011de8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dee:	2201      	movs	r2, #1
 8011df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df6:	2290      	movs	r2, #144	; 0x90
 8011df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 8011e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e14:	2201      	movs	r2, #1
 8011e16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e1c:	7c9b      	ldrb	r3, [r3, #18]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e28:	7c9b      	ldrb	r3, [r3, #18]
 8011e2a:	2b04      	cmp	r3, #4
 8011e2c:	d003      	beq.n	8011e36 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e30:	2201      	movs	r2, #1
 8011e32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011e3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011e3e:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e42:	2200      	movs	r2, #0
 8011e44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 8011e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d003      	beq.n	8011e5a <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 8011e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e58:	e049      	b.n	8011eee <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 8011e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e64:	1e5a      	subs	r2, r3, #1
 8011e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e68:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 8011e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011e70:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 8011e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e76:	2201      	movs	r2, #1
 8011e78:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 8011e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8011e80:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 8011e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00a      	beq.n	8011e9e <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8011e8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e8c:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 8011e8e:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e92:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e96:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e9c:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea0:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 8011ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011eac:	f000 f98c 	bl	80121c8 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 8011eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011eb8:	4413      	add	r3, r2
 8011eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 8011ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011ec2:	1c51      	adds	r1, r2, #1
 8011ec4:	6039      	str	r1, [r7, #0]
 8011ec6:	f143 0300 	adc.w	r3, r3, #0
 8011eca:	607b      	str	r3, [r7, #4]
 8011ecc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011ed0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8011ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 8011ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f47f af65 	bne.w	8011db2 <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8011ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3760      	adds	r7, #96	; 0x60
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011ef8 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8011ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011efc:	b096      	sub	sp, #88	; 0x58
 8011efe:	af04      	add	r7, sp, #16
 8011f00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011f02:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8011f06:	2300      	movs	r3, #0
 8011f08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8011f0c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d106      	bne.n	8011f22 <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8011f1a:	1c5a      	adds	r2, r3, #1
 8011f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	689a      	ldr	r2, [r3, #8]
 8011f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f36:	4293      	cmp	r3, r2
 8011f38:	f0c0 80d8 	bcc.w	80120ec <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8011f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f42:	4293      	cmp	r3, r2
 8011f44:	f200 80d2 	bhi.w	80120ec <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d030      	beq.n	8011fb2 <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 8011f50:	6a3a      	ldr	r2, [r7, #32]
 8011f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011f58:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8011f5c:	4013      	ands	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 8011f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f64:	4613      	mov	r3, r2
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	4413      	add	r3, r2
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8011f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f72:	4413      	add	r3, r2
 8011f74:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011f76:	2300      	movs	r3, #0
 8011f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f7a:	e016      	b.n	8011faa <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f7e:	7c5b      	ldrb	r3, [r3, #17]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00c      	beq.n	8011f9e <_fx_utility_logical_sector_write+0xa6>
 8011f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011f8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011f8e:	4299      	cmp	r1, r3
 8011f90:	bf08      	it	eq
 8011f92:	4290      	cmpeq	r0, r2
 8011f94:	d103      	bne.n	8011f9e <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8011f96:	2301      	movs	r3, #1
 8011f98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011f9c:	e02d      	b.n	8011ffa <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 8011f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fa6:	3318      	adds	r3, #24
 8011fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8011faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fac:	2b03      	cmp	r3, #3
 8011fae:	d9e5      	bls.n	8011f7c <_fx_utility_logical_sector_write+0x84>
 8011fb0:	e023      	b.n	8011ffa <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb4:	695b      	ldr	r3, [r3, #20]
 8011fb6:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fba:	69db      	ldr	r3, [r3, #28]
 8011fbc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 8011fbe:	e017      	b.n	8011ff0 <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc2:	7c5b      	ldrb	r3, [r3, #17]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d00c      	beq.n	8011fe2 <_fx_utility_logical_sector_write+0xea>
 8011fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011fce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011fd2:	4299      	cmp	r1, r3
 8011fd4:	bf08      	it	eq
 8011fd6:	4290      	cmpeq	r0, r2
 8011fd8:	d103      	bne.n	8011fe2 <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8011fe0:	e00b      	b.n	8011ffa <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 8011fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fe4:	695b      	ldr	r3, [r3, #20]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d002      	beq.n	8011ff0 <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fec:	695b      	ldr	r3, [r3, #20]
 8011fee:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 8011ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ff2:	1e5a      	subs	r2, r3, #1
 8011ff4:	643a      	str	r2, [r7, #64]	; 0x40
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d1e2      	bne.n	8011fc0 <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8011ffa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d00d      	beq.n	801201e <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 8012002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012004:	7c1b      	ldrb	r3, [r3, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d107      	bne.n	801201a <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200e:	1c5a      	adds	r2, r3, #1
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8012014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012016:	2201      	movs	r2, #1
 8012018:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 801201a:	2300      	movs	r3, #0
 801201c:	e0cf      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801201e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012022:	4313      	orrs	r3, r2
 8012024:	d004      	beq.n	8012030 <_fx_utility_logical_sector_write+0x138>
 8012026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801202a:	1c51      	adds	r1, r2, #1
 801202c:	430b      	orrs	r3, r1
 801202e:	d101      	bne.n	8012034 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 8012030:	2389      	movs	r3, #137	; 0x89
 8012032:	e0c4      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8012034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012036:	2200      	movs	r2, #0
 8012038:	61bb      	str	r3, [r7, #24]
 801203a:	61fa      	str	r2, [r7, #28]
 801203c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012040:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8012044:	4621      	mov	r1, r4
 8012046:	1889      	adds	r1, r1, r2
 8012048:	6139      	str	r1, [r7, #16]
 801204a:	4629      	mov	r1, r5
 801204c:	eb43 0101 	adc.w	r1, r3, r1
 8012050:	6179      	str	r1, [r7, #20]
 8012052:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012056:	460b      	mov	r3, r1
 8012058:	f113 3aff 	adds.w	sl, r3, #4294967295
 801205c:	4613      	mov	r3, r2
 801205e:	f143 3bff 	adc.w	fp, r3, #4294967295
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012064:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012068:	4592      	cmp	sl, r2
 801206a:	eb7b 0303 	sbcs.w	r3, fp, r3
 801206e:	d301      	bcc.n	8012074 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 8012070:	2389      	movs	r3, #137	; 0x89
 8012072:	e0a4      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8012074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012076:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8012082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012084:	2201      	movs	r2, #1
 8012086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208c:	2290      	movs	r2, #144	; 0x90
 801208e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801209a:	6a3a      	ldr	r2, [r7, #32]
 801209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80120a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80120aa:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80120ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 80120b4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80120b8:	2b04      	cmp	r3, #4
 80120ba:	d003      	beq.n	80120c4 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	2201      	movs	r2, #1
 80120c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80120ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120cc:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	2200      	movs	r2, #0
 80120d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 80120d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d003      	beq.n	80120e8 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 80120e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120e6:	e06a      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 80120e8:	2300      	movs	r3, #0
 80120ea:	e068      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 80120ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80120f0:	4313      	orrs	r3, r2
 80120f2:	d004      	beq.n	80120fe <_fx_utility_logical_sector_write+0x206>
 80120f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80120f8:	1c51      	adds	r1, r2, #1
 80120fa:	430b      	orrs	r3, r1
 80120fc:	d101      	bne.n	8012102 <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 80120fe:	2389      	movs	r3, #137	; 0x89
 8012100:	e05d      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 8012102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012104:	2200      	movs	r2, #0
 8012106:	60bb      	str	r3, [r7, #8]
 8012108:	60fa      	str	r2, [r7, #12]
 801210a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801210e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8012112:	4651      	mov	r1, sl
 8012114:	eb11 0802 	adds.w	r8, r1, r2
 8012118:	4659      	mov	r1, fp
 801211a:	eb41 0903 	adc.w	r9, r1, r3
 801211e:	f118 34ff 	adds.w	r4, r8, #4294967295
 8012122:	f149 35ff 	adc.w	r5, r9, #4294967295
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801212c:	4294      	cmp	r4, r2
 801212e:	eb75 0303 	sbcs.w	r3, r5, r3
 8012132:	d301      	bcc.n	8012138 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 8012134:	2389      	movs	r3, #137	; 0x89
 8012136:	e042      	b.n	80121be <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 8012138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801213a:	2200      	movs	r2, #0
 801213c:	603b      	str	r3, [r7, #0]
 801213e:	607a      	str	r2, [r7, #4]
 8012140:	2301      	movs	r3, #1
 8012142:	9302      	str	r3, [sp, #8]
 8012144:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012148:	e9cd 3400 	strd	r3, r4, [sp]
 801214c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012152:	f7ff fa27 	bl	80115a4 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 8012156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012158:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 801215c:	1c5a      	adds	r2, r3, #1
 801215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012160:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8012164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012166:	2201      	movs	r2, #1
 8012168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216e:	2290      	movs	r2, #144	; 0x90
 8012170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 8012174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801217c:	6a3a      	ldr	r2, [r7, #32]
 801217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012180:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8012184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012186:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012188:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 801218c:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8012190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012192:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8012196:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801219a:	2b04      	cmp	r3, #4
 801219c:	d003      	beq.n	80121a6 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	2201      	movs	r2, #1
 80121a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80121a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80121ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ae:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80121b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b2:	2200      	movs	r2, #0
 80121b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 80121b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3748      	adds	r7, #72	; 0x48
 80121c2:	46bd      	mov	sp, r7
 80121c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080121c8 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	68f9      	ldr	r1, [r7, #12]
 80121d8:	68b8      	ldr	r0, [r7, #8]
 80121da:	f004 f9cf 	bl	801657c <memcpy>
}
 80121de:	bf00      	nop
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
	...

080121e8 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 80121f6:	2318      	movs	r3, #24
 80121f8:	e018      	b.n	801222c <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80121fa:	f3ef 8305 	mrs	r3, IPSR
 80121fe:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012200:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012202:	4b0c      	ldr	r3, [pc, #48]	; (8012234 <_fxe_file_close+0x4c>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4313      	orrs	r3, r2
 8012208:	2b00      	cmp	r3, #0
 801220a:	d108      	bne.n	801221e <_fxe_file_close+0x36>
 801220c:	4b0a      	ldr	r3, [pc, #40]	; (8012238 <_fxe_file_close+0x50>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d004      	beq.n	801221e <_fxe_file_close+0x36>
 8012214:	4b08      	ldr	r3, [pc, #32]	; (8012238 <_fxe_file_close+0x50>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4a08      	ldr	r2, [pc, #32]	; (801223c <_fxe_file_close+0x54>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d101      	bne.n	8012222 <_fxe_file_close+0x3a>
 801221e:	2320      	movs	r3, #32
 8012220:	e004      	b.n	801222c <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7f9 fe82 	bl	800bf2c <_fx_file_close>
 8012228:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801222a:	68fb      	ldr	r3, [r7, #12]
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	2400006c 	.word	0x2400006c
 8012238:	24014f1c 	.word	0x24014f1c
 801223c:	24015064 	.word	0x24015064

08012240 <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 8012250:	2318      	movs	r3, #24
 8012252:	e019      	b.n	8012288 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012254:	f3ef 8305 	mrs	r3, IPSR
 8012258:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801225a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801225c:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <_fxe_file_create+0x50>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4313      	orrs	r3, r2
 8012262:	2b00      	cmp	r3, #0
 8012264:	d108      	bne.n	8012278 <_fxe_file_create+0x38>
 8012266:	4b0b      	ldr	r3, [pc, #44]	; (8012294 <_fxe_file_create+0x54>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d004      	beq.n	8012278 <_fxe_file_create+0x38>
 801226e:	4b09      	ldr	r3, [pc, #36]	; (8012294 <_fxe_file_create+0x54>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	4a09      	ldr	r2, [pc, #36]	; (8012298 <_fxe_file_create+0x58>)
 8012274:	4293      	cmp	r3, r2
 8012276:	d101      	bne.n	801227c <_fxe_file_create+0x3c>
 8012278:	2320      	movs	r3, #32
 801227a:	e005      	b.n	8012288 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 801227c:	6839      	ldr	r1, [r7, #0]
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7f9 fef8 	bl	800c074 <_fx_file_create>
 8012284:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8012286:	68fb      	ldr	r3, [r7, #12]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3710      	adds	r7, #16
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	2400006c 	.word	0x2400006c
 8012294:	24014f1c 	.word	0x24014f1c
 8012298:	24015064 	.word	0x24015064

0801229c <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <_fxe_file_open+0x2c>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a36      	ldr	r2, [pc, #216]	; (8012390 <_fxe_file_open+0xf4>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d106      	bne.n	80122c8 <_fxe_file_open+0x2c>
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d003      	beq.n	80122c8 <_fxe_file_open+0x2c>
 80122c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80122c6:	d001      	beq.n	80122cc <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 80122c8:	2318      	movs	r3, #24
 80122ca:	e05d      	b.n	8012388 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d007      	beq.n	80122e2 <_fxe_file_open+0x46>
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	d004      	beq.n	80122e2 <_fxe_file_open+0x46>
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	2b01      	cmp	r3, #1
 80122dc:	d001      	beq.n	80122e2 <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 80122de:	2306      	movs	r3, #6
 80122e0:	e052      	b.n	8012388 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122e2:	f3ef 8305 	mrs	r3, IPSR
 80122e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80122e8:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <_fxe_file_open+0xf8>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4313      	orrs	r3, r2
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d108      	bne.n	8012306 <_fxe_file_open+0x6a>
 80122f4:	4b28      	ldr	r3, [pc, #160]	; (8012398 <_fxe_file_open+0xfc>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d004      	beq.n	8012306 <_fxe_file_open+0x6a>
 80122fc:	4b26      	ldr	r3, [pc, #152]	; (8012398 <_fxe_file_open+0xfc>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a26      	ldr	r2, [pc, #152]	; (801239c <_fxe_file_open+0x100>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d101      	bne.n	801230a <_fxe_file_open+0x6e>
 8012306:	2320      	movs	r3, #32
 8012308:	e03e      	b.n	8012388 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a20      	ldr	r2, [pc, #128]	; (8012390 <_fxe_file_open+0xf4>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d001      	beq.n	8012318 <_fxe_file_open+0x7c>
 8012314:	2311      	movs	r3, #17
 8012316:	e037      	b.n	8012388 <_fxe_file_open+0xec>
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801231e:	f04f 31ff 	mov.w	r1, #4294967295
 8012322:	4618      	mov	r0, r3
 8012324:	f001 f988 	bl	8013638 <_tx_mutex_get>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <_fxe_file_open+0x96>
 801232e:	2311      	movs	r3, #17
 8012330:	e02a      	b.n	8012388 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012338:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012340:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 8012342:	e00e      	b.n	8012362 <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	429a      	cmp	r2, r3
 801234a:	d107      	bne.n	801235c <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012352:	4618      	mov	r0, r3
 8012354:	f001 fbe8 	bl	8013b28 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8012358:	2318      	movs	r3, #24
 801235a:	e015      	b.n	8012388 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012360:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	1e5a      	subs	r2, r3, #1
 8012366:	61ba      	str	r2, [r7, #24]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1eb      	bne.n	8012344 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012372:	4618      	mov	r0, r3
 8012374:	f001 fbd8 	bl	8013b28 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	68b9      	ldr	r1, [r7, #8]
 801237e:	68f8      	ldr	r0, [r7, #12]
 8012380:	f7fa fab6 	bl	800c8f0 <_fx_file_open>
 8012384:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8012386:	697b      	ldr	r3, [r7, #20]
}
 8012388:	4618      	mov	r0, r3
 801238a:	3720      	adds	r7, #32
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	4d454449 	.word	0x4d454449
 8012394:	2400006c 	.word	0x2400006c
 8012398:	24014f1c 	.word	0x24014f1c
 801239c:	24015064 	.word	0x24015064

080123a0 <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d005      	beq.n	80123c0 <_fxe_file_read+0x20>
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d002      	beq.n	80123c0 <_fxe_file_read+0x20>
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d101      	bne.n	80123c4 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 80123c0:	2318      	movs	r3, #24
 80123c2:	e01b      	b.n	80123fc <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123c4:	f3ef 8305 	mrs	r3, IPSR
 80123c8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80123ca:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80123cc:	4b0d      	ldr	r3, [pc, #52]	; (8012404 <_fxe_file_read+0x64>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4313      	orrs	r3, r2
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d108      	bne.n	80123e8 <_fxe_file_read+0x48>
 80123d6:	4b0c      	ldr	r3, [pc, #48]	; (8012408 <_fxe_file_read+0x68>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d004      	beq.n	80123e8 <_fxe_file_read+0x48>
 80123de:	4b0a      	ldr	r3, [pc, #40]	; (8012408 <_fxe_file_read+0x68>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4a0a      	ldr	r2, [pc, #40]	; (801240c <_fxe_file_read+0x6c>)
 80123e4:	4293      	cmp	r3, r2
 80123e6:	d101      	bne.n	80123ec <_fxe_file_read+0x4c>
 80123e8:	2320      	movs	r3, #32
 80123ea:	e007      	b.n	80123fc <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	68b9      	ldr	r1, [r7, #8]
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f7fa ff5e 	bl	800d2b4 <_fx_file_read>
 80123f8:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80123fa:	697b      	ldr	r3, [r7, #20]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	2400006c 	.word	0x2400006c
 8012408:	24014f1c 	.word	0x24014f1c
 801240c:	24015064 	.word	0x24015064

08012410 <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8012420:	2318      	movs	r3, #24
 8012422:	e019      	b.n	8012458 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012424:	f3ef 8305 	mrs	r3, IPSR
 8012428:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801242a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 801242c:	4b0c      	ldr	r3, [pc, #48]	; (8012460 <_fxe_file_seek+0x50>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4313      	orrs	r3, r2
 8012432:	2b00      	cmp	r3, #0
 8012434:	d108      	bne.n	8012448 <_fxe_file_seek+0x38>
 8012436:	4b0b      	ldr	r3, [pc, #44]	; (8012464 <_fxe_file_seek+0x54>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d004      	beq.n	8012448 <_fxe_file_seek+0x38>
 801243e:	4b09      	ldr	r3, [pc, #36]	; (8012464 <_fxe_file_seek+0x54>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	4a09      	ldr	r2, [pc, #36]	; (8012468 <_fxe_file_seek+0x58>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d101      	bne.n	801244c <_fxe_file_seek+0x3c>
 8012448:	2320      	movs	r3, #32
 801244a:	e005      	b.n	8012458 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 801244c:	6839      	ldr	r1, [r7, #0]
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7fb f9d4 	bl	800d7fc <_fx_file_seek>
 8012454:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8012456:	68fb      	ldr	r3, [r7, #12]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	2400006c 	.word	0x2400006c
 8012464:	24014f1c 	.word	0x24014f1c
 8012468:	24015064 	.word	0x24015064

0801246c <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d002      	beq.n	8012484 <_fxe_file_write+0x18>
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d101      	bne.n	8012488 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 8012484:	2318      	movs	r3, #24
 8012486:	e01a      	b.n	80124be <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012488:	f3ef 8305 	mrs	r3, IPSR
 801248c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801248e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012490:	4b0d      	ldr	r3, [pc, #52]	; (80124c8 <_fxe_file_write+0x5c>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	4313      	orrs	r3, r2
 8012496:	2b00      	cmp	r3, #0
 8012498:	d108      	bne.n	80124ac <_fxe_file_write+0x40>
 801249a:	4b0c      	ldr	r3, [pc, #48]	; (80124cc <_fxe_file_write+0x60>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <_fxe_file_write+0x40>
 80124a2:	4b0a      	ldr	r3, [pc, #40]	; (80124cc <_fxe_file_write+0x60>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	4a0a      	ldr	r2, [pc, #40]	; (80124d0 <_fxe_file_write+0x64>)
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d101      	bne.n	80124b0 <_fxe_file_write+0x44>
 80124ac:	2320      	movs	r3, #32
 80124ae:	e006      	b.n	80124be <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	68b9      	ldr	r1, [r7, #8]
 80124b4:	68f8      	ldr	r0, [r7, #12]
 80124b6:	f7fb f9b3 	bl	800d820 <_fx_file_write>
 80124ba:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 80124bc:	697b      	ldr	r3, [r7, #20]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3718      	adds	r7, #24
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	2400006c 	.word	0x2400006c
 80124cc:	24014f1c 	.word	0x24014f1c
 80124d0:	24015064 	.word	0x24015064

080124d4 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d101      	bne.n	80124e6 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 80124e2:	2318      	movs	r3, #24
 80124e4:	e018      	b.n	8012518 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124e6:	f3ef 8305 	mrs	r3, IPSR
 80124ea:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80124ec:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80124ee:	4b0c      	ldr	r3, [pc, #48]	; (8012520 <_fxe_media_close+0x4c>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4313      	orrs	r3, r2
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d108      	bne.n	801250a <_fxe_media_close+0x36>
 80124f8:	4b0a      	ldr	r3, [pc, #40]	; (8012524 <_fxe_media_close+0x50>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d004      	beq.n	801250a <_fxe_media_close+0x36>
 8012500:	4b08      	ldr	r3, [pc, #32]	; (8012524 <_fxe_media_close+0x50>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	4a08      	ldr	r2, [pc, #32]	; (8012528 <_fxe_media_close+0x54>)
 8012506:	4293      	cmp	r3, r2
 8012508:	d101      	bne.n	801250e <_fxe_media_close+0x3a>
 801250a:	2320      	movs	r3, #32
 801250c:	e004      	b.n	8012518 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7fc fa06 	bl	800e920 <_fx_media_close>
 8012514:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012516:	68fb      	ldr	r3, [r7, #12]
}
 8012518:	4618      	mov	r0, r3
 801251a:	3710      	adds	r7, #16
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	2400006c 	.word	0x2400006c
 8012524:	24014f1c 	.word	0x24014f1c
 8012528:	24015064 	.word	0x24015064

0801252c <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b084      	sub	sp, #16
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 801253a:	2318      	movs	r3, #24
 801253c:	e018      	b.n	8012570 <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801253e:	f3ef 8305 	mrs	r3, IPSR
 8012542:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012544:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012546:	4b0c      	ldr	r3, [pc, #48]	; (8012578 <_fxe_media_flush+0x4c>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4313      	orrs	r3, r2
 801254c:	2b00      	cmp	r3, #0
 801254e:	d108      	bne.n	8012562 <_fxe_media_flush+0x36>
 8012550:	4b0a      	ldr	r3, [pc, #40]	; (801257c <_fxe_media_flush+0x50>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d004      	beq.n	8012562 <_fxe_media_flush+0x36>
 8012558:	4b08      	ldr	r3, [pc, #32]	; (801257c <_fxe_media_flush+0x50>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	4a08      	ldr	r2, [pc, #32]	; (8012580 <_fxe_media_flush+0x54>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d101      	bne.n	8012566 <_fxe_media_flush+0x3a>
 8012562:	2320      	movs	r3, #32
 8012564:	e004      	b.n	8012570 <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f7fc fbb2 	bl	800ecd0 <_fx_media_flush>
 801256c:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 801256e:	68fb      	ldr	r3, [r7, #12]
}
 8012570:	4618      	mov	r0, r3
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	2400006c 	.word	0x2400006c
 801257c:	24014f1c 	.word	0x24014f1c
 8012580:	24015064 	.word	0x24015064

08012584 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b08e      	sub	sp, #56	; 0x38
 8012588:	af02      	add	r7, sp, #8
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
 8012590:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d00a      	beq.n	80125ae <_fxe_media_open+0x2a>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d007      	beq.n	80125ae <_fxe_media_open+0x2a>
 801259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d004      	beq.n	80125ae <_fxe_media_open+0x2a>
 80125a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a6:	f242 42b8 	movw	r2, #9400	; 0x24b8
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d001      	beq.n	80125b2 <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 80125ae:	2318      	movs	r3, #24
 80125b0:	e071      	b.n	8012696 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125b2:	f3ef 8305 	mrs	r3, IPSR
 80125b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80125b8:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 80125ba:	4b39      	ldr	r3, [pc, #228]	; (80126a0 <_fxe_media_open+0x11c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	4313      	orrs	r3, r2
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d108      	bne.n	80125d6 <_fxe_media_open+0x52>
 80125c4:	4b37      	ldr	r3, [pc, #220]	; (80126a4 <_fxe_media_open+0x120>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d004      	beq.n	80125d6 <_fxe_media_open+0x52>
 80125cc:	4b35      	ldr	r3, [pc, #212]	; (80126a4 <_fxe_media_open+0x120>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a35      	ldr	r2, [pc, #212]	; (80126a8 <_fxe_media_open+0x124>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d101      	bne.n	80125da <_fxe_media_open+0x56>
 80125d6:	2320      	movs	r3, #32
 80125d8:	e05d      	b.n	8012696 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 80125da:	4b34      	ldr	r3, [pc, #208]	; (80126ac <_fxe_media_open+0x128>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	425b      	negs	r3, r3
 80125e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125e6:	4013      	ands	r3, r2
 80125e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d004      	beq.n	80125fa <_fxe_media_open+0x76>
 80125f0:	4b2e      	ldr	r3, [pc, #184]	; (80126ac <_fxe_media_open+0x128>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d001      	beq.n	80125fe <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 80125fa:	2302      	movs	r3, #2
 80125fc:	e04b      	b.n	8012696 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 80125fe:	4b2c      	ldr	r3, [pc, #176]	; (80126b0 <_fxe_media_open+0x12c>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8012604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012606:	425b      	negs	r3, r3
 8012608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801260a:	4013      	ands	r3, r2
 801260c:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	2b01      	cmp	r3, #1
 8012612:	d004      	beq.n	801261e <_fxe_media_open+0x9a>
 8012614:	4b26      	ldr	r3, [pc, #152]	; (80126b0 <_fxe_media_open+0x12c>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801261a:	429a      	cmp	r2, r3
 801261c:	d001      	beq.n	8012622 <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 801261e:	2302      	movs	r3, #2
 8012620:	e039      	b.n	8012696 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8012622:	f002 fbd1 	bl	8014dc8 <_tx_thread_identify>
 8012626:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8012628:	f107 0314 	add.w	r3, r7, #20
 801262c:	461a      	mov	r2, r3
 801262e:	2100      	movs	r1, #0
 8012630:	6a38      	ldr	r0, [r7, #32]
 8012632:	f002 fc23 	bl	8014e7c <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8012636:	4b1f      	ldr	r3, [pc, #124]	; (80126b4 <_fxe_media_open+0x130>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 801263c:	4b1e      	ldr	r3, [pc, #120]	; (80126b8 <_fxe_media_open+0x134>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8012642:	e010      	b.n	8012666 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	429a      	cmp	r2, r3
 801264a:	d108      	bne.n	801265e <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	f107 0214 	add.w	r2, r7, #20
 8012652:	4619      	mov	r1, r3
 8012654:	6a38      	ldr	r0, [r7, #32]
 8012656:	f002 fc11 	bl	8014e7c <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 801265a:	2318      	movs	r3, #24
 801265c:	e01b      	b.n	8012696 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 801265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012660:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012664:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	1e5a      	subs	r2, r3, #1
 801266a:	62ba      	str	r2, [r7, #40]	; 0x28
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1e9      	bne.n	8012644 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	f107 0214 	add.w	r2, r7, #20
 8012676:	4619      	mov	r1, r3
 8012678:	6a38      	ldr	r0, [r7, #32]
 801267a:	f002 fbff 	bl	8014e7c <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 801267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012680:	9301      	str	r3, [sp, #4]
 8012682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	68b9      	ldr	r1, [r7, #8]
 801268c:	68f8      	ldr	r0, [r7, #12]
 801268e:	f7fc fcab 	bl	800efe8 <_fx_media_open>
 8012692:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8012694:	69fb      	ldr	r3, [r7, #28]
}
 8012696:	4618      	mov	r0, r3
 8012698:	3730      	adds	r7, #48	; 0x30
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	2400006c 	.word	0x2400006c
 80126a4:	24014f1c 	.word	0x24014f1c
 80126a8:	24015064 	.word	0x24015064
 80126ac:	24014c98 	.word	0x24014c98
 80126b0:	24014c9c 	.word	0x24014c9c
 80126b4:	24014c88 	.word	0x24014c88
 80126b8:	24014c8c 	.word	0x24014c8c

080126bc <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 80126c4:	f002 fffa 	bl	80156bc <_tx_time_get>
 80126c8:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80126ca:	e007      	b.n	80126dc <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f7f7 f825 	bl	800971c <fx_stm32_sd_get_status>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d101      	bne.n	80126dc <check_sd_status+0x20>
    {
      return 0;
 80126d8:	2300      	movs	r3, #0
 80126da:	e008      	b.n	80126ee <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 80126dc:	f002 ffee 	bl	80156bc <_tx_time_get>
 80126e0:	4602      	mov	r2, r0
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	1ad3      	subs	r3, r2, r3
 80126e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80126ea:	d3ef      	bcc.n	80126cc <check_sd_status+0x10>
    }
  }

  return 1;
 80126ec:	2301      	movs	r3, #1
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
	...

080126f8 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 8012700:	4b7e      	ldr	r3, [pc, #504]	; (80128fc <fx_stm32_sd_driver+0x204>)
 8012702:	2201      	movs	r2, #1
 8012704:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 8012706:	4b7d      	ldr	r3, [pc, #500]	; (80128fc <fx_stm32_sd_driver+0x204>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d10a      	bne.n	8012724 <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 801270e:	2000      	movs	r0, #0
 8012710:	f7ff ffd4 	bl	80126bc <check_sd_status>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d004      	beq.n	8012724 <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2290      	movs	r2, #144	; 0x90
 801271e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8012722:	e0e7      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801272a:	f003 0303 	and.w	r3, r3, #3
 801272e:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012736:	2b08      	cmp	r3, #8
 8012738:	f200 80d2 	bhi.w	80128e0 <fx_stm32_sd_driver+0x1e8>
 801273c:	a201      	add	r2, pc, #4	; (adr r2, 8012744 <fx_stm32_sd_driver+0x4c>)
 801273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012742:	bf00      	nop
 8012744:	080127b7 	.word	0x080127b7
 8012748:	080127eb 	.word	0x080127eb
 801274c:	0801281d 	.word	0x0801281d
 8012750:	08012827 	.word	0x08012827
 8012754:	08012769 	.word	0x08012769
 8012758:	08012831 	.word	0x08012831
 801275c:	080128e1 	.word	0x080128e1
 8012760:	080128c5 	.word	0x080128c5
 8012764:	080127a1 	.word	0x080127a1
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8012770:	231c      	movs	r3, #28
 8012772:	2200      	movs	r2, #0
 8012774:	4962      	ldr	r1, [pc, #392]	; (8012900 <fx_stm32_sd_driver+0x208>)
 8012776:	4863      	ldr	r0, [pc, #396]	; (8012904 <fx_stm32_sd_driver+0x20c>)
 8012778:	f003 fcb0 	bl	80160dc <_txe_semaphore_create>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d109      	bne.n	8012796 <fx_stm32_sd_driver+0x9e>
 8012782:	231c      	movs	r3, #28
 8012784:	2200      	movs	r2, #0
 8012786:	4960      	ldr	r1, [pc, #384]	; (8012908 <fx_stm32_sd_driver+0x210>)
 8012788:	4860      	ldr	r0, [pc, #384]	; (801290c <fx_stm32_sd_driver+0x214>)
 801278a:	f003 fca7 	bl	80160dc <_txe_semaphore_create>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 80aa 	beq.w	80128ea <fx_stm32_sd_driver+0x1f2>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2290      	movs	r2, #144	; 0x90
 801279a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 801279e:	e0a4      	b.n	80128ea <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2200      	movs	r2, #0
 80127a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 80127a8:	4856      	ldr	r0, [pc, #344]	; (8012904 <fx_stm32_sd_driver+0x20c>)
 80127aa:	f003 fd2d 	bl	8016208 <_txe_semaphore_delete>
 80127ae:	4857      	ldr	r0, [pc, #348]	; (801290c <fx_stm32_sd_driver+0x214>)
 80127b0:	f003 fd2a 	bl	8016208 <_txe_semaphore_delete>

      break;
 80127b4:	e09e      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2290      	movs	r2, #144	; 0x90
 80127ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c8:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f000 f89c 	bl	8012910 <sd_read_data>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f040 8087 	bne.w	80128ee <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2200      	movs	r2, #0
 80127e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 80127e8:	e081      	b.n	80128ee <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2290      	movs	r2, #144	; 0x90
 80127ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127fc:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 f940 	bl	8012a8c <sd_write_data>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d16f      	bne.n	80128f2 <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 801281a:	e06a      	b.n	80128f2 <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8012824:	e066      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2200      	movs	r2, #0
 801282a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 801282e:	e061      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	2100      	movs	r1, #0
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 f868 	bl	8012910 <sd_read_data>
 8012840:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d004      	beq.n	8012852 <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	693a      	ldr	r2, [r7, #16]
 801284c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8012850:	e050      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 8012852:	2300      	movs	r3, #0
 8012854:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 801285c:	f107 0308 	add.w	r3, r7, #8
 8012860:	f107 020c 	add.w	r2, r7, #12
 8012864:	2100      	movs	r1, #0
 8012866:	f7fd f939 	bl	800fadc <_fx_partition_offset_calculate>
 801286a:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d004      	beq.n	801287c <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2290      	movs	r2, #144	; 0x90
 8012876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 801287a:	e03b      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d01b      	beq.n	80128ba <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8012882:	2000      	movs	r0, #0
 8012884:	f7ff ff1a 	bl	80126bc <check_sd_status>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d004      	beq.n	8012898 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2290      	movs	r2, #144	; 0x90
 8012892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8012896:	e02d      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8012898:	68f9      	ldr	r1, [r7, #12]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f834 	bl	8012910 <sd_read_data>
 80128a8:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d004      	beq.n	80128ba <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 80128b8:	e01c      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80128c2:	e017      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	2100      	movs	r1, #0
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f8dc 	bl	8012a8c <sd_write_data>
 80128d4:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	693a      	ldr	r2, [r7, #16]
 80128da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 80128de:	e009      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2290      	movs	r2, #144	; 0x90
 80128e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80128e8:	e004      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
      break;
 80128ea:	bf00      	nop
 80128ec:	e002      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
      break;
 80128ee:	bf00      	nop
 80128f0:	e000      	b.n	80128f4 <fx_stm32_sd_driver+0x1fc>
      break;
 80128f2:	bf00      	nop
    }
  }
}
 80128f4:	3718      	adds	r7, #24
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	24014ee0 	.word	0x24014ee0
 8012900:	080175c8 	.word	0x080175c8
 8012904:	24014c6c 	.word	0x24014c6c
 8012908:	080175e4 	.word	0x080175e4
 801290c:	24014c50 	.word	0x24014c50

08012910 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b090      	sub	sp, #64	; 0x40
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
 801291c:	603b      	str	r3, [r7, #0]
  INT i = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d061      	beq.n	80129ec <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801292e:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8012930:	2300      	movs	r3, #0
 8012932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012934:	e04c      	b.n	80129d0 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	1c53      	adds	r3, r2, #1
 801293a:	60bb      	str	r3, [r7, #8]
 801293c:	2301      	movs	r3, #1
 801293e:	4950      	ldr	r1, [pc, #320]	; (8012a80 <sd_read_data+0x170>)
 8012940:	2000      	movs	r0, #0
 8012942:	f7f6 ff01 	bl	8009748 <fx_stm32_sd_read_blocks>
 8012946:	4603      	mov	r3, r0
 8012948:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 801294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294c:	2b00      	cmp	r3, #0
 801294e:	d001      	beq.n	8012954 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8012950:	2390      	movs	r3, #144	; 0x90
 8012952:	e090      	b.n	8012a76 <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012954:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012958:	484a      	ldr	r0, [pc, #296]	; (8012a84 <sd_read_data+0x174>)
 801295a:	f003 fc93 	bl	8016284 <_txe_semaphore_get>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	d001      	beq.n	8012968 <sd_read_data+0x58>
 8012964:	2390      	movs	r3, #144	; 0x90
 8012966:	e086      	b.n	8012a76 <sd_read_data+0x166>
 8012968:	4b45      	ldr	r3, [pc, #276]	; (8012a80 <sd_read_data+0x170>)
 801296a:	633b      	str	r3, [r7, #48]	; 0x30
 801296c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012970:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8012972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012974:	2b00      	cmp	r3, #0
 8012976:	dd1d      	ble.n	80129b4 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297a:	f003 021f 	and.w	r2, r3, #31
 801297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012980:	4413      	add	r3, r2
 8012982:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012986:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012988:	f3bf 8f4f 	dsb	sy
}
 801298c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801298e:	4a3e      	ldr	r2, [pc, #248]	; (8012a88 <sd_read_data+0x178>)
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	3320      	adds	r3, #32
 801299a:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299e:	3b20      	subs	r3, #32
 80129a0:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	dcf2      	bgt.n	801298e <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80129a8:	f3bf 8f4f 	dsb	sy
}
 80129ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80129ae:	f3bf 8f6f 	isb	sy
}
 80129b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80129b4:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80129b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80129bc:	4830      	ldr	r0, [pc, #192]	; (8012a80 <sd_read_data+0x170>)
 80129be:	f7ff fc03 	bl	80121c8 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 80129c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80129c8:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 80129ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129cc:	3301      	adds	r3, #1
 80129ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d8ae      	bhi.n	8012936 <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 80129d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d102      	bne.n	80129e6 <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 80129e0:	2300      	movs	r3, #0
 80129e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80129e4:	e046      	b.n	8012a74 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 80129e6:	2321      	movs	r3, #33	; 0x21
 80129e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80129ea:	e043      	b.n	8012a74 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	2000      	movs	r0, #0
 80129f8:	f7f6 fea6 	bl	8009748 <fx_stm32_sd_read_blocks>
 80129fc:	4603      	mov	r3, r0
 80129fe:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8012a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8012a06:	2390      	movs	r3, #144	; 0x90
 8012a08:	e035      	b.n	8012a76 <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8012a0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a0e:	481d      	ldr	r0, [pc, #116]	; (8012a84 <sd_read_data+0x174>)
 8012a10:	f003 fc38 	bl	8016284 <_txe_semaphore_get>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <sd_read_data+0x10e>
 8012a1a:	2390      	movs	r3, #144	; 0x90
 8012a1c:	e02b      	b.n	8012a76 <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	025b      	lsls	r3, r3, #9
 8012a28:	623a      	str	r2, [r7, #32]
 8012a2a:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	dd1d      	ble.n	8012a6e <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012a32:	6a3b      	ldr	r3, [r7, #32]
 8012a34:	f003 021f 	and.w	r2, r3, #31
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012a3e:	6a3b      	ldr	r3, [r7, #32]
 8012a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a42:	f3bf 8f4f 	dsb	sy
}
 8012a46:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012a48:	4a0f      	ldr	r2, [pc, #60]	; (8012a88 <sd_read_data+0x178>)
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	3320      	adds	r3, #32
 8012a54:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	3b20      	subs	r3, #32
 8012a5a:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012a5c:	69bb      	ldr	r3, [r7, #24]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	dcf2      	bgt.n	8012a48 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 8012a62:	f3bf 8f4f 	dsb	sy
}
 8012a66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012a68:	f3bf 8f6f 	isb	sy
}
 8012a6c:	bf00      	nop
}
 8012a6e:	bf00      	nop
#endif

    status = FX_SUCCESS;
 8012a70:	2300      	movs	r3, #0
 8012a72:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 8012a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3740      	adds	r7, #64	; 0x40
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	24014ce0 	.word	0x24014ce0
 8012a84:	24014c6c 	.word	0x24014c6c
 8012a88:	e000ed00 	.word	0xe000ed00

08012a8c <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b090      	sub	sp, #64	; 0x40
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	60f8      	str	r0, [r7, #12]
 8012a94:	60b9      	str	r1, [r7, #8]
 8012a96:	607a      	str	r2, [r7, #4]
 8012a98:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d061      	beq.n	8012b68 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aaa:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8012aac:	2300      	movs	r3, #0
 8012aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ab0:	e04c      	b.n	8012b4c <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ab6:	4951      	ldr	r1, [pc, #324]	; (8012bfc <sd_write_data+0x170>)
 8012ab8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012aba:	f7ff fb85 	bl	80121c8 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 8012abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ac0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8012ac6:	4b4d      	ldr	r3, [pc, #308]	; (8012bfc <sd_write_data+0x170>)
 8012ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8012aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	dd1d      	ble.n	8012b12 <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad8:	f003 021f 	and.w	r2, r3, #31
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	4413      	add	r3, r2
 8012ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012ae6:	f3bf 8f4f 	dsb	sy
}
 8012aea:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012aec:	4a44      	ldr	r2, [pc, #272]	; (8012c00 <sd_write_data+0x174>)
 8012aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af6:	3320      	adds	r3, #32
 8012af8:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afc:	3b20      	subs	r3, #32
 8012afe:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 8012b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	dcf2      	bgt.n	8012aec <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8012b06:	f3bf 8f4f 	dsb	sy
}
 8012b0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012b0c:	f3bf 8f6f 	isb	sy
}
 8012b10:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8012b12:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8012b14:	68ba      	ldr	r2, [r7, #8]
 8012b16:	1c53      	adds	r3, r2, #1
 8012b18:	60bb      	str	r3, [r7, #8]
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	4937      	ldr	r1, [pc, #220]	; (8012bfc <sd_write_data+0x170>)
 8012b1e:	2000      	movs	r0, #0
 8012b20:	f7f6 fe2e 	bl	8009780 <fx_stm32_sd_write_blocks>
 8012b24:	4603      	mov	r3, r0
 8012b26:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 8012b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 8012b2e:	2390      	movs	r3, #144	; 0x90
 8012b30:	e05f      	b.n	8012bf2 <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8012b32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012b36:	4833      	ldr	r0, [pc, #204]	; (8012c04 <sd_write_data+0x178>)
 8012b38:	f003 fba4 	bl	8016284 <_txe_semaphore_get>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <sd_write_data+0xba>
 8012b42:	2390      	movs	r3, #144	; 0x90
 8012b44:	e055      	b.n	8012bf2 <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 8012b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b48:	3301      	adds	r3, #1
 8012b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d8ae      	bhi.n	8012ab2 <sd_write_data+0x26>
    }

    if (i == num_sectors)
 8012b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d102      	bne.n	8012b62 <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b60:	e046      	b.n	8012bf0 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8012b62:	2321      	movs	r3, #33	; 0x21
 8012b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b66:	e043      	b.n	8012bf0 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	025b      	lsls	r3, r3, #9
 8012b72:	623a      	str	r2, [r7, #32]
 8012b74:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	dd1d      	ble.n	8012bb8 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012b7c:	6a3b      	ldr	r3, [r7, #32]
 8012b7e:	f003 021f 	and.w	r2, r3, #31
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	4413      	add	r3, r2
 8012b86:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012b8c:	f3bf 8f4f 	dsb	sy
}
 8012b90:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012b92:	4a1b      	ldr	r2, [pc, #108]	; (8012c00 <sd_write_data+0x174>)
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	3320      	adds	r3, #32
 8012b9e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	3b20      	subs	r3, #32
 8012ba4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	dcf2      	bgt.n	8012b92 <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8012bac:	f3bf 8f4f 	dsb	sy
}
 8012bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012bb2:	f3bf 8f6f 	isb	sy
}
 8012bb6:	bf00      	nop
}
 8012bb8:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	68ba      	ldr	r2, [r7, #8]
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	f7f6 fddb 	bl	8009780 <fx_stm32_sd_write_blocks>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 8012bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d001      	beq.n	8012bd8 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8012bd4:	2390      	movs	r3, #144	; 0x90
 8012bd6:	e00c      	b.n	8012bf2 <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8012bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012bdc:	4809      	ldr	r0, [pc, #36]	; (8012c04 <sd_write_data+0x178>)
 8012bde:	f003 fb51 	bl	8016284 <_txe_semaphore_get>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d001      	beq.n	8012bec <sd_write_data+0x160>
 8012be8:	2390      	movs	r3, #144	; 0x90
 8012bea:	e002      	b.n	8012bf2 <sd_write_data+0x166>

    status = FX_SUCCESS;
 8012bec:	2300      	movs	r3, #0
 8012bee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 8012bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3740      	adds	r7, #64	; 0x40
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	24014ce0 	.word	0x24014ce0
 8012c00:	e000ed00 	.word	0xe000ed00
 8012c04:	24014c50 	.word	0x24014c50

08012c08 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b096      	sub	sp, #88	; 0x58
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	607a      	str	r2, [r7, #4]
 8012c14:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	3303      	adds	r3, #3
 8012c1a:	f023 0303 	bic.w	r3, r3, #3
 8012c1e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c20:	f3ef 8310 	mrs	r3, PRIMASK
 8012c24:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012c28:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c2a:	b672      	cpsid	i
    return(int_posture);
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012c2e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012c30:	4b55      	ldr	r3, [pc, #340]	; (8012d88 <_tx_byte_allocate+0x180>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012c36:	2300      	movs	r3, #0
 8012c38:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c3e:	621a      	str	r2, [r3, #32]
 8012c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	f383 8810 	msr	PRIMASK, r3
}
 8012c4a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012c4c:	6879      	ldr	r1, [r7, #4]
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f000 f9b2 	bl	8012fb8 <_tx_byte_pool_search>
 8012c54:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c56:	f3ef 8310 	mrs	r3, PRIMASK
 8012c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c60:	b672      	cpsid	i
    return(int_posture);
 8012c62:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8012c64:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8012c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d002      	beq.n	8012c72 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c70:	e006      	b.n	8012c80 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6a1b      	ldr	r3, [r3, #32]
 8012c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d101      	bne.n	8012c80 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0d9      	beq.n	8012c3a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c8a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d008      	beq.n	8012ca4 <_tx_byte_allocate+0x9c>
 8012c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c94:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c96:	6a3b      	ldr	r3, [r7, #32]
 8012c98:	f383 8810 	msr	PRIMASK, r3
}
 8012c9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8012ca2:	e06c      	b.n	8012d7e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d061      	beq.n	8012d6e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012caa:	4b38      	ldr	r3, [pc, #224]	; (8012d8c <_tx_byte_allocate+0x184>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d007      	beq.n	8012cc2 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012cb2:	2310      	movs	r3, #16
 8012cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8012cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cb8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	f383 8810 	msr	PRIMASK, r3
}
 8012cc0:	e05d      	b.n	8012d7e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cc4:	4a32      	ldr	r2, [pc, #200]	; (8012d90 <_tx_byte_allocate+0x188>)
 8012cc6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cd0:	68ba      	ldr	r2, [r7, #8]
 8012cd2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ce0:	1c5a      	adds	r2, r3, #1
 8012ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ce4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cec:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d109      	bne.n	8012d12 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d02:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d08:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d0e:	675a      	str	r2, [r3, #116]	; 0x74
 8012d10:	e011      	b.n	8012d36 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d16:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d1c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d22:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d28:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d2e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d34:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d38:	2209      	movs	r2, #9
 8012d3a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d3e:	2201      	movs	r2, #1
 8012d40:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d44:	683a      	ldr	r2, [r7, #0]
 8012d46:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012d48:	4b10      	ldr	r3, [pc, #64]	; (8012d8c <_tx_byte_allocate+0x184>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	4a0f      	ldr	r2, [pc, #60]	; (8012d8c <_tx_byte_allocate+0x184>)
 8012d50:	6013      	str	r3, [r2, #0]
 8012d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d54:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	f383 8810 	msr	PRIMASK, r3
}
 8012d5c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012d5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012d60:	f002 fb06 	bl	8015370 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8012d6c:	e007      	b.n	8012d7e <_tx_byte_allocate+0x176>
 8012d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	f383 8810 	msr	PRIMASK, r3
}
 8012d78:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012d7a:	2310      	movs	r3, #16
 8012d7c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3758      	adds	r7, #88	; 0x58
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	24014f1c 	.word	0x24014f1c
 8012d8c:	24014fb4 	.word	0x24014fb4
 8012d90:	08012d95 	.word	0x08012d95

08012d94 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b08e      	sub	sp, #56	; 0x38
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8012da2:	623b      	str	r3, [r7, #32]
    return(posture);
 8012da4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012da6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012da8:	b672      	cpsid	i
    return(int_posture);
 8012daa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012dac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012db2:	4a33      	ldr	r2, [pc, #204]	; (8012e80 <_tx_byte_pool_cleanup+0xec>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d158      	bne.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012dbe:	683a      	ldr	r2, [r7, #0]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d152      	bne.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d04c      	beq.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a2b      	ldr	r2, [pc, #172]	; (8012e84 <_tx_byte_pool_cleanup+0xf0>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d147      	bne.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d043      	beq.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dec:	1e5a      	subs	r2, r3, #1
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012df6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d103      	bne.n	8012e06 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	2200      	movs	r2, #0
 8012e02:	625a      	str	r2, [r3, #36]	; 0x24
 8012e04:	e013      	b.n	8012e2e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e10:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e16:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e1c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d102      	bne.n	8012e2e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e2c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e32:	2b09      	cmp	r3, #9
 8012e34:	d119      	bne.n	8012e6a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2210      	movs	r2, #16
 8012e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012e3e:	4b12      	ldr	r3, [pc, #72]	; (8012e88 <_tx_byte_pool_cleanup+0xf4>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3301      	adds	r3, #1
 8012e44:	4a10      	ldr	r2, [pc, #64]	; (8012e88 <_tx_byte_pool_cleanup+0xf4>)
 8012e46:	6013      	str	r3, [r2, #0]
 8012e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	f383 8810 	msr	PRIMASK, r3
}
 8012e52:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f002 f98b 	bl	8015170 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8012e5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012e60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012e62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e64:	b672      	cpsid	i
    return(int_posture);
 8012e66:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8012e68:	637b      	str	r3, [r7, #52]	; 0x34
 8012e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f383 8810 	msr	PRIMASK, r3
}
 8012e74:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012e76:	bf00      	nop
 8012e78:	3738      	adds	r7, #56	; 0x38
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	08012d95 	.word	0x08012d95
 8012e84:	42595445 	.word	0x42595445
 8012e88:	24014fb4 	.word	0x24014fb4

08012e8c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b08e      	sub	sp, #56	; 0x38
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
 8012e98:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8012e9a:	2234      	movs	r2, #52	; 0x34
 8012e9c:	2100      	movs	r1, #0
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f003 fb7a 	bl	8016598 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	f023 0303 	bic.w	r3, r3, #3
 8012eaa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	68ba      	ldr	r2, [r7, #8]
 8012eb0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	683a      	ldr	r2, [r7, #0]
 8012ebc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	f1a3 0208 	sub.w	r2, r3, #8
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2202      	movs	r2, #2
 8012ed8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8012ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8012ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee8:	3b04      	subs	r3, #4
 8012eea:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8012ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ef8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8012efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efc:	3b04      	subs	r3, #4
 8012efe:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8012f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8012f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f16:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8012f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f1e:	3304      	adds	r3, #4
 8012f20:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8012f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f24:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8012f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f28:	4a1f      	ldr	r2, [pc, #124]	; (8012fa8 <_tx_byte_pool_create+0x11c>)
 8012f2a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f32:	f3ef 8310 	mrs	r3, PRIMASK
 8012f36:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012f38:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012f3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f3c:	b672      	cpsid	i
    return(int_posture);
 8012f3e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8012f40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	4a19      	ldr	r2, [pc, #100]	; (8012fac <_tx_byte_pool_create+0x120>)
 8012f46:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8012f48:	4b19      	ldr	r3, [pc, #100]	; (8012fb0 <_tx_byte_pool_create+0x124>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d109      	bne.n	8012f64 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8012f50:	4a18      	ldr	r2, [pc, #96]	; (8012fb4 <_tx_byte_pool_create+0x128>)
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	68fa      	ldr	r2, [r7, #12]
 8012f5a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	631a      	str	r2, [r3, #48]	; 0x30
 8012f62:	e011      	b.n	8012f88 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8012f64:	4b13      	ldr	r3, [pc, #76]	; (8012fb4 <_tx_byte_pool_create+0x128>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8012f6a:	6a3b      	ldr	r3, [r7, #32]
 8012f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f6e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8012f70:	6a3b      	ldr	r3, [r7, #32]
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	69fa      	ldr	r2, [r7, #28]
 8012f80:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6a3a      	ldr	r2, [r7, #32]
 8012f86:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8012f88:	4b09      	ldr	r3, [pc, #36]	; (8012fb0 <_tx_byte_pool_create+0x124>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	4a08      	ldr	r2, [pc, #32]	; (8012fb0 <_tx_byte_pool_create+0x124>)
 8012f90:	6013      	str	r3, [r2, #0]
 8012f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f94:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	f383 8810 	msr	PRIMASK, r3
}
 8012f9c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012f9e:	2300      	movs	r3, #0
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3738      	adds	r7, #56	; 0x38
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	ffffeeee 	.word	0xffffeeee
 8012fac:	42595445 	.word	0x42595445
 8012fb0:	24014f10 	.word	0x24014f10
 8012fb4:	24014f0c 	.word	0x24014f0c

08012fb8 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b097      	sub	sp, #92	; 0x5c
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8012fca:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012fce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fd0:	b672      	cpsid	i
    return(int_posture);
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8012fd4:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	689a      	ldr	r2, [r3, #8]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	3b02      	subs	r3, #2
 8012fe0:	00db      	lsls	r3, r3, #3
 8012fe2:	4413      	add	r3, r2
 8012fe4:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8012fe6:	683a      	ldr	r2, [r7, #0]
 8012fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d308      	bcc.n	8013000 <_tx_byte_pool_search+0x48>
 8012fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ff0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	f383 8810 	msr	PRIMASK, r3
}
 8012ff8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8012ffe:	e0dd      	b.n	80131bc <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013000:	4b72      	ldr	r3, [pc, #456]	; (80131cc <_tx_byte_pool_search+0x214>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801300a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	695b      	ldr	r3, [r3, #20]
 8013010:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	3301      	adds	r3, #1
 8013018:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 801301a:	2300      	movs	r3, #0
 801301c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801301e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013020:	3304      	adds	r3, #4
 8013022:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a68      	ldr	r2, [pc, #416]	; (80131d0 <_tx_byte_pool_search+0x218>)
 801302e:	4293      	cmp	r3, r2
 8013030:	d143      	bne.n	80130ba <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8013032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013034:	2b00      	cmp	r3, #0
 8013036:	d104      	bne.n	8013042 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801303c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801303e:	2301      	movs	r3, #1
 8013040:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013044:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801304c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013056:	3b08      	subs	r3, #8
 8013058:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801305a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	429a      	cmp	r2, r3
 8013060:	d257      	bcs.n	8013112 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8013062:	2300      	movs	r3, #0
 8013064:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8013066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013068:	3304      	adds	r3, #4
 801306a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4a56      	ldr	r2, [pc, #344]	; (80131d0 <_tx_byte_pool_search+0x218>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d113      	bne.n	80130a2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013084:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	1e5a      	subs	r2, r3, #1
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	695b      	ldr	r3, [r3, #20]
 8013094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013096:	429a      	cmp	r2, r3
 8013098:	d114      	bne.n	80130c4 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801309e:	615a      	str	r2, [r3, #20]
 80130a0:	e010      	b.n	80130c4 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80130a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80130ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d008      	beq.n	80130c4 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80130b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130b4:	3b01      	subs	r3, #1
 80130b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80130b8:	e004      	b.n	80130c4 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80130ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130bc:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80130c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d002      	beq.n	80130d0 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80130ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130cc:	3b01      	subs	r3, #1
 80130ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80130d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	f383 8810 	msr	PRIMASK, r3
}
 80130da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130dc:	f3ef 8310 	mrs	r3, PRIMASK
 80130e0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80130e2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80130e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80130e6:	b672      	cpsid	i
    return(int_posture);
 80130e8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80130ea:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6a1b      	ldr	r3, [r3, #32]
 80130f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d009      	beq.n	801310a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	695b      	ldr	r3, [r3, #20]
 80130fa:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	3301      	adds	r3, #1
 8013102:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013108:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801310a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801310c:	2b00      	cmp	r3, #0
 801310e:	d186      	bne.n	801301e <_tx_byte_pool_search+0x66>
 8013110:	e000      	b.n	8013114 <_tx_byte_pool_search+0x15c>
                    break;
 8013112:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8013114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013116:	2b00      	cmp	r3, #0
 8013118:	d048      	beq.n	80131ac <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 801311a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	1ad3      	subs	r3, r2, r3
 8013120:	2b13      	cmp	r3, #19
 8013122:	d91e      	bls.n	8013162 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	3308      	adds	r3, #8
 8013128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801312a:	4413      	add	r3, r2
 801312c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013130:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013134:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013140:	3304      	adds	r3, #4
 8013142:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013146:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8013148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314a:	4a21      	ldr	r2, [pc, #132]	; (80131d0 <_tx_byte_pool_search+0x218>)
 801314c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	1c5a      	adds	r2, r3, #1
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801315c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8013162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013164:	3304      	adds	r3, #4
 8013166:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8013168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	689a      	ldr	r2, [r3, #8]
 8013176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013178:	1ad3      	subs	r3, r2, r3
 801317a:	f1a3 0208 	sub.w	r2, r3, #8
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	695b      	ldr	r3, [r3, #20]
 8013186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013188:	429a      	cmp	r2, r3
 801318a:	d105      	bne.n	8013198 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801318c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801318e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	615a      	str	r2, [r3, #20]
 8013198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801319a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f383 8810 	msr	PRIMASK, r3
}
 80131a2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80131a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a6:	3308      	adds	r3, #8
 80131a8:	653b      	str	r3, [r7, #80]	; 0x50
 80131aa:	e007      	b.n	80131bc <_tx_byte_pool_search+0x204>
 80131ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	f383 8810 	msr	PRIMASK, r3
}
 80131b6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80131b8:	2300      	movs	r3, #0
 80131ba:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80131bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80131be:	4618      	mov	r0, r3
 80131c0:	375c      	adds	r7, #92	; 0x5c
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	24014f1c 	.word	0x24014f1c
 80131d0:	ffffeeee 	.word	0xffffeeee

080131d4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80131d8:	f001 fe14 	bl	8014e04 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80131dc:	f002 fb12 	bl	8015804 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80131e0:	4b12      	ldr	r3, [pc, #72]	; (801322c <_tx_initialize_high_level+0x58>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	4b12      	ldr	r3, [pc, #72]	; (8013230 <_tx_initialize_high_level+0x5c>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80131ec:	4b11      	ldr	r3, [pc, #68]	; (8013234 <_tx_initialize_high_level+0x60>)
 80131ee:	2200      	movs	r2, #0
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	4b11      	ldr	r3, [pc, #68]	; (8013238 <_tx_initialize_high_level+0x64>)
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80131f8:	4b10      	ldr	r3, [pc, #64]	; (801323c <_tx_initialize_high_level+0x68>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	4b10      	ldr	r3, [pc, #64]	; (8013240 <_tx_initialize_high_level+0x6c>)
 8013200:	2200      	movs	r2, #0
 8013202:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8013204:	4b0f      	ldr	r3, [pc, #60]	; (8013244 <_tx_initialize_high_level+0x70>)
 8013206:	2200      	movs	r2, #0
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	4b0f      	ldr	r3, [pc, #60]	; (8013248 <_tx_initialize_high_level+0x74>)
 801320c:	2200      	movs	r2, #0
 801320e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8013210:	4b0e      	ldr	r3, [pc, #56]	; (801324c <_tx_initialize_high_level+0x78>)
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
 8013216:	4b0e      	ldr	r3, [pc, #56]	; (8013250 <_tx_initialize_high_level+0x7c>)
 8013218:	2200      	movs	r2, #0
 801321a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801321c:	4b0d      	ldr	r3, [pc, #52]	; (8013254 <_tx_initialize_high_level+0x80>)
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
 8013222:	4b0d      	ldr	r3, [pc, #52]	; (8013258 <_tx_initialize_high_level+0x84>)
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]
#endif
}
 8013228:	bf00      	nop
 801322a:	bd80      	pop	{r7, pc}
 801322c:	24014ee4 	.word	0x24014ee4
 8013230:	24014ee8 	.word	0x24014ee8
 8013234:	24014eec 	.word	0x24014eec
 8013238:	24014ef0 	.word	0x24014ef0
 801323c:	24014ef4 	.word	0x24014ef4
 8013240:	24014ef8 	.word	0x24014ef8
 8013244:	24014f04 	.word	0x24014f04
 8013248:	24014f08 	.word	0x24014f08
 801324c:	24014f0c 	.word	0x24014f0c
 8013250:	24014f10 	.word	0x24014f10
 8013254:	24014efc 	.word	0x24014efc
 8013258:	24014f00 	.word	0x24014f00

0801325c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8013260:	4b10      	ldr	r3, [pc, #64]	; (80132a4 <_tx_initialize_kernel_enter+0x48>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013268:	d00c      	beq.n	8013284 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801326a:	4b0e      	ldr	r3, [pc, #56]	; (80132a4 <_tx_initialize_kernel_enter+0x48>)
 801326c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013270:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8013272:	f7ed f835 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8013276:	f7ff ffad 	bl	80131d4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801327a:	4b0b      	ldr	r3, [pc, #44]	; (80132a8 <_tx_initialize_kernel_enter+0x4c>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3301      	adds	r3, #1
 8013280:	4a09      	ldr	r2, [pc, #36]	; (80132a8 <_tx_initialize_kernel_enter+0x4c>)
 8013282:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013284:	4b07      	ldr	r3, [pc, #28]	; (80132a4 <_tx_initialize_kernel_enter+0x48>)
 8013286:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801328a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801328c:	4b07      	ldr	r3, [pc, #28]	; (80132ac <_tx_initialize_kernel_enter+0x50>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4618      	mov	r0, r3
 8013292:	f7ed fb17 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8013296:	4b03      	ldr	r3, [pc, #12]	; (80132a4 <_tx_initialize_kernel_enter+0x48>)
 8013298:	2200      	movs	r2, #0
 801329a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801329c:	f7ed f860 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80132a0:	bf00      	nop
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	2400006c 	.word	0x2400006c
 80132a8:	24014fb4 	.word	0x24014fb4
 80132ac:	24014f14 	.word	0x24014f14

080132b0 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b08e      	sub	sp, #56	; 0x38
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132ba:	f3ef 8310 	mrs	r3, PRIMASK
 80132be:	623b      	str	r3, [r7, #32]
    return(posture);
 80132c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80132c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132c4:	b672      	cpsid	i
    return(int_posture);
 80132c6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80132c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132ce:	4a33      	ldr	r2, [pc, #204]	; (801339c <_tx_mutex_cleanup+0xec>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d158      	bne.n	8013386 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80132da:	683a      	ldr	r2, [r7, #0]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d152      	bne.n	8013386 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d04c      	beq.n	8013386 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80132ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a2b      	ldr	r2, [pc, #172]	; (80133a0 <_tx_mutex_cleanup+0xf0>)
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d147      	bne.n	8013386 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	69db      	ldr	r3, [r3, #28]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d043      	beq.n	8013386 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2200      	movs	r2, #0
 8013302:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8013304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013306:	69db      	ldr	r3, [r3, #28]
 8013308:	1e5a      	subs	r2, r3, #1
 801330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330c:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013310:	69db      	ldr	r3, [r3, #28]
 8013312:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013316:	2b00      	cmp	r3, #0
 8013318:	d103      	bne.n	8013322 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331c:	2200      	movs	r2, #0
 801331e:	619a      	str	r2, [r3, #24]
 8013320:	e013      	b.n	801334a <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013326:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801332c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013332:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013338:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 801333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801333c:	699b      	ldr	r3, [r3, #24]
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	429a      	cmp	r2, r3
 8013342:	d102      	bne.n	801334a <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8013344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013348:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801334e:	2b0d      	cmp	r3, #13
 8013350:	d119      	bne.n	8013386 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	221d      	movs	r2, #29
 8013356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801335a:	4b12      	ldr	r3, [pc, #72]	; (80133a4 <_tx_mutex_cleanup+0xf4>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	3301      	adds	r3, #1
 8013360:	4a10      	ldr	r2, [pc, #64]	; (80133a4 <_tx_mutex_cleanup+0xf4>)
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013366:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	f383 8810 	msr	PRIMASK, r3
}
 801336e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f001 fefd 	bl	8015170 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013376:	f3ef 8310 	mrs	r3, PRIMASK
 801337a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801337c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801337e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013380:	b672      	cpsid	i
    return(int_posture);
 8013382:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013384:	637b      	str	r3, [r7, #52]	; 0x34
 8013386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013388:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f383 8810 	msr	PRIMASK, r3
}
 8013390:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013392:	bf00      	nop
 8013394:	3738      	adds	r7, #56	; 0x38
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	080132b1 	.word	0x080132b1
 80133a0:	4d555445 	.word	0x4d555445
 80133a4:	24014fb4 	.word	0x24014fb4

080133a8 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b08a      	sub	sp, #40	; 0x28
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133b0:	f3ef 8310 	mrs	r3, PRIMASK
 80133b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80133b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80133b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133ba:	b672      	cpsid	i
    return(int_posture);
 80133bc:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80133be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80133c0:	4b1a      	ldr	r3, [pc, #104]	; (801342c <_tx_mutex_thread_release+0x84>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	3301      	adds	r3, #1
 80133c6:	4a19      	ldr	r2, [pc, #100]	; (801342c <_tx_mutex_thread_release+0x84>)
 80133c8:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80133d0:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80133d2:	6a3b      	ldr	r3, [r7, #32]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d017      	beq.n	8013408 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80133d8:	6a3b      	ldr	r3, [r7, #32]
 80133da:	2201      	movs	r2, #1
 80133dc:	609a      	str	r2, [r3, #8]
 80133de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f383 8810 	msr	PRIMASK, r3
}
 80133e8:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80133ea:	6a38      	ldr	r0, [r7, #32]
 80133ec:	f000 fb9c 	bl	8013b28 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133f0:	f3ef 8310 	mrs	r3, PRIMASK
 80133f4:	617b      	str	r3, [r7, #20]
    return(posture);
 80133f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80133f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80133fa:	b672      	cpsid	i
    return(int_posture);
 80133fc:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80133fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013406:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8013408:	6a3b      	ldr	r3, [r7, #32]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d1dd      	bne.n	80133ca <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801340e:	4b07      	ldr	r3, [pc, #28]	; (801342c <_tx_mutex_thread_release+0x84>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	3b01      	subs	r3, #1
 8013414:	4a05      	ldr	r2, [pc, #20]	; (801342c <_tx_mutex_thread_release+0x84>)
 8013416:	6013      	str	r3, [r2, #0]
 8013418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	f383 8810 	msr	PRIMASK, r3
}
 8013422:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8013424:	bf00      	nop
 8013426:	3728      	adds	r7, #40	; 0x28
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	24014fb4 	.word	0x24014fb4

08013430 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b08a      	sub	sp, #40	; 0x28
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801343c:	2234      	movs	r2, #52	; 0x34
 801343e:	2100      	movs	r1, #0
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f003 f8a9 	bl	8016598 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	68ba      	ldr	r2, [r7, #8]
 801344a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013452:	f3ef 8310 	mrs	r3, PRIMASK
 8013456:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013458:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801345a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801345c:	b672      	cpsid	i
    return(int_posture);
 801345e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8013460:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	4a1a      	ldr	r2, [pc, #104]	; (80134d0 <_tx_mutex_create+0xa0>)
 8013466:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8013468:	4b1a      	ldr	r3, [pc, #104]	; (80134d4 <_tx_mutex_create+0xa4>)
 801346a:	4a1b      	ldr	r2, [pc, #108]	; (80134d8 <_tx_mutex_create+0xa8>)
 801346c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801346e:	4b1b      	ldr	r3, [pc, #108]	; (80134dc <_tx_mutex_create+0xac>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d109      	bne.n	801348a <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8013476:	4a1a      	ldr	r2, [pc, #104]	; (80134e0 <_tx_mutex_create+0xb0>)
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	625a      	str	r2, [r3, #36]	; 0x24
 8013488:	e011      	b.n	80134ae <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 801348a:	4b15      	ldr	r3, [pc, #84]	; (80134e0 <_tx_mutex_create+0xb0>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8013490:	6a3b      	ldr	r3, [r7, #32]
 8013492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013494:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8013496:	6a3b      	ldr	r3, [r7, #32]
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	68fa      	ldr	r2, [r7, #12]
 80134a0:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	69fa      	ldr	r2, [r7, #28]
 80134a6:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	6a3a      	ldr	r2, [r7, #32]
 80134ac:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80134ae:	4b0b      	ldr	r3, [pc, #44]	; (80134dc <_tx_mutex_create+0xac>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3301      	adds	r3, #1
 80134b4:	4a09      	ldr	r2, [pc, #36]	; (80134dc <_tx_mutex_create+0xac>)
 80134b6:	6013      	str	r3, [r2, #0]
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	f383 8810 	msr	PRIMASK, r3
}
 80134c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80134c4:	2300      	movs	r3, #0
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3728      	adds	r7, #40	; 0x28
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	4d555445 	.word	0x4d555445
 80134d4:	24014fb8 	.word	0x24014fb8
 80134d8:	080133a9 	.word	0x080133a9
 80134dc:	24014f00 	.word	0x24014f00
 80134e0:	24014efc 	.word	0x24014efc

080134e4 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b096      	sub	sp, #88	; 0x58
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134ec:	f3ef 8310 	mrs	r3, PRIMASK
 80134f0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80134f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80134f4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80134f6:	b672      	cpsid	i
    return(int_posture);
 80134f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 80134fa:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2200      	movs	r2, #0
 8013500:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8013502:	4b4a      	ldr	r3, [pc, #296]	; (801362c <_tx_mutex_delete+0x148>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	3b01      	subs	r3, #1
 8013508:	4a48      	ldr	r2, [pc, #288]	; (801362c <_tx_mutex_delete+0x148>)
 801350a:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801350c:	4b47      	ldr	r3, [pc, #284]	; (801362c <_tx_mutex_delete+0x148>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d103      	bne.n	801351c <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8013514:	4b46      	ldr	r3, [pc, #280]	; (8013630 <_tx_mutex_delete+0x14c>)
 8013516:	2200      	movs	r2, #0
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	e013      	b.n	8013544 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a1b      	ldr	r3, [r3, #32]
 8013520:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013526:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8013528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801352a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801352c:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 801352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013532:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8013534:	4b3e      	ldr	r3, [pc, #248]	; (8013630 <_tx_mutex_delete+0x14c>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	429a      	cmp	r2, r3
 801353c:	d102      	bne.n	8013544 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 801353e:	4a3c      	ldr	r2, [pc, #240]	; (8013630 <_tx_mutex_delete+0x14c>)
 8013540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013542:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013544:	4b3b      	ldr	r3, [pc, #236]	; (8013634 <_tx_mutex_delete+0x150>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	3301      	adds	r3, #1
 801354a:	4a3a      	ldr	r2, [pc, #232]	; (8013634 <_tx_mutex_delete+0x150>)
 801354c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	699b      	ldr	r3, [r3, #24]
 8013552:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	69db      	ldr	r3, [r3, #28]
 801355e:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2200      	movs	r2, #0
 8013564:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	68db      	ldr	r3, [r3, #12]
 801356a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 801356c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801356e:	2b00      	cmp	r3, #0
 8013570:	d013      	beq.n	801359a <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2201      	movs	r2, #1
 8013576:	609a      	str	r2, [r3, #8]
 8013578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801357a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357e:	f383 8810 	msr	PRIMASK, r3
}
 8013582:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f000 facf 	bl	8013b28 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801358a:	f3ef 8310 	mrs	r3, PRIMASK
 801358e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8013592:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013594:	b672      	cpsid	i
    return(int_posture);
 8013596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8013598:	657b      	str	r3, [r7, #84]	; 0x54
 801359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801359c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a0:	f383 8810 	msr	PRIMASK, r3
}
 80135a4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 80135a6:	e024      	b.n	80135f2 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80135a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135aa:	3b01      	subs	r3, #1
 80135ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135ae:	f3ef 8310 	mrs	r3, PRIMASK
 80135b2:	61fb      	str	r3, [r7, #28]
    return(posture);
 80135b4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80135b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135b8:	b672      	cpsid	i
    return(int_posture);
 80135ba:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80135bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80135be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c0:	2200      	movs	r2, #0
 80135c2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80135c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c6:	2201      	movs	r2, #1
 80135c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80135cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80135d2:	4b18      	ldr	r3, [pc, #96]	; (8013634 <_tx_mutex_delete+0x150>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	3301      	adds	r3, #1
 80135d8:	4a16      	ldr	r2, [pc, #88]	; (8013634 <_tx_mutex_delete+0x150>)
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135de:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135e0:	6a3b      	ldr	r3, [r7, #32]
 80135e2:	f383 8810 	msr	PRIMASK, r3
}
 80135e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80135e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80135ea:	f001 fdc1 	bl	8015170 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80135ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135f0:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 80135f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1d7      	bne.n	80135a8 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135f8:	f3ef 8310 	mrs	r3, PRIMASK
 80135fc:	613b      	str	r3, [r7, #16]
    return(posture);
 80135fe:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013600:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013602:	b672      	cpsid	i
    return(int_posture);
 8013604:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013606:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013608:	4b0a      	ldr	r3, [pc, #40]	; (8013634 <_tx_mutex_delete+0x150>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	3b01      	subs	r3, #1
 801360e:	4a09      	ldr	r2, [pc, #36]	; (8013634 <_tx_mutex_delete+0x150>)
 8013610:	6013      	str	r3, [r2, #0]
 8013612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013614:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	f383 8810 	msr	PRIMASK, r3
}
 801361c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801361e:	f001 fd6d 	bl	80150fc <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013622:	2300      	movs	r3, #0
}
 8013624:	4618      	mov	r0, r3
 8013626:	3758      	adds	r7, #88	; 0x58
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	24014f00 	.word	0x24014f00
 8013630:	24014efc 	.word	0x24014efc
 8013634:	24014fb4 	.word	0x24014fb4

08013638 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b092      	sub	sp, #72	; 0x48
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013642:	f3ef 8310 	mrs	r3, PRIMASK
 8013646:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801364a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801364c:	b672      	cpsid	i
    return(int_posture);
 801364e:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8013650:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013652:	4b7a      	ldr	r3, [pc, #488]	; (801383c <_tx_mutex_get+0x204>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	689b      	ldr	r3, [r3, #8]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d144      	bne.n	80136ea <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2201      	movs	r2, #1
 8013664:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801366a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801366e:	2b00      	cmp	r3, #0
 8013670:	d032      	beq.n	80136d8 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	691b      	ldr	r3, [r3, #16]
 8013676:	2b01      	cmp	r3, #1
 8013678:	d106      	bne.n	8013688 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2220      	movs	r2, #32
 8013686:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801368a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801368e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8013690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013692:	2b00      	cmp	r3, #0
 8013694:	d00f      	beq.n	80136b6 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8013696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801369a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80136a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136ac:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80136b4:	e009      	b.n	80136ca <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80136b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80136ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80136d0:	1c5a      	adds	r2, r3, #1
 80136d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80136d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	f383 8810 	msr	PRIMASK, r3
}
 80136e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80136e4:	2300      	movs	r3, #0
 80136e6:	647b      	str	r3, [r7, #68]	; 0x44
 80136e8:	e0a2      	b.n	8013830 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d10d      	bne.n	8013710 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	1c5a      	adds	r2, r3, #1
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	609a      	str	r2, [r3, #8]
 80136fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013700:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	f383 8810 	msr	PRIMASK, r3
}
 8013708:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801370a:	2300      	movs	r3, #0
 801370c:	647b      	str	r3, [r7, #68]	; 0x44
 801370e:	e08f      	b.n	8013830 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 8084 	beq.w	8013820 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013718:	4b49      	ldr	r3, [pc, #292]	; (8013840 <_tx_mutex_get+0x208>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d008      	beq.n	8013732 <_tx_mutex_get+0xfa>
 8013720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013722:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	f383 8810 	msr	PRIMASK, r3
}
 801372a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 801372c:	231d      	movs	r3, #29
 801372e:	647b      	str	r3, [r7, #68]	; 0x44
 8013730:	e07e      	b.n	8013830 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8013738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801373a:	4a42      	ldr	r2, [pc, #264]	; (8013844 <_tx_mutex_get+0x20c>)
 801373c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 801373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801374a:	1c5a      	adds	r2, r3, #1
 801374c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801374e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	69db      	ldr	r3, [r3, #28]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d109      	bne.n	801376e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801375e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013764:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801376a:	675a      	str	r2, [r3, #116]	; 0x74
 801376c:	e011      	b.n	8013792 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	699b      	ldr	r3, [r3, #24]
 8013772:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013778:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801377e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013784:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801378a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801378e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013790:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	69db      	ldr	r3, [r3, #28]
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379e:	220d      	movs	r2, #13
 80137a0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80137a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a4:	2201      	movs	r2, #1
 80137a6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80137a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137aa:	683a      	ldr	r2, [r7, #0]
 80137ac:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80137ae:	4b24      	ldr	r3, [pc, #144]	; (8013840 <_tx_mutex_get+0x208>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3301      	adds	r3, #1
 80137b4:	4a22      	ldr	r2, [pc, #136]	; (8013840 <_tx_mutex_get+0x208>)
 80137b6:	6013      	str	r3, [r2, #0]
 80137b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	f383 8810 	msr	PRIMASK, r3
}
 80137c2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	2b01      	cmp	r3, #1
 80137ca:	d121      	bne.n	8013810 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d903      	bls.n	80137e0 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80137d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80137e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d204      	bcs.n	80137f8 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80137ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80137f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013800:	429a      	cmp	r2, r3
 8013802:	d905      	bls.n	8013810 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8013804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013808:	4619      	mov	r1, r3
 801380a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801380c:	f000 f8ce 	bl	80139ac <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013812:	f001 fdad 	bl	8015370 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8013816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801381c:	647b      	str	r3, [r7, #68]	; 0x44
 801381e:	e007      	b.n	8013830 <_tx_mutex_get+0x1f8>
 8013820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013822:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f383 8810 	msr	PRIMASK, r3
}
 801382a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 801382c:	231d      	movs	r3, #29
 801382e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8013830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013832:	4618      	mov	r0, r3
 8013834:	3748      	adds	r7, #72	; 0x48
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	24014f1c 	.word	0x24014f1c
 8013840:	24014fb4 	.word	0x24014fb4
 8013844:	080132b1 	.word	0x080132b1

08013848 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b092      	sub	sp, #72	; 0x48
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013850:	f3ef 8310 	mrs	r3, PRIMASK
 8013854:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013858:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801385a:	b672      	cpsid	i
    return(int_posture);
 801385c:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801385e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	69db      	ldr	r3, [r3, #28]
 8013864:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8013866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013868:	2b01      	cmp	r3, #1
 801386a:	d805      	bhi.n	8013878 <_tx_mutex_prioritize+0x30>
 801386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801386e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	f383 8810 	msr	PRIMASK, r3
}
 8013876:	e092      	b.n	801399e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8013878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387a:	2b02      	cmp	r3, #2
 801387c:	d114      	bne.n	80138a8 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	699b      	ldr	r3, [r3, #24]
 8013882:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8013884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013888:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013892:	429a      	cmp	r2, r3
 8013894:	d202      	bcs.n	801389c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801389a:	619a      	str	r2, [r3, #24]
 801389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801389e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	f383 8810 	msr	PRIMASK, r3
}
 80138a6:	e07a      	b.n	801399e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	699b      	ldr	r3, [r3, #24]
 80138ac:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80138ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80138b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138b6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80138b8:	4b3b      	ldr	r3, [pc, #236]	; (80139a8 <_tx_mutex_prioritize+0x160>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	3301      	adds	r3, #1
 80138be:	4a3a      	ldr	r2, [pc, #232]	; (80139a8 <_tx_mutex_prioritize+0x160>)
 80138c0:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80138c2:	2300      	movs	r3, #0
 80138c4:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80138c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d201      	bcs.n	80138d6 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80138d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	f383 8810 	msr	PRIMASK, r3
}
 80138e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80138e2:	f3ef 8310 	mrs	r3, PRIMASK
 80138e6:	617b      	str	r3, [r7, #20]
    return(posture);
 80138e8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80138ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80138ec:	b672      	cpsid	i
    return(int_posture);
 80138ee:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80138f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d002      	beq.n	8013902 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80138fc:	2301      	movs	r3, #1
 80138fe:	633b      	str	r3, [r7, #48]	; 0x30
 8013900:	e006      	b.n	8013910 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	69db      	ldr	r3, [r3, #28]
 8013906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013908:	429a      	cmp	r2, r3
 801390a:	d001      	beq.n	8013910 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 801390c:	2301      	movs	r3, #1
 801390e:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013912:	2b00      	cmp	r3, #0
 8013914:	d103      	bne.n	801391e <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8013916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801391a:	643b      	str	r3, [r7, #64]	; 0x40
 801391c:	e00c      	b.n	8013938 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	69db      	ldr	r3, [r3, #28]
 8013928:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 801392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013932:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8013934:	2300      	movs	r3, #0
 8013936:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8013938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393c:	429a      	cmp	r2, r3
 801393e:	d1c2      	bne.n	80138c6 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8013940:	4b19      	ldr	r3, [pc, #100]	; (80139a8 <_tx_mutex_prioritize+0x160>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	3b01      	subs	r3, #1
 8013946:	4a18      	ldr	r2, [pc, #96]	; (80139a8 <_tx_mutex_prioritize+0x160>)
 8013948:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 801394a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394e:	429a      	cmp	r2, r3
 8013950:	d01d      	beq.n	801398e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8013952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8013958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801395c:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013962:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8013964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013968:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 801396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801396e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8013970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013974:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8013976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 801397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013980:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8013982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013986:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801398c:	619a      	str	r2, [r3, #24]
 801398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013990:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	f383 8810 	msr	PRIMASK, r3
}
 8013998:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801399a:	f001 fbaf 	bl	80150fc <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801399e:	2300      	movs	r3, #0
#endif
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3748      	adds	r7, #72	; 0x48
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	24014fb4 	.word	0x24014fb4

080139ac <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b090      	sub	sp, #64	; 0x40
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139b6:	f3ef 8310 	mrs	r3, PRIMASK
 80139ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80139bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80139be:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80139c0:	b672      	cpsid	i
    return(int_posture);
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80139c4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d017      	beq.n	80139fe <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	683a      	ldr	r2, [r7, #0]
 80139d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d905      	bls.n	80139ec <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80139ea:	e002      	b.n	80139f2 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	683a      	ldr	r2, [r7, #0]
 80139f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80139f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	f383 8810 	msr	PRIMASK, r3
}
 80139fc:	e089      	b.n	8013b12 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80139fe:	4b47      	ldr	r3, [pc, #284]	; (8013b1c <_tx_mutex_priority_change+0x170>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a08:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8013a0a:	4b45      	ldr	r3, [pc, #276]	; (8013b20 <_tx_mutex_priority_change+0x174>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	3302      	adds	r3, #2
 8013a10:	4a43      	ldr	r2, [pc, #268]	; (8013b20 <_tx_mutex_priority_change+0x174>)
 8013a12:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	220e      	movs	r2, #14
 8013a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2200      	movs	r2, #0
 8013a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8013a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a28:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	f383 8810 	msr	PRIMASK, r3
}
 8013a30:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f001 fc9c 	bl	8015370 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a38:	f3ef 8310 	mrs	r3, PRIMASK
 8013a3c:	623b      	str	r3, [r7, #32]
    return(posture);
 8013a3e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013a40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a42:	b672      	cpsid	i
    return(int_posture);
 8013a44:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8013a46:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a54:	683a      	ldr	r2, [r7, #0]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d905      	bls.n	8013a66 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a64:	e002      	b.n	8013a6c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	683a      	ldr	r2, [r7, #0]
 8013a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f383 8810 	msr	PRIMASK, r3
}
 8013a76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f001 fb79 	bl	8015170 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013a82:	617b      	str	r3, [r7, #20]
    return(posture);
 8013a84:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013a86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a88:	b672      	cpsid	i
    return(int_posture);
 8013a8a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8013a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8013a8e:	4b23      	ldr	r3, [pc, #140]	; (8013b1c <_tx_mutex_priority_change+0x170>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d034      	beq.n	8013b06 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d130      	bne.n	8013b06 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d811      	bhi.n	8013ad4 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d126      	bne.n	8013b06 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8013ab8:	4a18      	ldr	r2, [pc, #96]	; (8013b1c <_tx_mutex_priority_change+0x170>)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8013abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d21f      	bcs.n	8013b06 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aca:	4916      	ldr	r1, [pc, #88]	; (8013b24 <_tx_mutex_priority_change+0x178>)
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013ad2:	e018      	b.n	8013b06 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d212      	bcs.n	8013b06 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d80c      	bhi.n	8013b06 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8013aec:	4a0b      	ldr	r2, [pc, #44]	; (8013b1c <_tx_mutex_priority_change+0x170>)
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8013af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d205      	bcs.n	8013b06 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013afe:	4909      	ldr	r1, [pc, #36]	; (8013b24 <_tx_mutex_priority_change+0x178>)
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f383 8810 	msr	PRIMASK, r3
}
 8013b10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8013b12:	bf00      	nop
 8013b14:	3740      	adds	r7, #64	; 0x40
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	24014f20 	.word	0x24014f20
 8013b20:	24014fb4 	.word	0x24014fb4
 8013b24:	24014f34 	.word	0x24014f34

08013b28 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b0a6      	sub	sp, #152	; 0x98
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8013b30:	2320      	movs	r3, #32
 8013b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b36:	f3ef 8310 	mrs	r3, PRIMASK
 8013b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8013b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8013b3e:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b40:	b672      	cpsid	i
    return(int_posture);
 8013b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8013b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f000 81ff 	beq.w	8013f50 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8013b58:	4ba3      	ldr	r3, [pc, #652]	; (8013de8 <_tx_mutex_put+0x2c0>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d00d      	beq.n	8013b84 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8013b68:	4ba0      	ldr	r3, [pc, #640]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d109      	bne.n	8013b84 <_tx_mutex_put+0x5c>
 8013b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b74:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b78:	f383 8810 	msr	PRIMASK, r3
}
 8013b7c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8013b7e:	231e      	movs	r3, #30
 8013b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8013b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b88:	2b20      	cmp	r3, #32
 8013b8a:	f040 81eb 	bne.w	8013f64 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	1e5a      	subs	r2, r3, #1
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d00a      	beq.n	8013bb6 <_tx_mutex_put+0x8e>
 8013ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013ba4:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba8:	f383 8810 	msr	PRIMASK, r3
}
 8013bac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bb4:	e1d6      	b.n	8013f64 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8013bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d10a      	bne.n	8013bd2 <_tx_mutex_put+0xaa>
 8013bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc4:	f383 8810 	msr	PRIMASK, r3
}
 8013bc8:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bd0:	e1c8      	b.n	8013f64 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8013bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013bd8:	1e5a      	subs	r2, r3, #1
 8013bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8013be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d104      	bne.n	8013bf4 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8013bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bec:	2200      	movs	r2, #0
 8013bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8013bf2:	e019      	b.n	8013c28 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c00:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8013c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013c06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013c08:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8013c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013c10:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8013c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d104      	bne.n	8013c28 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8013c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013c24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	699b      	ldr	r3, [r3, #24]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d110      	bne.n	8013c52 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	691b      	ldr	r3, [r3, #16]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d10c      	bne.n	8013c52 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	60da      	str	r2, [r3, #12]
 8013c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c42:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c46:	f383 8810 	msr	PRIMASK, r3
}
 8013c4a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8013c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c56:	2b20      	cmp	r3, #32
 8013c58:	f040 8184 	bne.w	8013f64 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8013c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d155      	bne.n	8013d20 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013c74:	4b5d      	ldr	r3, [pc, #372]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	4a5c      	ldr	r2, [pc, #368]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013c7c:	6013      	str	r3, [r2, #0]
 8013c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c82:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c86:	f383 8810 	msr	PRIMASK, r3
}
 8013c8a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8013c8c:	2320      	movs	r3, #32
 8013c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013c9c:	e01f      	b.n	8013cde <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8013c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ca2:	691b      	ldr	r3, [r3, #16]
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d10b      	bne.n	8013cc0 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8013ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d904      	bls.n	8013cc0 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8013cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8013cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8013cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d102      	bne.n	8013cde <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8013cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1db      	bne.n	8013c9e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cea:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8013cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8013cee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013cf0:	b672      	cpsid	i
    return(int_posture);
 8013cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013cf8:	4b3c      	ldr	r3, [pc, #240]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	4a3b      	ldr	r2, [pc, #236]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d00:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8013d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8013d0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d203      	bcs.n	8013d20 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8013d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	69db      	ldr	r3, [r3, #28]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d920      	bls.n	8013d6a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d11c      	bne.n	8013d6a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8013d30:	4b2e      	ldr	r3, [pc, #184]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	3301      	adds	r3, #1
 8013d36:	4a2d      	ldr	r2, [pc, #180]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d38:	6013      	str	r3, [r2, #0]
 8013d3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d3e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d42:	f383 8810 	msr	PRIMASK, r3
}
 8013d46:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7ff fd7d 	bl	8013848 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8013d52:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013d56:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d58:	b672      	cpsid	i
    return(int_posture);
 8013d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8013d5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8013d60:	4b22      	ldr	r3, [pc, #136]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	3b01      	subs	r3, #1
 8013d66:	4a21      	ldr	r2, [pc, #132]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d68:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	699b      	ldr	r3, [r3, #24]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d13e      	bne.n	8013df0 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013d72:	4b1e      	ldr	r3, [pc, #120]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	3301      	adds	r3, #1
 8013d78:	4a1c      	ldr	r2, [pc, #112]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013d7a:	6013      	str	r3, [r2, #0]
 8013d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d84:	f383 8810 	msr	PRIMASK, r3
}
 8013d88:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2220      	movs	r2, #32
 8013d8e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d006      	beq.n	8013dac <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7ff fe00 	bl	80139ac <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013dac:	f3ef 8310 	mrs	r3, PRIMASK
 8013db0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013db4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013db6:	b672      	cpsid	i
    return(int_posture);
 8013db8:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8013dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8013dbe:	4b0b      	ldr	r3, [pc, #44]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	3b01      	subs	r3, #1
 8013dc4:	4a09      	ldr	r2, [pc, #36]	; (8013dec <_tx_mutex_put+0x2c4>)
 8013dc6:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	60da      	str	r2, [r3, #12]
 8013dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd6:	f383 8810 	msr	PRIMASK, r3
}
 8013dda:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8013ddc:	f001 f98e 	bl	80150fc <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8013de0:	2300      	movs	r3, #0
 8013de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013de6:	e0bd      	b.n	8013f64 <_tx_mutex_put+0x43c>
 8013de8:	24014f1c 	.word	0x24014f1c
 8013dec:	24014fb4 	.word	0x24014fb4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	699b      	ldr	r3, [r3, #24]
 8013df4:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	691b      	ldr	r3, [r3, #16]
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	d10a      	bne.n	8013e14 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2220      	movs	r2, #32
 8013e12:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8013e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013e1a:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8013e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d10a      	bne.n	8013e38 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8013e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	631a      	str	r2, [r3, #48]	; 0x30
 8013e36:	e016      	b.n	8013e66 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8013e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8013e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e48:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8013e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8013e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e5c:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013e64:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8013e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e68:	1c5a      	adds	r2, r3, #1
 8013e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2201      	movs	r2, #1
 8013e74:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e7a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	69db      	ldr	r3, [r3, #28]
 8013e80:	1e5a      	subs	r2, r3, #1
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	69db      	ldr	r3, [r3, #28]
 8013e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8013e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d103      	bne.n	8013e9a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	619a      	str	r2, [r3, #24]
 8013e98:	e00e      	b.n	8013eb8 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8013e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e9e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ea4:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eaa:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8013eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013eb0:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8013eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013eb6:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013eba:	2200      	movs	r2, #0
 8013ebc:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013ec6:	4b2a      	ldr	r3, [pc, #168]	; (8013f70 <_tx_mutex_put+0x448>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	4a28      	ldr	r2, [pc, #160]	; (8013f70 <_tx_mutex_put+0x448>)
 8013ece:	6013      	str	r3, [r2, #0]
 8013ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013ed4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ed6:	69fb      	ldr	r3, [r7, #28]
 8013ed8:	f383 8810 	msr	PRIMASK, r3
}
 8013edc:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d12d      	bne.n	8013f42 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	69db      	ldr	r3, [r3, #28]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d01c      	beq.n	8013f28 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff fcaa 	bl	8013848 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ef8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013efa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013efc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013efe:	b672      	cpsid	i
    return(int_posture);
 8013f00:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8013f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	699b      	ldr	r3, [r3, #24]
 8013f0a:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8013f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d003      	beq.n	8013f1a <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8013f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	629a      	str	r2, [r3, #40]	; 0x28
 8013f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f1e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	f383 8810 	msr	PRIMASK, r3
}
 8013f26:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8013f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d005      	beq.n	8013f42 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8013f36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8013f3a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013f3e:	f7ff fd35 	bl	80139ac <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8013f42:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013f44:	f001 f914 	bl	8015170 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013f4e:	e009      	b.n	8013f64 <_tx_mutex_put+0x43c>
 8013f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f383 8810 	msr	PRIMASK, r3
}
 8013f5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8013f5e:	231e      	movs	r3, #30
 8013f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8013f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3798      	adds	r7, #152	; 0x98
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	24014fb4 	.word	0x24014fb4

08013f74 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b08e      	sub	sp, #56	; 0x38
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f82:	623b      	str	r3, [r7, #32]
    return(posture);
 8013f84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013f86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f88:	b672      	cpsid	i
    return(int_posture);
 8013f8a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8013f8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f92:	4a37      	ldr	r2, [pc, #220]	; (8014070 <_tx_queue_cleanup+0xfc>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d161      	bne.n	801405c <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013f9e:	683a      	ldr	r2, [r7, #0]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d15b      	bne.n	801405c <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8013faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d055      	beq.n	801405c <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8013fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a2f      	ldr	r2, [pc, #188]	; (8014074 <_tx_queue_cleanup+0x100>)
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d150      	bne.n	801405c <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8013fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d04c      	beq.n	801405c <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8013fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fcc:	1e5a      	subs	r2, r3, #1
 8013fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d103      	bne.n	8013fe6 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8013fe4:	e013      	b.n	801400e <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fea:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ffc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8013ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	429a      	cmp	r2, r3
 8014006:	d102      	bne.n	801400e <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8014008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801400c:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014012:	2b05      	cmp	r3, #5
 8014014:	d122      	bne.n	801405c <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014018:	691b      	ldr	r3, [r3, #16]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	220b      	movs	r2, #11
 8014022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014026:	e003      	b.n	8014030 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	220a      	movs	r2, #10
 801402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014030:	4b11      	ldr	r3, [pc, #68]	; (8014078 <_tx_queue_cleanup+0x104>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3301      	adds	r3, #1
 8014036:	4a10      	ldr	r2, [pc, #64]	; (8014078 <_tx_queue_cleanup+0x104>)
 8014038:	6013      	str	r3, [r2, #0]
 801403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801403c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	f383 8810 	msr	PRIMASK, r3
}
 8014044:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f001 f892 	bl	8015170 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801404c:	f3ef 8310 	mrs	r3, PRIMASK
 8014050:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014052:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014054:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014056:	b672      	cpsid	i
    return(int_posture);
 8014058:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801405a:	637b      	str	r3, [r7, #52]	; 0x34
 801405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801405e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f383 8810 	msr	PRIMASK, r3
}
 8014066:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014068:	bf00      	nop
 801406a:	3738      	adds	r7, #56	; 0x38
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	08013f75 	.word	0x08013f75
 8014074:	51554555 	.word	0x51554555
 8014078:	24014fb4 	.word	0x24014fb4

0801407c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b08c      	sub	sp, #48	; 0x30
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 801408a:	2238      	movs	r2, #56	; 0x38
 801408c:	2100      	movs	r1, #0
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	f002 fa82 	bl	8016598 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	68ba      	ldr	r2, [r7, #8]
 8014098:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80140aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	fb02 f303 	mul.w	r3, r2, r3
 80140b4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	699a      	ldr	r2, [r3, #24]
 80140c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	441a      	add	r2, r3
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140da:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140e0:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140e2:	f3ef 8310 	mrs	r3, PRIMASK
 80140e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80140e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80140ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80140ec:	b672      	cpsid	i
    return(int_posture);
 80140ee:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 80140f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	4a18      	ldr	r2, [pc, #96]	; (8014158 <_tx_queue_create+0xdc>)
 80140f6:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80140f8:	4b18      	ldr	r3, [pc, #96]	; (801415c <_tx_queue_create+0xe0>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d109      	bne.n	8014114 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8014100:	4a17      	ldr	r2, [pc, #92]	; (8014160 <_tx_queue_create+0xe4>)
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	635a      	str	r2, [r3, #52]	; 0x34
 8014112:	e011      	b.n	8014138 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8014114:	4b12      	ldr	r3, [pc, #72]	; (8014160 <_tx_queue_create+0xe4>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 801411a:	6a3b      	ldr	r3, [r7, #32]
 801411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801411e:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8014120:	6a3b      	ldr	r3, [r7, #32]
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	69fa      	ldr	r2, [r7, #28]
 8014130:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	6a3a      	ldr	r2, [r7, #32]
 8014136:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8014138:	4b08      	ldr	r3, [pc, #32]	; (801415c <_tx_queue_create+0xe0>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	3301      	adds	r3, #1
 801413e:	4a07      	ldr	r2, [pc, #28]	; (801415c <_tx_queue_create+0xe0>)
 8014140:	6013      	str	r3, [r2, #0]
 8014142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014144:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	f383 8810 	msr	PRIMASK, r3
}
 801414c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3730      	adds	r7, #48	; 0x30
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	51554555 	.word	0x51554555
 801415c:	24014ef0 	.word	0x24014ef0
 8014160:	24014eec 	.word	0x24014eec

08014164 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b096      	sub	sp, #88	; 0x58
 8014168:	af00      	add	r7, sp, #0
 801416a:	60f8      	str	r0, [r7, #12]
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014170:	2300      	movs	r3, #0
 8014172:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014174:	f3ef 8310 	mrs	r3, PRIMASK
 8014178:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801417c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801417e:	b672      	cpsid	i
    return(int_posture);
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8014182:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014188:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	691b      	ldr	r3, [r3, #16]
 801418e:	2b00      	cmp	r3, #0
 8014190:	f000 8136 	beq.w	8014400 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014196:	2b00      	cmp	r3, #0
 8014198:	d13c      	bne.n	8014214 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	6a1b      	ldr	r3, [r3, #32]
 801419e:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	689b      	ldr	r3, [r3, #8]
 80141a8:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80141aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141ac:	1d13      	adds	r3, r2, #4
 80141ae:	657b      	str	r3, [r7, #84]	; 0x54
 80141b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141b2:	1d19      	adds	r1, r3, #4
 80141b4:	6539      	str	r1, [r7, #80]	; 0x50
 80141b6:	6812      	ldr	r2, [r2, #0]
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d90e      	bls.n	80141de <_tx_queue_receive+0x7a>
 80141c0:	e007      	b.n	80141d2 <_tx_queue_receive+0x6e>
 80141c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141c4:	1d13      	adds	r3, r2, #4
 80141c6:	657b      	str	r3, [r7, #84]	; 0x54
 80141c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141ca:	1d19      	adds	r1, r3, #4
 80141cc:	6539      	str	r1, [r7, #80]	; 0x50
 80141ce:	6812      	ldr	r2, [r2, #0]
 80141d0:	601a      	str	r2, [r3, #0]
 80141d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d4:	3b01      	subs	r3, #1
 80141d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d1f1      	bne.n	80141c2 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	69db      	ldr	r3, [r3, #28]
 80141e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d102      	bne.n	80141ee <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	699b      	ldr	r3, [r3, #24]
 80141ec:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141f2:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	695b      	ldr	r3, [r3, #20]
 80141f8:	1c5a      	adds	r2, r3, #1
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	1e5a      	subs	r2, r3, #1
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	611a      	str	r2, [r3, #16]
 8014208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801420a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	f383 8810 	msr	PRIMASK, r3
}
 8014212:	e163      	b.n	80144dc <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014218:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 801421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801421c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014220:	2b01      	cmp	r3, #1
 8014222:	d153      	bne.n	80142cc <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014228:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014236:	1d13      	adds	r3, r2, #4
 8014238:	657b      	str	r3, [r7, #84]	; 0x54
 801423a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801423c:	1d19      	adds	r1, r3, #4
 801423e:	6539      	str	r1, [r7, #80]	; 0x50
 8014240:	6812      	ldr	r2, [r2, #0]
 8014242:	601a      	str	r2, [r3, #0]
 8014244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014246:	2b01      	cmp	r3, #1
 8014248:	d90e      	bls.n	8014268 <_tx_queue_receive+0x104>
 801424a:	e007      	b.n	801425c <_tx_queue_receive+0xf8>
 801424c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801424e:	1d13      	adds	r3, r2, #4
 8014250:	657b      	str	r3, [r7, #84]	; 0x54
 8014252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014254:	1d19      	adds	r1, r3, #4
 8014256:	6539      	str	r1, [r7, #80]	; 0x50
 8014258:	6812      	ldr	r2, [r2, #0]
 801425a:	601a      	str	r2, [r3, #0]
 801425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801425e:	3b01      	subs	r3, #1
 8014260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1f1      	bne.n	801424c <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801426a:	3b01      	subs	r3, #1
 801426c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 801426e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014270:	2b00      	cmp	r3, #0
 8014272:	d103      	bne.n	801427c <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2200      	movs	r2, #0
 8014278:	629a      	str	r2, [r3, #40]	; 0x28
 801427a:	e00e      	b.n	801429a <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 801427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014280:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014286:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8014288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801428c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 801428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014292:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8014294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014298:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801429e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80142a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a2:	2200      	movs	r2, #0
 80142a4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80142a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a8:	2200      	movs	r2, #0
 80142aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80142ae:	4b8e      	ldr	r3, [pc, #568]	; (80144e8 <_tx_queue_receive+0x384>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	3301      	adds	r3, #1
 80142b4:	4a8c      	ldr	r2, [pc, #560]	; (80144e8 <_tx_queue_receive+0x384>)
 80142b6:	6013      	str	r3, [r2, #0]
 80142b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142be:	f383 8810 	msr	PRIMASK, r3
}
 80142c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80142c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80142c6:	f000 ff53 	bl	8015170 <_tx_thread_system_resume>
 80142ca:	e107      	b.n	80144dc <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	6a1b      	ldr	r3, [r3, #32]
 80142d0:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	689b      	ldr	r3, [r3, #8]
 80142da:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80142dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80142de:	1d13      	adds	r3, r2, #4
 80142e0:	657b      	str	r3, [r7, #84]	; 0x54
 80142e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142e4:	1d19      	adds	r1, r3, #4
 80142e6:	6539      	str	r1, [r7, #80]	; 0x50
 80142e8:	6812      	ldr	r2, [r2, #0]
 80142ea:	601a      	str	r2, [r3, #0]
 80142ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d90e      	bls.n	8014310 <_tx_queue_receive+0x1ac>
 80142f2:	e007      	b.n	8014304 <_tx_queue_receive+0x1a0>
 80142f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80142f6:	1d13      	adds	r3, r2, #4
 80142f8:	657b      	str	r3, [r7, #84]	; 0x54
 80142fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142fc:	1d19      	adds	r1, r3, #4
 80142fe:	6539      	str	r1, [r7, #80]	; 0x50
 8014300:	6812      	ldr	r2, [r2, #0]
 8014302:	601a      	str	r2, [r3, #0]
 8014304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014306:	3b01      	subs	r3, #1
 8014308:	64fb      	str	r3, [r7, #76]	; 0x4c
 801430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1f1      	bne.n	80142f4 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	69db      	ldr	r3, [r3, #28]
 8014314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014316:	429a      	cmp	r2, r3
 8014318:	d102      	bne.n	8014320 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	699b      	ldr	r3, [r3, #24]
 801431e:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014324:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8014326:	4b70      	ldr	r3, [pc, #448]	; (80144e8 <_tx_queue_receive+0x384>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3301      	adds	r3, #1
 801432c:	4a6e      	ldr	r2, [pc, #440]	; (80144e8 <_tx_queue_receive+0x384>)
 801432e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014330:	4b6d      	ldr	r3, [pc, #436]	; (80144e8 <_tx_queue_receive+0x384>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	3b01      	subs	r3, #1
 8014336:	4a6c      	ldr	r2, [pc, #432]	; (80144e8 <_tx_queue_receive+0x384>)
 8014338:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801433c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801433e:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014344:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801434c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801434e:	1d13      	adds	r3, r2, #4
 8014350:	657b      	str	r3, [r7, #84]	; 0x54
 8014352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014354:	1d19      	adds	r1, r3, #4
 8014356:	6539      	str	r1, [r7, #80]	; 0x50
 8014358:	6812      	ldr	r2, [r2, #0]
 801435a:	601a      	str	r2, [r3, #0]
 801435c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435e:	2b01      	cmp	r3, #1
 8014360:	d90e      	bls.n	8014380 <_tx_queue_receive+0x21c>
 8014362:	e007      	b.n	8014374 <_tx_queue_receive+0x210>
 8014364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014366:	1d13      	adds	r3, r2, #4
 8014368:	657b      	str	r3, [r7, #84]	; 0x54
 801436a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801436c:	1d19      	adds	r1, r3, #4
 801436e:	6539      	str	r1, [r7, #80]	; 0x50
 8014370:	6812      	ldr	r2, [r2, #0]
 8014372:	601a      	str	r2, [r3, #0]
 8014374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014376:	3b01      	subs	r3, #1
 8014378:	64fb      	str	r3, [r7, #76]	; 0x4c
 801437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d1f1      	bne.n	8014364 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	69db      	ldr	r3, [r3, #28]
 8014384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014386:	429a      	cmp	r2, r3
 8014388:	d102      	bne.n	8014390 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	699b      	ldr	r3, [r3, #24]
 801438e:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014394:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801439a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 801439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801439e:	3b01      	subs	r3, #1
 80143a0:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80143a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d103      	bne.n	80143b0 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2200      	movs	r2, #0
 80143ac:	629a      	str	r2, [r3, #40]	; 0x28
 80143ae:	e00e      	b.n	80143ce <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80143b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143b4:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143ba:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80143bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143c0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80143c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143c6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 80143c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143cc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80143d2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80143d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143d6:	2200      	movs	r2, #0
 80143d8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80143da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143dc:	2200      	movs	r2, #0
 80143de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80143e2:	4b41      	ldr	r3, [pc, #260]	; (80144e8 <_tx_queue_receive+0x384>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3301      	adds	r3, #1
 80143e8:	4a3f      	ldr	r2, [pc, #252]	; (80144e8 <_tx_queue_receive+0x384>)
 80143ea:	6013      	str	r3, [r2, #0]
 80143ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143f0:	6a3b      	ldr	r3, [r7, #32]
 80143f2:	f383 8810 	msr	PRIMASK, r3
}
 80143f6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80143f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80143fa:	f000 feb9 	bl	8015170 <_tx_thread_system_resume>
 80143fe:	e06d      	b.n	80144dc <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d062      	beq.n	80144cc <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014406:	4b38      	ldr	r3, [pc, #224]	; (80144e8 <_tx_queue_receive+0x384>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d008      	beq.n	8014420 <_tx_queue_receive+0x2bc>
 801440e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014410:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	f383 8810 	msr	PRIMASK, r3
}
 8014418:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 801441a:	230a      	movs	r3, #10
 801441c:	64bb      	str	r3, [r7, #72]	; 0x48
 801441e:	e05d      	b.n	80144dc <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014420:	4b32      	ldr	r3, [pc, #200]	; (80144ec <_tx_queue_receive+0x388>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014428:	4a31      	ldr	r2, [pc, #196]	; (80144f0 <_tx_queue_receive+0x38c>)
 801442a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801442c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801442e:	68fa      	ldr	r2, [r7, #12]
 8014430:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8014432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801443a:	2200      	movs	r2, #0
 801443c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014446:	1c5a      	adds	r2, r3, #1
 8014448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801444a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 801444e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014450:	2b00      	cmp	r3, #0
 8014452:	d109      	bne.n	8014468 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014458:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801445a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801445c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801445e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014464:	675a      	str	r2, [r3, #116]	; 0x74
 8014466:	e011      	b.n	801448c <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014472:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014478:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801447a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801447c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801447e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014484:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801448a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801448e:	1c5a      	adds	r2, r3, #1
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014496:	2205      	movs	r2, #5
 8014498:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801449c:	2201      	movs	r2, #1
 801449e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80144a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80144a6:	4b10      	ldr	r3, [pc, #64]	; (80144e8 <_tx_queue_receive+0x384>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	3301      	adds	r3, #1
 80144ac:	4a0e      	ldr	r2, [pc, #56]	; (80144e8 <_tx_queue_receive+0x384>)
 80144ae:	6013      	str	r3, [r2, #0]
 80144b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	f383 8810 	msr	PRIMASK, r3
}
 80144ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80144bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144be:	f000 ff57 	bl	8015370 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80144c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80144ca:	e007      	b.n	80144dc <_tx_queue_receive+0x378>
 80144cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	f383 8810 	msr	PRIMASK, r3
}
 80144d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80144d8:	230a      	movs	r3, #10
 80144da:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 80144dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3758      	adds	r7, #88	; 0x58
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	24014fb4 	.word	0x24014fb4
 80144ec:	24014f1c 	.word	0x24014f1c
 80144f0:	08013f75 	.word	0x08013f75

080144f4 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b094      	sub	sp, #80	; 0x50
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014500:	2300      	movs	r3, #0
 8014502:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014504:	f3ef 8310 	mrs	r3, PRIMASK
 8014508:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801450c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801450e:	b672      	cpsid	i
    return(int_posture);
 8014510:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8014512:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014518:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	695b      	ldr	r3, [r3, #20]
 801451e:	2b00      	cmp	r3, #0
 8014520:	f000 809b 	beq.w	801465a <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014526:	2b00      	cmp	r3, #0
 8014528:	d13c      	bne.n	80145a4 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	695b      	ldr	r3, [r3, #20]
 801452e:	1e5a      	subs	r2, r3, #1
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014546:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801454e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014550:	1d13      	adds	r3, r2, #4
 8014552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014556:	1d19      	adds	r1, r3, #4
 8014558:	64b9      	str	r1, [r7, #72]	; 0x48
 801455a:	6812      	ldr	r2, [r2, #0]
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014560:	2b01      	cmp	r3, #1
 8014562:	d90e      	bls.n	8014582 <_tx_queue_send+0x8e>
 8014564:	e007      	b.n	8014576 <_tx_queue_send+0x82>
 8014566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014568:	1d13      	adds	r3, r2, #4
 801456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801456e:	1d19      	adds	r1, r3, #4
 8014570:	64b9      	str	r1, [r7, #72]	; 0x48
 8014572:	6812      	ldr	r2, [r2, #0]
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014578:	3b01      	subs	r3, #1
 801457a:	647b      	str	r3, [r7, #68]	; 0x44
 801457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801457e:	2b00      	cmp	r3, #0
 8014580:	d1f1      	bne.n	8014566 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	69db      	ldr	r3, [r3, #28]
 8014586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014588:	429a      	cmp	r2, r3
 801458a:	d102      	bne.n	8014592 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	699b      	ldr	r3, [r3, #24]
 8014590:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014596:	625a      	str	r2, [r3, #36]	; 0x24
 8014598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801459a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801459c:	6a3b      	ldr	r3, [r7, #32]
 801459e:	f383 8810 	msr	PRIMASK, r3
}
 80145a2:	e0c8      	b.n	8014736 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145a8:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80145aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ac:	3b01      	subs	r3, #1
 80145ae:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80145b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d103      	bne.n	80145be <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2200      	movs	r2, #0
 80145ba:	629a      	str	r2, [r3, #40]	; 0x28
 80145bc:	e012      	b.n	80145e4 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80145be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80145c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ca:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145d0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80145d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145dc:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 80145de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145e2:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145e8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80145ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145ec:	2200      	movs	r2, #0
 80145ee:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80145f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145f8:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	689b      	ldr	r3, [r3, #8]
 80145fe:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014602:	1d13      	adds	r3, r2, #4
 8014604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014608:	1d19      	adds	r1, r3, #4
 801460a:	64b9      	str	r1, [r7, #72]	; 0x48
 801460c:	6812      	ldr	r2, [r2, #0]
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014612:	2b01      	cmp	r3, #1
 8014614:	d90e      	bls.n	8014634 <_tx_queue_send+0x140>
 8014616:	e007      	b.n	8014628 <_tx_queue_send+0x134>
 8014618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801461a:	1d13      	adds	r3, r2, #4
 801461c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801461e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014620:	1d19      	adds	r1, r3, #4
 8014622:	64b9      	str	r1, [r7, #72]	; 0x48
 8014624:	6812      	ldr	r2, [r2, #0]
 8014626:	601a      	str	r2, [r3, #0]
 8014628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801462a:	3b01      	subs	r3, #1
 801462c:	647b      	str	r3, [r7, #68]	; 0x44
 801462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014630:	2b00      	cmp	r3, #0
 8014632:	d1f1      	bne.n	8014618 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014636:	2200      	movs	r2, #0
 8014638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801463c:	4b40      	ldr	r3, [pc, #256]	; (8014740 <_tx_queue_send+0x24c>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	3301      	adds	r3, #1
 8014642:	4a3f      	ldr	r2, [pc, #252]	; (8014740 <_tx_queue_send+0x24c>)
 8014644:	6013      	str	r3, [r2, #0]
 8014646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014648:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	f383 8810 	msr	PRIMASK, r3
}
 8014650:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8014652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014654:	f000 fd8c 	bl	8015170 <_tx_thread_system_resume>
 8014658:	e06d      	b.n	8014736 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d062      	beq.n	8014726 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014660:	4b37      	ldr	r3, [pc, #220]	; (8014740 <_tx_queue_send+0x24c>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d008      	beq.n	801467a <_tx_queue_send+0x186>
 8014668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801466a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	f383 8810 	msr	PRIMASK, r3
}
 8014672:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8014674:	230b      	movs	r3, #11
 8014676:	643b      	str	r3, [r7, #64]	; 0x40
 8014678:	e05d      	b.n	8014736 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801467a:	4b32      	ldr	r3, [pc, #200]	; (8014744 <_tx_queue_send+0x250>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014682:	4a31      	ldr	r2, [pc, #196]	; (8014748 <_tx_queue_send+0x254>)
 8014684:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 801468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468e:	68ba      	ldr	r2, [r7, #8]
 8014690:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014694:	2200      	movs	r2, #0
 8014696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801469c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80146a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d109      	bne.n	80146c2 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146b2:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80146b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146b8:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80146ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146be:	675a      	str	r2, [r3, #116]	; 0x74
 80146c0:	e011      	b.n	80146e6 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146c6:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80146c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146cc:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80146ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80146d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146d8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80146da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146de:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80146e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146e4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80146e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e8:	1c5a      	adds	r2, r3, #1
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80146ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f0:	2205      	movs	r2, #5
 80146f2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80146f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f6:	2201      	movs	r2, #1
 80146f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80146fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014700:	4b0f      	ldr	r3, [pc, #60]	; (8014740 <_tx_queue_send+0x24c>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	3301      	adds	r3, #1
 8014706:	4a0e      	ldr	r2, [pc, #56]	; (8014740 <_tx_queue_send+0x24c>)
 8014708:	6013      	str	r3, [r2, #0]
 801470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801470c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	f383 8810 	msr	PRIMASK, r3
}
 8014714:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014716:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014718:	f000 fe2a 	bl	8015370 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014722:	643b      	str	r3, [r7, #64]	; 0x40
 8014724:	e007      	b.n	8014736 <_tx_queue_send+0x242>
 8014726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014728:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	f383 8810 	msr	PRIMASK, r3
}
 8014730:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8014732:	230b      	movs	r3, #11
 8014734:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8014736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014738:	4618      	mov	r0, r3
 801473a:	3750      	adds	r7, #80	; 0x50
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	24014fb4 	.word	0x24014fb4
 8014744:	24014f1c 	.word	0x24014f1c
 8014748:	08013f75 	.word	0x08013f75

0801474c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08e      	sub	sp, #56	; 0x38
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014756:	f3ef 8310 	mrs	r3, PRIMASK
 801475a:	623b      	str	r3, [r7, #32]
    return(posture);
 801475c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801475e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014760:	b672      	cpsid	i
    return(int_posture);
 8014762:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8014764:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801476a:	4a33      	ldr	r2, [pc, #204]	; (8014838 <_tx_semaphore_cleanup+0xec>)
 801476c:	4293      	cmp	r3, r2
 801476e:	d158      	bne.n	8014822 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014776:	683a      	ldr	r2, [r7, #0]
 8014778:	429a      	cmp	r2, r3
 801477a:	d152      	bne.n	8014822 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014780:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8014782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014784:	2b00      	cmp	r3, #0
 8014786:	d04c      	beq.n	8014822 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8014788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a2b      	ldr	r2, [pc, #172]	; (801483c <_tx_semaphore_cleanup+0xf0>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d147      	bne.n	8014822 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	691b      	ldr	r3, [r3, #16]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d043      	beq.n	8014822 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	1e5a      	subs	r2, r3, #1
 80147a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80147aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d103      	bne.n	80147be <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80147b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b8:	2200      	movs	r2, #0
 80147ba:	60da      	str	r2, [r3, #12]
 80147bc:	e013      	b.n	80147e6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147c8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147ce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80147d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147d4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80147d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d102      	bne.n	80147e6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80147e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147e4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ea:	2b06      	cmp	r3, #6
 80147ec:	d119      	bne.n	8014822 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	220d      	movs	r2, #13
 80147f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80147f6:	4b12      	ldr	r3, [pc, #72]	; (8014840 <_tx_semaphore_cleanup+0xf4>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	3301      	adds	r3, #1
 80147fc:	4a10      	ldr	r2, [pc, #64]	; (8014840 <_tx_semaphore_cleanup+0xf4>)
 80147fe:	6013      	str	r3, [r2, #0]
 8014800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014802:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	f383 8810 	msr	PRIMASK, r3
}
 801480a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fcaf 	bl	8015170 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014812:	f3ef 8310 	mrs	r3, PRIMASK
 8014816:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014818:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801481a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801481c:	b672      	cpsid	i
    return(int_posture);
 801481e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014820:	637b      	str	r3, [r7, #52]	; 0x34
 8014822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014824:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	f383 8810 	msr	PRIMASK, r3
}
 801482c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801482e:	bf00      	nop
 8014830:	3738      	adds	r7, #56	; 0x38
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	0801474d 	.word	0x0801474d
 801483c:	53454d41 	.word	0x53454d41
 8014840:	24014fb4 	.word	0x24014fb4

08014844 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b08a      	sub	sp, #40	; 0x28
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8014850:	221c      	movs	r2, #28
 8014852:	2100      	movs	r1, #0
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f001 fe9f 	bl	8016598 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	68ba      	ldr	r2, [r7, #8]
 801485e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014866:	f3ef 8310 	mrs	r3, PRIMASK
 801486a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801486c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801486e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014870:	b672      	cpsid	i
    return(int_posture);
 8014872:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8014874:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	4a18      	ldr	r2, [pc, #96]	; (80148dc <_tx_semaphore_create+0x98>)
 801487a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801487c:	4b18      	ldr	r3, [pc, #96]	; (80148e0 <_tx_semaphore_create+0x9c>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d109      	bne.n	8014898 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8014884:	4a17      	ldr	r2, [pc, #92]	; (80148e4 <_tx_semaphore_create+0xa0>)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	68fa      	ldr	r2, [r7, #12]
 801488e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	619a      	str	r2, [r3, #24]
 8014896:	e011      	b.n	80148bc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8014898:	4b12      	ldr	r3, [pc, #72]	; (80148e4 <_tx_semaphore_create+0xa0>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	699b      	ldr	r3, [r3, #24]
 80148a2:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80148a4:	6a3b      	ldr	r3, [r7, #32]
 80148a6:	68fa      	ldr	r2, [r7, #12]
 80148a8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	68fa      	ldr	r2, [r7, #12]
 80148ae:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	69fa      	ldr	r2, [r7, #28]
 80148b4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	6a3a      	ldr	r2, [r7, #32]
 80148ba:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80148bc:	4b08      	ldr	r3, [pc, #32]	; (80148e0 <_tx_semaphore_create+0x9c>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	3301      	adds	r3, #1
 80148c2:	4a07      	ldr	r2, [pc, #28]	; (80148e0 <_tx_semaphore_create+0x9c>)
 80148c4:	6013      	str	r3, [r2, #0]
 80148c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	f383 8810 	msr	PRIMASK, r3
}
 80148d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3728      	adds	r7, #40	; 0x28
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	53454d41 	.word	0x53454d41
 80148e0:	24014ee8 	.word	0x24014ee8
 80148e4:	24014ee4 	.word	0x24014ee4

080148e8 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b092      	sub	sp, #72	; 0x48
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148f0:	f3ef 8310 	mrs	r3, PRIMASK
 80148f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80148f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80148f8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80148fa:	b672      	cpsid	i
    return(int_posture);
 80148fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80148fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8014906:	4b3d      	ldr	r3, [pc, #244]	; (80149fc <_tx_semaphore_delete+0x114>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	3b01      	subs	r3, #1
 801490c:	4a3b      	ldr	r2, [pc, #236]	; (80149fc <_tx_semaphore_delete+0x114>)
 801490e:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8014910:	4b3a      	ldr	r3, [pc, #232]	; (80149fc <_tx_semaphore_delete+0x114>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d103      	bne.n	8014920 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8014918:	4b39      	ldr	r3, [pc, #228]	; (8014a00 <_tx_semaphore_delete+0x118>)
 801491a:	2200      	movs	r2, #0
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	e013      	b.n	8014948 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	695b      	ldr	r3, [r3, #20]
 8014924:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	699b      	ldr	r3, [r3, #24]
 801492a:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 801492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014930:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8014932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014936:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8014938:	4b31      	ldr	r3, [pc, #196]	; (8014a00 <_tx_semaphore_delete+0x118>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	429a      	cmp	r2, r3
 8014940:	d102      	bne.n	8014948 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8014942:	4a2f      	ldr	r2, [pc, #188]	; (8014a00 <_tx_semaphore_delete+0x118>)
 8014944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014946:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014948:	4b2e      	ldr	r3, [pc, #184]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	3301      	adds	r3, #1
 801494e:	4a2d      	ldr	r2, [pc, #180]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 8014950:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2200      	movs	r2, #0
 801495c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	691b      	ldr	r3, [r3, #16]
 8014962:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	611a      	str	r2, [r3, #16]
 801496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801496c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	f383 8810 	msr	PRIMASK, r3
}
 8014974:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8014976:	e024      	b.n	80149c2 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8014978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801497a:	3b01      	subs	r3, #1
 801497c:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801497e:	f3ef 8310 	mrs	r3, PRIMASK
 8014982:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014984:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014986:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014988:	b672      	cpsid	i
    return(int_posture);
 801498a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 801498c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801498e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014990:	2200      	movs	r2, #0
 8014992:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8014994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014996:	2201      	movs	r2, #1
 8014998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 801499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80149a2:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	3301      	adds	r3, #1
 80149a8:	4a16      	ldr	r2, [pc, #88]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 80149aa:	6013      	str	r3, [r2, #0]
 80149ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149b0:	6a3b      	ldr	r3, [r7, #32]
 80149b2:	f383 8810 	msr	PRIMASK, r3
}
 80149b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80149b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80149ba:	f000 fbd9 	bl	8015170 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80149be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c0:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80149c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1d7      	bne.n	8014978 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149c8:	f3ef 8310 	mrs	r3, PRIMASK
 80149cc:	613b      	str	r3, [r7, #16]
    return(posture);
 80149ce:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80149d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80149d2:	b672      	cpsid	i
    return(int_posture);
 80149d4:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80149d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80149d8:	4b0a      	ldr	r3, [pc, #40]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	3b01      	subs	r3, #1
 80149de:	4a09      	ldr	r2, [pc, #36]	; (8014a04 <_tx_semaphore_delete+0x11c>)
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	f383 8810 	msr	PRIMASK, r3
}
 80149ec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80149ee:	f000 fb85 	bl	80150fc <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80149f2:	2300      	movs	r3, #0
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3748      	adds	r7, #72	; 0x48
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	24014ee8 	.word	0x24014ee8
 8014a00:	24014ee4 	.word	0x24014ee4
 8014a04:	24014fb4 	.word	0x24014fb4

08014a08 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b08e      	sub	sp, #56	; 0x38
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014a12:	2300      	movs	r3, #0
 8014a14:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a16:	f3ef 8310 	mrs	r3, PRIMASK
 8014a1a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014a1c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014a1e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a20:	b672      	cpsid	i
    return(int_posture);
 8014a22:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8014a24:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00a      	beq.n	8014a44 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	689b      	ldr	r3, [r3, #8]
 8014a32:	1e5a      	subs	r2, r3, #1
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	609a      	str	r2, [r3, #8]
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	f383 8810 	msr	PRIMASK, r3
}
 8014a42:	e068      	b.n	8014b16 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d05d      	beq.n	8014b06 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014a4a:	4b35      	ldr	r3, [pc, #212]	; (8014b20 <_tx_semaphore_get+0x118>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d008      	beq.n	8014a64 <_tx_semaphore_get+0x5c>
 8014a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f383 8810 	msr	PRIMASK, r3
}
 8014a5c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8014a5e:	230d      	movs	r3, #13
 8014a60:	637b      	str	r3, [r7, #52]	; 0x34
 8014a62:	e058      	b.n	8014b16 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014a64:	4b2f      	ldr	r3, [pc, #188]	; (8014b24 <_tx_semaphore_get+0x11c>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8014a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6c:	4a2e      	ldr	r2, [pc, #184]	; (8014b28 <_tx_semaphore_get+0x120>)
 8014a6e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8014a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014a7c:	1c5a      	adds	r2, r3, #1
 8014a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d109      	bne.n	8014aa0 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a90:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a96:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8014a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a9c:	675a      	str	r2, [r3, #116]	; 0x74
 8014a9e:	e011      	b.n	8014ac4 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	68db      	ldr	r3, [r3, #12]
 8014aa4:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aaa:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ab0:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ab6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014abc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ac2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	1c5a      	adds	r2, r3, #1
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8014ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad0:	2206      	movs	r2, #6
 8014ad2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014adc:	683a      	ldr	r2, [r7, #0]
 8014ade:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014ae0:	4b0f      	ldr	r3, [pc, #60]	; (8014b20 <_tx_semaphore_get+0x118>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	4a0e      	ldr	r2, [pc, #56]	; (8014b20 <_tx_semaphore_get+0x118>)
 8014ae8:	6013      	str	r3, [r2, #0]
 8014aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	f383 8810 	msr	PRIMASK, r3
}
 8014af4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014af8:	f000 fc3a 	bl	8015370 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014b02:	637b      	str	r3, [r7, #52]	; 0x34
 8014b04:	e007      	b.n	8014b16 <_tx_semaphore_get+0x10e>
 8014b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b08:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f383 8810 	msr	PRIMASK, r3
}
 8014b10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8014b12:	230d      	movs	r3, #13
 8014b14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8014b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3738      	adds	r7, #56	; 0x38
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	24014fb4 	.word	0x24014fb4
 8014b24:	24014f1c 	.word	0x24014f1c
 8014b28:	0801474d 	.word	0x0801474d

08014b2c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08c      	sub	sp, #48	; 0x30
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b34:	f3ef 8310 	mrs	r3, PRIMASK
 8014b38:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014b3a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014b3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b3e:	b672      	cpsid	i
    return(int_posture);
 8014b40:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8014b42:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	691b      	ldr	r3, [r3, #16]
 8014b48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8014b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d10a      	bne.n	8014b66 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	689b      	ldr	r3, [r3, #8]
 8014b54:	1c5a      	adds	r2, r3, #1
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	609a      	str	r2, [r3, #8]
 8014b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	f383 8810 	msr	PRIMASK, r3
}
 8014b64:	e033      	b.n	8014bce <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8014b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6e:	3b01      	subs	r3, #1
 8014b70:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d103      	bne.n	8014b80 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	60da      	str	r2, [r3, #12]
 8014b7e:	e00e      	b.n	8014b9e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b84:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6a3a      	ldr	r2, [r7, #32]
 8014b8a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b90:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014b92:	6a3b      	ldr	r3, [r7, #32]
 8014b94:	69fa      	ldr	r2, [r7, #28]
 8014b96:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	6a3a      	ldr	r2, [r7, #32]
 8014b9c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ba2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bac:	2200      	movs	r2, #0
 8014bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014bb2:	4b09      	ldr	r3, [pc, #36]	; (8014bd8 <_tx_semaphore_put+0xac>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	4a07      	ldr	r2, [pc, #28]	; (8014bd8 <_tx_semaphore_put+0xac>)
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f383 8810 	msr	PRIMASK, r3
}
 8014bc6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bca:	f000 fad1 	bl	8015170 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8014bce:	2300      	movs	r3, #0
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3730      	adds	r7, #48	; 0x30
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	24014fb4 	.word	0x24014fb4

08014bdc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b092      	sub	sp, #72	; 0x48
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	607a      	str	r2, [r7, #4]
 8014be8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8014bea:	2300      	movs	r3, #0
 8014bec:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8014bee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014bf0:	21ef      	movs	r1, #239	; 0xef
 8014bf2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014bf4:	f001 fcd0 	bl	8016598 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8014bf8:	22b0      	movs	r2, #176	; 0xb0
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	68f8      	ldr	r0, [r7, #12]
 8014bfe:	f001 fccb 	bl	8016598 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	68ba      	ldr	r2, [r7, #8]
 8014c06:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	683a      	ldr	r2, [r7, #0]
 8014c12:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c18:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c1e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c24:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c32:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c38:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	2220      	movs	r2, #32
 8014c3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8014c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c4c:	4413      	add	r3, r2
 8014c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c54:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8014c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d007      	beq.n	8014c6e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2200      	movs	r2, #0
 8014c62:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014c6c:	e006      	b.n	8014c7c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c72:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2203      	movs	r2, #3
 8014c80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	4a48      	ldr	r2, [pc, #288]	; (8014da8 <_tx_thread_create+0x1cc>)
 8014c86:	655a      	str	r2, [r3, #84]	; 0x54
 8014c88:	68fa      	ldr	r2, [r7, #12]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8014c8e:	4947      	ldr	r1, [pc, #284]	; (8014dac <_tx_thread_create+0x1d0>)
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f7eb fbc5 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c96:	f3ef 8310 	mrs	r3, PRIMASK
 8014c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ca0:	b672      	cpsid	i
    return(int_posture);
 8014ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8014ca4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	4a41      	ldr	r2, [pc, #260]	; (8014db0 <_tx_thread_create+0x1d4>)
 8014caa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8014cac:	4b41      	ldr	r3, [pc, #260]	; (8014db4 <_tx_thread_create+0x1d8>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d10b      	bne.n	8014ccc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8014cb4:	4a40      	ldr	r2, [pc, #256]	; (8014db8 <_tx_thread_create+0x1dc>)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	68fa      	ldr	r2, [r7, #12]
 8014cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	68fa      	ldr	r2, [r7, #12]
 8014cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8014cca:	e016      	b.n	8014cfa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8014ccc:	4b3a      	ldr	r3, [pc, #232]	; (8014db8 <_tx_thread_create+0x1dc>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8014cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014cd8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8014cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cdc:	68fa      	ldr	r2, [r7, #12]
 8014cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8014ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014cfa:	4b2e      	ldr	r3, [pc, #184]	; (8014db4 <_tx_thread_create+0x1d8>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	4a2c      	ldr	r2, [pc, #176]	; (8014db4 <_tx_thread_create+0x1d8>)
 8014d02:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014d04:	4b2d      	ldr	r3, [pc, #180]	; (8014dbc <_tx_thread_create+0x1e0>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	4a2c      	ldr	r2, [pc, #176]	; (8014dbc <_tx_thread_create+0x1e0>)
 8014d0c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8014d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d129      	bne.n	8014d68 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d14:	f3ef 8305 	mrs	r3, IPSR
 8014d18:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8014d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8014d1c:	4b28      	ldr	r3, [pc, #160]	; (8014dc0 <_tx_thread_create+0x1e4>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4313      	orrs	r3, r2
 8014d22:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014d26:	d30d      	bcc.n	8014d44 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014d28:	4b26      	ldr	r3, [pc, #152]	; (8014dc4 <_tx_thread_create+0x1e8>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8014d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d009      	beq.n	8014d48 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d38:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8014d42:	e001      	b.n	8014d48 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014d44:	2300      	movs	r3, #0
 8014d46:	647b      	str	r3, [r7, #68]	; 0x44
 8014d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d4c:	6a3b      	ldr	r3, [r7, #32]
 8014d4e:	f383 8810 	msr	PRIMASK, r3
}
 8014d52:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f000 fa0b 	bl	8015170 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d01e      	beq.n	8014d9e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8014d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d64:	63da      	str	r2, [r3, #60]	; 0x3c
 8014d66:	e01a      	b.n	8014d9e <_tx_thread_create+0x1c2>
 8014d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	f383 8810 	msr	PRIMASK, r3
}
 8014d72:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d74:	f3ef 8310 	mrs	r3, PRIMASK
 8014d78:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014d7a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014d7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d7e:	b672      	cpsid	i
    return(int_posture);
 8014d80:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8014d82:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8014d84:	4b0d      	ldr	r3, [pc, #52]	; (8014dbc <_tx_thread_create+0x1e0>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	3b01      	subs	r3, #1
 8014d8a:	4a0c      	ldr	r2, [pc, #48]	; (8014dbc <_tx_thread_create+0x1e0>)
 8014d8c:	6013      	str	r3, [r2, #0]
 8014d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d90:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	f383 8810 	msr	PRIMASK, r3
}
 8014d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014d9a:	f000 f9af 	bl	80150fc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8014d9e:	2300      	movs	r3, #0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3748      	adds	r7, #72	; 0x48
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	08015645 	.word	0x08015645
 8014dac:	08014f65 	.word	0x08014f65
 8014db0:	54485244 	.word	0x54485244
 8014db4:	24014f28 	.word	0x24014f28
 8014db8:	24014f24 	.word	0x24014f24
 8014dbc:	24014fb4 	.word	0x24014fb4
 8014dc0:	2400006c 	.word	0x2400006c
 8014dc4:	24014f20 	.word	0x24014f20

08014dc8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b087      	sub	sp, #28
 8014dcc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014dce:	f3ef 8310 	mrs	r3, PRIMASK
 8014dd2:	60bb      	str	r3, [r7, #8]
    return(posture);
 8014dd4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8014dd6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014dd8:	b672      	cpsid	i
    return(int_posture);
 8014dda:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8014ddc:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014dde:	4b08      	ldr	r3, [pc, #32]	; (8014e00 <_tx_thread_identify+0x38>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	613b      	str	r3, [r7, #16]
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f383 8810 	msr	PRIMASK, r3
}
 8014dee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8014df0:	693b      	ldr	r3, [r7, #16]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	371c      	adds	r7, #28
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop
 8014e00:	24014f1c 	.word	0x24014f1c

08014e04 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8014e08:	4b12      	ldr	r3, [pc, #72]	; (8014e54 <_tx_thread_initialize+0x50>)
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8014e0e:	4b12      	ldr	r3, [pc, #72]	; (8014e58 <_tx_thread_initialize+0x54>)
 8014e10:	2200      	movs	r2, #0
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	4b11      	ldr	r3, [pc, #68]	; (8014e5c <_tx_thread_initialize+0x58>)
 8014e16:	2200      	movs	r2, #0
 8014e18:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014e1a:	4b11      	ldr	r3, [pc, #68]	; (8014e60 <_tx_thread_initialize+0x5c>)
 8014e1c:	2220      	movs	r2, #32
 8014e1e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8014e20:	2280      	movs	r2, #128	; 0x80
 8014e22:	2100      	movs	r1, #0
 8014e24:	480f      	ldr	r0, [pc, #60]	; (8014e64 <_tx_thread_initialize+0x60>)
 8014e26:	f001 fbb7 	bl	8016598 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8014e2a:	4b0f      	ldr	r3, [pc, #60]	; (8014e68 <_tx_thread_initialize+0x64>)
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8014e30:	4b0e      	ldr	r3, [pc, #56]	; (8014e6c <_tx_thread_initialize+0x68>)
 8014e32:	2200      	movs	r2, #0
 8014e34:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8014e36:	4b0e      	ldr	r3, [pc, #56]	; (8014e70 <_tx_thread_initialize+0x6c>)
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8014e3c:	4b0d      	ldr	r3, [pc, #52]	; (8014e74 <_tx_thread_initialize+0x70>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8014e42:	4b0d      	ldr	r3, [pc, #52]	; (8014e78 <_tx_thread_initialize+0x74>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8014e4a:	4a0b      	ldr	r2, [pc, #44]	; (8014e78 <_tx_thread_initialize+0x74>)
 8014e4c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8014e4e:	bf00      	nop
 8014e50:	bd80      	pop	{r7, pc}
 8014e52:	bf00      	nop
 8014e54:	24014f1c 	.word	0x24014f1c
 8014e58:	24014f20 	.word	0x24014f20
 8014e5c:	24014f2c 	.word	0x24014f2c
 8014e60:	24014f30 	.word	0x24014f30
 8014e64:	24014f34 	.word	0x24014f34
 8014e68:	24014f24 	.word	0x24014f24
 8014e6c:	24014f28 	.word	0x24014f28
 8014e70:	24014fb4 	.word	0x24014fb4
 8014e74:	24014fb8 	.word	0x24014fb8
 8014e78:	24014fbc 	.word	0x24014fbc

08014e7c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b08c      	sub	sp, #48	; 0x30
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014e92:	68ba      	ldr	r2, [r7, #8]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d004      	beq.n	8014ea2 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d001      	beq.n	8014ea2 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8014ea6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014eaa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014eac:	b672      	cpsid	i
    return(int_posture);
 8014eae:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8014eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014eb8:	68ba      	ldr	r2, [r7, #8]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d902      	bls.n	8014ec4 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8014ebe:	2318      	movs	r3, #24
 8014ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ec2:	e03e      	b.n	8014f42 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	68ba      	ldr	r2, [r7, #8]
 8014ed2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014edc:	68ba      	ldr	r2, [r7, #8]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d203      	bcs.n	8014eea <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8014ee8:	e004      	b.n	8014ef4 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ef8:	4b17      	ldr	r3, [pc, #92]	; (8014f58 <_tx_thread_preemption_change+0xdc>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	429a      	cmp	r2, r3
 8014efe:	d920      	bls.n	8014f42 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8014f00:	4b15      	ldr	r3, [pc, #84]	; (8014f58 <_tx_thread_preemption_change+0xdc>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	68ba      	ldr	r2, [r7, #8]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d91b      	bls.n	8014f42 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8014f0a:	4b14      	ldr	r3, [pc, #80]	; (8014f5c <_tx_thread_preemption_change+0xe0>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d116      	bne.n	8014f42 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8014f14:	4b10      	ldr	r3, [pc, #64]	; (8014f58 <_tx_thread_preemption_change+0xdc>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	4a11      	ldr	r2, [pc, #68]	; (8014f60 <_tx_thread_preemption_change+0xe4>)
 8014f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f1e:	4a0f      	ldr	r2, [pc, #60]	; (8014f5c <_tx_thread_preemption_change+0xe0>)
 8014f20:	6013      	str	r3, [r2, #0]
 8014f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	f383 8810 	msr	PRIMASK, r3
}
 8014f2c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8014f2e:	f000 f8e5 	bl	80150fc <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f32:	f3ef 8310 	mrs	r3, PRIMASK
 8014f36:	61fb      	str	r3, [r7, #28]
    return(posture);
 8014f38:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8014f3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f3c:	b672      	cpsid	i
    return(int_posture);
 8014f3e:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8014f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f44:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	f383 8810 	msr	PRIMASK, r3
}
 8014f4c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8014f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3730      	adds	r7, #48	; 0x30
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	24014f30 	.word	0x24014f30
 8014f5c:	24014f20 	.word	0x24014f20
 8014f60:	24014f34 	.word	0x24014f34

08014f64 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014f6a:	4b21      	ldr	r3, [pc, #132]	; (8014ff0 <_tx_thread_shell_entry+0x8c>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f74:	69fa      	ldr	r2, [r7, #28]
 8014f76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014f78:	4610      	mov	r0, r2
 8014f7a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014f7c:	4b1d      	ldr	r3, [pc, #116]	; (8014ff4 <_tx_thread_shell_entry+0x90>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d003      	beq.n	8014f8c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8014f84:	4b1b      	ldr	r3, [pc, #108]	; (8014ff4 <_tx_thread_shell_entry+0x90>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	69f8      	ldr	r0, [r7, #28]
 8014f8a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8014f90:	607b      	str	r3, [r7, #4]
    return(posture);
 8014f92:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014f94:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f96:	b672      	cpsid	i
    return(int_posture);
 8014f98:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8014f9a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	2200      	movs	r2, #0
 8014fac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014fae:	4b12      	ldr	r3, [pc, #72]	; (8014ff8 <_tx_thread_shell_entry+0x94>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	4a10      	ldr	r2, [pc, #64]	; (8014ff8 <_tx_thread_shell_entry+0x94>)
 8014fb6:	6013      	str	r3, [r2, #0]
 8014fb8:	69bb      	ldr	r3, [r7, #24]
 8014fba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	f383 8810 	msr	PRIMASK, r3
}
 8014fc2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8014fc4:	f3ef 8314 	mrs	r3, CONTROL
 8014fc8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8014fca:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8014fcc:	617b      	str	r3, [r7, #20]
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	f023 0304 	bic.w	r3, r3, #4
 8014fd4:	617b      	str	r3, [r7, #20]
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	f383 8814 	msr	CONTROL, r3
}
 8014fe0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8014fe2:	69f8      	ldr	r0, [r7, #28]
 8014fe4:	f000 f9c4 	bl	8015370 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8014fe8:	bf00      	nop
 8014fea:	3720      	adds	r7, #32
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	24014f1c 	.word	0x24014f1c
 8014ff4:	24014fb8 	.word	0x24014fb8
 8014ff8:	24014fb4 	.word	0x24014fb4

08014ffc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b08e      	sub	sp, #56	; 0x38
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015004:	f3ef 8310 	mrs	r3, PRIMASK
 8015008:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801500c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801500e:	b672      	cpsid	i
    return(int_posture);
 8015010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8015012:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015014:	4b35      	ldr	r3, [pc, #212]	; (80150ec <_tx_thread_sleep+0xf0>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801501c:	2b00      	cmp	r3, #0
 801501e:	d108      	bne.n	8015032 <_tx_thread_sleep+0x36>
 8015020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015022:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015024:	6a3b      	ldr	r3, [r7, #32]
 8015026:	f383 8810 	msr	PRIMASK, r3
}
 801502a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801502c:	2313      	movs	r3, #19
 801502e:	637b      	str	r3, [r7, #52]	; 0x34
 8015030:	e056      	b.n	80150e0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015032:	f3ef 8305 	mrs	r3, IPSR
 8015036:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015038:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801503a:	4b2d      	ldr	r3, [pc, #180]	; (80150f0 <_tx_thread_sleep+0xf4>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	4313      	orrs	r3, r2
 8015040:	2b00      	cmp	r3, #0
 8015042:	d008      	beq.n	8015056 <_tx_thread_sleep+0x5a>
 8015044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015046:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	f383 8810 	msr	PRIMASK, r3
}
 801504e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8015050:	2313      	movs	r3, #19
 8015052:	637b      	str	r3, [r7, #52]	; 0x34
 8015054:	e044      	b.n	80150e0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8015056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015058:	4a26      	ldr	r2, [pc, #152]	; (80150f4 <_tx_thread_sleep+0xf8>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d108      	bne.n	8015070 <_tx_thread_sleep+0x74>
 801505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015060:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	f383 8810 	msr	PRIMASK, r3
}
 8015068:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801506a:	2313      	movs	r3, #19
 801506c:	637b      	str	r3, [r7, #52]	; 0x34
 801506e:	e037      	b.n	80150e0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d108      	bne.n	8015088 <_tx_thread_sleep+0x8c>
 8015076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015078:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	f383 8810 	msr	PRIMASK, r3
}
 8015080:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8015082:	2300      	movs	r3, #0
 8015084:	637b      	str	r3, [r7, #52]	; 0x34
 8015086:	e02b      	b.n	80150e0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8015088:	4b1b      	ldr	r3, [pc, #108]	; (80150f8 <_tx_thread_sleep+0xfc>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d008      	beq.n	80150a2 <_tx_thread_sleep+0xa6>
 8015090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015092:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f383 8810 	msr	PRIMASK, r3
}
 801509a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 801509c:	2313      	movs	r3, #19
 801509e:	637b      	str	r3, [r7, #52]	; 0x34
 80150a0:	e01e      	b.n	80150e0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80150a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150a4:	2204      	movs	r2, #4
 80150a6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80150a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150aa:	2201      	movs	r2, #1
 80150ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80150ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b0:	2200      	movs	r2, #0
 80150b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80150b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80150bc:	4b0e      	ldr	r3, [pc, #56]	; (80150f8 <_tx_thread_sleep+0xfc>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	3301      	adds	r3, #1
 80150c2:	4a0d      	ldr	r2, [pc, #52]	; (80150f8 <_tx_thread_sleep+0xfc>)
 80150c4:	6013      	str	r3, [r2, #0]
 80150c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	f383 8810 	msr	PRIMASK, r3
}
 80150d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80150d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150d4:	f000 f94c 	bl	8015370 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80150d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150de:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80150e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3738      	adds	r7, #56	; 0x38
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
 80150ea:	bf00      	nop
 80150ec:	24014f1c 	.word	0x24014f1c
 80150f0:	2400006c 	.word	0x2400006c
 80150f4:	24015064 	.word	0x24015064
 80150f8:	24014fb4 	.word	0x24014fb4

080150fc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80150fc:	b480      	push	{r7}
 80150fe:	b089      	sub	sp, #36	; 0x24
 8015100:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015102:	4b17      	ldr	r3, [pc, #92]	; (8015160 <_tx_thread_system_preempt_check+0x64>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d121      	bne.n	8015152 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801510e:	4b15      	ldr	r3, [pc, #84]	; (8015164 <_tx_thread_system_preempt_check+0x68>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8015114:	4b14      	ldr	r3, [pc, #80]	; (8015168 <_tx_thread_system_preempt_check+0x6c>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801511a:	69ba      	ldr	r2, [r7, #24]
 801511c:	697b      	ldr	r3, [r7, #20]
 801511e:	429a      	cmp	r2, r3
 8015120:	d017      	beq.n	8015152 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015122:	4b12      	ldr	r3, [pc, #72]	; (801516c <_tx_thread_system_preempt_check+0x70>)
 8015124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015128:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801512a:	f3ef 8305 	mrs	r3, IPSR
 801512e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8015130:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8015132:	2b00      	cmp	r3, #0
 8015134:	d10c      	bne.n	8015150 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015136:	f3ef 8310 	mrs	r3, PRIMASK
 801513a:	60fb      	str	r3, [r7, #12]
    return(posture);
 801513c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 801513e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015140:	b662      	cpsie	i
}
 8015142:	bf00      	nop
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f383 8810 	msr	PRIMASK, r3
}
 801514e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8015150:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8015152:	bf00      	nop
 8015154:	3724      	adds	r7, #36	; 0x24
 8015156:	46bd      	mov	sp, r7
 8015158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515c:	4770      	bx	lr
 801515e:	bf00      	nop
 8015160:	24014fb4 	.word	0x24014fb4
 8015164:	24014f1c 	.word	0x24014f1c
 8015168:	24014f20 	.word	0x24014f20
 801516c:	e000ed04 	.word	0xe000ed04

08015170 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b096      	sub	sp, #88	; 0x58
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015178:	f3ef 8310 	mrs	r3, PRIMASK
 801517c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8015180:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8015182:	b672      	cpsid	i
    return(int_posture);
 8015184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8015186:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801518c:	2b00      	cmp	r3, #0
 801518e:	d005      	beq.n	801519c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	334c      	adds	r3, #76	; 0x4c
 8015194:	4618      	mov	r0, r3
 8015196:	f000 fc13 	bl	80159c0 <_tx_timer_system_deactivate>
 801519a:	e002      	b.n	80151a2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2200      	movs	r2, #0
 80151a0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80151a2:	4b6c      	ldr	r3, [pc, #432]	; (8015354 <_tx_thread_system_resume+0x1e4>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3b01      	subs	r3, #1
 80151a8:	4a6a      	ldr	r2, [pc, #424]	; (8015354 <_tx_thread_system_resume+0x1e4>)
 80151aa:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	f040 8083 	bne.w	80152bc <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	f000 8097 	beq.w	80152ee <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d172      	bne.n	80152ae <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2200      	movs	r2, #0
 80151cc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151d2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80151d4:	4a60      	ldr	r2, [pc, #384]	; (8015358 <_tx_thread_system_resume+0x1e8>)
 80151d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80151de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d154      	bne.n	801528e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80151e4:	495c      	ldr	r1, [pc, #368]	; (8015358 <_tx_thread_system_resume+0x1e8>)
 80151e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151e8:	687a      	ldr	r2, [r7, #4]
 80151ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80151fa:	2201      	movs	r2, #1
 80151fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015202:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8015204:	4b55      	ldr	r3, [pc, #340]	; (801535c <_tx_thread_system_resume+0x1ec>)
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801520a:	4313      	orrs	r3, r2
 801520c:	4a53      	ldr	r2, [pc, #332]	; (801535c <_tx_thread_system_resume+0x1ec>)
 801520e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8015210:	4b53      	ldr	r3, [pc, #332]	; (8015360 <_tx_thread_system_resume+0x1f0>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015216:	429a      	cmp	r2, r3
 8015218:	d269      	bcs.n	80152ee <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801521a:	4a51      	ldr	r2, [pc, #324]	; (8015360 <_tx_thread_system_resume+0x1f0>)
 801521c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801521e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8015220:	4b50      	ldr	r3, [pc, #320]	; (8015364 <_tx_thread_system_resume+0x1f4>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8015226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015228:	2b00      	cmp	r3, #0
 801522a:	d103      	bne.n	8015234 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801522c:	4a4d      	ldr	r2, [pc, #308]	; (8015364 <_tx_thread_system_resume+0x1f4>)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6013      	str	r3, [r2, #0]
 8015232:	e05c      	b.n	80152ee <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8015234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015238:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801523a:	429a      	cmp	r2, r3
 801523c:	d257      	bcs.n	80152ee <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 801523e:	4a49      	ldr	r2, [pc, #292]	; (8015364 <_tx_thread_system_resume+0x1f4>)
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6013      	str	r3, [r2, #0]
 8015244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015246:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524a:	f383 8810 	msr	PRIMASK, r3
}
 801524e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015250:	4b40      	ldr	r3, [pc, #256]	; (8015354 <_tx_thread_system_resume+0x1e4>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8015256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015258:	2b00      	cmp	r3, #0
 801525a:	d174      	bne.n	8015346 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801525c:	4b42      	ldr	r3, [pc, #264]	; (8015368 <_tx_thread_system_resume+0x1f8>)
 801525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015262:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015264:	f3ef 8305 	mrs	r3, IPSR
 8015268:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10c      	bne.n	801528a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015270:	f3ef 8310 	mrs	r3, PRIMASK
 8015274:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8015276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8015278:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801527a:	b662      	cpsie	i
}
 801527c:	bf00      	nop
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	f383 8810 	msr	PRIMASK, r3
}
 8015288:	bf00      	nop
}
 801528a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 801528c:	e05b      	b.n	8015346 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015292:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8015294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801529c:	687a      	ldr	r2, [r7, #4]
 801529e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152a4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152aa:	621a      	str	r2, [r3, #32]
 80152ac:	e01f      	b.n	80152ee <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2200      	movs	r2, #0
 80152b2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2203      	movs	r2, #3
 80152b8:	631a      	str	r2, [r3, #48]	; 0x30
 80152ba:	e018      	b.n	80152ee <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d014      	beq.n	80152ee <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152c8:	2b02      	cmp	r3, #2
 80152ca:	d010      	beq.n	80152ee <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d106      	bne.n	80152e2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2200      	movs	r2, #0
 80152de:	631a      	str	r2, [r3, #48]	; 0x30
 80152e0:	e005      	b.n	80152ee <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2200      	movs	r2, #0
 80152e6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2203      	movs	r2, #3
 80152ec:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80152ee:	4b1f      	ldr	r3, [pc, #124]	; (801536c <_tx_thread_system_resume+0x1fc>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80152f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152f6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152f8:	69bb      	ldr	r3, [r7, #24]
 80152fa:	f383 8810 	msr	PRIMASK, r3
}
 80152fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015300:	4b18      	ldr	r3, [pc, #96]	; (8015364 <_tx_thread_system_resume+0x1f4>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015306:	429a      	cmp	r2, r3
 8015308:	d020      	beq.n	801534c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801530a:	4b12      	ldr	r3, [pc, #72]	; (8015354 <_tx_thread_system_resume+0x1e4>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015312:	2b00      	cmp	r3, #0
 8015314:	d11a      	bne.n	801534c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015316:	4b14      	ldr	r3, [pc, #80]	; (8015368 <_tx_thread_system_resume+0x1f8>)
 8015318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801531c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801531e:	f3ef 8305 	mrs	r3, IPSR
 8015322:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015324:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8015326:	2b00      	cmp	r3, #0
 8015328:	d10f      	bne.n	801534a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801532a:	f3ef 8310 	mrs	r3, PRIMASK
 801532e:	613b      	str	r3, [r7, #16]
    return(posture);
 8015330:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8015332:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015334:	b662      	cpsie	i
}
 8015336:	bf00      	nop
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	f383 8810 	msr	PRIMASK, r3
}
 8015342:	bf00      	nop
}
 8015344:	e001      	b.n	801534a <_tx_thread_system_resume+0x1da>
                                return;
 8015346:	bf00      	nop
 8015348:	e000      	b.n	801534c <_tx_thread_system_resume+0x1dc>
 801534a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801534c:	3758      	adds	r7, #88	; 0x58
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	24014fb4 	.word	0x24014fb4
 8015358:	24014f34 	.word	0x24014f34
 801535c:	24014f2c 	.word	0x24014f2c
 8015360:	24014f30 	.word	0x24014f30
 8015364:	24014f20 	.word	0x24014f20
 8015368:	e000ed04 	.word	0xe000ed04
 801536c:	24014f1c 	.word	0x24014f1c

08015370 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b09e      	sub	sp, #120	; 0x78
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015378:	4b81      	ldr	r3, [pc, #516]	; (8015580 <_tx_thread_system_suspend+0x210>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801537e:	f3ef 8310 	mrs	r3, PRIMASK
 8015382:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8015384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8015386:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015388:	b672      	cpsid	i
    return(int_posture);
 801538a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801538c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015392:	429a      	cmp	r2, r3
 8015394:	d112      	bne.n	80153bc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801539a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801539c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d008      	beq.n	80153b4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80153a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153a8:	d004      	beq.n	80153b4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	334c      	adds	r3, #76	; 0x4c
 80153ae:	4618      	mov	r0, r3
 80153b0:	f000 faa4 	bl	80158fc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	69db      	ldr	r3, [r3, #28]
 80153b8:	4a72      	ldr	r2, [pc, #456]	; (8015584 <_tx_thread_system_suspend+0x214>)
 80153ba:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80153bc:	4b72      	ldr	r3, [pc, #456]	; (8015588 <_tx_thread_system_suspend+0x218>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	3b01      	subs	r3, #1
 80153c2:	4a71      	ldr	r2, [pc, #452]	; (8015588 <_tx_thread_system_suspend+0x218>)
 80153c4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153ca:	2b01      	cmp	r3, #1
 80153cc:	f040 80a6 	bne.w	801551c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153da:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	6a1b      	ldr	r3, [r3, #32]
 80153e0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80153e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d015      	beq.n	8015416 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ee:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80153f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80153f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80153f4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80153f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80153fa:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80153fc:	4a63      	ldr	r2, [pc, #396]	; (801558c <_tx_thread_system_suspend+0x21c>)
 80153fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	429a      	cmp	r2, r3
 8015408:	d157      	bne.n	80154ba <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801540a:	4960      	ldr	r1, [pc, #384]	; (801558c <_tx_thread_system_suspend+0x21c>)
 801540c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801540e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015414:	e051      	b.n	80154ba <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8015416:	4a5d      	ldr	r2, [pc, #372]	; (801558c <_tx_thread_system_suspend+0x21c>)
 8015418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801541a:	2100      	movs	r1, #0
 801541c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8015420:	2201      	movs	r2, #1
 8015422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015424:	fa02 f303 	lsl.w	r3, r2, r3
 8015428:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801542a:	4b59      	ldr	r3, [pc, #356]	; (8015590 <_tx_thread_system_suspend+0x220>)
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015430:	43db      	mvns	r3, r3
 8015432:	4013      	ands	r3, r2
 8015434:	4a56      	ldr	r2, [pc, #344]	; (8015590 <_tx_thread_system_suspend+0x220>)
 8015436:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8015438:	2300      	movs	r3, #0
 801543a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801543c:	4b54      	ldr	r3, [pc, #336]	; (8015590 <_tx_thread_system_suspend+0x220>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8015442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015444:	2b00      	cmp	r3, #0
 8015446:	d12b      	bne.n	80154a0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015448:	4b52      	ldr	r3, [pc, #328]	; (8015594 <_tx_thread_system_suspend+0x224>)
 801544a:	2220      	movs	r2, #32
 801544c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801544e:	4b52      	ldr	r3, [pc, #328]	; (8015598 <_tx_thread_system_suspend+0x228>)
 8015450:	2200      	movs	r2, #0
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015456:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801545a:	f383 8810 	msr	PRIMASK, r3
}
 801545e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015460:	4b49      	ldr	r3, [pc, #292]	; (8015588 <_tx_thread_system_suspend+0x218>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8015466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015468:	2b00      	cmp	r3, #0
 801546a:	f040 8081 	bne.w	8015570 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801546e:	4b4b      	ldr	r3, [pc, #300]	; (801559c <_tx_thread_system_suspend+0x22c>)
 8015470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015474:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015476:	f3ef 8305 	mrs	r3, IPSR
 801547a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 801547c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 801547e:	2b00      	cmp	r3, #0
 8015480:	d10c      	bne.n	801549c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015482:	f3ef 8310 	mrs	r3, PRIMASK
 8015486:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801548a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801548c:	b662      	cpsie	i
}
 801548e:	bf00      	nop
 8015490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015492:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015496:	f383 8810 	msr	PRIMASK, r3
}
 801549a:	bf00      	nop
}
 801549c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801549e:	e067      	b.n	8015570 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80154a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154a2:	fa93 f3a3 	rbit	r3, r3
 80154a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80154a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154aa:	fab3 f383 	clz	r3, r3
 80154ae:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80154b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80154b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154b4:	4413      	add	r3, r2
 80154b6:	4a37      	ldr	r2, [pc, #220]	; (8015594 <_tx_thread_system_suspend+0x224>)
 80154b8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80154ba:	4b37      	ldr	r3, [pc, #220]	; (8015598 <_tx_thread_system_suspend+0x228>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d12b      	bne.n	801551c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80154c4:	4b33      	ldr	r3, [pc, #204]	; (8015594 <_tx_thread_system_suspend+0x224>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	4a30      	ldr	r2, [pc, #192]	; (801558c <_tx_thread_system_suspend+0x21c>)
 80154ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154ce:	4a32      	ldr	r2, [pc, #200]	; (8015598 <_tx_thread_system_suspend+0x228>)
 80154d0:	6013      	str	r3, [r2, #0]
 80154d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80154d4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d8:	f383 8810 	msr	PRIMASK, r3
}
 80154dc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80154de:	4b2a      	ldr	r3, [pc, #168]	; (8015588 <_tx_thread_system_suspend+0x218>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80154e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d144      	bne.n	8015574 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80154ea:	4b2c      	ldr	r3, [pc, #176]	; (801559c <_tx_thread_system_suspend+0x22c>)
 80154ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154f2:	f3ef 8305 	mrs	r3, IPSR
 80154f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80154f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d10c      	bne.n	8015518 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154fe:	f3ef 8310 	mrs	r3, PRIMASK
 8015502:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8015506:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015508:	b662      	cpsie	i
}
 801550a:	bf00      	nop
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015510:	6a3b      	ldr	r3, [r7, #32]
 8015512:	f383 8810 	msr	PRIMASK, r3
}
 8015516:	bf00      	nop
}
 8015518:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801551a:	e02b      	b.n	8015574 <_tx_thread_system_suspend+0x204>
 801551c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801551e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	f383 8810 	msr	PRIMASK, r3
}
 8015526:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015528:	4b1b      	ldr	r3, [pc, #108]	; (8015598 <_tx_thread_system_suspend+0x228>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801552e:	429a      	cmp	r2, r3
 8015530:	d022      	beq.n	8015578 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015532:	4b15      	ldr	r3, [pc, #84]	; (8015588 <_tx_thread_system_suspend+0x218>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8015538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801553a:	2b00      	cmp	r3, #0
 801553c:	d11c      	bne.n	8015578 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801553e:	4b17      	ldr	r3, [pc, #92]	; (801559c <_tx_thread_system_suspend+0x22c>)
 8015540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015544:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015546:	f3ef 8305 	mrs	r3, IPSR
 801554a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801554c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801554e:	2b00      	cmp	r3, #0
 8015550:	d10c      	bne.n	801556c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015552:	f3ef 8310 	mrs	r3, PRIMASK
 8015556:	617b      	str	r3, [r7, #20]
    return(posture);
 8015558:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801555a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801555c:	b662      	cpsie	i
}
 801555e:	bf00      	nop
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f383 8810 	msr	PRIMASK, r3
}
 801556a:	bf00      	nop
}
 801556c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801556e:	e003      	b.n	8015578 <_tx_thread_system_suspend+0x208>
                return;
 8015570:	bf00      	nop
 8015572:	e002      	b.n	801557a <_tx_thread_system_suspend+0x20a>
            return;
 8015574:	bf00      	nop
 8015576:	e000      	b.n	801557a <_tx_thread_system_suspend+0x20a>
    return;
 8015578:	bf00      	nop
}
 801557a:	3778      	adds	r7, #120	; 0x78
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	24014f1c 	.word	0x24014f1c
 8015584:	24015520 	.word	0x24015520
 8015588:	24014fb4 	.word	0x24014fb4
 801558c:	24014f34 	.word	0x24014f34
 8015590:	24014f2c 	.word	0x24014f2c
 8015594:	24014f30 	.word	0x24014f30
 8015598:	24014f20 	.word	0x24014f20
 801559c:	e000ed04 	.word	0xe000ed04

080155a0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b087      	sub	sp, #28
 80155a4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80155a6:	4b21      	ldr	r3, [pc, #132]	; (801562c <_tx_thread_time_slice+0x8c>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80155ac:	f3ef 8310 	mrs	r3, PRIMASK
 80155b0:	60fb      	str	r3, [r7, #12]
    return(posture);
 80155b2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80155b4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80155b6:	b672      	cpsid	i
    return(int_posture);
 80155b8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80155ba:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80155bc:	4b1c      	ldr	r3, [pc, #112]	; (8015630 <_tx_thread_time_slice+0x90>)
 80155be:	2200      	movs	r2, #0
 80155c0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d024      	beq.n	8015612 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d120      	bne.n	8015612 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	69da      	ldr	r2, [r3, #28]
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	699b      	ldr	r3, [r3, #24]
 80155dc:	4a15      	ldr	r2, [pc, #84]	; (8015634 <_tx_thread_time_slice+0x94>)
 80155de:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	6a1b      	ldr	r3, [r3, #32]
 80155e4:	697a      	ldr	r2, [r7, #20]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d013      	beq.n	8015612 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d10d      	bne.n	8015612 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155fa:	697a      	ldr	r2, [r7, #20]
 80155fc:	6a12      	ldr	r2, [r2, #32]
 80155fe:	490e      	ldr	r1, [pc, #56]	; (8015638 <_tx_thread_time_slice+0x98>)
 8015600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015604:	4b0d      	ldr	r3, [pc, #52]	; (801563c <_tx_thread_time_slice+0x9c>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	4a0b      	ldr	r2, [pc, #44]	; (8015638 <_tx_thread_time_slice+0x98>)
 801560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801560e:	4a0c      	ldr	r2, [pc, #48]	; (8015640 <_tx_thread_time_slice+0xa0>)
 8015610:	6013      	str	r3, [r2, #0]
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f383 8810 	msr	PRIMASK, r3
}
 801561c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801561e:	bf00      	nop
 8015620:	371c      	adds	r7, #28
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr
 801562a:	bf00      	nop
 801562c:	24014f1c 	.word	0x24014f1c
 8015630:	24014fc4 	.word	0x24014fc4
 8015634:	24015520 	.word	0x24015520
 8015638:	24014f34 	.word	0x24014f34
 801563c:	24014f30 	.word	0x24014f30
 8015640:	24014f20 	.word	0x24014f20

08015644 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b08a      	sub	sp, #40	; 0x28
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015650:	f3ef 8310 	mrs	r3, PRIMASK
 8015654:	617b      	str	r3, [r7, #20]
    return(posture);
 8015656:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015658:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801565a:	b672      	cpsid	i
    return(int_posture);
 801565c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801565e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8015660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015664:	2b04      	cmp	r3, #4
 8015666:	d10e      	bne.n	8015686 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8015668:	4b13      	ldr	r3, [pc, #76]	; (80156b8 <_tx_thread_timeout+0x74>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	3301      	adds	r3, #1
 801566e:	4a12      	ldr	r2, [pc, #72]	; (80156b8 <_tx_thread_timeout+0x74>)
 8015670:	6013      	str	r3, [r2, #0]
 8015672:	6a3b      	ldr	r3, [r7, #32]
 8015674:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	f383 8810 	msr	PRIMASK, r3
}
 801567c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801567e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015680:	f7ff fd76 	bl	8015170 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8015684:	e013      	b.n	80156ae <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8015686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801568a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015692:	61bb      	str	r3, [r7, #24]
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	f383 8810 	msr	PRIMASK, r3
}
 801569e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d003      	beq.n	80156ae <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	69b9      	ldr	r1, [r7, #24]
 80156aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156ac:	4798      	blx	r3
}
 80156ae:	bf00      	nop
 80156b0:	3728      	adds	r7, #40	; 0x28
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}
 80156b6:	bf00      	nop
 80156b8:	24014fb4 	.word	0x24014fb4

080156bc <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 80156bc:	b480      	push	{r7}
 80156be:	b087      	sub	sp, #28
 80156c0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156c2:	f3ef 8310 	mrs	r3, PRIMASK
 80156c6:	60bb      	str	r3, [r7, #8]
    return(posture);
 80156c8:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80156ca:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80156cc:	b672      	cpsid	i
    return(int_posture);
 80156ce:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 80156d0:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 80156d2:	4b08      	ldr	r3, [pc, #32]	; (80156f4 <_tx_time_get+0x38>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	613b      	str	r3, [r7, #16]
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	f383 8810 	msr	PRIMASK, r3
}
 80156e2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 80156e4:	693b      	ldr	r3, [r7, #16]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	371c      	adds	r7, #28
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	24014fc0 	.word	0x24014fc0

080156f8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b08a      	sub	sp, #40	; 0x28
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8015706:	222c      	movs	r2, #44	; 0x2c
 8015708:	2100      	movs	r1, #0
 801570a:	68f8      	ldr	r0, [r7, #12]
 801570c:	f000 ff44 	bl	8016598 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68ba      	ldr	r2, [r7, #8]
 8015714:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801571a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015720:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	683a      	ldr	r2, [r7, #0]
 801572c:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801572e:	f3ef 8310 	mrs	r3, PRIMASK
 8015732:	61bb      	str	r3, [r7, #24]
    return(posture);
 8015734:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8015736:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015738:	b672      	cpsid	i
    return(int_posture);
 801573a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801573c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	4a1c      	ldr	r2, [pc, #112]	; (80157b4 <_tx_timer_create+0xbc>)
 8015742:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8015744:	4b1c      	ldr	r3, [pc, #112]	; (80157b8 <_tx_timer_create+0xc0>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d109      	bne.n	8015760 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 801574c:	4a1b      	ldr	r2, [pc, #108]	; (80157bc <_tx_timer_create+0xc4>)
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	629a      	str	r2, [r3, #40]	; 0x28
 801575e:	e011      	b.n	8015784 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8015760:	4b16      	ldr	r3, [pc, #88]	; (80157bc <_tx_timer_create+0xc4>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8015766:	6a3b      	ldr	r3, [r7, #32]
 8015768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801576a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 801576c:	6a3b      	ldr	r3, [r7, #32]
 801576e:	68fa      	ldr	r2, [r7, #12]
 8015770:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8015772:	69fb      	ldr	r3, [r7, #28]
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	69fa      	ldr	r2, [r7, #28]
 801577c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	6a3a      	ldr	r2, [r7, #32]
 8015782:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8015784:	4b0c      	ldr	r3, [pc, #48]	; (80157b8 <_tx_timer_create+0xc0>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	3301      	adds	r3, #1
 801578a:	4a0b      	ldr	r2, [pc, #44]	; (80157b8 <_tx_timer_create+0xc0>)
 801578c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015790:	2b01      	cmp	r3, #1
 8015792:	d104      	bne.n	801579e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	3308      	adds	r3, #8
 8015798:	4618      	mov	r0, r3
 801579a:	f000 f8af 	bl	80158fc <_tx_timer_system_activate>
 801579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	f383 8810 	msr	PRIMASK, r3
}
 80157a8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80157aa:	2300      	movs	r3, #0
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3728      	adds	r7, #40	; 0x28
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	4154494d 	.word	0x4154494d
 80157b8:	2401505c 	.word	0x2401505c
 80157bc:	24015058 	.word	0x24015058

080157c0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157c6:	f3ef 8310 	mrs	r3, PRIMASK
 80157ca:	607b      	str	r3, [r7, #4]
    return(posture);
 80157cc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80157ce:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80157d0:	b672      	cpsid	i
    return(int_posture);
 80157d2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80157d4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80157d6:	4b09      	ldr	r3, [pc, #36]	; (80157fc <_tx_timer_expiration_process+0x3c>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	3301      	adds	r3, #1
 80157dc:	4a07      	ldr	r2, [pc, #28]	; (80157fc <_tx_timer_expiration_process+0x3c>)
 80157de:	6013      	str	r3, [r2, #0]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	f383 8810 	msr	PRIMASK, r3
}
 80157ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80157ec:	4804      	ldr	r0, [pc, #16]	; (8015800 <_tx_timer_expiration_process+0x40>)
 80157ee:	f7ff fcbf 	bl	8015170 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80157f2:	bf00      	nop
 80157f4:	3710      	adds	r7, #16
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	24014fb4 	.word	0x24014fb4
 8015800:	24015064 	.word	0x24015064

08015804 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015804:	b590      	push	{r4, r7, lr}
 8015806:	b089      	sub	sp, #36	; 0x24
 8015808:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801580a:	4b28      	ldr	r3, [pc, #160]	; (80158ac <_tx_timer_initialize+0xa8>)
 801580c:	2200      	movs	r2, #0
 801580e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015810:	4b27      	ldr	r3, [pc, #156]	; (80158b0 <_tx_timer_initialize+0xac>)
 8015812:	2200      	movs	r2, #0
 8015814:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015816:	4b27      	ldr	r3, [pc, #156]	; (80158b4 <_tx_timer_initialize+0xb0>)
 8015818:	2200      	movs	r2, #0
 801581a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801581c:	4b26      	ldr	r3, [pc, #152]	; (80158b8 <_tx_timer_initialize+0xb4>)
 801581e:	2200      	movs	r2, #0
 8015820:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8015822:	4b26      	ldr	r3, [pc, #152]	; (80158bc <_tx_timer_initialize+0xb8>)
 8015824:	2200      	movs	r2, #0
 8015826:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015828:	2280      	movs	r2, #128	; 0x80
 801582a:	2100      	movs	r1, #0
 801582c:	4824      	ldr	r0, [pc, #144]	; (80158c0 <_tx_timer_initialize+0xbc>)
 801582e:	f000 feb3 	bl	8016598 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8015832:	4b24      	ldr	r3, [pc, #144]	; (80158c4 <_tx_timer_initialize+0xc0>)
 8015834:	4a22      	ldr	r2, [pc, #136]	; (80158c0 <_tx_timer_initialize+0xbc>)
 8015836:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015838:	4b23      	ldr	r3, [pc, #140]	; (80158c8 <_tx_timer_initialize+0xc4>)
 801583a:	4a21      	ldr	r2, [pc, #132]	; (80158c0 <_tx_timer_initialize+0xbc>)
 801583c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801583e:	4b23      	ldr	r3, [pc, #140]	; (80158cc <_tx_timer_initialize+0xc8>)
 8015840:	4a23      	ldr	r2, [pc, #140]	; (80158d0 <_tx_timer_initialize+0xcc>)
 8015842:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015844:	4b21      	ldr	r3, [pc, #132]	; (80158cc <_tx_timer_initialize+0xc8>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	3304      	adds	r3, #4
 801584a:	4a20      	ldr	r2, [pc, #128]	; (80158cc <_tx_timer_initialize+0xc8>)
 801584c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801584e:	4b21      	ldr	r3, [pc, #132]	; (80158d4 <_tx_timer_initialize+0xd0>)
 8015850:	4a21      	ldr	r2, [pc, #132]	; (80158d8 <_tx_timer_initialize+0xd4>)
 8015852:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015854:	4b21      	ldr	r3, [pc, #132]	; (80158dc <_tx_timer_initialize+0xd8>)
 8015856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801585a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801585c:	4b20      	ldr	r3, [pc, #128]	; (80158e0 <_tx_timer_initialize+0xdc>)
 801585e:	2200      	movs	r2, #0
 8015860:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8015862:	4b1c      	ldr	r3, [pc, #112]	; (80158d4 <_tx_timer_initialize+0xd0>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	4a1d      	ldr	r2, [pc, #116]	; (80158dc <_tx_timer_initialize+0xd8>)
 8015868:	6812      	ldr	r2, [r2, #0]
 801586a:	491d      	ldr	r1, [pc, #116]	; (80158e0 <_tx_timer_initialize+0xdc>)
 801586c:	6809      	ldr	r1, [r1, #0]
 801586e:	481c      	ldr	r0, [pc, #112]	; (80158e0 <_tx_timer_initialize+0xdc>)
 8015870:	6800      	ldr	r0, [r0, #0]
 8015872:	2400      	movs	r4, #0
 8015874:	9405      	str	r4, [sp, #20]
 8015876:	2400      	movs	r4, #0
 8015878:	9404      	str	r4, [sp, #16]
 801587a:	9003      	str	r0, [sp, #12]
 801587c:	9102      	str	r1, [sp, #8]
 801587e:	9201      	str	r2, [sp, #4]
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	4b18      	ldr	r3, [pc, #96]	; (80158e4 <_tx_timer_initialize+0xe0>)
 8015884:	4a18      	ldr	r2, [pc, #96]	; (80158e8 <_tx_timer_initialize+0xe4>)
 8015886:	4919      	ldr	r1, [pc, #100]	; (80158ec <_tx_timer_initialize+0xe8>)
 8015888:	4819      	ldr	r0, [pc, #100]	; (80158f0 <_tx_timer_initialize+0xec>)
 801588a:	f7ff f9a7 	bl	8014bdc <_tx_thread_create>
 801588e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1e5      	bne.n	8015862 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8015896:	4b17      	ldr	r3, [pc, #92]	; (80158f4 <_tx_timer_initialize+0xf0>)
 8015898:	2200      	movs	r2, #0
 801589a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801589c:	4b16      	ldr	r3, [pc, #88]	; (80158f8 <_tx_timer_initialize+0xf4>)
 801589e:	2200      	movs	r2, #0
 80158a0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80158a2:	bf00      	nop
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd90      	pop	{r4, r7, pc}
 80158aa:	bf00      	nop
 80158ac:	24014fc0 	.word	0x24014fc0
 80158b0:	24015520 	.word	0x24015520
 80158b4:	24014fc4 	.word	0x24014fc4
 80158b8:	24015054 	.word	0x24015054
 80158bc:	24015060 	.word	0x24015060
 80158c0:	24014fc8 	.word	0x24014fc8
 80158c4:	24015048 	.word	0x24015048
 80158c8:	24015050 	.word	0x24015050
 80158cc:	2401504c 	.word	0x2401504c
 80158d0:	24015044 	.word	0x24015044
 80158d4:	24015114 	.word	0x24015114
 80158d8:	24015120 	.word	0x24015120
 80158dc:	24015118 	.word	0x24015118
 80158e0:	2401511c 	.word	0x2401511c
 80158e4:	4154494d 	.word	0x4154494d
 80158e8:	08015a31 	.word	0x08015a31
 80158ec:	08017600 	.word	0x08017600
 80158f0:	24015064 	.word	0x24015064
 80158f4:	24015058 	.word	0x24015058
 80158f8:	2401505c 	.word	0x2401505c

080158fc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80158fc:	b480      	push	{r7}
 80158fe:	b089      	sub	sp, #36	; 0x24
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d04a      	beq.n	80159a6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015910:	697b      	ldr	r3, [r7, #20]
 8015912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015916:	d046      	beq.n	80159a6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	699b      	ldr	r3, [r3, #24]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d142      	bne.n	80159a6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	2b20      	cmp	r3, #32
 8015924:	d902      	bls.n	801592c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8015926:	231f      	movs	r3, #31
 8015928:	61bb      	str	r3, [r7, #24]
 801592a:	e002      	b.n	8015932 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	3b01      	subs	r3, #1
 8015930:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8015932:	4b20      	ldr	r3, [pc, #128]	; (80159b4 <_tx_timer_system_activate+0xb8>)
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	4413      	add	r3, r2
 801593c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801593e:	4b1e      	ldr	r3, [pc, #120]	; (80159b8 <_tx_timer_system_activate+0xbc>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	69fa      	ldr	r2, [r7, #28]
 8015944:	429a      	cmp	r2, r3
 8015946:	d30b      	bcc.n	8015960 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015948:	4b1b      	ldr	r3, [pc, #108]	; (80159b8 <_tx_timer_system_activate+0xbc>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	69fa      	ldr	r2, [r7, #28]
 801594e:	1ad3      	subs	r3, r2, r3
 8015950:	109b      	asrs	r3, r3, #2
 8015952:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015954:	4b19      	ldr	r3, [pc, #100]	; (80159bc <_tx_timer_system_activate+0xc0>)
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	4413      	add	r3, r2
 801595e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d109      	bne.n	801597c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8015974:	69fb      	ldr	r3, [r7, #28]
 8015976:	687a      	ldr	r2, [r7, #4]
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	e011      	b.n	80159a0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801597c:	69fb      	ldr	r3, [r7, #28]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	695b      	ldr	r3, [r3, #20]
 8015986:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	687a      	ldr	r2, [r7, #4]
 801598c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	68fa      	ldr	r2, [r7, #12]
 8015998:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	68ba      	ldr	r2, [r7, #8]
 801599e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	69fa      	ldr	r2, [r7, #28]
 80159a4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80159a6:	bf00      	nop
 80159a8:	3724      	adds	r7, #36	; 0x24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	24015050 	.word	0x24015050
 80159b8:	2401504c 	.word	0x2401504c
 80159bc:	24015048 	.word	0x24015048

080159c0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b087      	sub	sp, #28
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	699b      	ldr	r3, [r3, #24]
 80159cc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d026      	beq.n	8015a22 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	691b      	ldr	r3, [r3, #16]
 80159d8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d108      	bne.n	80159f4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	687a      	ldr	r2, [r7, #4]
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d117      	bne.n	8015a1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	2200      	movs	r2, #0
 80159f0:	601a      	str	r2, [r3, #0]
 80159f2:	e013      	b.n	8015a1c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	695b      	ldr	r3, [r3, #20]
 80159f8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	693a      	ldr	r2, [r7, #16]
 8015a04:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	687a      	ldr	r2, [r7, #4]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d105      	bne.n	8015a1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	697a      	ldr	r2, [r7, #20]
 8015a14:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	693a      	ldr	r2, [r7, #16]
 8015a1a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	619a      	str	r2, [r3, #24]
    }
}
 8015a22:	bf00      	nop
 8015a24:	371c      	adds	r7, #28
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr
	...

08015a30 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b098      	sub	sp, #96	; 0x60
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015a38:	2300      	movs	r3, #0
 8015a3a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	4a73      	ldr	r2, [pc, #460]	; (8015c0c <_tx_timer_thread_entry+0x1dc>)
 8015a40:	4293      	cmp	r3, r2
 8015a42:	f040 80de 	bne.w	8015c02 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a46:	f3ef 8310 	mrs	r3, PRIMASK
 8015a4a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015a50:	b672      	cpsid	i
    return(int_posture);
 8015a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8015a54:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8015a56:	4b6e      	ldr	r3, [pc, #440]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d003      	beq.n	8015a6c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	f107 020c 	add.w	r2, r7, #12
 8015a6a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015a6c:	4b68      	ldr	r3, [pc, #416]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2200      	movs	r2, #0
 8015a72:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8015a74:	4b66      	ldr	r3, [pc, #408]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	3304      	adds	r3, #4
 8015a7a:	4a65      	ldr	r2, [pc, #404]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a7c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015a7e:	4b64      	ldr	r3, [pc, #400]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	4b64      	ldr	r3, [pc, #400]	; (8015c14 <_tx_timer_thread_entry+0x1e4>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d103      	bne.n	8015a92 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015a8a:	4b63      	ldr	r3, [pc, #396]	; (8015c18 <_tx_timer_thread_entry+0x1e8>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	4a60      	ldr	r2, [pc, #384]	; (8015c10 <_tx_timer_thread_entry+0x1e0>)
 8015a90:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8015a92:	4b62      	ldr	r3, [pc, #392]	; (8015c1c <_tx_timer_thread_entry+0x1ec>)
 8015a94:	2200      	movs	r2, #0
 8015a96:	601a      	str	r2, [r3, #0]
 8015a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a9a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9e:	f383 8810 	msr	PRIMASK, r3
}
 8015aa2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8015aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8015aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8015aac:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8015aae:	b672      	cpsid	i
    return(int_posture);
 8015ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8015ab2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8015ab4:	e07f      	b.n	8015bb6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	691b      	ldr	r3, [r3, #16]
 8015abe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8015ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d102      	bne.n	8015ad2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8015acc:	2300      	movs	r3, #0
 8015ace:	60fb      	str	r3, [r7, #12]
 8015ad0:	e00e      	b.n	8015af0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8015ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ad4:	695b      	ldr	r3, [r3, #20]
 8015ad6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015adc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ae2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8015ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ae6:	f107 020c 	add.w	r2, r7, #12
 8015aea:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8015aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015aee:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8015af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b20      	cmp	r3, #32
 8015af6:	d911      	bls.n	8015b1c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8015b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b02:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b0a:	f107 0208 	add.w	r2, r7, #8
 8015b0e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b14:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8015b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b18:	60bb      	str	r3, [r7, #8]
 8015b1a:	e01a      	b.n	8015b52 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b1e:	689b      	ldr	r3, [r3, #8]
 8015b20:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8015b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b24:	68db      	ldr	r3, [r3, #12]
 8015b26:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b2e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d009      	beq.n	8015b4c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b3a:	f107 0208 	add.w	r2, r7, #8
 8015b3e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b44:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8015b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b48:	60bb      	str	r3, [r7, #8]
 8015b4a:	e002      	b.n	8015b52 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b4e:	2200      	movs	r2, #0
 8015b50:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8015b52:	4a33      	ldr	r2, [pc, #204]	; (8015c20 <_tx_timer_thread_entry+0x1f0>)
 8015b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b56:	6013      	str	r3, [r2, #0]
 8015b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5e:	f383 8810 	msr	PRIMASK, r3
}
 8015b62:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8015b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d002      	beq.n	8015b70 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8015b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015b6e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015b70:	f3ef 8310 	mrs	r3, PRIMASK
 8015b74:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015b78:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015b7a:	b672      	cpsid	i
    return(int_posture);
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015b7e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015b80:	4b27      	ldr	r3, [pc, #156]	; (8015c20 <_tx_timer_thread_entry+0x1f0>)
 8015b82:	2200      	movs	r2, #0
 8015b84:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d105      	bne.n	8015b9a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b90:	2200      	movs	r2, #0
 8015b92:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8015b94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015b96:	f7ff feb1 	bl	80158fc <_tx_timer_system_activate>
 8015b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b9c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	f383 8810 	msr	PRIMASK, r3
}
 8015ba4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8015baa:	623b      	str	r3, [r7, #32]
    return(posture);
 8015bac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015bae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015bb0:	b672      	cpsid	i
    return(int_posture);
 8015bb2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	f47f af7c 	bne.w	8015ab6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8015bbe:	4b17      	ldr	r3, [pc, #92]	; (8015c1c <_tx_timer_thread_entry+0x1ec>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d116      	bne.n	8015bf4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8015bc6:	4b17      	ldr	r3, [pc, #92]	; (8015c24 <_tx_timer_thread_entry+0x1f4>)
 8015bc8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8015bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bcc:	2203      	movs	r2, #3
 8015bce:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8015bd6:	4b14      	ldr	r3, [pc, #80]	; (8015c28 <_tx_timer_thread_entry+0x1f8>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	4a12      	ldr	r2, [pc, #72]	; (8015c28 <_tx_timer_thread_entry+0x1f8>)
 8015bde:	6013      	str	r3, [r2, #0]
 8015be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015be2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	f383 8810 	msr	PRIMASK, r3
}
 8015bea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8015bec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015bee:	f7ff fbbf 	bl	8015370 <_tx_thread_system_suspend>
 8015bf2:	e728      	b.n	8015a46 <_tx_timer_thread_entry+0x16>
 8015bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015bf6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	f383 8810 	msr	PRIMASK, r3
}
 8015bfe:	bf00      	nop
            TX_DISABLE
 8015c00:	e721      	b.n	8015a46 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8015c02:	bf00      	nop
 8015c04:	3760      	adds	r7, #96	; 0x60
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	4154494d 	.word	0x4154494d
 8015c10:	24015050 	.word	0x24015050
 8015c14:	2401504c 	.word	0x2401504c
 8015c18:	24015048 	.word	0x24015048
 8015c1c:	24015054 	.word	0x24015054
 8015c20:	24015060 	.word	0x24015060
 8015c24:	24015064 	.word	0x24015064
 8015c28:	24014fb4 	.word	0x24014fb4

08015c2c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b08a      	sub	sp, #40	; 0x28
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	60f8      	str	r0, [r7, #12]
 8015c34:	60b9      	str	r1, [r7, #8]
 8015c36:	607a      	str	r2, [r7, #4]
 8015c38:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d102      	bne.n	8015c4a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c44:	2302      	movs	r3, #2
 8015c46:	627b      	str	r3, [r7, #36]	; 0x24
 8015c48:	e029      	b.n	8015c9e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	4a2d      	ldr	r2, [pc, #180]	; (8015d04 <_txe_byte_allocate+0xd8>)
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d002      	beq.n	8015c5a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015c54:	2302      	movs	r3, #2
 8015c56:	627b      	str	r3, [r7, #36]	; 0x24
 8015c58:	e021      	b.n	8015c9e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d102      	bne.n	8015c66 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015c60:	2303      	movs	r3, #3
 8015c62:	627b      	str	r3, [r7, #36]	; 0x24
 8015c64:	e01b      	b.n	8015c9e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d102      	bne.n	8015c72 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015c6c:	2305      	movs	r3, #5
 8015c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8015c70:	e015      	b.n	8015c9e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	69db      	ldr	r3, [r3, #28]
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d902      	bls.n	8015c82 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015c7c:	2305      	movs	r3, #5
 8015c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8015c80:	e00d      	b.n	8015c9e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d00a      	beq.n	8015c9e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015c88:	f3ef 8305 	mrs	r3, IPSR
 8015c8c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015c8e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015c90:	4b1d      	ldr	r3, [pc, #116]	; (8015d08 <_txe_byte_allocate+0xdc>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	4313      	orrs	r3, r2
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d001      	beq.n	8015c9e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015c9a:	2304      	movs	r3, #4
 8015c9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d108      	bne.n	8015cb6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015ca4:	4b19      	ldr	r3, [pc, #100]	; (8015d0c <_txe_byte_allocate+0xe0>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8015caa:	6a3b      	ldr	r3, [r7, #32]
 8015cac:	4a18      	ldr	r2, [pc, #96]	; (8015d10 <_txe_byte_allocate+0xe4>)
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d101      	bne.n	8015cb6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015cb2:	2313      	movs	r3, #19
 8015cb4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8015cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d114      	bne.n	8015ce6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cbc:	f3ef 8305 	mrs	r3, IPSR
 8015cc0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015cc2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015cc4:	4b10      	ldr	r3, [pc, #64]	; (8015d08 <_txe_byte_allocate+0xdc>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00b      	beq.n	8015ce6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cce:	f3ef 8305 	mrs	r3, IPSR
 8015cd2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015cd4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015cd6:	4b0c      	ldr	r3, [pc, #48]	; (8015d08 <_txe_byte_allocate+0xdc>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	4313      	orrs	r3, r2
 8015cdc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015ce0:	d201      	bcs.n	8015ce6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015ce2:	2313      	movs	r3, #19
 8015ce4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d106      	bne.n	8015cfa <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	687a      	ldr	r2, [r7, #4]
 8015cf0:	68b9      	ldr	r1, [r7, #8]
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7fc ff88 	bl	8012c08 <_tx_byte_allocate>
 8015cf8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3728      	adds	r7, #40	; 0x28
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	42595445 	.word	0x42595445
 8015d08:	2400006c 	.word	0x2400006c
 8015d0c:	24014f1c 	.word	0x24014f1c
 8015d10:	24015064 	.word	0x24015064

08015d14 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b092      	sub	sp, #72	; 0x48
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	60f8      	str	r0, [r7, #12]
 8015d1c:	60b9      	str	r1, [r7, #8]
 8015d1e:	607a      	str	r2, [r7, #4]
 8015d20:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015d22:	2300      	movs	r3, #0
 8015d24:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d102      	bne.n	8015d32 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d2c:	2302      	movs	r3, #2
 8015d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8015d30:	e075      	b.n	8015e1e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d34:	2b34      	cmp	r3, #52	; 0x34
 8015d36:	d002      	beq.n	8015d3e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d38:	2302      	movs	r3, #2
 8015d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8015d3c:	e06f      	b.n	8015e1e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015d46:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d48:	b672      	cpsid	i
    return(int_posture);
 8015d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015d4c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015d4e:	4b3b      	ldr	r3, [pc, #236]	; (8015e3c <_txe_byte_pool_create+0x128>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	3301      	adds	r3, #1
 8015d54:	4a39      	ldr	r2, [pc, #228]	; (8015e3c <_txe_byte_pool_create+0x128>)
 8015d56:	6013      	str	r3, [r2, #0]
 8015d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d5a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5e:	f383 8810 	msr	PRIMASK, r3
}
 8015d62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015d64:	4b36      	ldr	r3, [pc, #216]	; (8015e40 <_txe_byte_pool_create+0x12c>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8015d6e:	e009      	b.n	8015d84 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d00b      	beq.n	8015d90 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8015d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d80:	3301      	adds	r3, #1
 8015d82:	643b      	str	r3, [r7, #64]	; 0x40
 8015d84:	4b2f      	ldr	r3, [pc, #188]	; (8015e44 <_txe_byte_pool_create+0x130>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d3f0      	bcc.n	8015d70 <_txe_byte_pool_create+0x5c>
 8015d8e:	e000      	b.n	8015d92 <_txe_byte_pool_create+0x7e>
                break;
 8015d90:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d92:	f3ef 8310 	mrs	r3, PRIMASK
 8015d96:	623b      	str	r3, [r7, #32]
    return(posture);
 8015d98:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015d9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d9c:	b672      	cpsid	i
    return(int_posture);
 8015d9e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015da0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015da2:	4b26      	ldr	r3, [pc, #152]	; (8015e3c <_txe_byte_pool_create+0x128>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	3b01      	subs	r3, #1
 8015da8:	4a24      	ldr	r2, [pc, #144]	; (8015e3c <_txe_byte_pool_create+0x128>)
 8015daa:	6013      	str	r3, [r2, #0]
 8015dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db2:	f383 8810 	msr	PRIMASK, r3
}
 8015db6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015db8:	f7ff f9a0 	bl	80150fc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8015dbc:	68fa      	ldr	r2, [r7, #12]
 8015dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d102      	bne.n	8015dca <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8015dc4:	2302      	movs	r3, #2
 8015dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8015dc8:	e029      	b.n	8015e1e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d102      	bne.n	8015dd6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8015dd0:	2303      	movs	r3, #3
 8015dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8015dd4:	e023      	b.n	8015e1e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	2b63      	cmp	r3, #99	; 0x63
 8015dda:	d802      	bhi.n	8015de2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8015ddc:	2305      	movs	r3, #5
 8015dde:	647b      	str	r3, [r7, #68]	; 0x44
 8015de0:	e01d      	b.n	8015e1e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015de2:	4b19      	ldr	r3, [pc, #100]	; (8015e48 <_txe_byte_pool_create+0x134>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dea:	4a18      	ldr	r2, [pc, #96]	; (8015e4c <_txe_byte_pool_create+0x138>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d101      	bne.n	8015df4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015df0:	2313      	movs	r3, #19
 8015df2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015df4:	f3ef 8305 	mrs	r3, IPSR
 8015df8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015dfa:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015dfc:	4b14      	ldr	r3, [pc, #80]	; (8015e50 <_txe_byte_pool_create+0x13c>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4313      	orrs	r3, r2
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d00b      	beq.n	8015e1e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015e06:	f3ef 8305 	mrs	r3, IPSR
 8015e0a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015e0c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015e0e:	4b10      	ldr	r3, [pc, #64]	; (8015e50 <_txe_byte_pool_create+0x13c>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	4313      	orrs	r3, r2
 8015e14:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015e18:	d201      	bcs.n	8015e1e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015e1a:	2313      	movs	r3, #19
 8015e1c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d106      	bne.n	8015e32 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	68b9      	ldr	r1, [r7, #8]
 8015e2a:	68f8      	ldr	r0, [r7, #12]
 8015e2c:	f7fd f82e 	bl	8012e8c <_tx_byte_pool_create>
 8015e30:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3748      	adds	r7, #72	; 0x48
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	24014fb4 	.word	0x24014fb4
 8015e40:	24014f0c 	.word	0x24014f0c
 8015e44:	24014f10 	.word	0x24014f10
 8015e48:	24014f1c 	.word	0x24014f1c
 8015e4c:	24015064 	.word	0x24015064
 8015e50:	2400006c 	.word	0x2400006c

08015e54 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b094      	sub	sp, #80	; 0x50
 8015e58:	af02      	add	r7, sp, #8
 8015e5a:	60f8      	str	r0, [r7, #12]
 8015e5c:	60b9      	str	r1, [r7, #8]
 8015e5e:	607a      	str	r2, [r7, #4]
 8015e60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015e62:	2300      	movs	r3, #0
 8015e64:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d102      	bne.n	8015e72 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015e6c:	2309      	movs	r3, #9
 8015e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8015e70:	e083      	b.n	8015f7a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8015e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e74:	2b38      	cmp	r3, #56	; 0x38
 8015e76:	d002      	beq.n	8015e7e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015e78:	2309      	movs	r3, #9
 8015e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8015e7c:	e07d      	b.n	8015f7a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015e86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e88:	b672      	cpsid	i
    return(int_posture);
 8015e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015e8c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015e8e:	4b43      	ldr	r3, [pc, #268]	; (8015f9c <_txe_queue_create+0x148>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	3301      	adds	r3, #1
 8015e94:	4a41      	ldr	r2, [pc, #260]	; (8015f9c <_txe_queue_create+0x148>)
 8015e96:	6013      	str	r3, [r2, #0]
 8015e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e9a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9e:	f383 8810 	msr	PRIMASK, r3
}
 8015ea2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8015ea4:	4b3e      	ldr	r3, [pc, #248]	; (8015fa0 <_txe_queue_create+0x14c>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015eaa:	2300      	movs	r3, #0
 8015eac:	643b      	str	r3, [r7, #64]	; 0x40
 8015eae:	e009      	b.n	8015ec4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d00b      	beq.n	8015ed0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8015eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ec0:	3301      	adds	r3, #1
 8015ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8015ec4:	4b37      	ldr	r3, [pc, #220]	; (8015fa4 <_txe_queue_create+0x150>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d3f0      	bcc.n	8015eb0 <_txe_queue_create+0x5c>
 8015ece:	e000      	b.n	8015ed2 <_txe_queue_create+0x7e>
                break;
 8015ed0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8015ed6:	623b      	str	r3, [r7, #32]
    return(posture);
 8015ed8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015eda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015edc:	b672      	cpsid	i
    return(int_posture);
 8015ede:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015ee0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015ee2:	4b2e      	ldr	r3, [pc, #184]	; (8015f9c <_txe_queue_create+0x148>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	3b01      	subs	r3, #1
 8015ee8:	4a2c      	ldr	r2, [pc, #176]	; (8015f9c <_txe_queue_create+0x148>)
 8015eea:	6013      	str	r3, [r2, #0]
 8015eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef2:	f383 8810 	msr	PRIMASK, r3
}
 8015ef6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015ef8:	f7ff f900 	bl	80150fc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8015efc:	68fa      	ldr	r2, [r7, #12]
 8015efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d102      	bne.n	8015f0a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8015f04:	2309      	movs	r3, #9
 8015f06:	647b      	str	r3, [r7, #68]	; 0x44
 8015f08:	e037      	b.n	8015f7a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d102      	bne.n	8015f16 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8015f10:	2303      	movs	r3, #3
 8015f12:	647b      	str	r3, [r7, #68]	; 0x44
 8015f14:	e031      	b.n	8015f7a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d102      	bne.n	8015f22 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015f1c:	2305      	movs	r3, #5
 8015f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8015f20:	e02b      	b.n	8015f7a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b10      	cmp	r3, #16
 8015f26:	d902      	bls.n	8015f2e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8015f28:	2305      	movs	r3, #5
 8015f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8015f2c:	e025      	b.n	8015f7a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8015f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f30:	089b      	lsrs	r3, r3, #2
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d902      	bls.n	8015f3e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8015f38:	2305      	movs	r3, #5
 8015f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8015f3c:	e01d      	b.n	8015f7a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015f3e:	4b1a      	ldr	r3, [pc, #104]	; (8015fa8 <_txe_queue_create+0x154>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f46:	4a19      	ldr	r2, [pc, #100]	; (8015fac <_txe_queue_create+0x158>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d101      	bne.n	8015f50 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015f4c:	2313      	movs	r3, #19
 8015f4e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f50:	f3ef 8305 	mrs	r3, IPSR
 8015f54:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015f56:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f58:	4b15      	ldr	r3, [pc, #84]	; (8015fb0 <_txe_queue_create+0x15c>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	4313      	orrs	r3, r2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d00b      	beq.n	8015f7a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f62:	f3ef 8305 	mrs	r3, IPSR
 8015f66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015f68:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015f6a:	4b11      	ldr	r3, [pc, #68]	; (8015fb0 <_txe_queue_create+0x15c>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4313      	orrs	r3, r2
 8015f70:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015f74:	d201      	bcs.n	8015f7a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015f76:	2313      	movs	r3, #19
 8015f78:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d108      	bne.n	8015f92 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8015f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f82:	9300      	str	r3, [sp, #0]
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	68f8      	ldr	r0, [r7, #12]
 8015f8c:	f7fe f876 	bl	801407c <_tx_queue_create>
 8015f90:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3748      	adds	r7, #72	; 0x48
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	24014fb4 	.word	0x24014fb4
 8015fa0:	24014eec 	.word	0x24014eec
 8015fa4:	24014ef0 	.word	0x24014ef0
 8015fa8:	24014f1c 	.word	0x24014f1c
 8015fac:	24015064 	.word	0x24015064
 8015fb0:	2400006c 	.word	0x2400006c

08015fb4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b088      	sub	sp, #32
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d102      	bne.n	8015fd0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015fca:	2309      	movs	r3, #9
 8015fcc:	61fb      	str	r3, [r7, #28]
 8015fce:	e025      	b.n	801601c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4a18      	ldr	r2, [pc, #96]	; (8016038 <_txe_queue_receive+0x84>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d002      	beq.n	8015fe0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015fda:	2309      	movs	r3, #9
 8015fdc:	61fb      	str	r3, [r7, #28]
 8015fde:	e01d      	b.n	801601c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d102      	bne.n	8015fec <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015fe6:	2303      	movs	r3, #3
 8015fe8:	61fb      	str	r3, [r7, #28]
 8015fea:	e017      	b.n	801601c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d014      	beq.n	801601c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015ff2:	f3ef 8305 	mrs	r3, IPSR
 8015ff6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015ff8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015ffa:	4b10      	ldr	r3, [pc, #64]	; (801603c <_txe_queue_receive+0x88>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	4313      	orrs	r3, r2
 8016000:	2b00      	cmp	r3, #0
 8016002:	d002      	beq.n	801600a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016004:	2304      	movs	r3, #4
 8016006:	61fb      	str	r3, [r7, #28]
 8016008:	e008      	b.n	801601c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801600a:	4b0d      	ldr	r3, [pc, #52]	; (8016040 <_txe_queue_receive+0x8c>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016010:	69bb      	ldr	r3, [r7, #24]
 8016012:	4a0c      	ldr	r2, [pc, #48]	; (8016044 <_txe_queue_receive+0x90>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d101      	bne.n	801601c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016018:	2304      	movs	r3, #4
 801601a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d105      	bne.n	801602e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	68b9      	ldr	r1, [r7, #8]
 8016026:	68f8      	ldr	r0, [r7, #12]
 8016028:	f7fe f89c 	bl	8014164 <_tx_queue_receive>
 801602c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801602e:	69fb      	ldr	r3, [r7, #28]
}
 8016030:	4618      	mov	r0, r3
 8016032:	3720      	adds	r7, #32
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	51554555 	.word	0x51554555
 801603c:	2400006c 	.word	0x2400006c
 8016040:	24014f1c 	.word	0x24014f1c
 8016044:	24015064 	.word	0x24015064

08016048 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b088      	sub	sp, #32
 801604c:	af00      	add	r7, sp, #0
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016054:	2300      	movs	r3, #0
 8016056:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d102      	bne.n	8016064 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801605e:	2309      	movs	r3, #9
 8016060:	61fb      	str	r3, [r7, #28]
 8016062:	e025      	b.n	80160b0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4a18      	ldr	r2, [pc, #96]	; (80160cc <_txe_queue_send+0x84>)
 801606a:	4293      	cmp	r3, r2
 801606c:	d002      	beq.n	8016074 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801606e:	2309      	movs	r3, #9
 8016070:	61fb      	str	r3, [r7, #28]
 8016072:	e01d      	b.n	80160b0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d102      	bne.n	8016080 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801607a:	2303      	movs	r3, #3
 801607c:	61fb      	str	r3, [r7, #28]
 801607e:	e017      	b.n	80160b0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d014      	beq.n	80160b0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016086:	f3ef 8305 	mrs	r3, IPSR
 801608a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801608c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801608e:	4b10      	ldr	r3, [pc, #64]	; (80160d0 <_txe_queue_send+0x88>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4313      	orrs	r3, r2
 8016094:	2b00      	cmp	r3, #0
 8016096:	d002      	beq.n	801609e <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016098:	2304      	movs	r3, #4
 801609a:	61fb      	str	r3, [r7, #28]
 801609c:	e008      	b.n	80160b0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801609e:	4b0d      	ldr	r3, [pc, #52]	; (80160d4 <_txe_queue_send+0x8c>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	4a0c      	ldr	r2, [pc, #48]	; (80160d8 <_txe_queue_send+0x90>)
 80160a8:	4293      	cmp	r3, r2
 80160aa:	d101      	bne.n	80160b0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80160ac:	2304      	movs	r3, #4
 80160ae:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d105      	bne.n	80160c2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	68b9      	ldr	r1, [r7, #8]
 80160ba:	68f8      	ldr	r0, [r7, #12]
 80160bc:	f7fe fa1a 	bl	80144f4 <_tx_queue_send>
 80160c0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80160c2:	69fb      	ldr	r3, [r7, #28]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3720      	adds	r7, #32
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	51554555 	.word	0x51554555
 80160d0:	2400006c 	.word	0x2400006c
 80160d4:	24014f1c 	.word	0x24014f1c
 80160d8:	24015064 	.word	0x24015064

080160dc <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b092      	sub	sp, #72	; 0x48
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	60f8      	str	r0, [r7, #12]
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
 80160e8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80160ea:	2300      	movs	r3, #0
 80160ec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d102      	bne.n	80160fa <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80160f4:	230c      	movs	r3, #12
 80160f6:	647b      	str	r3, [r7, #68]	; 0x44
 80160f8:	e054      	b.n	80161a4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	2b1c      	cmp	r3, #28
 80160fe:	d002      	beq.n	8016106 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016100:	230c      	movs	r3, #12
 8016102:	647b      	str	r3, [r7, #68]	; 0x44
 8016104:	e04e      	b.n	80161a4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016106:	f3ef 8310 	mrs	r3, PRIMASK
 801610a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801610e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016110:	b672      	cpsid	i
    return(int_posture);
 8016112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016114:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016116:	4b36      	ldr	r3, [pc, #216]	; (80161f0 <_txe_semaphore_create+0x114>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	3301      	adds	r3, #1
 801611c:	4a34      	ldr	r2, [pc, #208]	; (80161f0 <_txe_semaphore_create+0x114>)
 801611e:	6013      	str	r3, [r2, #0]
 8016120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016122:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016126:	f383 8810 	msr	PRIMASK, r3
}
 801612a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801612c:	4b31      	ldr	r3, [pc, #196]	; (80161f4 <_txe_semaphore_create+0x118>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016132:	2300      	movs	r3, #0
 8016134:	643b      	str	r3, [r7, #64]	; 0x40
 8016136:	e009      	b.n	801614c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8016138:	68fa      	ldr	r2, [r7, #12]
 801613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801613c:	429a      	cmp	r2, r3
 801613e:	d00b      	beq.n	8016158 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8016140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016142:	695b      	ldr	r3, [r3, #20]
 8016144:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016148:	3301      	adds	r3, #1
 801614a:	643b      	str	r3, [r7, #64]	; 0x40
 801614c:	4b2a      	ldr	r3, [pc, #168]	; (80161f8 <_txe_semaphore_create+0x11c>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016152:	429a      	cmp	r2, r3
 8016154:	d3f0      	bcc.n	8016138 <_txe_semaphore_create+0x5c>
 8016156:	e000      	b.n	801615a <_txe_semaphore_create+0x7e>
                break;
 8016158:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801615a:	f3ef 8310 	mrs	r3, PRIMASK
 801615e:	623b      	str	r3, [r7, #32]
    return(posture);
 8016160:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016162:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016164:	b672      	cpsid	i
    return(int_posture);
 8016166:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016168:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801616a:	4b21      	ldr	r3, [pc, #132]	; (80161f0 <_txe_semaphore_create+0x114>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	3b01      	subs	r3, #1
 8016170:	4a1f      	ldr	r2, [pc, #124]	; (80161f0 <_txe_semaphore_create+0x114>)
 8016172:	6013      	str	r3, [r2, #0]
 8016174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016176:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617a:	f383 8810 	msr	PRIMASK, r3
}
 801617e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016180:	f7fe ffbc 	bl	80150fc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016188:	429a      	cmp	r2, r3
 801618a:	d102      	bne.n	8016192 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801618c:	230c      	movs	r3, #12
 801618e:	647b      	str	r3, [r7, #68]	; 0x44
 8016190:	e008      	b.n	80161a4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016192:	4b1a      	ldr	r3, [pc, #104]	; (80161fc <_txe_semaphore_create+0x120>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801619a:	4a19      	ldr	r2, [pc, #100]	; (8016200 <_txe_semaphore_create+0x124>)
 801619c:	4293      	cmp	r3, r2
 801619e:	d101      	bne.n	80161a4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161a0:	2313      	movs	r3, #19
 80161a2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d114      	bne.n	80161d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161aa:	f3ef 8305 	mrs	r3, IPSR
 80161ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80161b0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80161b2:	4b14      	ldr	r3, [pc, #80]	; (8016204 <_txe_semaphore_create+0x128>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	4313      	orrs	r3, r2
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d00b      	beq.n	80161d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161bc:	f3ef 8305 	mrs	r3, IPSR
 80161c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80161c2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80161c4:	4b0f      	ldr	r3, [pc, #60]	; (8016204 <_txe_semaphore_create+0x128>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	4313      	orrs	r3, r2
 80161ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80161ce:	d201      	bcs.n	80161d4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161d0:	2313      	movs	r3, #19
 80161d2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d105      	bne.n	80161e6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	68b9      	ldr	r1, [r7, #8]
 80161de:	68f8      	ldr	r0, [r7, #12]
 80161e0:	f7fe fb30 	bl	8014844 <_tx_semaphore_create>
 80161e4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80161e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3748      	adds	r7, #72	; 0x48
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	24014fb4 	.word	0x24014fb4
 80161f4:	24014ee4 	.word	0x24014ee4
 80161f8:	24014ee8 	.word	0x24014ee8
 80161fc:	24014f1c 	.word	0x24014f1c
 8016200:	24015064 	.word	0x24015064
 8016204:	2400006c 	.word	0x2400006c

08016208 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b086      	sub	sp, #24
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016210:	2300      	movs	r3, #0
 8016212:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d102      	bne.n	8016220 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801621a:	230c      	movs	r3, #12
 801621c:	617b      	str	r3, [r7, #20]
 801621e:	e01c      	b.n	801625a <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	4a13      	ldr	r2, [pc, #76]	; (8016274 <_txe_semaphore_delete+0x6c>)
 8016226:	4293      	cmp	r3, r2
 8016228:	d002      	beq.n	8016230 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801622a:	230c      	movs	r3, #12
 801622c:	617b      	str	r3, [r7, #20]
 801622e:	e014      	b.n	801625a <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016230:	f3ef 8305 	mrs	r3, IPSR
 8016234:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016236:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016238:	4b0f      	ldr	r3, [pc, #60]	; (8016278 <_txe_semaphore_delete+0x70>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	4313      	orrs	r3, r2
 801623e:	2b00      	cmp	r3, #0
 8016240:	d002      	beq.n	8016248 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8016242:	2313      	movs	r3, #19
 8016244:	617b      	str	r3, [r7, #20]
 8016246:	e008      	b.n	801625a <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016248:	4b0c      	ldr	r3, [pc, #48]	; (801627c <_txe_semaphore_delete+0x74>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	4a0b      	ldr	r2, [pc, #44]	; (8016280 <_txe_semaphore_delete+0x78>)
 8016252:	4293      	cmp	r3, r2
 8016254:	d101      	bne.n	801625a <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016256:	2313      	movs	r3, #19
 8016258:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d103      	bne.n	8016268 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7fe fb41 	bl	80148e8 <_tx_semaphore_delete>
 8016266:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8016268:	697b      	ldr	r3, [r7, #20]
}
 801626a:	4618      	mov	r0, r3
 801626c:	3718      	adds	r7, #24
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	53454d41 	.word	0x53454d41
 8016278:	2400006c 	.word	0x2400006c
 801627c:	24014f1c 	.word	0x24014f1c
 8016280:	24015064 	.word	0x24015064

08016284 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b086      	sub	sp, #24
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801628e:	2300      	movs	r3, #0
 8016290:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d102      	bne.n	801629e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016298:	230c      	movs	r3, #12
 801629a:	617b      	str	r3, [r7, #20]
 801629c:	e01f      	b.n	80162de <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	4a15      	ldr	r2, [pc, #84]	; (80162f8 <_txe_semaphore_get+0x74>)
 80162a4:	4293      	cmp	r3, r2
 80162a6:	d002      	beq.n	80162ae <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80162a8:	230c      	movs	r3, #12
 80162aa:	617b      	str	r3, [r7, #20]
 80162ac:	e017      	b.n	80162de <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d014      	beq.n	80162de <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162b4:	f3ef 8305 	mrs	r3, IPSR
 80162b8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80162ba:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162bc:	4b0f      	ldr	r3, [pc, #60]	; (80162fc <_txe_semaphore_get+0x78>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	4313      	orrs	r3, r2
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d002      	beq.n	80162cc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80162c6:	2304      	movs	r3, #4
 80162c8:	617b      	str	r3, [r7, #20]
 80162ca:	e008      	b.n	80162de <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80162cc:	4b0c      	ldr	r3, [pc, #48]	; (8016300 <_txe_semaphore_get+0x7c>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	4a0b      	ldr	r2, [pc, #44]	; (8016304 <_txe_semaphore_get+0x80>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d101      	bne.n	80162de <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80162da:	2304      	movs	r3, #4
 80162dc:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d104      	bne.n	80162ee <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80162e4:	6839      	ldr	r1, [r7, #0]
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7fe fb8e 	bl	8014a08 <_tx_semaphore_get>
 80162ec:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80162ee:	697b      	ldr	r3, [r7, #20]
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3718      	adds	r7, #24
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	53454d41 	.word	0x53454d41
 80162fc:	2400006c 	.word	0x2400006c
 8016300:	24014f1c 	.word	0x24014f1c
 8016304:	24015064 	.word	0x24015064

08016308 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d102      	bne.n	801631c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016316:	230c      	movs	r3, #12
 8016318:	60fb      	str	r3, [r7, #12]
 801631a:	e00b      	b.n	8016334 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4a07      	ldr	r2, [pc, #28]	; (8016340 <_txe_semaphore_put+0x38>)
 8016322:	4293      	cmp	r3, r2
 8016324:	d002      	beq.n	801632c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016326:	230c      	movs	r3, #12
 8016328:	60fb      	str	r3, [r7, #12]
 801632a:	e003      	b.n	8016334 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f7fe fbfd 	bl	8014b2c <_tx_semaphore_put>
 8016332:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016334:	68fb      	ldr	r3, [r7, #12]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	53454d41 	.word	0x53454d41

08016344 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b09a      	sub	sp, #104	; 0x68
 8016348:	af06      	add	r7, sp, #24
 801634a:	60f8      	str	r0, [r7, #12]
 801634c:	60b9      	str	r1, [r7, #8]
 801634e:	607a      	str	r2, [r7, #4]
 8016350:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016352:	2300      	movs	r3, #0
 8016354:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d102      	bne.n	8016362 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801635c:	230e      	movs	r3, #14
 801635e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016360:	e0bb      	b.n	80164da <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8016362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016364:	2bb0      	cmp	r3, #176	; 0xb0
 8016366:	d002      	beq.n	801636e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016368:	230e      	movs	r3, #14
 801636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801636c:	e0b5      	b.n	80164da <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801636e:	f3ef 8310 	mrs	r3, PRIMASK
 8016372:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8016374:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8016376:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8016378:	b672      	cpsid	i
    return(int_posture);
 801637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801637c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801637e:	4b64      	ldr	r3, [pc, #400]	; (8016510 <_txe_thread_create+0x1cc>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	3301      	adds	r3, #1
 8016384:	4a62      	ldr	r2, [pc, #392]	; (8016510 <_txe_thread_create+0x1cc>)
 8016386:	6013      	str	r3, [r2, #0]
 8016388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801638a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638e:	f383 8810 	msr	PRIMASK, r3
}
 8016392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8016394:	2300      	movs	r3, #0
 8016396:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8016398:	4b5e      	ldr	r3, [pc, #376]	; (8016514 <_txe_thread_create+0x1d0>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801639e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163a0:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80163a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163a4:	3b01      	subs	r3, #1
 80163a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163a8:	4413      	add	r3, r2
 80163aa:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80163ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ae:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80163b0:	2300      	movs	r3, #0
 80163b2:	647b      	str	r3, [r7, #68]	; 0x44
 80163b4:	e02b      	b.n	801640e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80163b6:	68fa      	ldr	r2, [r7, #12]
 80163b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d101      	bne.n	80163c2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80163be:	2301      	movs	r3, #1
 80163c0:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80163c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d028      	beq.n	801641a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80163c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d308      	bcc.n	80163e4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80163d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80163d8:	429a      	cmp	r2, r3
 80163da:	d203      	bcs.n	80163e4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80163dc:	2300      	movs	r3, #0
 80163de:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80163e0:	2301      	movs	r3, #1
 80163e2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80163e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d308      	bcc.n	8016400 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80163ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163f0:	691b      	ldr	r3, [r3, #16]
 80163f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d203      	bcs.n	8016400 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80163f8:	2300      	movs	r3, #0
 80163fa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80163fc:	2301      	movs	r3, #1
 80163fe:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8016400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016406:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801640a:	3301      	adds	r3, #1
 801640c:	647b      	str	r3, [r7, #68]	; 0x44
 801640e:	4b42      	ldr	r3, [pc, #264]	; (8016518 <_txe_thread_create+0x1d4>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016414:	429a      	cmp	r2, r3
 8016416:	d3ce      	bcc.n	80163b6 <_txe_thread_create+0x72>
 8016418:	e000      	b.n	801641c <_txe_thread_create+0xd8>
                break;
 801641a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801641c:	f3ef 8310 	mrs	r3, PRIMASK
 8016420:	61fb      	str	r3, [r7, #28]
    return(posture);
 8016422:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8016424:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016426:	b672      	cpsid	i
    return(int_posture);
 8016428:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801642a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801642c:	4b38      	ldr	r3, [pc, #224]	; (8016510 <_txe_thread_create+0x1cc>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	3b01      	subs	r3, #1
 8016432:	4a37      	ldr	r2, [pc, #220]	; (8016510 <_txe_thread_create+0x1cc>)
 8016434:	6013      	str	r3, [r2, #0]
 8016436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016438:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801643a:	6a3b      	ldr	r3, [r7, #32]
 801643c:	f383 8810 	msr	PRIMASK, r3
}
 8016440:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016442:	f7fe fe5b 	bl	80150fc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801644a:	429a      	cmp	r2, r3
 801644c:	d102      	bne.n	8016454 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801644e:	230e      	movs	r3, #14
 8016450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016452:	e042      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016456:	2b00      	cmp	r3, #0
 8016458:	d102      	bne.n	8016460 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801645a:	2303      	movs	r3, #3
 801645c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801645e:	e03c      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d102      	bne.n	801646c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016466:	2303      	movs	r3, #3
 8016468:	64fb      	str	r3, [r7, #76]	; 0x4c
 801646a:	e036      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 801646c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801646e:	2bc7      	cmp	r3, #199	; 0xc7
 8016470:	d802      	bhi.n	8016478 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8016472:	2305      	movs	r3, #5
 8016474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016476:	e030      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8016478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801647a:	2b1f      	cmp	r3, #31
 801647c:	d902      	bls.n	8016484 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801647e:	230f      	movs	r3, #15
 8016480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016482:	e02a      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8016484:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016488:	429a      	cmp	r2, r3
 801648a:	d902      	bls.n	8016492 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801648c:	2318      	movs	r3, #24
 801648e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016490:	e023      	b.n	80164da <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8016492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016494:	2b01      	cmp	r3, #1
 8016496:	d902      	bls.n	801649e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8016498:	2310      	movs	r3, #16
 801649a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801649c:	e01d      	b.n	80164da <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801649e:	4b1f      	ldr	r3, [pc, #124]	; (801651c <_txe_thread_create+0x1d8>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80164a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a6:	4a1e      	ldr	r2, [pc, #120]	; (8016520 <_txe_thread_create+0x1dc>)
 80164a8:	4293      	cmp	r3, r2
 80164aa:	d101      	bne.n	80164b0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80164ac:	2313      	movs	r3, #19
 80164ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164b0:	f3ef 8305 	mrs	r3, IPSR
 80164b4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80164b6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80164b8:	4b1a      	ldr	r3, [pc, #104]	; (8016524 <_txe_thread_create+0x1e0>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	4313      	orrs	r3, r2
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d00b      	beq.n	80164da <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164c2:	f3ef 8305 	mrs	r3, IPSR
 80164c6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80164c8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80164ca:	4b16      	ldr	r3, [pc, #88]	; (8016524 <_txe_thread_create+0x1e0>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4313      	orrs	r3, r2
 80164d0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80164d4:	d201      	bcs.n	80164da <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80164d6:	2313      	movs	r3, #19
 80164d8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80164da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d112      	bne.n	8016506 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80164e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164e2:	9305      	str	r3, [sp, #20]
 80164e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164e6:	9304      	str	r3, [sp, #16]
 80164e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164ea:	9303      	str	r3, [sp, #12]
 80164ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80164ee:	9302      	str	r3, [sp, #8]
 80164f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164f2:	9301      	str	r3, [sp, #4]
 80164f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164f6:	9300      	str	r3, [sp, #0]
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	68b9      	ldr	r1, [r7, #8]
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f7fe fb6c 	bl	8014bdc <_tx_thread_create>
 8016504:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016508:	4618      	mov	r0, r3
 801650a:	3750      	adds	r7, #80	; 0x50
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}
 8016510:	24014fb4 	.word	0x24014fb4
 8016514:	24014f24 	.word	0x24014f24
 8016518:	24014f28 	.word	0x24014f28
 801651c:	24014f1c 	.word	0x24014f1c
 8016520:	24015064 	.word	0x24015064
 8016524:	2400006c 	.word	0x2400006c

08016528 <__errno>:
 8016528:	4b01      	ldr	r3, [pc, #4]	; (8016530 <__errno+0x8>)
 801652a:	6818      	ldr	r0, [r3, #0]
 801652c:	4770      	bx	lr
 801652e:	bf00      	nop
 8016530:	24000070 	.word	0x24000070

08016534 <__libc_init_array>:
 8016534:	b570      	push	{r4, r5, r6, lr}
 8016536:	4d0d      	ldr	r5, [pc, #52]	; (801656c <__libc_init_array+0x38>)
 8016538:	4c0d      	ldr	r4, [pc, #52]	; (8016570 <__libc_init_array+0x3c>)
 801653a:	1b64      	subs	r4, r4, r5
 801653c:	10a4      	asrs	r4, r4, #2
 801653e:	2600      	movs	r6, #0
 8016540:	42a6      	cmp	r6, r4
 8016542:	d109      	bne.n	8016558 <__libc_init_array+0x24>
 8016544:	4d0b      	ldr	r5, [pc, #44]	; (8016574 <__libc_init_array+0x40>)
 8016546:	4c0c      	ldr	r4, [pc, #48]	; (8016578 <__libc_init_array+0x44>)
 8016548:	f000 ffbc 	bl	80174c4 <_init>
 801654c:	1b64      	subs	r4, r4, r5
 801654e:	10a4      	asrs	r4, r4, #2
 8016550:	2600      	movs	r6, #0
 8016552:	42a6      	cmp	r6, r4
 8016554:	d105      	bne.n	8016562 <__libc_init_array+0x2e>
 8016556:	bd70      	pop	{r4, r5, r6, pc}
 8016558:	f855 3b04 	ldr.w	r3, [r5], #4
 801655c:	4798      	blx	r3
 801655e:	3601      	adds	r6, #1
 8016560:	e7ee      	b.n	8016540 <__libc_init_array+0xc>
 8016562:	f855 3b04 	ldr.w	r3, [r5], #4
 8016566:	4798      	blx	r3
 8016568:	3601      	adds	r6, #1
 801656a:	e7f2      	b.n	8016552 <__libc_init_array+0x1e>
 801656c:	080176ec 	.word	0x080176ec
 8016570:	080176ec 	.word	0x080176ec
 8016574:	080176ec 	.word	0x080176ec
 8016578:	080176f0 	.word	0x080176f0

0801657c <memcpy>:
 801657c:	440a      	add	r2, r1
 801657e:	4291      	cmp	r1, r2
 8016580:	f100 33ff 	add.w	r3, r0, #4294967295
 8016584:	d100      	bne.n	8016588 <memcpy+0xc>
 8016586:	4770      	bx	lr
 8016588:	b510      	push	{r4, lr}
 801658a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801658e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016592:	4291      	cmp	r1, r2
 8016594:	d1f9      	bne.n	801658a <memcpy+0xe>
 8016596:	bd10      	pop	{r4, pc}

08016598 <memset>:
 8016598:	4402      	add	r2, r0
 801659a:	4603      	mov	r3, r0
 801659c:	4293      	cmp	r3, r2
 801659e:	d100      	bne.n	80165a2 <memset+0xa>
 80165a0:	4770      	bx	lr
 80165a2:	f803 1b01 	strb.w	r1, [r3], #1
 80165a6:	e7f9      	b.n	801659c <memset+0x4>

080165a8 <iprintf>:
 80165a8:	b40f      	push	{r0, r1, r2, r3}
 80165aa:	4b0a      	ldr	r3, [pc, #40]	; (80165d4 <iprintf+0x2c>)
 80165ac:	b513      	push	{r0, r1, r4, lr}
 80165ae:	681c      	ldr	r4, [r3, #0]
 80165b0:	b124      	cbz	r4, 80165bc <iprintf+0x14>
 80165b2:	69a3      	ldr	r3, [r4, #24]
 80165b4:	b913      	cbnz	r3, 80165bc <iprintf+0x14>
 80165b6:	4620      	mov	r0, r4
 80165b8:	f000 f9e8 	bl	801698c <__sinit>
 80165bc:	ab05      	add	r3, sp, #20
 80165be:	9a04      	ldr	r2, [sp, #16]
 80165c0:	68a1      	ldr	r1, [r4, #8]
 80165c2:	9301      	str	r3, [sp, #4]
 80165c4:	4620      	mov	r0, r4
 80165c6:	f000 fbf1 	bl	8016dac <_vfiprintf_r>
 80165ca:	b002      	add	sp, #8
 80165cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165d0:	b004      	add	sp, #16
 80165d2:	4770      	bx	lr
 80165d4:	24000070 	.word	0x24000070

080165d8 <__swbuf_r>:
 80165d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165da:	460e      	mov	r6, r1
 80165dc:	4614      	mov	r4, r2
 80165de:	4605      	mov	r5, r0
 80165e0:	b118      	cbz	r0, 80165ea <__swbuf_r+0x12>
 80165e2:	6983      	ldr	r3, [r0, #24]
 80165e4:	b90b      	cbnz	r3, 80165ea <__swbuf_r+0x12>
 80165e6:	f000 f9d1 	bl	801698c <__sinit>
 80165ea:	4b21      	ldr	r3, [pc, #132]	; (8016670 <__swbuf_r+0x98>)
 80165ec:	429c      	cmp	r4, r3
 80165ee:	d12b      	bne.n	8016648 <__swbuf_r+0x70>
 80165f0:	686c      	ldr	r4, [r5, #4]
 80165f2:	69a3      	ldr	r3, [r4, #24]
 80165f4:	60a3      	str	r3, [r4, #8]
 80165f6:	89a3      	ldrh	r3, [r4, #12]
 80165f8:	071a      	lsls	r2, r3, #28
 80165fa:	d52f      	bpl.n	801665c <__swbuf_r+0x84>
 80165fc:	6923      	ldr	r3, [r4, #16]
 80165fe:	b36b      	cbz	r3, 801665c <__swbuf_r+0x84>
 8016600:	6923      	ldr	r3, [r4, #16]
 8016602:	6820      	ldr	r0, [r4, #0]
 8016604:	1ac0      	subs	r0, r0, r3
 8016606:	6963      	ldr	r3, [r4, #20]
 8016608:	b2f6      	uxtb	r6, r6
 801660a:	4283      	cmp	r3, r0
 801660c:	4637      	mov	r7, r6
 801660e:	dc04      	bgt.n	801661a <__swbuf_r+0x42>
 8016610:	4621      	mov	r1, r4
 8016612:	4628      	mov	r0, r5
 8016614:	f000 f926 	bl	8016864 <_fflush_r>
 8016618:	bb30      	cbnz	r0, 8016668 <__swbuf_r+0x90>
 801661a:	68a3      	ldr	r3, [r4, #8]
 801661c:	3b01      	subs	r3, #1
 801661e:	60a3      	str	r3, [r4, #8]
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	1c5a      	adds	r2, r3, #1
 8016624:	6022      	str	r2, [r4, #0]
 8016626:	701e      	strb	r6, [r3, #0]
 8016628:	6963      	ldr	r3, [r4, #20]
 801662a:	3001      	adds	r0, #1
 801662c:	4283      	cmp	r3, r0
 801662e:	d004      	beq.n	801663a <__swbuf_r+0x62>
 8016630:	89a3      	ldrh	r3, [r4, #12]
 8016632:	07db      	lsls	r3, r3, #31
 8016634:	d506      	bpl.n	8016644 <__swbuf_r+0x6c>
 8016636:	2e0a      	cmp	r6, #10
 8016638:	d104      	bne.n	8016644 <__swbuf_r+0x6c>
 801663a:	4621      	mov	r1, r4
 801663c:	4628      	mov	r0, r5
 801663e:	f000 f911 	bl	8016864 <_fflush_r>
 8016642:	b988      	cbnz	r0, 8016668 <__swbuf_r+0x90>
 8016644:	4638      	mov	r0, r7
 8016646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016648:	4b0a      	ldr	r3, [pc, #40]	; (8016674 <__swbuf_r+0x9c>)
 801664a:	429c      	cmp	r4, r3
 801664c:	d101      	bne.n	8016652 <__swbuf_r+0x7a>
 801664e:	68ac      	ldr	r4, [r5, #8]
 8016650:	e7cf      	b.n	80165f2 <__swbuf_r+0x1a>
 8016652:	4b09      	ldr	r3, [pc, #36]	; (8016678 <__swbuf_r+0xa0>)
 8016654:	429c      	cmp	r4, r3
 8016656:	bf08      	it	eq
 8016658:	68ec      	ldreq	r4, [r5, #12]
 801665a:	e7ca      	b.n	80165f2 <__swbuf_r+0x1a>
 801665c:	4621      	mov	r1, r4
 801665e:	4628      	mov	r0, r5
 8016660:	f000 f80c 	bl	801667c <__swsetup_r>
 8016664:	2800      	cmp	r0, #0
 8016666:	d0cb      	beq.n	8016600 <__swbuf_r+0x28>
 8016668:	f04f 37ff 	mov.w	r7, #4294967295
 801666c:	e7ea      	b.n	8016644 <__swbuf_r+0x6c>
 801666e:	bf00      	nop
 8016670:	08017670 	.word	0x08017670
 8016674:	08017690 	.word	0x08017690
 8016678:	08017650 	.word	0x08017650

0801667c <__swsetup_r>:
 801667c:	4b32      	ldr	r3, [pc, #200]	; (8016748 <__swsetup_r+0xcc>)
 801667e:	b570      	push	{r4, r5, r6, lr}
 8016680:	681d      	ldr	r5, [r3, #0]
 8016682:	4606      	mov	r6, r0
 8016684:	460c      	mov	r4, r1
 8016686:	b125      	cbz	r5, 8016692 <__swsetup_r+0x16>
 8016688:	69ab      	ldr	r3, [r5, #24]
 801668a:	b913      	cbnz	r3, 8016692 <__swsetup_r+0x16>
 801668c:	4628      	mov	r0, r5
 801668e:	f000 f97d 	bl	801698c <__sinit>
 8016692:	4b2e      	ldr	r3, [pc, #184]	; (801674c <__swsetup_r+0xd0>)
 8016694:	429c      	cmp	r4, r3
 8016696:	d10f      	bne.n	80166b8 <__swsetup_r+0x3c>
 8016698:	686c      	ldr	r4, [r5, #4]
 801669a:	89a3      	ldrh	r3, [r4, #12]
 801669c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166a0:	0719      	lsls	r1, r3, #28
 80166a2:	d42c      	bmi.n	80166fe <__swsetup_r+0x82>
 80166a4:	06dd      	lsls	r5, r3, #27
 80166a6:	d411      	bmi.n	80166cc <__swsetup_r+0x50>
 80166a8:	2309      	movs	r3, #9
 80166aa:	6033      	str	r3, [r6, #0]
 80166ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80166b0:	81a3      	strh	r3, [r4, #12]
 80166b2:	f04f 30ff 	mov.w	r0, #4294967295
 80166b6:	e03e      	b.n	8016736 <__swsetup_r+0xba>
 80166b8:	4b25      	ldr	r3, [pc, #148]	; (8016750 <__swsetup_r+0xd4>)
 80166ba:	429c      	cmp	r4, r3
 80166bc:	d101      	bne.n	80166c2 <__swsetup_r+0x46>
 80166be:	68ac      	ldr	r4, [r5, #8]
 80166c0:	e7eb      	b.n	801669a <__swsetup_r+0x1e>
 80166c2:	4b24      	ldr	r3, [pc, #144]	; (8016754 <__swsetup_r+0xd8>)
 80166c4:	429c      	cmp	r4, r3
 80166c6:	bf08      	it	eq
 80166c8:	68ec      	ldreq	r4, [r5, #12]
 80166ca:	e7e6      	b.n	801669a <__swsetup_r+0x1e>
 80166cc:	0758      	lsls	r0, r3, #29
 80166ce:	d512      	bpl.n	80166f6 <__swsetup_r+0x7a>
 80166d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166d2:	b141      	cbz	r1, 80166e6 <__swsetup_r+0x6a>
 80166d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166d8:	4299      	cmp	r1, r3
 80166da:	d002      	beq.n	80166e2 <__swsetup_r+0x66>
 80166dc:	4630      	mov	r0, r6
 80166de:	f000 fa5b 	bl	8016b98 <_free_r>
 80166e2:	2300      	movs	r3, #0
 80166e4:	6363      	str	r3, [r4, #52]	; 0x34
 80166e6:	89a3      	ldrh	r3, [r4, #12]
 80166e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80166ec:	81a3      	strh	r3, [r4, #12]
 80166ee:	2300      	movs	r3, #0
 80166f0:	6063      	str	r3, [r4, #4]
 80166f2:	6923      	ldr	r3, [r4, #16]
 80166f4:	6023      	str	r3, [r4, #0]
 80166f6:	89a3      	ldrh	r3, [r4, #12]
 80166f8:	f043 0308 	orr.w	r3, r3, #8
 80166fc:	81a3      	strh	r3, [r4, #12]
 80166fe:	6923      	ldr	r3, [r4, #16]
 8016700:	b94b      	cbnz	r3, 8016716 <__swsetup_r+0x9a>
 8016702:	89a3      	ldrh	r3, [r4, #12]
 8016704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801670c:	d003      	beq.n	8016716 <__swsetup_r+0x9a>
 801670e:	4621      	mov	r1, r4
 8016710:	4630      	mov	r0, r6
 8016712:	f000 fa01 	bl	8016b18 <__smakebuf_r>
 8016716:	89a0      	ldrh	r0, [r4, #12]
 8016718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801671c:	f010 0301 	ands.w	r3, r0, #1
 8016720:	d00a      	beq.n	8016738 <__swsetup_r+0xbc>
 8016722:	2300      	movs	r3, #0
 8016724:	60a3      	str	r3, [r4, #8]
 8016726:	6963      	ldr	r3, [r4, #20]
 8016728:	425b      	negs	r3, r3
 801672a:	61a3      	str	r3, [r4, #24]
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	b943      	cbnz	r3, 8016742 <__swsetup_r+0xc6>
 8016730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016734:	d1ba      	bne.n	80166ac <__swsetup_r+0x30>
 8016736:	bd70      	pop	{r4, r5, r6, pc}
 8016738:	0781      	lsls	r1, r0, #30
 801673a:	bf58      	it	pl
 801673c:	6963      	ldrpl	r3, [r4, #20]
 801673e:	60a3      	str	r3, [r4, #8]
 8016740:	e7f4      	b.n	801672c <__swsetup_r+0xb0>
 8016742:	2000      	movs	r0, #0
 8016744:	e7f7      	b.n	8016736 <__swsetup_r+0xba>
 8016746:	bf00      	nop
 8016748:	24000070 	.word	0x24000070
 801674c:	08017670 	.word	0x08017670
 8016750:	08017690 	.word	0x08017690
 8016754:	08017650 	.word	0x08017650

08016758 <__sflush_r>:
 8016758:	898a      	ldrh	r2, [r1, #12]
 801675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675e:	4605      	mov	r5, r0
 8016760:	0710      	lsls	r0, r2, #28
 8016762:	460c      	mov	r4, r1
 8016764:	d458      	bmi.n	8016818 <__sflush_r+0xc0>
 8016766:	684b      	ldr	r3, [r1, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	dc05      	bgt.n	8016778 <__sflush_r+0x20>
 801676c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801676e:	2b00      	cmp	r3, #0
 8016770:	dc02      	bgt.n	8016778 <__sflush_r+0x20>
 8016772:	2000      	movs	r0, #0
 8016774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801677a:	2e00      	cmp	r6, #0
 801677c:	d0f9      	beq.n	8016772 <__sflush_r+0x1a>
 801677e:	2300      	movs	r3, #0
 8016780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016784:	682f      	ldr	r7, [r5, #0]
 8016786:	602b      	str	r3, [r5, #0]
 8016788:	d032      	beq.n	80167f0 <__sflush_r+0x98>
 801678a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	075a      	lsls	r2, r3, #29
 8016790:	d505      	bpl.n	801679e <__sflush_r+0x46>
 8016792:	6863      	ldr	r3, [r4, #4]
 8016794:	1ac0      	subs	r0, r0, r3
 8016796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016798:	b10b      	cbz	r3, 801679e <__sflush_r+0x46>
 801679a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801679c:	1ac0      	subs	r0, r0, r3
 801679e:	2300      	movs	r3, #0
 80167a0:	4602      	mov	r2, r0
 80167a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167a4:	6a21      	ldr	r1, [r4, #32]
 80167a6:	4628      	mov	r0, r5
 80167a8:	47b0      	blx	r6
 80167aa:	1c43      	adds	r3, r0, #1
 80167ac:	89a3      	ldrh	r3, [r4, #12]
 80167ae:	d106      	bne.n	80167be <__sflush_r+0x66>
 80167b0:	6829      	ldr	r1, [r5, #0]
 80167b2:	291d      	cmp	r1, #29
 80167b4:	d82c      	bhi.n	8016810 <__sflush_r+0xb8>
 80167b6:	4a2a      	ldr	r2, [pc, #168]	; (8016860 <__sflush_r+0x108>)
 80167b8:	40ca      	lsrs	r2, r1
 80167ba:	07d6      	lsls	r6, r2, #31
 80167bc:	d528      	bpl.n	8016810 <__sflush_r+0xb8>
 80167be:	2200      	movs	r2, #0
 80167c0:	6062      	str	r2, [r4, #4]
 80167c2:	04d9      	lsls	r1, r3, #19
 80167c4:	6922      	ldr	r2, [r4, #16]
 80167c6:	6022      	str	r2, [r4, #0]
 80167c8:	d504      	bpl.n	80167d4 <__sflush_r+0x7c>
 80167ca:	1c42      	adds	r2, r0, #1
 80167cc:	d101      	bne.n	80167d2 <__sflush_r+0x7a>
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	b903      	cbnz	r3, 80167d4 <__sflush_r+0x7c>
 80167d2:	6560      	str	r0, [r4, #84]	; 0x54
 80167d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167d6:	602f      	str	r7, [r5, #0]
 80167d8:	2900      	cmp	r1, #0
 80167da:	d0ca      	beq.n	8016772 <__sflush_r+0x1a>
 80167dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167e0:	4299      	cmp	r1, r3
 80167e2:	d002      	beq.n	80167ea <__sflush_r+0x92>
 80167e4:	4628      	mov	r0, r5
 80167e6:	f000 f9d7 	bl	8016b98 <_free_r>
 80167ea:	2000      	movs	r0, #0
 80167ec:	6360      	str	r0, [r4, #52]	; 0x34
 80167ee:	e7c1      	b.n	8016774 <__sflush_r+0x1c>
 80167f0:	6a21      	ldr	r1, [r4, #32]
 80167f2:	2301      	movs	r3, #1
 80167f4:	4628      	mov	r0, r5
 80167f6:	47b0      	blx	r6
 80167f8:	1c41      	adds	r1, r0, #1
 80167fa:	d1c7      	bne.n	801678c <__sflush_r+0x34>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d0c4      	beq.n	801678c <__sflush_r+0x34>
 8016802:	2b1d      	cmp	r3, #29
 8016804:	d001      	beq.n	801680a <__sflush_r+0xb2>
 8016806:	2b16      	cmp	r3, #22
 8016808:	d101      	bne.n	801680e <__sflush_r+0xb6>
 801680a:	602f      	str	r7, [r5, #0]
 801680c:	e7b1      	b.n	8016772 <__sflush_r+0x1a>
 801680e:	89a3      	ldrh	r3, [r4, #12]
 8016810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016814:	81a3      	strh	r3, [r4, #12]
 8016816:	e7ad      	b.n	8016774 <__sflush_r+0x1c>
 8016818:	690f      	ldr	r7, [r1, #16]
 801681a:	2f00      	cmp	r7, #0
 801681c:	d0a9      	beq.n	8016772 <__sflush_r+0x1a>
 801681e:	0793      	lsls	r3, r2, #30
 8016820:	680e      	ldr	r6, [r1, #0]
 8016822:	bf08      	it	eq
 8016824:	694b      	ldreq	r3, [r1, #20]
 8016826:	600f      	str	r7, [r1, #0]
 8016828:	bf18      	it	ne
 801682a:	2300      	movne	r3, #0
 801682c:	eba6 0807 	sub.w	r8, r6, r7
 8016830:	608b      	str	r3, [r1, #8]
 8016832:	f1b8 0f00 	cmp.w	r8, #0
 8016836:	dd9c      	ble.n	8016772 <__sflush_r+0x1a>
 8016838:	6a21      	ldr	r1, [r4, #32]
 801683a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801683c:	4643      	mov	r3, r8
 801683e:	463a      	mov	r2, r7
 8016840:	4628      	mov	r0, r5
 8016842:	47b0      	blx	r6
 8016844:	2800      	cmp	r0, #0
 8016846:	dc06      	bgt.n	8016856 <__sflush_r+0xfe>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801684e:	81a3      	strh	r3, [r4, #12]
 8016850:	f04f 30ff 	mov.w	r0, #4294967295
 8016854:	e78e      	b.n	8016774 <__sflush_r+0x1c>
 8016856:	4407      	add	r7, r0
 8016858:	eba8 0800 	sub.w	r8, r8, r0
 801685c:	e7e9      	b.n	8016832 <__sflush_r+0xda>
 801685e:	bf00      	nop
 8016860:	20400001 	.word	0x20400001

08016864 <_fflush_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	690b      	ldr	r3, [r1, #16]
 8016868:	4605      	mov	r5, r0
 801686a:	460c      	mov	r4, r1
 801686c:	b913      	cbnz	r3, 8016874 <_fflush_r+0x10>
 801686e:	2500      	movs	r5, #0
 8016870:	4628      	mov	r0, r5
 8016872:	bd38      	pop	{r3, r4, r5, pc}
 8016874:	b118      	cbz	r0, 801687e <_fflush_r+0x1a>
 8016876:	6983      	ldr	r3, [r0, #24]
 8016878:	b90b      	cbnz	r3, 801687e <_fflush_r+0x1a>
 801687a:	f000 f887 	bl	801698c <__sinit>
 801687e:	4b14      	ldr	r3, [pc, #80]	; (80168d0 <_fflush_r+0x6c>)
 8016880:	429c      	cmp	r4, r3
 8016882:	d11b      	bne.n	80168bc <_fflush_r+0x58>
 8016884:	686c      	ldr	r4, [r5, #4]
 8016886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d0ef      	beq.n	801686e <_fflush_r+0xa>
 801688e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016890:	07d0      	lsls	r0, r2, #31
 8016892:	d404      	bmi.n	801689e <_fflush_r+0x3a>
 8016894:	0599      	lsls	r1, r3, #22
 8016896:	d402      	bmi.n	801689e <_fflush_r+0x3a>
 8016898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801689a:	f000 f915 	bl	8016ac8 <__retarget_lock_acquire_recursive>
 801689e:	4628      	mov	r0, r5
 80168a0:	4621      	mov	r1, r4
 80168a2:	f7ff ff59 	bl	8016758 <__sflush_r>
 80168a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168a8:	07da      	lsls	r2, r3, #31
 80168aa:	4605      	mov	r5, r0
 80168ac:	d4e0      	bmi.n	8016870 <_fflush_r+0xc>
 80168ae:	89a3      	ldrh	r3, [r4, #12]
 80168b0:	059b      	lsls	r3, r3, #22
 80168b2:	d4dd      	bmi.n	8016870 <_fflush_r+0xc>
 80168b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168b6:	f000 f908 	bl	8016aca <__retarget_lock_release_recursive>
 80168ba:	e7d9      	b.n	8016870 <_fflush_r+0xc>
 80168bc:	4b05      	ldr	r3, [pc, #20]	; (80168d4 <_fflush_r+0x70>)
 80168be:	429c      	cmp	r4, r3
 80168c0:	d101      	bne.n	80168c6 <_fflush_r+0x62>
 80168c2:	68ac      	ldr	r4, [r5, #8]
 80168c4:	e7df      	b.n	8016886 <_fflush_r+0x22>
 80168c6:	4b04      	ldr	r3, [pc, #16]	; (80168d8 <_fflush_r+0x74>)
 80168c8:	429c      	cmp	r4, r3
 80168ca:	bf08      	it	eq
 80168cc:	68ec      	ldreq	r4, [r5, #12]
 80168ce:	e7da      	b.n	8016886 <_fflush_r+0x22>
 80168d0:	08017670 	.word	0x08017670
 80168d4:	08017690 	.word	0x08017690
 80168d8:	08017650 	.word	0x08017650

080168dc <std>:
 80168dc:	2300      	movs	r3, #0
 80168de:	b510      	push	{r4, lr}
 80168e0:	4604      	mov	r4, r0
 80168e2:	e9c0 3300 	strd	r3, r3, [r0]
 80168e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168ea:	6083      	str	r3, [r0, #8]
 80168ec:	8181      	strh	r1, [r0, #12]
 80168ee:	6643      	str	r3, [r0, #100]	; 0x64
 80168f0:	81c2      	strh	r2, [r0, #14]
 80168f2:	6183      	str	r3, [r0, #24]
 80168f4:	4619      	mov	r1, r3
 80168f6:	2208      	movs	r2, #8
 80168f8:	305c      	adds	r0, #92	; 0x5c
 80168fa:	f7ff fe4d 	bl	8016598 <memset>
 80168fe:	4b05      	ldr	r3, [pc, #20]	; (8016914 <std+0x38>)
 8016900:	6263      	str	r3, [r4, #36]	; 0x24
 8016902:	4b05      	ldr	r3, [pc, #20]	; (8016918 <std+0x3c>)
 8016904:	62a3      	str	r3, [r4, #40]	; 0x28
 8016906:	4b05      	ldr	r3, [pc, #20]	; (801691c <std+0x40>)
 8016908:	62e3      	str	r3, [r4, #44]	; 0x2c
 801690a:	4b05      	ldr	r3, [pc, #20]	; (8016920 <std+0x44>)
 801690c:	6224      	str	r4, [r4, #32]
 801690e:	6323      	str	r3, [r4, #48]	; 0x30
 8016910:	bd10      	pop	{r4, pc}
 8016912:	bf00      	nop
 8016914:	08017355 	.word	0x08017355
 8016918:	08017377 	.word	0x08017377
 801691c:	080173af 	.word	0x080173af
 8016920:	080173d3 	.word	0x080173d3

08016924 <_cleanup_r>:
 8016924:	4901      	ldr	r1, [pc, #4]	; (801692c <_cleanup_r+0x8>)
 8016926:	f000 b8af 	b.w	8016a88 <_fwalk_reent>
 801692a:	bf00      	nop
 801692c:	08016865 	.word	0x08016865

08016930 <__sfmoreglue>:
 8016930:	b570      	push	{r4, r5, r6, lr}
 8016932:	2268      	movs	r2, #104	; 0x68
 8016934:	1e4d      	subs	r5, r1, #1
 8016936:	4355      	muls	r5, r2
 8016938:	460e      	mov	r6, r1
 801693a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801693e:	f000 f997 	bl	8016c70 <_malloc_r>
 8016942:	4604      	mov	r4, r0
 8016944:	b140      	cbz	r0, 8016958 <__sfmoreglue+0x28>
 8016946:	2100      	movs	r1, #0
 8016948:	e9c0 1600 	strd	r1, r6, [r0]
 801694c:	300c      	adds	r0, #12
 801694e:	60a0      	str	r0, [r4, #8]
 8016950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016954:	f7ff fe20 	bl	8016598 <memset>
 8016958:	4620      	mov	r0, r4
 801695a:	bd70      	pop	{r4, r5, r6, pc}

0801695c <__sfp_lock_acquire>:
 801695c:	4801      	ldr	r0, [pc, #4]	; (8016964 <__sfp_lock_acquire+0x8>)
 801695e:	f000 b8b3 	b.w	8016ac8 <__retarget_lock_acquire_recursive>
 8016962:	bf00      	nop
 8016964:	24015525 	.word	0x24015525

08016968 <__sfp_lock_release>:
 8016968:	4801      	ldr	r0, [pc, #4]	; (8016970 <__sfp_lock_release+0x8>)
 801696a:	f000 b8ae 	b.w	8016aca <__retarget_lock_release_recursive>
 801696e:	bf00      	nop
 8016970:	24015525 	.word	0x24015525

08016974 <__sinit_lock_acquire>:
 8016974:	4801      	ldr	r0, [pc, #4]	; (801697c <__sinit_lock_acquire+0x8>)
 8016976:	f000 b8a7 	b.w	8016ac8 <__retarget_lock_acquire_recursive>
 801697a:	bf00      	nop
 801697c:	24015526 	.word	0x24015526

08016980 <__sinit_lock_release>:
 8016980:	4801      	ldr	r0, [pc, #4]	; (8016988 <__sinit_lock_release+0x8>)
 8016982:	f000 b8a2 	b.w	8016aca <__retarget_lock_release_recursive>
 8016986:	bf00      	nop
 8016988:	24015526 	.word	0x24015526

0801698c <__sinit>:
 801698c:	b510      	push	{r4, lr}
 801698e:	4604      	mov	r4, r0
 8016990:	f7ff fff0 	bl	8016974 <__sinit_lock_acquire>
 8016994:	69a3      	ldr	r3, [r4, #24]
 8016996:	b11b      	cbz	r3, 80169a0 <__sinit+0x14>
 8016998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801699c:	f7ff bff0 	b.w	8016980 <__sinit_lock_release>
 80169a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169a4:	6523      	str	r3, [r4, #80]	; 0x50
 80169a6:	4b13      	ldr	r3, [pc, #76]	; (80169f4 <__sinit+0x68>)
 80169a8:	4a13      	ldr	r2, [pc, #76]	; (80169f8 <__sinit+0x6c>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80169ae:	42a3      	cmp	r3, r4
 80169b0:	bf04      	itt	eq
 80169b2:	2301      	moveq	r3, #1
 80169b4:	61a3      	streq	r3, [r4, #24]
 80169b6:	4620      	mov	r0, r4
 80169b8:	f000 f820 	bl	80169fc <__sfp>
 80169bc:	6060      	str	r0, [r4, #4]
 80169be:	4620      	mov	r0, r4
 80169c0:	f000 f81c 	bl	80169fc <__sfp>
 80169c4:	60a0      	str	r0, [r4, #8]
 80169c6:	4620      	mov	r0, r4
 80169c8:	f000 f818 	bl	80169fc <__sfp>
 80169cc:	2200      	movs	r2, #0
 80169ce:	60e0      	str	r0, [r4, #12]
 80169d0:	2104      	movs	r1, #4
 80169d2:	6860      	ldr	r0, [r4, #4]
 80169d4:	f7ff ff82 	bl	80168dc <std>
 80169d8:	68a0      	ldr	r0, [r4, #8]
 80169da:	2201      	movs	r2, #1
 80169dc:	2109      	movs	r1, #9
 80169de:	f7ff ff7d 	bl	80168dc <std>
 80169e2:	68e0      	ldr	r0, [r4, #12]
 80169e4:	2202      	movs	r2, #2
 80169e6:	2112      	movs	r1, #18
 80169e8:	f7ff ff78 	bl	80168dc <std>
 80169ec:	2301      	movs	r3, #1
 80169ee:	61a3      	str	r3, [r4, #24]
 80169f0:	e7d2      	b.n	8016998 <__sinit+0xc>
 80169f2:	bf00      	nop
 80169f4:	0801764c 	.word	0x0801764c
 80169f8:	08016925 	.word	0x08016925

080169fc <__sfp>:
 80169fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fe:	4607      	mov	r7, r0
 8016a00:	f7ff ffac 	bl	801695c <__sfp_lock_acquire>
 8016a04:	4b1e      	ldr	r3, [pc, #120]	; (8016a80 <__sfp+0x84>)
 8016a06:	681e      	ldr	r6, [r3, #0]
 8016a08:	69b3      	ldr	r3, [r6, #24]
 8016a0a:	b913      	cbnz	r3, 8016a12 <__sfp+0x16>
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f7ff ffbd 	bl	801698c <__sinit>
 8016a12:	3648      	adds	r6, #72	; 0x48
 8016a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	d503      	bpl.n	8016a24 <__sfp+0x28>
 8016a1c:	6833      	ldr	r3, [r6, #0]
 8016a1e:	b30b      	cbz	r3, 8016a64 <__sfp+0x68>
 8016a20:	6836      	ldr	r6, [r6, #0]
 8016a22:	e7f7      	b.n	8016a14 <__sfp+0x18>
 8016a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a28:	b9d5      	cbnz	r5, 8016a60 <__sfp+0x64>
 8016a2a:	4b16      	ldr	r3, [pc, #88]	; (8016a84 <__sfp+0x88>)
 8016a2c:	60e3      	str	r3, [r4, #12]
 8016a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a32:	6665      	str	r5, [r4, #100]	; 0x64
 8016a34:	f000 f847 	bl	8016ac6 <__retarget_lock_init_recursive>
 8016a38:	f7ff ff96 	bl	8016968 <__sfp_lock_release>
 8016a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a44:	6025      	str	r5, [r4, #0]
 8016a46:	61a5      	str	r5, [r4, #24]
 8016a48:	2208      	movs	r2, #8
 8016a4a:	4629      	mov	r1, r5
 8016a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a50:	f7ff fda2 	bl	8016598 <memset>
 8016a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a60:	3468      	adds	r4, #104	; 0x68
 8016a62:	e7d9      	b.n	8016a18 <__sfp+0x1c>
 8016a64:	2104      	movs	r1, #4
 8016a66:	4638      	mov	r0, r7
 8016a68:	f7ff ff62 	bl	8016930 <__sfmoreglue>
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	6030      	str	r0, [r6, #0]
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1d5      	bne.n	8016a20 <__sfp+0x24>
 8016a74:	f7ff ff78 	bl	8016968 <__sfp_lock_release>
 8016a78:	230c      	movs	r3, #12
 8016a7a:	603b      	str	r3, [r7, #0]
 8016a7c:	e7ee      	b.n	8016a5c <__sfp+0x60>
 8016a7e:	bf00      	nop
 8016a80:	0801764c 	.word	0x0801764c
 8016a84:	ffff0001 	.word	0xffff0001

08016a88 <_fwalk_reent>:
 8016a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a8c:	4606      	mov	r6, r0
 8016a8e:	4688      	mov	r8, r1
 8016a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a94:	2700      	movs	r7, #0
 8016a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8016a9e:	d505      	bpl.n	8016aac <_fwalk_reent+0x24>
 8016aa0:	6824      	ldr	r4, [r4, #0]
 8016aa2:	2c00      	cmp	r4, #0
 8016aa4:	d1f7      	bne.n	8016a96 <_fwalk_reent+0xe>
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016aac:	89ab      	ldrh	r3, [r5, #12]
 8016aae:	2b01      	cmp	r3, #1
 8016ab0:	d907      	bls.n	8016ac2 <_fwalk_reent+0x3a>
 8016ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	d003      	beq.n	8016ac2 <_fwalk_reent+0x3a>
 8016aba:	4629      	mov	r1, r5
 8016abc:	4630      	mov	r0, r6
 8016abe:	47c0      	blx	r8
 8016ac0:	4307      	orrs	r7, r0
 8016ac2:	3568      	adds	r5, #104	; 0x68
 8016ac4:	e7e9      	b.n	8016a9a <_fwalk_reent+0x12>

08016ac6 <__retarget_lock_init_recursive>:
 8016ac6:	4770      	bx	lr

08016ac8 <__retarget_lock_acquire_recursive>:
 8016ac8:	4770      	bx	lr

08016aca <__retarget_lock_release_recursive>:
 8016aca:	4770      	bx	lr

08016acc <__swhatbuf_r>:
 8016acc:	b570      	push	{r4, r5, r6, lr}
 8016ace:	460e      	mov	r6, r1
 8016ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad4:	2900      	cmp	r1, #0
 8016ad6:	b096      	sub	sp, #88	; 0x58
 8016ad8:	4614      	mov	r4, r2
 8016ada:	461d      	mov	r5, r3
 8016adc:	da08      	bge.n	8016af0 <__swhatbuf_r+0x24>
 8016ade:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	602a      	str	r2, [r5, #0]
 8016ae6:	061a      	lsls	r2, r3, #24
 8016ae8:	d410      	bmi.n	8016b0c <__swhatbuf_r+0x40>
 8016aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016aee:	e00e      	b.n	8016b0e <__swhatbuf_r+0x42>
 8016af0:	466a      	mov	r2, sp
 8016af2:	f000 fc95 	bl	8017420 <_fstat_r>
 8016af6:	2800      	cmp	r0, #0
 8016af8:	dbf1      	blt.n	8016ade <__swhatbuf_r+0x12>
 8016afa:	9a01      	ldr	r2, [sp, #4]
 8016afc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b04:	425a      	negs	r2, r3
 8016b06:	415a      	adcs	r2, r3
 8016b08:	602a      	str	r2, [r5, #0]
 8016b0a:	e7ee      	b.n	8016aea <__swhatbuf_r+0x1e>
 8016b0c:	2340      	movs	r3, #64	; 0x40
 8016b0e:	2000      	movs	r0, #0
 8016b10:	6023      	str	r3, [r4, #0]
 8016b12:	b016      	add	sp, #88	; 0x58
 8016b14:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b18 <__smakebuf_r>:
 8016b18:	898b      	ldrh	r3, [r1, #12]
 8016b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b1c:	079d      	lsls	r5, r3, #30
 8016b1e:	4606      	mov	r6, r0
 8016b20:	460c      	mov	r4, r1
 8016b22:	d507      	bpl.n	8016b34 <__smakebuf_r+0x1c>
 8016b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b28:	6023      	str	r3, [r4, #0]
 8016b2a:	6123      	str	r3, [r4, #16]
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	6163      	str	r3, [r4, #20]
 8016b30:	b002      	add	sp, #8
 8016b32:	bd70      	pop	{r4, r5, r6, pc}
 8016b34:	ab01      	add	r3, sp, #4
 8016b36:	466a      	mov	r2, sp
 8016b38:	f7ff ffc8 	bl	8016acc <__swhatbuf_r>
 8016b3c:	9900      	ldr	r1, [sp, #0]
 8016b3e:	4605      	mov	r5, r0
 8016b40:	4630      	mov	r0, r6
 8016b42:	f000 f895 	bl	8016c70 <_malloc_r>
 8016b46:	b948      	cbnz	r0, 8016b5c <__smakebuf_r+0x44>
 8016b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b4c:	059a      	lsls	r2, r3, #22
 8016b4e:	d4ef      	bmi.n	8016b30 <__smakebuf_r+0x18>
 8016b50:	f023 0303 	bic.w	r3, r3, #3
 8016b54:	f043 0302 	orr.w	r3, r3, #2
 8016b58:	81a3      	strh	r3, [r4, #12]
 8016b5a:	e7e3      	b.n	8016b24 <__smakebuf_r+0xc>
 8016b5c:	4b0d      	ldr	r3, [pc, #52]	; (8016b94 <__smakebuf_r+0x7c>)
 8016b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	6020      	str	r0, [r4, #0]
 8016b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b68:	81a3      	strh	r3, [r4, #12]
 8016b6a:	9b00      	ldr	r3, [sp, #0]
 8016b6c:	6163      	str	r3, [r4, #20]
 8016b6e:	9b01      	ldr	r3, [sp, #4]
 8016b70:	6120      	str	r0, [r4, #16]
 8016b72:	b15b      	cbz	r3, 8016b8c <__smakebuf_r+0x74>
 8016b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f000 fc63 	bl	8017444 <_isatty_r>
 8016b7e:	b128      	cbz	r0, 8016b8c <__smakebuf_r+0x74>
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	f023 0303 	bic.w	r3, r3, #3
 8016b86:	f043 0301 	orr.w	r3, r3, #1
 8016b8a:	81a3      	strh	r3, [r4, #12]
 8016b8c:	89a0      	ldrh	r0, [r4, #12]
 8016b8e:	4305      	orrs	r5, r0
 8016b90:	81a5      	strh	r5, [r4, #12]
 8016b92:	e7cd      	b.n	8016b30 <__smakebuf_r+0x18>
 8016b94:	08016925 	.word	0x08016925

08016b98 <_free_r>:
 8016b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b9a:	2900      	cmp	r1, #0
 8016b9c:	d044      	beq.n	8016c28 <_free_r+0x90>
 8016b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ba2:	9001      	str	r0, [sp, #4]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8016baa:	bfb8      	it	lt
 8016bac:	18e4      	addlt	r4, r4, r3
 8016bae:	f000 fc6b 	bl	8017488 <__malloc_lock>
 8016bb2:	4a1e      	ldr	r2, [pc, #120]	; (8016c2c <_free_r+0x94>)
 8016bb4:	9801      	ldr	r0, [sp, #4]
 8016bb6:	6813      	ldr	r3, [r2, #0]
 8016bb8:	b933      	cbnz	r3, 8016bc8 <_free_r+0x30>
 8016bba:	6063      	str	r3, [r4, #4]
 8016bbc:	6014      	str	r4, [r2, #0]
 8016bbe:	b003      	add	sp, #12
 8016bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016bc4:	f000 bc66 	b.w	8017494 <__malloc_unlock>
 8016bc8:	42a3      	cmp	r3, r4
 8016bca:	d908      	bls.n	8016bde <_free_r+0x46>
 8016bcc:	6825      	ldr	r5, [r4, #0]
 8016bce:	1961      	adds	r1, r4, r5
 8016bd0:	428b      	cmp	r3, r1
 8016bd2:	bf01      	itttt	eq
 8016bd4:	6819      	ldreq	r1, [r3, #0]
 8016bd6:	685b      	ldreq	r3, [r3, #4]
 8016bd8:	1949      	addeq	r1, r1, r5
 8016bda:	6021      	streq	r1, [r4, #0]
 8016bdc:	e7ed      	b.n	8016bba <_free_r+0x22>
 8016bde:	461a      	mov	r2, r3
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	b10b      	cbz	r3, 8016be8 <_free_r+0x50>
 8016be4:	42a3      	cmp	r3, r4
 8016be6:	d9fa      	bls.n	8016bde <_free_r+0x46>
 8016be8:	6811      	ldr	r1, [r2, #0]
 8016bea:	1855      	adds	r5, r2, r1
 8016bec:	42a5      	cmp	r5, r4
 8016bee:	d10b      	bne.n	8016c08 <_free_r+0x70>
 8016bf0:	6824      	ldr	r4, [r4, #0]
 8016bf2:	4421      	add	r1, r4
 8016bf4:	1854      	adds	r4, r2, r1
 8016bf6:	42a3      	cmp	r3, r4
 8016bf8:	6011      	str	r1, [r2, #0]
 8016bfa:	d1e0      	bne.n	8016bbe <_free_r+0x26>
 8016bfc:	681c      	ldr	r4, [r3, #0]
 8016bfe:	685b      	ldr	r3, [r3, #4]
 8016c00:	6053      	str	r3, [r2, #4]
 8016c02:	4421      	add	r1, r4
 8016c04:	6011      	str	r1, [r2, #0]
 8016c06:	e7da      	b.n	8016bbe <_free_r+0x26>
 8016c08:	d902      	bls.n	8016c10 <_free_r+0x78>
 8016c0a:	230c      	movs	r3, #12
 8016c0c:	6003      	str	r3, [r0, #0]
 8016c0e:	e7d6      	b.n	8016bbe <_free_r+0x26>
 8016c10:	6825      	ldr	r5, [r4, #0]
 8016c12:	1961      	adds	r1, r4, r5
 8016c14:	428b      	cmp	r3, r1
 8016c16:	bf04      	itt	eq
 8016c18:	6819      	ldreq	r1, [r3, #0]
 8016c1a:	685b      	ldreq	r3, [r3, #4]
 8016c1c:	6063      	str	r3, [r4, #4]
 8016c1e:	bf04      	itt	eq
 8016c20:	1949      	addeq	r1, r1, r5
 8016c22:	6021      	streq	r1, [r4, #0]
 8016c24:	6054      	str	r4, [r2, #4]
 8016c26:	e7ca      	b.n	8016bbe <_free_r+0x26>
 8016c28:	b003      	add	sp, #12
 8016c2a:	bd30      	pop	{r4, r5, pc}
 8016c2c:	24015528 	.word	0x24015528

08016c30 <sbrk_aligned>:
 8016c30:	b570      	push	{r4, r5, r6, lr}
 8016c32:	4e0e      	ldr	r6, [pc, #56]	; (8016c6c <sbrk_aligned+0x3c>)
 8016c34:	460c      	mov	r4, r1
 8016c36:	6831      	ldr	r1, [r6, #0]
 8016c38:	4605      	mov	r5, r0
 8016c3a:	b911      	cbnz	r1, 8016c42 <sbrk_aligned+0x12>
 8016c3c:	f000 fb7a 	bl	8017334 <_sbrk_r>
 8016c40:	6030      	str	r0, [r6, #0]
 8016c42:	4621      	mov	r1, r4
 8016c44:	4628      	mov	r0, r5
 8016c46:	f000 fb75 	bl	8017334 <_sbrk_r>
 8016c4a:	1c43      	adds	r3, r0, #1
 8016c4c:	d00a      	beq.n	8016c64 <sbrk_aligned+0x34>
 8016c4e:	1cc4      	adds	r4, r0, #3
 8016c50:	f024 0403 	bic.w	r4, r4, #3
 8016c54:	42a0      	cmp	r0, r4
 8016c56:	d007      	beq.n	8016c68 <sbrk_aligned+0x38>
 8016c58:	1a21      	subs	r1, r4, r0
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	f000 fb6a 	bl	8017334 <_sbrk_r>
 8016c60:	3001      	adds	r0, #1
 8016c62:	d101      	bne.n	8016c68 <sbrk_aligned+0x38>
 8016c64:	f04f 34ff 	mov.w	r4, #4294967295
 8016c68:	4620      	mov	r0, r4
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}
 8016c6c:	2401552c 	.word	0x2401552c

08016c70 <_malloc_r>:
 8016c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c74:	1ccd      	adds	r5, r1, #3
 8016c76:	f025 0503 	bic.w	r5, r5, #3
 8016c7a:	3508      	adds	r5, #8
 8016c7c:	2d0c      	cmp	r5, #12
 8016c7e:	bf38      	it	cc
 8016c80:	250c      	movcc	r5, #12
 8016c82:	2d00      	cmp	r5, #0
 8016c84:	4607      	mov	r7, r0
 8016c86:	db01      	blt.n	8016c8c <_malloc_r+0x1c>
 8016c88:	42a9      	cmp	r1, r5
 8016c8a:	d905      	bls.n	8016c98 <_malloc_r+0x28>
 8016c8c:	230c      	movs	r3, #12
 8016c8e:	603b      	str	r3, [r7, #0]
 8016c90:	2600      	movs	r6, #0
 8016c92:	4630      	mov	r0, r6
 8016c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c98:	4e2e      	ldr	r6, [pc, #184]	; (8016d54 <_malloc_r+0xe4>)
 8016c9a:	f000 fbf5 	bl	8017488 <__malloc_lock>
 8016c9e:	6833      	ldr	r3, [r6, #0]
 8016ca0:	461c      	mov	r4, r3
 8016ca2:	bb34      	cbnz	r4, 8016cf2 <_malloc_r+0x82>
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	f7ff ffc2 	bl	8016c30 <sbrk_aligned>
 8016cac:	1c43      	adds	r3, r0, #1
 8016cae:	4604      	mov	r4, r0
 8016cb0:	d14d      	bne.n	8016d4e <_malloc_r+0xde>
 8016cb2:	6834      	ldr	r4, [r6, #0]
 8016cb4:	4626      	mov	r6, r4
 8016cb6:	2e00      	cmp	r6, #0
 8016cb8:	d140      	bne.n	8016d3c <_malloc_r+0xcc>
 8016cba:	6823      	ldr	r3, [r4, #0]
 8016cbc:	4631      	mov	r1, r6
 8016cbe:	4638      	mov	r0, r7
 8016cc0:	eb04 0803 	add.w	r8, r4, r3
 8016cc4:	f000 fb36 	bl	8017334 <_sbrk_r>
 8016cc8:	4580      	cmp	r8, r0
 8016cca:	d13a      	bne.n	8016d42 <_malloc_r+0xd2>
 8016ccc:	6821      	ldr	r1, [r4, #0]
 8016cce:	3503      	adds	r5, #3
 8016cd0:	1a6d      	subs	r5, r5, r1
 8016cd2:	f025 0503 	bic.w	r5, r5, #3
 8016cd6:	3508      	adds	r5, #8
 8016cd8:	2d0c      	cmp	r5, #12
 8016cda:	bf38      	it	cc
 8016cdc:	250c      	movcc	r5, #12
 8016cde:	4629      	mov	r1, r5
 8016ce0:	4638      	mov	r0, r7
 8016ce2:	f7ff ffa5 	bl	8016c30 <sbrk_aligned>
 8016ce6:	3001      	adds	r0, #1
 8016ce8:	d02b      	beq.n	8016d42 <_malloc_r+0xd2>
 8016cea:	6823      	ldr	r3, [r4, #0]
 8016cec:	442b      	add	r3, r5
 8016cee:	6023      	str	r3, [r4, #0]
 8016cf0:	e00e      	b.n	8016d10 <_malloc_r+0xa0>
 8016cf2:	6822      	ldr	r2, [r4, #0]
 8016cf4:	1b52      	subs	r2, r2, r5
 8016cf6:	d41e      	bmi.n	8016d36 <_malloc_r+0xc6>
 8016cf8:	2a0b      	cmp	r2, #11
 8016cfa:	d916      	bls.n	8016d2a <_malloc_r+0xba>
 8016cfc:	1961      	adds	r1, r4, r5
 8016cfe:	42a3      	cmp	r3, r4
 8016d00:	6025      	str	r5, [r4, #0]
 8016d02:	bf18      	it	ne
 8016d04:	6059      	strne	r1, [r3, #4]
 8016d06:	6863      	ldr	r3, [r4, #4]
 8016d08:	bf08      	it	eq
 8016d0a:	6031      	streq	r1, [r6, #0]
 8016d0c:	5162      	str	r2, [r4, r5]
 8016d0e:	604b      	str	r3, [r1, #4]
 8016d10:	4638      	mov	r0, r7
 8016d12:	f104 060b 	add.w	r6, r4, #11
 8016d16:	f000 fbbd 	bl	8017494 <__malloc_unlock>
 8016d1a:	f026 0607 	bic.w	r6, r6, #7
 8016d1e:	1d23      	adds	r3, r4, #4
 8016d20:	1af2      	subs	r2, r6, r3
 8016d22:	d0b6      	beq.n	8016c92 <_malloc_r+0x22>
 8016d24:	1b9b      	subs	r3, r3, r6
 8016d26:	50a3      	str	r3, [r4, r2]
 8016d28:	e7b3      	b.n	8016c92 <_malloc_r+0x22>
 8016d2a:	6862      	ldr	r2, [r4, #4]
 8016d2c:	42a3      	cmp	r3, r4
 8016d2e:	bf0c      	ite	eq
 8016d30:	6032      	streq	r2, [r6, #0]
 8016d32:	605a      	strne	r2, [r3, #4]
 8016d34:	e7ec      	b.n	8016d10 <_malloc_r+0xa0>
 8016d36:	4623      	mov	r3, r4
 8016d38:	6864      	ldr	r4, [r4, #4]
 8016d3a:	e7b2      	b.n	8016ca2 <_malloc_r+0x32>
 8016d3c:	4634      	mov	r4, r6
 8016d3e:	6876      	ldr	r6, [r6, #4]
 8016d40:	e7b9      	b.n	8016cb6 <_malloc_r+0x46>
 8016d42:	230c      	movs	r3, #12
 8016d44:	603b      	str	r3, [r7, #0]
 8016d46:	4638      	mov	r0, r7
 8016d48:	f000 fba4 	bl	8017494 <__malloc_unlock>
 8016d4c:	e7a1      	b.n	8016c92 <_malloc_r+0x22>
 8016d4e:	6025      	str	r5, [r4, #0]
 8016d50:	e7de      	b.n	8016d10 <_malloc_r+0xa0>
 8016d52:	bf00      	nop
 8016d54:	24015528 	.word	0x24015528

08016d58 <__sfputc_r>:
 8016d58:	6893      	ldr	r3, [r2, #8]
 8016d5a:	3b01      	subs	r3, #1
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	b410      	push	{r4}
 8016d60:	6093      	str	r3, [r2, #8]
 8016d62:	da08      	bge.n	8016d76 <__sfputc_r+0x1e>
 8016d64:	6994      	ldr	r4, [r2, #24]
 8016d66:	42a3      	cmp	r3, r4
 8016d68:	db01      	blt.n	8016d6e <__sfputc_r+0x16>
 8016d6a:	290a      	cmp	r1, #10
 8016d6c:	d103      	bne.n	8016d76 <__sfputc_r+0x1e>
 8016d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d72:	f7ff bc31 	b.w	80165d8 <__swbuf_r>
 8016d76:	6813      	ldr	r3, [r2, #0]
 8016d78:	1c58      	adds	r0, r3, #1
 8016d7a:	6010      	str	r0, [r2, #0]
 8016d7c:	7019      	strb	r1, [r3, #0]
 8016d7e:	4608      	mov	r0, r1
 8016d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d84:	4770      	bx	lr

08016d86 <__sfputs_r>:
 8016d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d88:	4606      	mov	r6, r0
 8016d8a:	460f      	mov	r7, r1
 8016d8c:	4614      	mov	r4, r2
 8016d8e:	18d5      	adds	r5, r2, r3
 8016d90:	42ac      	cmp	r4, r5
 8016d92:	d101      	bne.n	8016d98 <__sfputs_r+0x12>
 8016d94:	2000      	movs	r0, #0
 8016d96:	e007      	b.n	8016da8 <__sfputs_r+0x22>
 8016d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d9c:	463a      	mov	r2, r7
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f7ff ffda 	bl	8016d58 <__sfputc_r>
 8016da4:	1c43      	adds	r3, r0, #1
 8016da6:	d1f3      	bne.n	8016d90 <__sfputs_r+0xa>
 8016da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016dac <_vfiprintf_r>:
 8016dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	460d      	mov	r5, r1
 8016db2:	b09d      	sub	sp, #116	; 0x74
 8016db4:	4614      	mov	r4, r2
 8016db6:	4698      	mov	r8, r3
 8016db8:	4606      	mov	r6, r0
 8016dba:	b118      	cbz	r0, 8016dc4 <_vfiprintf_r+0x18>
 8016dbc:	6983      	ldr	r3, [r0, #24]
 8016dbe:	b90b      	cbnz	r3, 8016dc4 <_vfiprintf_r+0x18>
 8016dc0:	f7ff fde4 	bl	801698c <__sinit>
 8016dc4:	4b89      	ldr	r3, [pc, #548]	; (8016fec <_vfiprintf_r+0x240>)
 8016dc6:	429d      	cmp	r5, r3
 8016dc8:	d11b      	bne.n	8016e02 <_vfiprintf_r+0x56>
 8016dca:	6875      	ldr	r5, [r6, #4]
 8016dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016dce:	07d9      	lsls	r1, r3, #31
 8016dd0:	d405      	bmi.n	8016dde <_vfiprintf_r+0x32>
 8016dd2:	89ab      	ldrh	r3, [r5, #12]
 8016dd4:	059a      	lsls	r2, r3, #22
 8016dd6:	d402      	bmi.n	8016dde <_vfiprintf_r+0x32>
 8016dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016dda:	f7ff fe75 	bl	8016ac8 <__retarget_lock_acquire_recursive>
 8016dde:	89ab      	ldrh	r3, [r5, #12]
 8016de0:	071b      	lsls	r3, r3, #28
 8016de2:	d501      	bpl.n	8016de8 <_vfiprintf_r+0x3c>
 8016de4:	692b      	ldr	r3, [r5, #16]
 8016de6:	b9eb      	cbnz	r3, 8016e24 <_vfiprintf_r+0x78>
 8016de8:	4629      	mov	r1, r5
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7ff fc46 	bl	801667c <__swsetup_r>
 8016df0:	b1c0      	cbz	r0, 8016e24 <_vfiprintf_r+0x78>
 8016df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016df4:	07dc      	lsls	r4, r3, #31
 8016df6:	d50e      	bpl.n	8016e16 <_vfiprintf_r+0x6a>
 8016df8:	f04f 30ff 	mov.w	r0, #4294967295
 8016dfc:	b01d      	add	sp, #116	; 0x74
 8016dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e02:	4b7b      	ldr	r3, [pc, #492]	; (8016ff0 <_vfiprintf_r+0x244>)
 8016e04:	429d      	cmp	r5, r3
 8016e06:	d101      	bne.n	8016e0c <_vfiprintf_r+0x60>
 8016e08:	68b5      	ldr	r5, [r6, #8]
 8016e0a:	e7df      	b.n	8016dcc <_vfiprintf_r+0x20>
 8016e0c:	4b79      	ldr	r3, [pc, #484]	; (8016ff4 <_vfiprintf_r+0x248>)
 8016e0e:	429d      	cmp	r5, r3
 8016e10:	bf08      	it	eq
 8016e12:	68f5      	ldreq	r5, [r6, #12]
 8016e14:	e7da      	b.n	8016dcc <_vfiprintf_r+0x20>
 8016e16:	89ab      	ldrh	r3, [r5, #12]
 8016e18:	0598      	lsls	r0, r3, #22
 8016e1a:	d4ed      	bmi.n	8016df8 <_vfiprintf_r+0x4c>
 8016e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e1e:	f7ff fe54 	bl	8016aca <__retarget_lock_release_recursive>
 8016e22:	e7e9      	b.n	8016df8 <_vfiprintf_r+0x4c>
 8016e24:	2300      	movs	r3, #0
 8016e26:	9309      	str	r3, [sp, #36]	; 0x24
 8016e28:	2320      	movs	r3, #32
 8016e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e32:	2330      	movs	r3, #48	; 0x30
 8016e34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016ff8 <_vfiprintf_r+0x24c>
 8016e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e3c:	f04f 0901 	mov.w	r9, #1
 8016e40:	4623      	mov	r3, r4
 8016e42:	469a      	mov	sl, r3
 8016e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e48:	b10a      	cbz	r2, 8016e4e <_vfiprintf_r+0xa2>
 8016e4a:	2a25      	cmp	r2, #37	; 0x25
 8016e4c:	d1f9      	bne.n	8016e42 <_vfiprintf_r+0x96>
 8016e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8016e52:	d00b      	beq.n	8016e6c <_vfiprintf_r+0xc0>
 8016e54:	465b      	mov	r3, fp
 8016e56:	4622      	mov	r2, r4
 8016e58:	4629      	mov	r1, r5
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7ff ff93 	bl	8016d86 <__sfputs_r>
 8016e60:	3001      	adds	r0, #1
 8016e62:	f000 80aa 	beq.w	8016fba <_vfiprintf_r+0x20e>
 8016e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e68:	445a      	add	r2, fp
 8016e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8016e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	f000 80a2 	beq.w	8016fba <_vfiprintf_r+0x20e>
 8016e76:	2300      	movs	r3, #0
 8016e78:	f04f 32ff 	mov.w	r2, #4294967295
 8016e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e80:	f10a 0a01 	add.w	sl, sl, #1
 8016e84:	9304      	str	r3, [sp, #16]
 8016e86:	9307      	str	r3, [sp, #28]
 8016e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8016e8e:	4654      	mov	r4, sl
 8016e90:	2205      	movs	r2, #5
 8016e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e96:	4858      	ldr	r0, [pc, #352]	; (8016ff8 <_vfiprintf_r+0x24c>)
 8016e98:	f7e9 fb42 	bl	8000520 <memchr>
 8016e9c:	9a04      	ldr	r2, [sp, #16]
 8016e9e:	b9d8      	cbnz	r0, 8016ed8 <_vfiprintf_r+0x12c>
 8016ea0:	06d1      	lsls	r1, r2, #27
 8016ea2:	bf44      	itt	mi
 8016ea4:	2320      	movmi	r3, #32
 8016ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016eaa:	0713      	lsls	r3, r2, #28
 8016eac:	bf44      	itt	mi
 8016eae:	232b      	movmi	r3, #43	; 0x2b
 8016eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8016eba:	d015      	beq.n	8016ee8 <_vfiprintf_r+0x13c>
 8016ebc:	9a07      	ldr	r2, [sp, #28]
 8016ebe:	4654      	mov	r4, sl
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	f04f 0c0a 	mov.w	ip, #10
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ecc:	3b30      	subs	r3, #48	; 0x30
 8016ece:	2b09      	cmp	r3, #9
 8016ed0:	d94e      	bls.n	8016f70 <_vfiprintf_r+0x1c4>
 8016ed2:	b1b0      	cbz	r0, 8016f02 <_vfiprintf_r+0x156>
 8016ed4:	9207      	str	r2, [sp, #28]
 8016ed6:	e014      	b.n	8016f02 <_vfiprintf_r+0x156>
 8016ed8:	eba0 0308 	sub.w	r3, r0, r8
 8016edc:	fa09 f303 	lsl.w	r3, r9, r3
 8016ee0:	4313      	orrs	r3, r2
 8016ee2:	9304      	str	r3, [sp, #16]
 8016ee4:	46a2      	mov	sl, r4
 8016ee6:	e7d2      	b.n	8016e8e <_vfiprintf_r+0xe2>
 8016ee8:	9b03      	ldr	r3, [sp, #12]
 8016eea:	1d19      	adds	r1, r3, #4
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	9103      	str	r1, [sp, #12]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	bfbb      	ittet	lt
 8016ef4:	425b      	neglt	r3, r3
 8016ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8016efa:	9307      	strge	r3, [sp, #28]
 8016efc:	9307      	strlt	r3, [sp, #28]
 8016efe:	bfb8      	it	lt
 8016f00:	9204      	strlt	r2, [sp, #16]
 8016f02:	7823      	ldrb	r3, [r4, #0]
 8016f04:	2b2e      	cmp	r3, #46	; 0x2e
 8016f06:	d10c      	bne.n	8016f22 <_vfiprintf_r+0x176>
 8016f08:	7863      	ldrb	r3, [r4, #1]
 8016f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8016f0c:	d135      	bne.n	8016f7a <_vfiprintf_r+0x1ce>
 8016f0e:	9b03      	ldr	r3, [sp, #12]
 8016f10:	1d1a      	adds	r2, r3, #4
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	9203      	str	r2, [sp, #12]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	bfb8      	it	lt
 8016f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f1e:	3402      	adds	r4, #2
 8016f20:	9305      	str	r3, [sp, #20]
 8016f22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017008 <_vfiprintf_r+0x25c>
 8016f26:	7821      	ldrb	r1, [r4, #0]
 8016f28:	2203      	movs	r2, #3
 8016f2a:	4650      	mov	r0, sl
 8016f2c:	f7e9 faf8 	bl	8000520 <memchr>
 8016f30:	b140      	cbz	r0, 8016f44 <_vfiprintf_r+0x198>
 8016f32:	2340      	movs	r3, #64	; 0x40
 8016f34:	eba0 000a 	sub.w	r0, r0, sl
 8016f38:	fa03 f000 	lsl.w	r0, r3, r0
 8016f3c:	9b04      	ldr	r3, [sp, #16]
 8016f3e:	4303      	orrs	r3, r0
 8016f40:	3401      	adds	r4, #1
 8016f42:	9304      	str	r3, [sp, #16]
 8016f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f48:	482c      	ldr	r0, [pc, #176]	; (8016ffc <_vfiprintf_r+0x250>)
 8016f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f4e:	2206      	movs	r2, #6
 8016f50:	f7e9 fae6 	bl	8000520 <memchr>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d03f      	beq.n	8016fd8 <_vfiprintf_r+0x22c>
 8016f58:	4b29      	ldr	r3, [pc, #164]	; (8017000 <_vfiprintf_r+0x254>)
 8016f5a:	bb1b      	cbnz	r3, 8016fa4 <_vfiprintf_r+0x1f8>
 8016f5c:	9b03      	ldr	r3, [sp, #12]
 8016f5e:	3307      	adds	r3, #7
 8016f60:	f023 0307 	bic.w	r3, r3, #7
 8016f64:	3308      	adds	r3, #8
 8016f66:	9303      	str	r3, [sp, #12]
 8016f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f6a:	443b      	add	r3, r7
 8016f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016f6e:	e767      	b.n	8016e40 <_vfiprintf_r+0x94>
 8016f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f74:	460c      	mov	r4, r1
 8016f76:	2001      	movs	r0, #1
 8016f78:	e7a5      	b.n	8016ec6 <_vfiprintf_r+0x11a>
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	3401      	adds	r4, #1
 8016f7e:	9305      	str	r3, [sp, #20]
 8016f80:	4619      	mov	r1, r3
 8016f82:	f04f 0c0a 	mov.w	ip, #10
 8016f86:	4620      	mov	r0, r4
 8016f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f8c:	3a30      	subs	r2, #48	; 0x30
 8016f8e:	2a09      	cmp	r2, #9
 8016f90:	d903      	bls.n	8016f9a <_vfiprintf_r+0x1ee>
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d0c5      	beq.n	8016f22 <_vfiprintf_r+0x176>
 8016f96:	9105      	str	r1, [sp, #20]
 8016f98:	e7c3      	b.n	8016f22 <_vfiprintf_r+0x176>
 8016f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	e7f0      	b.n	8016f86 <_vfiprintf_r+0x1da>
 8016fa4:	ab03      	add	r3, sp, #12
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	462a      	mov	r2, r5
 8016faa:	4b16      	ldr	r3, [pc, #88]	; (8017004 <_vfiprintf_r+0x258>)
 8016fac:	a904      	add	r1, sp, #16
 8016fae:	4630      	mov	r0, r6
 8016fb0:	f3af 8000 	nop.w
 8016fb4:	4607      	mov	r7, r0
 8016fb6:	1c78      	adds	r0, r7, #1
 8016fb8:	d1d6      	bne.n	8016f68 <_vfiprintf_r+0x1bc>
 8016fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016fbc:	07d9      	lsls	r1, r3, #31
 8016fbe:	d405      	bmi.n	8016fcc <_vfiprintf_r+0x220>
 8016fc0:	89ab      	ldrh	r3, [r5, #12]
 8016fc2:	059a      	lsls	r2, r3, #22
 8016fc4:	d402      	bmi.n	8016fcc <_vfiprintf_r+0x220>
 8016fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016fc8:	f7ff fd7f 	bl	8016aca <__retarget_lock_release_recursive>
 8016fcc:	89ab      	ldrh	r3, [r5, #12]
 8016fce:	065b      	lsls	r3, r3, #25
 8016fd0:	f53f af12 	bmi.w	8016df8 <_vfiprintf_r+0x4c>
 8016fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fd6:	e711      	b.n	8016dfc <_vfiprintf_r+0x50>
 8016fd8:	ab03      	add	r3, sp, #12
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	462a      	mov	r2, r5
 8016fde:	4b09      	ldr	r3, [pc, #36]	; (8017004 <_vfiprintf_r+0x258>)
 8016fe0:	a904      	add	r1, sp, #16
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f000 f880 	bl	80170e8 <_printf_i>
 8016fe8:	e7e4      	b.n	8016fb4 <_vfiprintf_r+0x208>
 8016fea:	bf00      	nop
 8016fec:	08017670 	.word	0x08017670
 8016ff0:	08017690 	.word	0x08017690
 8016ff4:	08017650 	.word	0x08017650
 8016ff8:	080176b0 	.word	0x080176b0
 8016ffc:	080176ba 	.word	0x080176ba
 8017000:	00000000 	.word	0x00000000
 8017004:	08016d87 	.word	0x08016d87
 8017008:	080176b6 	.word	0x080176b6

0801700c <_printf_common>:
 801700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017010:	4616      	mov	r6, r2
 8017012:	4699      	mov	r9, r3
 8017014:	688a      	ldr	r2, [r1, #8]
 8017016:	690b      	ldr	r3, [r1, #16]
 8017018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801701c:	4293      	cmp	r3, r2
 801701e:	bfb8      	it	lt
 8017020:	4613      	movlt	r3, r2
 8017022:	6033      	str	r3, [r6, #0]
 8017024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017028:	4607      	mov	r7, r0
 801702a:	460c      	mov	r4, r1
 801702c:	b10a      	cbz	r2, 8017032 <_printf_common+0x26>
 801702e:	3301      	adds	r3, #1
 8017030:	6033      	str	r3, [r6, #0]
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	0699      	lsls	r1, r3, #26
 8017036:	bf42      	ittt	mi
 8017038:	6833      	ldrmi	r3, [r6, #0]
 801703a:	3302      	addmi	r3, #2
 801703c:	6033      	strmi	r3, [r6, #0]
 801703e:	6825      	ldr	r5, [r4, #0]
 8017040:	f015 0506 	ands.w	r5, r5, #6
 8017044:	d106      	bne.n	8017054 <_printf_common+0x48>
 8017046:	f104 0a19 	add.w	sl, r4, #25
 801704a:	68e3      	ldr	r3, [r4, #12]
 801704c:	6832      	ldr	r2, [r6, #0]
 801704e:	1a9b      	subs	r3, r3, r2
 8017050:	42ab      	cmp	r3, r5
 8017052:	dc26      	bgt.n	80170a2 <_printf_common+0x96>
 8017054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017058:	1e13      	subs	r3, r2, #0
 801705a:	6822      	ldr	r2, [r4, #0]
 801705c:	bf18      	it	ne
 801705e:	2301      	movne	r3, #1
 8017060:	0692      	lsls	r2, r2, #26
 8017062:	d42b      	bmi.n	80170bc <_printf_common+0xb0>
 8017064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017068:	4649      	mov	r1, r9
 801706a:	4638      	mov	r0, r7
 801706c:	47c0      	blx	r8
 801706e:	3001      	adds	r0, #1
 8017070:	d01e      	beq.n	80170b0 <_printf_common+0xa4>
 8017072:	6823      	ldr	r3, [r4, #0]
 8017074:	68e5      	ldr	r5, [r4, #12]
 8017076:	6832      	ldr	r2, [r6, #0]
 8017078:	f003 0306 	and.w	r3, r3, #6
 801707c:	2b04      	cmp	r3, #4
 801707e:	bf08      	it	eq
 8017080:	1aad      	subeq	r5, r5, r2
 8017082:	68a3      	ldr	r3, [r4, #8]
 8017084:	6922      	ldr	r2, [r4, #16]
 8017086:	bf0c      	ite	eq
 8017088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801708c:	2500      	movne	r5, #0
 801708e:	4293      	cmp	r3, r2
 8017090:	bfc4      	itt	gt
 8017092:	1a9b      	subgt	r3, r3, r2
 8017094:	18ed      	addgt	r5, r5, r3
 8017096:	2600      	movs	r6, #0
 8017098:	341a      	adds	r4, #26
 801709a:	42b5      	cmp	r5, r6
 801709c:	d11a      	bne.n	80170d4 <_printf_common+0xc8>
 801709e:	2000      	movs	r0, #0
 80170a0:	e008      	b.n	80170b4 <_printf_common+0xa8>
 80170a2:	2301      	movs	r3, #1
 80170a4:	4652      	mov	r2, sl
 80170a6:	4649      	mov	r1, r9
 80170a8:	4638      	mov	r0, r7
 80170aa:	47c0      	blx	r8
 80170ac:	3001      	adds	r0, #1
 80170ae:	d103      	bne.n	80170b8 <_printf_common+0xac>
 80170b0:	f04f 30ff 	mov.w	r0, #4294967295
 80170b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b8:	3501      	adds	r5, #1
 80170ba:	e7c6      	b.n	801704a <_printf_common+0x3e>
 80170bc:	18e1      	adds	r1, r4, r3
 80170be:	1c5a      	adds	r2, r3, #1
 80170c0:	2030      	movs	r0, #48	; 0x30
 80170c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170c6:	4422      	add	r2, r4
 80170c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80170d0:	3302      	adds	r3, #2
 80170d2:	e7c7      	b.n	8017064 <_printf_common+0x58>
 80170d4:	2301      	movs	r3, #1
 80170d6:	4622      	mov	r2, r4
 80170d8:	4649      	mov	r1, r9
 80170da:	4638      	mov	r0, r7
 80170dc:	47c0      	blx	r8
 80170de:	3001      	adds	r0, #1
 80170e0:	d0e6      	beq.n	80170b0 <_printf_common+0xa4>
 80170e2:	3601      	adds	r6, #1
 80170e4:	e7d9      	b.n	801709a <_printf_common+0x8e>
	...

080170e8 <_printf_i>:
 80170e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170ec:	7e0f      	ldrb	r7, [r1, #24]
 80170ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80170f0:	2f78      	cmp	r7, #120	; 0x78
 80170f2:	4691      	mov	r9, r2
 80170f4:	4680      	mov	r8, r0
 80170f6:	460c      	mov	r4, r1
 80170f8:	469a      	mov	sl, r3
 80170fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80170fe:	d807      	bhi.n	8017110 <_printf_i+0x28>
 8017100:	2f62      	cmp	r7, #98	; 0x62
 8017102:	d80a      	bhi.n	801711a <_printf_i+0x32>
 8017104:	2f00      	cmp	r7, #0
 8017106:	f000 80d8 	beq.w	80172ba <_printf_i+0x1d2>
 801710a:	2f58      	cmp	r7, #88	; 0x58
 801710c:	f000 80a3 	beq.w	8017256 <_printf_i+0x16e>
 8017110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017118:	e03a      	b.n	8017190 <_printf_i+0xa8>
 801711a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801711e:	2b15      	cmp	r3, #21
 8017120:	d8f6      	bhi.n	8017110 <_printf_i+0x28>
 8017122:	a101      	add	r1, pc, #4	; (adr r1, 8017128 <_printf_i+0x40>)
 8017124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017128:	08017181 	.word	0x08017181
 801712c:	08017195 	.word	0x08017195
 8017130:	08017111 	.word	0x08017111
 8017134:	08017111 	.word	0x08017111
 8017138:	08017111 	.word	0x08017111
 801713c:	08017111 	.word	0x08017111
 8017140:	08017195 	.word	0x08017195
 8017144:	08017111 	.word	0x08017111
 8017148:	08017111 	.word	0x08017111
 801714c:	08017111 	.word	0x08017111
 8017150:	08017111 	.word	0x08017111
 8017154:	080172a1 	.word	0x080172a1
 8017158:	080171c5 	.word	0x080171c5
 801715c:	08017283 	.word	0x08017283
 8017160:	08017111 	.word	0x08017111
 8017164:	08017111 	.word	0x08017111
 8017168:	080172c3 	.word	0x080172c3
 801716c:	08017111 	.word	0x08017111
 8017170:	080171c5 	.word	0x080171c5
 8017174:	08017111 	.word	0x08017111
 8017178:	08017111 	.word	0x08017111
 801717c:	0801728b 	.word	0x0801728b
 8017180:	682b      	ldr	r3, [r5, #0]
 8017182:	1d1a      	adds	r2, r3, #4
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	602a      	str	r2, [r5, #0]
 8017188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801718c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017190:	2301      	movs	r3, #1
 8017192:	e0a3      	b.n	80172dc <_printf_i+0x1f4>
 8017194:	6820      	ldr	r0, [r4, #0]
 8017196:	6829      	ldr	r1, [r5, #0]
 8017198:	0606      	lsls	r6, r0, #24
 801719a:	f101 0304 	add.w	r3, r1, #4
 801719e:	d50a      	bpl.n	80171b6 <_printf_i+0xce>
 80171a0:	680e      	ldr	r6, [r1, #0]
 80171a2:	602b      	str	r3, [r5, #0]
 80171a4:	2e00      	cmp	r6, #0
 80171a6:	da03      	bge.n	80171b0 <_printf_i+0xc8>
 80171a8:	232d      	movs	r3, #45	; 0x2d
 80171aa:	4276      	negs	r6, r6
 80171ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171b0:	485e      	ldr	r0, [pc, #376]	; (801732c <_printf_i+0x244>)
 80171b2:	230a      	movs	r3, #10
 80171b4:	e019      	b.n	80171ea <_printf_i+0x102>
 80171b6:	680e      	ldr	r6, [r1, #0]
 80171b8:	602b      	str	r3, [r5, #0]
 80171ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80171be:	bf18      	it	ne
 80171c0:	b236      	sxthne	r6, r6
 80171c2:	e7ef      	b.n	80171a4 <_printf_i+0xbc>
 80171c4:	682b      	ldr	r3, [r5, #0]
 80171c6:	6820      	ldr	r0, [r4, #0]
 80171c8:	1d19      	adds	r1, r3, #4
 80171ca:	6029      	str	r1, [r5, #0]
 80171cc:	0601      	lsls	r1, r0, #24
 80171ce:	d501      	bpl.n	80171d4 <_printf_i+0xec>
 80171d0:	681e      	ldr	r6, [r3, #0]
 80171d2:	e002      	b.n	80171da <_printf_i+0xf2>
 80171d4:	0646      	lsls	r6, r0, #25
 80171d6:	d5fb      	bpl.n	80171d0 <_printf_i+0xe8>
 80171d8:	881e      	ldrh	r6, [r3, #0]
 80171da:	4854      	ldr	r0, [pc, #336]	; (801732c <_printf_i+0x244>)
 80171dc:	2f6f      	cmp	r7, #111	; 0x6f
 80171de:	bf0c      	ite	eq
 80171e0:	2308      	moveq	r3, #8
 80171e2:	230a      	movne	r3, #10
 80171e4:	2100      	movs	r1, #0
 80171e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80171ea:	6865      	ldr	r5, [r4, #4]
 80171ec:	60a5      	str	r5, [r4, #8]
 80171ee:	2d00      	cmp	r5, #0
 80171f0:	bfa2      	ittt	ge
 80171f2:	6821      	ldrge	r1, [r4, #0]
 80171f4:	f021 0104 	bicge.w	r1, r1, #4
 80171f8:	6021      	strge	r1, [r4, #0]
 80171fa:	b90e      	cbnz	r6, 8017200 <_printf_i+0x118>
 80171fc:	2d00      	cmp	r5, #0
 80171fe:	d04d      	beq.n	801729c <_printf_i+0x1b4>
 8017200:	4615      	mov	r5, r2
 8017202:	fbb6 f1f3 	udiv	r1, r6, r3
 8017206:	fb03 6711 	mls	r7, r3, r1, r6
 801720a:	5dc7      	ldrb	r7, [r0, r7]
 801720c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017210:	4637      	mov	r7, r6
 8017212:	42bb      	cmp	r3, r7
 8017214:	460e      	mov	r6, r1
 8017216:	d9f4      	bls.n	8017202 <_printf_i+0x11a>
 8017218:	2b08      	cmp	r3, #8
 801721a:	d10b      	bne.n	8017234 <_printf_i+0x14c>
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	07de      	lsls	r6, r3, #31
 8017220:	d508      	bpl.n	8017234 <_printf_i+0x14c>
 8017222:	6923      	ldr	r3, [r4, #16]
 8017224:	6861      	ldr	r1, [r4, #4]
 8017226:	4299      	cmp	r1, r3
 8017228:	bfde      	ittt	le
 801722a:	2330      	movle	r3, #48	; 0x30
 801722c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017230:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017234:	1b52      	subs	r2, r2, r5
 8017236:	6122      	str	r2, [r4, #16]
 8017238:	f8cd a000 	str.w	sl, [sp]
 801723c:	464b      	mov	r3, r9
 801723e:	aa03      	add	r2, sp, #12
 8017240:	4621      	mov	r1, r4
 8017242:	4640      	mov	r0, r8
 8017244:	f7ff fee2 	bl	801700c <_printf_common>
 8017248:	3001      	adds	r0, #1
 801724a:	d14c      	bne.n	80172e6 <_printf_i+0x1fe>
 801724c:	f04f 30ff 	mov.w	r0, #4294967295
 8017250:	b004      	add	sp, #16
 8017252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017256:	4835      	ldr	r0, [pc, #212]	; (801732c <_printf_i+0x244>)
 8017258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801725c:	6829      	ldr	r1, [r5, #0]
 801725e:	6823      	ldr	r3, [r4, #0]
 8017260:	f851 6b04 	ldr.w	r6, [r1], #4
 8017264:	6029      	str	r1, [r5, #0]
 8017266:	061d      	lsls	r5, r3, #24
 8017268:	d514      	bpl.n	8017294 <_printf_i+0x1ac>
 801726a:	07df      	lsls	r7, r3, #31
 801726c:	bf44      	itt	mi
 801726e:	f043 0320 	orrmi.w	r3, r3, #32
 8017272:	6023      	strmi	r3, [r4, #0]
 8017274:	b91e      	cbnz	r6, 801727e <_printf_i+0x196>
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	f023 0320 	bic.w	r3, r3, #32
 801727c:	6023      	str	r3, [r4, #0]
 801727e:	2310      	movs	r3, #16
 8017280:	e7b0      	b.n	80171e4 <_printf_i+0xfc>
 8017282:	6823      	ldr	r3, [r4, #0]
 8017284:	f043 0320 	orr.w	r3, r3, #32
 8017288:	6023      	str	r3, [r4, #0]
 801728a:	2378      	movs	r3, #120	; 0x78
 801728c:	4828      	ldr	r0, [pc, #160]	; (8017330 <_printf_i+0x248>)
 801728e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017292:	e7e3      	b.n	801725c <_printf_i+0x174>
 8017294:	0659      	lsls	r1, r3, #25
 8017296:	bf48      	it	mi
 8017298:	b2b6      	uxthmi	r6, r6
 801729a:	e7e6      	b.n	801726a <_printf_i+0x182>
 801729c:	4615      	mov	r5, r2
 801729e:	e7bb      	b.n	8017218 <_printf_i+0x130>
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	6826      	ldr	r6, [r4, #0]
 80172a4:	6961      	ldr	r1, [r4, #20]
 80172a6:	1d18      	adds	r0, r3, #4
 80172a8:	6028      	str	r0, [r5, #0]
 80172aa:	0635      	lsls	r5, r6, #24
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	d501      	bpl.n	80172b4 <_printf_i+0x1cc>
 80172b0:	6019      	str	r1, [r3, #0]
 80172b2:	e002      	b.n	80172ba <_printf_i+0x1d2>
 80172b4:	0670      	lsls	r0, r6, #25
 80172b6:	d5fb      	bpl.n	80172b0 <_printf_i+0x1c8>
 80172b8:	8019      	strh	r1, [r3, #0]
 80172ba:	2300      	movs	r3, #0
 80172bc:	6123      	str	r3, [r4, #16]
 80172be:	4615      	mov	r5, r2
 80172c0:	e7ba      	b.n	8017238 <_printf_i+0x150>
 80172c2:	682b      	ldr	r3, [r5, #0]
 80172c4:	1d1a      	adds	r2, r3, #4
 80172c6:	602a      	str	r2, [r5, #0]
 80172c8:	681d      	ldr	r5, [r3, #0]
 80172ca:	6862      	ldr	r2, [r4, #4]
 80172cc:	2100      	movs	r1, #0
 80172ce:	4628      	mov	r0, r5
 80172d0:	f7e9 f926 	bl	8000520 <memchr>
 80172d4:	b108      	cbz	r0, 80172da <_printf_i+0x1f2>
 80172d6:	1b40      	subs	r0, r0, r5
 80172d8:	6060      	str	r0, [r4, #4]
 80172da:	6863      	ldr	r3, [r4, #4]
 80172dc:	6123      	str	r3, [r4, #16]
 80172de:	2300      	movs	r3, #0
 80172e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172e4:	e7a8      	b.n	8017238 <_printf_i+0x150>
 80172e6:	6923      	ldr	r3, [r4, #16]
 80172e8:	462a      	mov	r2, r5
 80172ea:	4649      	mov	r1, r9
 80172ec:	4640      	mov	r0, r8
 80172ee:	47d0      	blx	sl
 80172f0:	3001      	adds	r0, #1
 80172f2:	d0ab      	beq.n	801724c <_printf_i+0x164>
 80172f4:	6823      	ldr	r3, [r4, #0]
 80172f6:	079b      	lsls	r3, r3, #30
 80172f8:	d413      	bmi.n	8017322 <_printf_i+0x23a>
 80172fa:	68e0      	ldr	r0, [r4, #12]
 80172fc:	9b03      	ldr	r3, [sp, #12]
 80172fe:	4298      	cmp	r0, r3
 8017300:	bfb8      	it	lt
 8017302:	4618      	movlt	r0, r3
 8017304:	e7a4      	b.n	8017250 <_printf_i+0x168>
 8017306:	2301      	movs	r3, #1
 8017308:	4632      	mov	r2, r6
 801730a:	4649      	mov	r1, r9
 801730c:	4640      	mov	r0, r8
 801730e:	47d0      	blx	sl
 8017310:	3001      	adds	r0, #1
 8017312:	d09b      	beq.n	801724c <_printf_i+0x164>
 8017314:	3501      	adds	r5, #1
 8017316:	68e3      	ldr	r3, [r4, #12]
 8017318:	9903      	ldr	r1, [sp, #12]
 801731a:	1a5b      	subs	r3, r3, r1
 801731c:	42ab      	cmp	r3, r5
 801731e:	dcf2      	bgt.n	8017306 <_printf_i+0x21e>
 8017320:	e7eb      	b.n	80172fa <_printf_i+0x212>
 8017322:	2500      	movs	r5, #0
 8017324:	f104 0619 	add.w	r6, r4, #25
 8017328:	e7f5      	b.n	8017316 <_printf_i+0x22e>
 801732a:	bf00      	nop
 801732c:	080176c1 	.word	0x080176c1
 8017330:	080176d2 	.word	0x080176d2

08017334 <_sbrk_r>:
 8017334:	b538      	push	{r3, r4, r5, lr}
 8017336:	4d06      	ldr	r5, [pc, #24]	; (8017350 <_sbrk_r+0x1c>)
 8017338:	2300      	movs	r3, #0
 801733a:	4604      	mov	r4, r0
 801733c:	4608      	mov	r0, r1
 801733e:	602b      	str	r3, [r5, #0]
 8017340:	f7e9 ffe2 	bl	8001308 <_sbrk>
 8017344:	1c43      	adds	r3, r0, #1
 8017346:	d102      	bne.n	801734e <_sbrk_r+0x1a>
 8017348:	682b      	ldr	r3, [r5, #0]
 801734a:	b103      	cbz	r3, 801734e <_sbrk_r+0x1a>
 801734c:	6023      	str	r3, [r4, #0]
 801734e:	bd38      	pop	{r3, r4, r5, pc}
 8017350:	24015530 	.word	0x24015530

08017354 <__sread>:
 8017354:	b510      	push	{r4, lr}
 8017356:	460c      	mov	r4, r1
 8017358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801735c:	f000 f8a0 	bl	80174a0 <_read_r>
 8017360:	2800      	cmp	r0, #0
 8017362:	bfab      	itete	ge
 8017364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017366:	89a3      	ldrhlt	r3, [r4, #12]
 8017368:	181b      	addge	r3, r3, r0
 801736a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801736e:	bfac      	ite	ge
 8017370:	6563      	strge	r3, [r4, #84]	; 0x54
 8017372:	81a3      	strhlt	r3, [r4, #12]
 8017374:	bd10      	pop	{r4, pc}

08017376 <__swrite>:
 8017376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801737a:	461f      	mov	r7, r3
 801737c:	898b      	ldrh	r3, [r1, #12]
 801737e:	05db      	lsls	r3, r3, #23
 8017380:	4605      	mov	r5, r0
 8017382:	460c      	mov	r4, r1
 8017384:	4616      	mov	r6, r2
 8017386:	d505      	bpl.n	8017394 <__swrite+0x1e>
 8017388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801738c:	2302      	movs	r3, #2
 801738e:	2200      	movs	r2, #0
 8017390:	f000 f868 	bl	8017464 <_lseek_r>
 8017394:	89a3      	ldrh	r3, [r4, #12]
 8017396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801739a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801739e:	81a3      	strh	r3, [r4, #12]
 80173a0:	4632      	mov	r2, r6
 80173a2:	463b      	mov	r3, r7
 80173a4:	4628      	mov	r0, r5
 80173a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173aa:	f000 b817 	b.w	80173dc <_write_r>

080173ae <__sseek>:
 80173ae:	b510      	push	{r4, lr}
 80173b0:	460c      	mov	r4, r1
 80173b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173b6:	f000 f855 	bl	8017464 <_lseek_r>
 80173ba:	1c43      	adds	r3, r0, #1
 80173bc:	89a3      	ldrh	r3, [r4, #12]
 80173be:	bf15      	itete	ne
 80173c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80173c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80173c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80173ca:	81a3      	strheq	r3, [r4, #12]
 80173cc:	bf18      	it	ne
 80173ce:	81a3      	strhne	r3, [r4, #12]
 80173d0:	bd10      	pop	{r4, pc}

080173d2 <__sclose>:
 80173d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173d6:	f000 b813 	b.w	8017400 <_close_r>
	...

080173dc <_write_r>:
 80173dc:	b538      	push	{r3, r4, r5, lr}
 80173de:	4d07      	ldr	r5, [pc, #28]	; (80173fc <_write_r+0x20>)
 80173e0:	4604      	mov	r4, r0
 80173e2:	4608      	mov	r0, r1
 80173e4:	4611      	mov	r1, r2
 80173e6:	2200      	movs	r2, #0
 80173e8:	602a      	str	r2, [r5, #0]
 80173ea:	461a      	mov	r2, r3
 80173ec:	f7e9 ff3b 	bl	8001266 <_write>
 80173f0:	1c43      	adds	r3, r0, #1
 80173f2:	d102      	bne.n	80173fa <_write_r+0x1e>
 80173f4:	682b      	ldr	r3, [r5, #0]
 80173f6:	b103      	cbz	r3, 80173fa <_write_r+0x1e>
 80173f8:	6023      	str	r3, [r4, #0]
 80173fa:	bd38      	pop	{r3, r4, r5, pc}
 80173fc:	24015530 	.word	0x24015530

08017400 <_close_r>:
 8017400:	b538      	push	{r3, r4, r5, lr}
 8017402:	4d06      	ldr	r5, [pc, #24]	; (801741c <_close_r+0x1c>)
 8017404:	2300      	movs	r3, #0
 8017406:	4604      	mov	r4, r0
 8017408:	4608      	mov	r0, r1
 801740a:	602b      	str	r3, [r5, #0]
 801740c:	f7e9 ff47 	bl	800129e <_close>
 8017410:	1c43      	adds	r3, r0, #1
 8017412:	d102      	bne.n	801741a <_close_r+0x1a>
 8017414:	682b      	ldr	r3, [r5, #0]
 8017416:	b103      	cbz	r3, 801741a <_close_r+0x1a>
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	bd38      	pop	{r3, r4, r5, pc}
 801741c:	24015530 	.word	0x24015530

08017420 <_fstat_r>:
 8017420:	b538      	push	{r3, r4, r5, lr}
 8017422:	4d07      	ldr	r5, [pc, #28]	; (8017440 <_fstat_r+0x20>)
 8017424:	2300      	movs	r3, #0
 8017426:	4604      	mov	r4, r0
 8017428:	4608      	mov	r0, r1
 801742a:	4611      	mov	r1, r2
 801742c:	602b      	str	r3, [r5, #0]
 801742e:	f7e9 ff42 	bl	80012b6 <_fstat>
 8017432:	1c43      	adds	r3, r0, #1
 8017434:	d102      	bne.n	801743c <_fstat_r+0x1c>
 8017436:	682b      	ldr	r3, [r5, #0]
 8017438:	b103      	cbz	r3, 801743c <_fstat_r+0x1c>
 801743a:	6023      	str	r3, [r4, #0]
 801743c:	bd38      	pop	{r3, r4, r5, pc}
 801743e:	bf00      	nop
 8017440:	24015530 	.word	0x24015530

08017444 <_isatty_r>:
 8017444:	b538      	push	{r3, r4, r5, lr}
 8017446:	4d06      	ldr	r5, [pc, #24]	; (8017460 <_isatty_r+0x1c>)
 8017448:	2300      	movs	r3, #0
 801744a:	4604      	mov	r4, r0
 801744c:	4608      	mov	r0, r1
 801744e:	602b      	str	r3, [r5, #0]
 8017450:	f7e9 ff41 	bl	80012d6 <_isatty>
 8017454:	1c43      	adds	r3, r0, #1
 8017456:	d102      	bne.n	801745e <_isatty_r+0x1a>
 8017458:	682b      	ldr	r3, [r5, #0]
 801745a:	b103      	cbz	r3, 801745e <_isatty_r+0x1a>
 801745c:	6023      	str	r3, [r4, #0]
 801745e:	bd38      	pop	{r3, r4, r5, pc}
 8017460:	24015530 	.word	0x24015530

08017464 <_lseek_r>:
 8017464:	b538      	push	{r3, r4, r5, lr}
 8017466:	4d07      	ldr	r5, [pc, #28]	; (8017484 <_lseek_r+0x20>)
 8017468:	4604      	mov	r4, r0
 801746a:	4608      	mov	r0, r1
 801746c:	4611      	mov	r1, r2
 801746e:	2200      	movs	r2, #0
 8017470:	602a      	str	r2, [r5, #0]
 8017472:	461a      	mov	r2, r3
 8017474:	f7e9 ff3a 	bl	80012ec <_lseek>
 8017478:	1c43      	adds	r3, r0, #1
 801747a:	d102      	bne.n	8017482 <_lseek_r+0x1e>
 801747c:	682b      	ldr	r3, [r5, #0]
 801747e:	b103      	cbz	r3, 8017482 <_lseek_r+0x1e>
 8017480:	6023      	str	r3, [r4, #0]
 8017482:	bd38      	pop	{r3, r4, r5, pc}
 8017484:	24015530 	.word	0x24015530

08017488 <__malloc_lock>:
 8017488:	4801      	ldr	r0, [pc, #4]	; (8017490 <__malloc_lock+0x8>)
 801748a:	f7ff bb1d 	b.w	8016ac8 <__retarget_lock_acquire_recursive>
 801748e:	bf00      	nop
 8017490:	24015524 	.word	0x24015524

08017494 <__malloc_unlock>:
 8017494:	4801      	ldr	r0, [pc, #4]	; (801749c <__malloc_unlock+0x8>)
 8017496:	f7ff bb18 	b.w	8016aca <__retarget_lock_release_recursive>
 801749a:	bf00      	nop
 801749c:	24015524 	.word	0x24015524

080174a0 <_read_r>:
 80174a0:	b538      	push	{r3, r4, r5, lr}
 80174a2:	4d07      	ldr	r5, [pc, #28]	; (80174c0 <_read_r+0x20>)
 80174a4:	4604      	mov	r4, r0
 80174a6:	4608      	mov	r0, r1
 80174a8:	4611      	mov	r1, r2
 80174aa:	2200      	movs	r2, #0
 80174ac:	602a      	str	r2, [r5, #0]
 80174ae:	461a      	mov	r2, r3
 80174b0:	f7e9 febc 	bl	800122c <_read>
 80174b4:	1c43      	adds	r3, r0, #1
 80174b6:	d102      	bne.n	80174be <_read_r+0x1e>
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	b103      	cbz	r3, 80174be <_read_r+0x1e>
 80174bc:	6023      	str	r3, [r4, #0]
 80174be:	bd38      	pop	{r3, r4, r5, pc}
 80174c0:	24015530 	.word	0x24015530

080174c4 <_init>:
 80174c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174c6:	bf00      	nop
 80174c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174ca:	bc08      	pop	{r3}
 80174cc:	469e      	mov	lr, r3
 80174ce:	4770      	bx	lr

080174d0 <_fini>:
 80174d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d2:	bf00      	nop
 80174d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174d6:	bc08      	pop	{r3}
 80174d8:	469e      	mov	lr, r3
 80174da:	4770      	bx	lr
